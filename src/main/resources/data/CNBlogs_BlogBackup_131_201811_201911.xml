<channel>
<item>
<title>FreeMarker的标签</title>
<link>http://www.cnblogs.com/mediocreWorld/archive/2019/11/14/11859092.html</link>
<creator>mediocrePeople</creator>
<author>mediocrePeople</author>
<pubDate>Thu, 14 Nov 2019 09:51:00 GMT</pubDate>
<guid>http://www.cnblogs.com/mediocreWorld/archive/2019/11/14/11859092.html</guid>
<description>
<![CDATA[<p>&nbsp;</p>
<p>&lt;#if (str1?? &amp;&amp; str1!='') || (str2?? &amp;&amp; str2!='')&gt;</p>
<p>　　xxx</p>
<p>&lt;/#if&gt;</p>
<p>&nbsp;</p>
<p>str1??： 变量str1不为null，则为真，执行&lt;#if&gt;中的内容；</p>
<p>str1!=''： 变量str1不是空字符串，则为真，执行&lt;#if&gt;中的内容；</p>
<p>|| ： 或，和java、js中 的用法相同。</p>
<p>&nbsp;</p>]]>
</description>
</item>


<item><title>ubuntu的dpkg命令安装和卸载软件</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/11/13/11851527.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 13 Nov 2019 10:03:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/11/13/11851527.html</guid><description><![CDATA[<p>实际使用中，可以先到网上下载deb文件，然后用dpkg命令来安装。</p>
<p><br />sudo dpkg -l |  grep 360 #查看包含360的软件<br />sudo dpkg -i browser360-cn-stable_10.0.2013.0-1_amd64.deb #安装软件<br />sudo dpkg -r browser360-cn-stable #卸载软件<br />sudo dpkg -P browser360-cn-stable #删除软件的配置信息</p>
<p>&nbsp;</p>]]></description></item><item><title>ubuntu建立软链接注意事项</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/11/13/11850514.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 13 Nov 2019 08:18:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/11/13/11850514.html</guid><description><![CDATA[<p>ln 参数 源文件 目标链接文件</p>
<p>-s：代表新建一个软链接，又称符号链接；</p>
<p>eg.&nbsp; ln -s /mnt/d/Documents/source.xlsx target.xlsx</p>
<p>1、目标文件的后缀名一定要源文件的相同，否则双击打开目标链接文件时，会报错：</p>
<p><img src="https://img2018.cnblogs.com/common/1325651/201911/1325651-20191113162133865-1483608727.png" alt="" /></p>
<p>&nbsp;</p>
<p>2、<span style="color: #393939; font-family: verdana, 'ms song', Arial, Helvetica, sans-serif;">建立软链接时，最好需要使用绝对路径。</span></p>
<p><span style="color: #393939; font-family: verdana, 'ms song', Arial, Helvetica, sans-serif;">一开始我是这么建立的：&nbsp;</span><span style="color: #393939; font-family: verdana, 'ms song', Arial, Helvetica, sans-serif;">~/Documents$&nbsp;ln -s todoUbuntu.txt ../Desktop/todoLink</span></p>
<p style="padding: 0px; color: #393939; font-family: verdana, 'ms song', Arial, Helvetica, sans-serif;">发现桌面上确实生成了一个软链接，但是打开发现无法链接到目标文件。</p>
<p style="padding: 0px; color: #393939; font-family: verdana, 'ms song', Arial, Helvetica, sans-serif;">于是尝试使用绝对路径链接： ~/Documents$ ln -s ~/Documents/todoUbuntu.txt ~/Desktop/todoLink</p>
<p style="padding: 0px; color: #393939; font-family: verdana, 'ms song', Arial, Helvetica, sans-serif;">成功。<span style="color: #000000; font-family: 'PingFang SC', 'Helvetica Neue', Helvetica, Arial, sans-serif;">&nbsp;</span></p>
<p>&nbsp;</p>]]></description></item><item><title>halo的工作目录，有一个是在代码里配置的，硬编码了</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/11/13/11847344.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 13 Nov 2019 02:46:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/11/13/11847344.html</guid><description><![CDATA[<p>在HaloProperties.java中：</p>
<pre><span style="color: #629755; font-style: italic;">/**<br /><span style="color: #629755; font-style: italic;"> * Work directory.<br /><span style="color: #629755; font-style: italic;"> */<br /><span style="color: #cc7832;">private String <span style="color: #9876aa;">workDir = HaloConst.<span style="color: #9876aa; font-style: italic;">USER_HOME + <span style="color: #6a8759;">"/halo-test/"<span style="color: #cc7832;">;</span></span></span></span></span></span></span></span></pre>]]></description></item><item><title>Springboot的多环境配置</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/11/13/11846963.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 13 Nov 2019 01:56:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/11/13/11846963.html</guid><description><![CDATA[<div>
<p>通常应用都会被安装到几个不同的环境（比如开发、测试、生产等），每个环境都会有一些参数是不一样的。</p>
<p>Spring Boot对此也提供了支持，配置文件的名称只要满足<code>application-{profile}.yaml</code>格式即可，其中<code>{profile}</code>对应环境的标识：</p>
<ul>
<li>
<p><code>application-dev.yaml</code>: 开发环境</p>
</li>
<li>
<p><code>application-test.yaml</code>: 测试环境</p>
</li>
<li>
<p><code>application-prod.yaml</code>: 生产环境</p>
</li>
</ul>
<p>之后，需要在<code>application.yaml</code>中设置配置属性<code>spring.profiles.active</code>，其值对应<code>{profile}</code>的值。</p>
<p>如：<code>spring.profile.active: dev</code>，此时就会加载<code>application.yaml</code>和<code>application-dev.yaml</code>这两个配置文件的内容，两个文件中如有相同属性，会使用<code>application-dev.yaml</code>中的值。</p>
<p>&nbsp;</p>
<p>但是，如果不设置<span style="font-family: monospace;">spring.profiles.active，则还是使用<span style="font-family: monospace;">application.yaml中的配置！</span></span></p>
</div>
<p><br />参考链接：<a href="https://www.jianshu.com/p/21f9541e17d9" target="_blank">https://www.jianshu.com/p/21f9541e17d9</a><br /><br /></p>]]></description></item><item><title>idea中的springboot+gradle项目报错springboot configuration annotation processor not found in classpath</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/11/13/11846332.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 12 Nov 2019 16:19:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/11/13/11846332.html</guid><description><![CDATA[<p>idea中的springboot项目，打开某个类run.halo.app.config.properties.HaloProperties.java，报错（使用gradle编译）：</p>
<p><span style="color: #ff0000;">springboot configuration annotation processor not found in classpath</span></p>
<p><img src="https://img2018.cnblogs.com/common/1325651/201911/1325651-20191113154741685-612505084.png" alt="" />&nbsp;</p>
<p>网上的解决方案是pom.xml文件里面添加如下配置.</p>
<p>&lt;!-- 自定义的元数据依赖-&gt;<br />&lt;dependency&gt;<br />   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br />   &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;<br />   &lt;optional&gt;true&lt;/optional&gt;<br />&lt;/dependency&gt;</p>
<p>但是，这个时maven项目的解决方案，我的时gradle项目。</p>
<p>在idea推荐的参考链接中找到了解决方案：</p>
<p>（点击上面截图中的&ldquo;open documentation&rdquo;，可以打开idea推荐的参考链接： <a href="https://docs.spring.io/spring-boot/docs/2.1.7.RELEASE/reference/html/configuration-metadata.html#configuration-metadata-annotation-processor" target="_blank">https://docs.spring.io/spring-boot/docs/2.1.7.RELEASE/reference/html/configuration-metadata.html#configuration-metadata-annotation-processor</a>）</p>
<p>&nbsp;在build.gradle文件中，dependencies {} 中，添加如下语句：</p>
<p>annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"</p>
<p>解决。</p>
<p>&nbsp;</p>
<p>另外，我发现build.gradle中原来有另一个配置：&nbsp;annotationProcessor 'org.projectlombok:lombok' ，但是并不能消除那个提示信息。</p>
<p>那暂时先不管那个提示信息了，以后有影响再修改测试吧。</p>
<p>&nbsp;</p>
<p>gradle的build.gradle，相当于maven的pom.xml ，都是配置依赖的。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>另外一个问题：我的很多java类中报错：找不到方法，</p>
<p>我观察了下，都是getter和setter方法。</p>
<p>原因：我没有安装lombok插件，在idea中安装lombok插件，即可解决。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>]]></description></item><item><title>maven中的pom.xml中的scope的作用</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/11/12/11845694.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 12 Nov 2019 14:06:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/11/12/11845694.html</guid><description><![CDATA[<p>&nbsp;</p>
<p>pom.xml配置文件中，</p>
<p>&lt;dependency&gt;中的&lt;scope&gt;，它主要管理依赖的生效范围。目前&lt;scope&gt;可以使用5个值： <br />    * compile，缺省值，适用于所有阶段，会随着项目一起发布。 <br />    * provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。 <br />    * runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。 <br />    * test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。 <br />    * system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。</p>
<p>&nbsp;</p>
<p>其中，scope为test时，在eclipse和idea中还有点区别：</p>
<p>在eclipse中，无论在哪个路径下都可以使用@Test等注解，</p>
<p>但是在idea中，只能在src/test/java/下的java类可以使用@Test等注解，如果在src/main/java/中使用，则会找不到这些注解。</p>
<p>&nbsp;</p>]]></description></item><item><title>设置idea的快捷键组合 设置为默认</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/11/12/11844672.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 12 Nov 2019 11:47:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/11/12/11844672.html</guid><description><![CDATA[<p>ubuntu中，idea的快捷键组合 为 &ldquo;Default for GNOME&rdquo;，和windows中不一样了，需要修改为&ldquo;Default&rdquo;：</p>
<p><img src="https://img2018.cnblogs.com/common/1325651/201911/1325651-20191112195507839-2051699898.png" alt="" /></p>]]></description></item><item><title>springboot无法查询到后台的数据</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/11/12/11844601.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 12 Nov 2019 11:36:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/11/12/11844601.html</guid><description><![CDATA[<p>问题：springbooot中，整合mybatis时，在IUserMapper接口中，</p>
<p>@Select("select * from user where name like '%李%'")<br />    List&lt;User&gt; findUserByName(String name);</p>
<p>@Select的sql语句查不到数据。</p>
<p>&nbsp;</p>
<p>原因：mysql的url中</p>
<p>application.properties的配置中，</p>
<p>配置了spring.datasource.url=jdbc:mysql://127.0.0.1:3306/spring5</p>
<p>未指定编码，导致中文乱码问题，所以后台就查不到数据了。</p>
<p>解决方法：url中指定字符编码，配置如下：</p>
<p>spring.datasource.url=jdbc:mysql://127.0.0.1:3306/spring5?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>]]></description></item><item><title>Ubuntu系统备份还原教程</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/11/11/11838977.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 11 Nov 2019 14:29:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/11/11/11838977.html</guid><description><![CDATA[<p>一、备份</p>
<p>很多人有备份系统的习惯，以防系统挂。Windows下可以用DISM创建一个系统镜像，在Ubuntu下，我们可以使用squashfs-tools创建系统镜像。</p>
<p>准备工作</p>
<p>可启动LiveCD一份，这个类似于你备份Windows需要WinRE/PE一样。</p>
<p>一个Linux可以访问分区（相信大部分文件系统都可以），但不可以是系统所需要的分区，比如/ /home /var /usr /tmp，这就好比你不能将你的Windows系统镜像放在C盘一样。</p>
<p>重新启动计算机，进入LiveCD，启动菜单选择试用Ubuntu（Try Ubuntu）。locale=zh_CN.UTF-8。</p>
<div class="img-container"><img class="large" src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=3659480657,623331879&amp;fm=173&amp;s=64229A56CD82E77C0EAB37BF03005008&amp;w=553&amp;h=415&amp;img.JPG" alt="" data-loadfunc="0" data-loaded="0" /></div>
<p>按Ctrl+Alt+T打开终端。</p>
<div class="img-container"><img class="large" src="https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=3002283309,2423055435&amp;fm=173&amp;s=2A325A86BBAABF6C02D5A78403007008&amp;w=553&amp;h=415&amp;img.JPG" alt="" data-loadfunc="0" data-loaded="0" /></div>
<p>输入sudo -s获得root权限。</p>
<p>输入fdisk -l查看当前分区状况。</p>
<div class="img-container"><img class="large" src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=1909319761,1185151932&amp;fm=173&amp;s=AAB2428713EFB34D02F5438A03007008&amp;w=553&amp;h=415&amp;img.JPG" alt="" data-loadfunc="0" data-loaded="0" /></div>
<p>在这里，我的分区设定是：</p>
<p>/dev/sda1是EFI系统分区，因为我这是EFI+GPT引导。（有人会奇怪为什么没有Microsoft Reserved微软保留分区，这是因为我的磁盘不是在Windows下进行分区的，故没有）。</p>
<p>/dev/sda2是根文件系统(/)</p>
<p>/dev/sda3是/home分区。</p>
<p>/dev/sda4是额外的数据盘，我们将会把系统镜像文件保存在这个分区上。</p>
<p>挂载分区</p>
<p>终端输入mount /dev/sda2 /mnt，挂载根分区。</p>
<p>如果您在分区的时候单独分了/boot分区的话，请接着输入mount /dev/xxx (你的boot分区标识）/mnt/boot。</p>
<p>在这里，我分了efi分区，即/boot/efi（大部分状况下是这个），所以我要输入mount /dev/sda1 /mnt/boot/efi（如果您既分了/boot又有/boot/efi，请一定先挂载boot后挂载efi，顺序千万不能反）。</p>
<p>然后挂载home分区mount /dev/sda3 /mnt/home（如果您没有设定单独的home分区不需要挂载，如果您不想保存home的内容也可以不挂载）。</p>
<p>如果您还设置了别的分区，比如/var /usr /tmp之类，请模仿上面的方法挂载。（/tmp可以选择不挂载，但是/usr必须挂载，不挂载还原后系统出现问题本人不负责，/var最好也要挂载，不挂载还原后系统也有可能会出问题）。</p>
<p>终端窗口不要关，现在，我们打开文件管理器nautilus。</p>
<p>选择「其他位置」，点击数据盘进行挂载。</p>
<div class="img-container"><img class="large" src="https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=3025233708,239003004&amp;fm=173&amp;s=A1127497B4BFD22D18DDA9DA03001036&amp;w=553&amp;h=415&amp;img.JPG" alt="" data-loadfunc="0" data-loaded="0" /></div>
<p>好了我们现在已经挂载了。</p>
<div class="img-container"><img class="large" src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=2494567648,220901772&amp;fm=173&amp;s=A12EF017B69ED32C5CF12DDA02005036&amp;w=553&amp;h=415&amp;img.JPG" alt="" data-loadfunc="0" data-loaded="0" /></div>
<p>右击分区名称（「28GB卷」那个），选择属性。</p>
<div class="img-container"><img class="large" src="https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=2910016539,1865073406&amp;fm=173&amp;s=D01250978C8DD90D5841C4DB03005034&amp;w=553&amp;h=415&amp;img.JPG" alt="" data-loadfunc="0" data-loaded="0" /></div>
<p>记住它的路径（这里是/media/ubuntu/1cbd9938-ef7a-42ff-a788-213c30db4f02）。</p>
<p>正式备份系统</p>
<p>在极少数情况下，一些LiveCD会没有squashfs-tools，这就需要您手动安装。</p>
<p>终端输入mksquashfs /mnt /media/ubuntu/1cbd9938-ef7a-42ff-a788-213c30db4f02/backup.sfs (文件名任意)</p>
<div class="img-container"><img class="large" src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=868651256,1865443361&amp;fm=173&amp;s=2A924A8713EFB34D42FD438803007008&amp;w=553&amp;h=415&amp;img.JPG" alt="" data-loadfunc="0" data-loaded="0" /></div>
<p>备份好了之后，最好输入一下sync，让系统保存数据。</p>
<p>卸载分区（按照其他分区（home var usr之类）&mdash;&mdash;efi分区&mdash;&mdash;boot分区&mdash;&mdash;根文件系统的顺序来卸载，每个人的情况都不太一样）</p>
<p>umount /mnt/home</p>
<p>umount /mnt/boot/efi</p>
<p>mount /mnt</p>
<p>最后卸载数据盘，就是保存镜像文件的那个。</p>
<p>大功告成。</p>
<p>重启之前还是建议再sync一下，养成好习惯（毕竟Linux有延迟写入功能）。</p>
<p>二、还原</p>
<p>先说一下，你在Windows下还原系统，大部分情况下直接还原然后重启就OK了，但是在Linux下，你还原之后还需要处理一下系统，不然会无法启动。</p>
<p>获得root权限(sudo -s)，查看分区状况。（如果您已熟知可以不用）</p>
<div class="img-container"><img class="large" src="https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=2545589781,3428930490&amp;fm=173&amp;s=AAB2428713EFB34D02F5438A03007008&amp;w=553&amp;h=415&amp;img.JPG" alt="" data-loadfunc="0" data-loaded="0" /></div>
<p>分区状况sda1是efi，sda2是根，sda3是home，sda4是数据盘。</p>
<p>格式化</p>
<p>第二步和备份不一样，现在不需要挂载。</p>
<p>因为我根分区和home都是ext4分区，所以我输入</p>
<p>mkfs.ext4 /dev/sda2</p>
<p>mkfs.ext4 /dev/sda3</p>
<p>先格式化，如果你想保留home的内容可以选择不格式化。如果你有var usr之类请也格式化。</p>
<p>（如果你采用了其他格式格式化分区，请使用别的命令，比如xfs是mkfs.xfs）</p>
<p>数据盘别格式化，不然就23333了。</p>
<div class="img-container"><img class="large" src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=1349501584,125085545&amp;fm=173&amp;s=2AB24A879BACB34D40D5438503007008&amp;w=553&amp;h=415&amp;img.JPG" alt="" data-loadfunc="0" data-loaded="0" /></div>
<p>建立临时目录</p>
<p>mkdir /recovery（命名可以随意，只要你后面能对的上）</p>
<p>挂载数据盘</p>
<p>挂载方式请参考上文。</p>
<p>同样记住它的编号。</p>
<p>挂载镜像文件</p>
<p>mount -o loop /media/ubuntu/1cbd9938-ef7a-42ff-a788-213c30db4f02/backup.sfs /recovery</p>
<p>挂载镜像并创建必要文件夹。</p>
<p>挂载根分区 mount /dev/sda2 /mnt</p>
<p>根据需要建立文件夹：</p>
<p>mkdir /mnt/boot</p>
<p>mkdir /mnt/boot/efi</p>
<p>mkdir /mnt/home</p>
<p>修改权限</p>
<div class="img-container"><img class="large" src="https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=1541069397,3202365903&amp;fm=173&amp;s=B781D0078E8DC90F4B7D78DA03005036&amp;w=553&amp;h=415&amp;img.JPG" alt="" data-loadfunc="0" data-loaded="0" /></div>
<div class="img-container"><img class="large" src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=2652354716,3131382253&amp;fm=173&amp;s=BEA1D0030EAE0C0F43B571CB03005012&amp;w=553&amp;h=415&amp;img.JPG" alt="" data-loadfunc="0" data-loaded="0" /></div>
<p>确保所创建的文件夹权限是这样。</p>
<p>复制文件</p>
<p>cp -a /recovery/* /mnt</p>
<p>复制好之后输入umount /recovery，这是为了卸载squashfs镜像。</p>
<p>有人会问为什么不用unsquashfs，这是因为unsquashfs解压之后会把文件解压到squashfs-root文件夹。</p>
<p>挂载虚拟文件系统，这是为了后面修复引导做准备。</p>
<p>mount --o bind /dev /mnt/dev</p>
<p>mount --o bind /proc /mnt/proc</p>
<p>mount --o bind /sys /mnt/sys</p>
<p>mount --o bind /run /mnt/run（这一步可以省略）</p>
<p>chroot进入已经还原的操作系统。</p>
<p>chroot /mnt</p>
<p>查看当前UUID</p>
<p>由于我们格式化了分区，所以UUID发生了变化，若不修改，系统将无法正常挂载分区，导致启动异常。故我们需要修改本机系统的UUID设置。</p>
<p>当前终端不要关闭，新建一个终端，输入blkid。</p>
<div class="img-container"><img class="large" src="https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=467787150,1689480854&amp;fm=173&amp;s=2AB24A86A3BFBA6D4075268503005008&amp;w=553&amp;h=415&amp;img.JPG" alt="" data-loadfunc="0" data-loaded="0" /></div>
<p>上面已经说过，sda1是efi，sda2是根分区，sd3是home。</p>
<p>记下他们的UUID。如果您分了别的分区比如boot var usr，也需要记下，等会要用。</p>
<p>修改本机UUID设置</p>
<p>返回原来的终端（已经chroot /mnt的那个），输入nano /etc/fstab。</p>
<p>如果nano没有安装，那么请输入vi /etc/fstab。</p>
<p>如果您用的是vi，那么需要按i进入编辑模式。</p>
<div class="img-container"><img class="large" src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=1410809483,3532109704&amp;fm=173&amp;s=2AF0428643ECB3490CE5458403005004&amp;w=553&amp;h=415&amp;img.JPG" alt="" data-loadfunc="0" data-loaded="0" /></div>
<p>修改UUID（最新UUID在另一个窗口有）。我这里需要修改/和/home的，你的状况可能会和我不一样，如果您只分了根分区，那么只需要修改根分区的UUID就行。如果分了var usr之类，这些也要更改。</p>
<p>修改后按Ctrl+x退出。vi是先按esc，再输入:wq（冒号不能少！），然后回车。</p>
<p>更新GRUB</p>
<p>因为UUID被改动，所以我们需要更新GRUB。</p>
<p>输入grub-install /dev/sda（sda是你主硬盘的位置）</p>
<p>再输入update-grub。</p>
<p>退出chroot并卸载文件系统。</p>
<p>输入exit退出chroot。</p>
<p>然后输入：</p>
<p>umount /mnt/dev</p>
<p>umount /mnt/sys</p>
<p>umount /proc</p>
<p>umount /run</p>
<p>输入sync存盘。</p>
<p>还原结束。</p>
<p>重启。</p>
<p>参考链接：https://baijiahao.baidu.com/s?id=1582409155581803330&nbsp;</p>]]></description></item><item><title>linux中利用fstab实现磁盘分区自动挂载</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/11/11/11837809.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 11 Nov 2019 11:56:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/11/11/11837809.html</guid><description><![CDATA[<p>如何格式化磁盘、给磁盘分区以及挂载，参考我的另一篇博客：</p>
<p>https://www.cnblogs.com/mediocreWorld/p/11123786.html</p>
<p>博客中有一个格式化分区的命令： mkfs -t ext4 -c /dev/sdb6， 可以用这个命令代替 mkfs.ext4 /dev/sdb6</p>
<p>还有其中的一个命令，设置开机自动挂载磁盘：echo "/dev/sdb6 /data02 ext4 defaults 0 0" &gt;&gt; /etc/fstab ，扩展一下。</p>
<p>我的/etc/fstab 配置文件，是以下这些内容：</p>
<p><span style="color: #ff0000;">UUID=6485a272-312b-4971-b39a-9eca7d48b9e7 / ext4 errors=remount-ro 0 1</span><br /><span style="color: #ff0000;">UUID=f8ef8a43-653c-4de2-8a20-10490a1299fc /home           ext4    defaults        0       2</span><br /><span style="color: #ff0000;">UUID=89fc9952-7348-47cb-93dd-b354e8484767 none            swap    sw              0       0</span><br /><span style="color: #ff0000;">UUID=e05681c1-9cf1-40a4-9c4a-95829f9683dc       /boot   ext4    defaults        0       2</span><br /><span style="color: #ff0000;">UUID=4526-E5C5  /boot/efi       vfat    defaults        0       1</span><br /><strong><span style="color: #ff0000;">/dev/sdb6 /data02 ext4 defaults 0 0</span></strong></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>其中，最后一行是我后来通过该命令echo "/dev/sdb6 /data02 ext4 defaults 0 0" &gt;&gt; /etc/fstab&nbsp; 添加的。</p>
<p>可以看到，在 fstab 文件中，每行数据都分为了 6 个字段，它们的含义分别是：</p>
<ol>
<li>用来挂载每个文件系统的分区设备文件名或 UUID（用于指代设备名）；</li>
<li>挂载点；</li>
<li>文件系统的类型；</li>
<li>各种挂载参数；</li>
<li>指定分区是否被 dump 备份；</li>
<li>指定分区是否被 fsck 检测；</li>
</ol>
<p>1. 第一个字段可以是UUID，也可以是分区名，如/dev/sdb6。</p>
<p>查看UUID的2个方法：&nbsp;</p>
<p>（1）dumpe2fs /dev/sdb6 | grep UUID</p>
<p>（2）ls -l /dev/disk/by-uuid/</p>
<p>2.&nbsp;第二个字段关于挂载点的含义，我们已经在 《<a href="http://m.biancheng.net/view/2859.html" target="_blank">Linux挂载</a>》 和 《<a href="http://m.biancheng.net/view/885.html" target="_blank">Linux mount命令</a>》 章节中讲解，所以这里不再赘述。但需要强调的是，挂载点一定要是已经建立的空目录。<br />3.第三个字段为文件系统名称，CentOS 6.3 的默认文件系统应该是 ext4。<br />4.第四个字段是挂载参数，这个参数和 mount 命令的挂载参数一致。<br />5.第五个字段表示&ldquo;指定分区是否被 dump 备份&rdquo;，0 代表不备份，1 代表备份，2 代表不定期备份。<br />6.第六个字段表示&ldquo;指定分区是否被 fsck 检测&rdquo;，0 代表不检测，其他数字代表检测的优先级，1 的优先级比 2 高。所以先检测 1 的分区，再检测 2 的分区。一般分区的优先级是 1，其他分区的优先级是 2。</p>
<p>&nbsp;</p>]]></description></item><item><title>启动ubuntu就直接进入GRUB2.02的命令行界面的问题</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/11/11/11834281.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 11 Nov 2019 05:26:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/11/11/11834281.html</guid><description><![CDATA[<p>问题：启动ubuntu就直接进入GRUB2.02的命令行界面<br />原因：grub2引导出现问题。</p>
<p>解决方法：图形方法，引导修复</p>
<p>（1）电脑上插入Ubuntu系统启动引导U盘（如果没有引导U盘，就到官网下载一个iso镜像，制作一个），开机，按ESC键（我的是按ESC键，不同的电脑按键可能不同），选择从U盘启动，然后选择&ldquo;try ubuntu&rdquo;，</p>
<p><img src="https://img2018.cnblogs.com/i-beta/1325651/201911/1325651-20191111131515605-417101353.png" alt="" /></p>
<p>&nbsp;</p>
<p>（2）确保连上因特网，以便下载修复工具，可以插上网线，或连接wifi，</p>
<p>（3）执行如下3条命令，安装boot-repair修复工具：</p>
<p>ubuntu@ubuntu:~$ sudo apt-add-repository ppa:yannubuntu/boot-repair<br />ubuntu@ubuntu:~$ sudo apt-get update<br />ubuntu@ubuntu:~$ sudo apt-get install -y boot-repair</p>
<p>（4）输入命令： boot-repair，</p>
<p>　　打开 "boot repair" 软件，点击"Recommended repair"按钮：</p>
<p>但是有报错: <span style="color: #ff0000;">GPT detected. Please create a BIOS-Boot partition (&gt;1MB, unformatted filesystem, bios_grub flag). This can be performed via tools such as Gparted. Then try again. Alternatively, you can retry after activating the [Separate /boot/efi partition:] option.</span></p>
<p>（5）然后，我选择 advanced options -- GRUB location, 勾选 【Separate /boot/efi partition:】的选项 （我的efi系统，是一个单独的分区/dev/sdb1，挂载在/boot/efi/目录上 ，所以我觉得可能要勾选那个选项&nbsp;）</p>
<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/i-beta/1325651/201911/1325651-20191111132504322-1009886574.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>（6）重新进行第（4）步，成功了。以下是修复成功的提示：</p>
<p><span style="color: #008000;"><em id="__mceDel"><em id="__mceDel">Boot successfully repaired.</em></em></span></p>
<p><span style="color: #008000;">Please write on a paper the following URL:</span><br /><span style="color: #008000;">http://paste.ubuntu.com/p/Hz8R3SZKr8/</span></p>
<p><br /><span style="color: #008000;">In case you still experience boot problem, indicate this URL to:</span><br /><span style="color: #008000;">boot.repair@gmail.com or to your favorite support forum.</span></p>
<p><span style="color: #008000;">You can now reboot your computer.</span><br /><span style="color: #008000;">Please do not forget to make your BIOS boot on sdb1/EFI/ubuntu/shimx64.efi file!</span></p>
<p>（7）重新启动计算机，Ubuntu能正常启动。</p>
<p>参考文章：&nbsp;https://jingyan.baidu.com/article/4ae03de3dbdac83eff9e6be0.html</p>
<p>&nbsp;</p>]]></description></item><item><title>ubuntu16.04/ubuntu18.04安装网易云音乐</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/11/09/11825599.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 09 Nov 2019 06:08:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/11/09/11825599.html</guid><description><![CDATA[<div>
<h3>一、下载1.0版本</h3>
<p>下载地址：<a href="http://s1.music.126.net/download/pc/netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb" rel="nofollow" target="_blank">http://s1.music.126.net/download/pc/netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb</a><br />
下载好后放到家目录</p>
<h3>二、在家目录然后依次执行命令</h3>
<pre class="line-numbers  language-undefined"><code class="  language-undefined">mkdir -p extract/DEBIAN
dpkg-deb -x netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb extract/
dpkg-deb -e netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb extract/DEBIAN
</code><button class="VJbwyy" type="button"></button></pre>
<h3>三、修改文件</h3>
<p>打开extract/DEBIAN/control文件，找到Depends行，删除libqt5libqgtk2，删除libfontconfig1 (&gt;= 2.11.94)中的(&gt;= 2.11.94).注释：实践中删除第一个libqt5libqgtk2就可以运行了</p>
<h3>四、在家目录执行命令</h3>
<pre class="line-numbers  language-bash"><code class="  language-bash">mkdir build
dpkg-deb -b extract/ build/
cd build
sudo dpkg -i netease-cloud-music_1.0.0_amd64_ubuntu.deb</code></pre>
</div>
<p>参考链接：https://www.jianshu.com/p/bd7a9121b936<br /><br /></p>]]></description></item><item><title>安装ubuntu18.04.3全过程</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/11/05/11799496.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 05 Nov 2019 08:44:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/11/05/11799496.html</guid><description><![CDATA[<style><!--
@page { margin: 2cm }
		pre { direction: ltr; color: #000000; text-align: left; orphans: 2; widows: 2 }
		pre.western { font-family: "Liberation Mono", serif; so-language: en-US }
		pre.cjk { font-family: "DejaVu Sans Mono"; so-language: zh-CN }
		pre.ctl { font-family: "Liberation Mono"; so-language: hi-IN }
		th p { margin-bottom: 0cm; direction: ltr; color: #000000; orphans: 2; widows: 2 }
		th p.western { font-family: "Liberation Serif", serif; font-size: 12pt; so-language: en-US }
		th p.cjk { font-family: "Noto Sans CJK SC"; font-size: 12pt; so-language: zh-CN }
		th p.ctl { font-family: "Noto Sans CJK SC"; font-size: 12pt; so-language: hi-IN }
		td p { margin-bottom: 0cm; direction: ltr; color: #000000; text-align: left; orphans: 2; widows: 2 }
		td p.western { font-family: "Liberation Serif", serif; font-size: 12pt; so-language: en-US }
		td p.cjk { font-family: "Noto Sans CJK SC"; font-size: 12pt; so-language: zh-CN }
		td p.ctl { font-family: "Noto Sans CJK SC"; font-size: 12pt; so-language: hi-IN }
		h3 { direction: ltr; color: #000000; text-align: left; orphans: 2; widows: 2 }
		h3.western { font-family: "Liberation Serif", sans-serif; so-language: en-US }
		h3.cjk { so-language: zh-CN }
		h3.ctl { so-language: hi-IN }
		p { margin-bottom: 0.25cm; direction: ltr; color: #000000; line-height: 115%; text-align: left; orphans: 2; widows: 2 }
		p.western { font-family: "Liberation Serif", serif; font-size: 12pt; so-language: en-US }
		p.cjk { font-family: "Noto Sans CJK SC"; font-size: 12pt; so-language: zh-CN }
		p.ctl { font-family: "Noto Sans CJK SC"; font-size: 12pt; so-language: hi-IN }
		a:link { so-language: zxx }
--></style>
<p class="cjk"><span><strong>目录</strong></span></p>
<p class="cjk"><span style="color: #800000;"><span style="text-decoration: underline;"><span lang="zxx"><a href="#bm_1"><span>一、安装</span></a><a href="#bm_1"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span lang="zxx"><span>ubuntu18.04.3</span></span></span></span><span lang="zxx"><span>操作系统</span></span></a></span></span></span></p>
<p class="cjk"><span style="color: #000080;"><span style="text-decoration: underline;"><span lang="zxx"><a href="#bm_2"><span>二、系统设置</span></a></span></span></span></p>
<p class="cjk"><span style="color: #800000;"><span style="text-decoration: underline;"><span lang="zxx"><a href="#bm_3"><span>三、非开发常用软件安装</span></a></span></span></span></p>
<p class="cjk"><span style="color: #800000;"><span style="text-decoration: underline;"><span lang="zxx"><a href="#bm_4"><span>四、开发常用软件安装</span></a></span></span></span></p>
<p class="cjk"><span style="color: #000080;"><span style="text-decoration: underline;"><span lang="zxx"><a href="#bm_5"><span>五、</span></a><a href="#bm_5"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span lang="zxx"><span>ubuntu</span></span></span></span><span lang="zxx"><span>相关知识</span></span></a></span></span></span></p>
<p class="cjk"><span style="color: #000080;"><span style="text-decoration: underline;"><span lang="zxx"><a href="#bm_6"><span>六、参考文章链接</span></a></span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span><strong>正文</strong></span></p>
<p class="cjk"><a name="bm_1"></a>
<span>一、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu18.04.3</span></span></span><span>操作系统：</span></p>
<p class="cjk"><span>目前还是建议大家不要安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">18.04</span></span></span><span>，感觉系统不是很稳定。一是</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">bug</span></span></span><span>有点多，比如每次开机都会有错误报告要提交；二是和软件的兼容性不是很好，比如</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">vmware</span></span></span><span>无法识别该系统内核；三是共享屏幕有</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">bug</span></span></span><span>。</span></p>
<p class="cjk"><span>我是已经装好了才发现这些问题的，不过基本上都能解决，就先用着吧。</span></p>
<p class="cjk"><span><span style="color: #000000;"><span lang="zh-CN">我本次的安装方案是双硬盘双系统，</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">WIN10</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">装在</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">500G</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">的机械硬盘上（记得要先装</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">win10</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">，否则设置双系统启动比较麻烦），</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">ubuntu18.04.3</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">装在</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">220G</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">的</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">SSD</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">上。以下是安装步骤：</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">1</span></span></span></span><span><span lang="zh-CN">、在</span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">BIOS</span></span></span></span><span><span lang="zh-CN">上设置</span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">Secure
Boot Control</span></span></span></span><span><span lang="zh-CN">为</span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">Disabled</span></span></span></span><span><span lang="zh-CN">，</span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">Launch
CSM</span></span></span></span><span><span lang="zh-CN">为</span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">Enabled</span></span></span></span><span><span lang="zh-CN">。否则，在</span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">BIOS</span></span></span></span><span><span lang="zh-CN">的启动选项中会看不到硬盘选项。</span></span></p>
<p class="cjk"><br />
<br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span><span style="color: #000000;"><span lang="zh-CN">、制作支持</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">UEFI</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">启动的</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">Ubuntu
USB</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">启动盘；</span></span></span></p>
<p class="cjk"><span><span style="color: #000000;"><span lang="zh-CN">（</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">1</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">）到官网上下载</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">ubuntu-18.04.3-desktop-amd64.iso</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">；</span></span></span></p>
<p class="cjk"><span style="color: #000000;"><span><span lang="zh-CN">（</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000000;"><span><span lang="en-US">2</span></span></span></span></span><span style="color: #000000;"><span><span lang="zh-CN">）使用官方推荐的</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="font-family: 'Microsoft YaHei', 'SF Pro Display', Roboto, Noto, Arial, 'PingFang SC', sans-serif;"><span>Rufus</span></span></span></span><span style="color: #000000;"><span><span lang="zh-CN">，或者</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span><span lang="en-US">UltraISO</span></span></span></span></span></span><span style="color: #000000;"><span><span lang="zh-CN">将</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span><span lang="en-US">iso</span></span></span></span></span></span><span style="color: #000000;"><span><span lang="zh-CN">映像文件中的内容写入到启动</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span><span lang="en-US">U</span></span></span></span></span></span><span style="color: #000000;"><span><span lang="zh-CN">盘。我是直接使用</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span><span lang="en-US">UltraISO</span></span></span></span></span></span><span style="color: #000000;"><span><span lang="zh-CN">，只需要试用版，不用激活。具体制作方法网上一大堆，参考链接：</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://www.cnblogs.com/masbay/articles/10745170.html"><span style="color: #000000; text-decoration: underline;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span><span lang="en-US">https://www.cnblogs.com/masbay/articles/10745170.html</span></span></span></span></a></span></span></span></span></span></p>
<p class="cjk">
<br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">3</span></span></span><span><span style="color: #000000;"><span lang="zh-CN">、选择硬盘并确定分区方案：</span></span></span></p>
<p class="cjk"><span><span style="color: #000000;"><span lang="zh-CN">我选择安装</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu</span></span></span><span><span style="color: #000000;"><span lang="zh-CN">在</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">SSD</span></span></span><span><span style="color: #000000;"><span lang="zh-CN">上。参考网上的大量分区方法后，总结出的一个分区方案，具体分区方式如下表格所示。</span></span></span></p>
<p class="cjk"><span>注：（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1</span></span></span><span>）分区大小列，由于</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu</span></span></span><span>在安装系统时，分区的那一步骤，按照</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1000</span></span></span><span>进制来算的，所以当时分区时填写的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">256M</span></span></span><span>，现在显示是</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">243M</span></span></span><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">=256*1000*1000/1024/1024</span></span></span><span>）；</span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>）有</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">20G</span></span></span><span>左右未分区，备用，用于将来扩展。</span></p>
<p class="cjk"><br />

</p>
<table style="width: 851px; height: 395px;" cellspacing="0" cellpadding="3">
	<colgroup><col width="103" />
	<col width="141" />
	<col width="70" />
	<col width="58" />
	<col width="247" />
	<col width="58" />
	<col width="61" />
	</colgroup>
<thead>
<tr valign="top">
<td width="103">
<p class="cjk" align="center"><span>分区名称</span></p>





			</td>
<td width="141">
<p class="cjk" align="center"><span>磁盘</span></p>





			</td>
<th width="70">
<p class="cjk" align="center"><span>设备</span></p>





			</th>
<td width="58">
<p class="cjk" align="center"><span>分区大小</span></p>





			</td>
<td width="247">
<p class="cjk" align="center"><span>分区类型</span></p>





			</td>
<td width="58">
<p class="cjk" align="center"><span>挂载点</span></p>





			</td>
<td width="61">
<p class="cjk" align="center"><span>主</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/</span></span></span><span>逻辑</span></p>





			</td>





		</tr>





	</thead>
<tbody>
<tr valign="top">
<td width="103">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">EFI</span></span></span><span>分区</span></p>





			</td>
<td rowspan="5" width="141">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><em>dev</em>/sdb</span></span></span><span>：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">223.6GB</span></span></span><span>；</span></p>
<p class="cjk" align="center"><span>磁盘标签类型：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">gpt</span></span></span></p>





			</td>
<td width="70">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/dev/sdb1</span></span></span></p>





			</td>
<td width="58">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">243M</span></span></span></p>





			</td>
<td width="247">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">EFI</span></span></span><span>系统</span></p>





			</td>
<td width="58">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><em>/boot</em>/efi</span></span></span></p>





			</td>
<td width="61">
<p class="cjk" align="center"><span>主分区</span></p>





			</td>





		</tr>
<tr valign="top">
<td width="103">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">boot</span></span></span><span>分区</span></p>





			</td>
<td width="70">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/dev/sdb2</span></span></span></p>





			</td>
<td width="58">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">488M</span></span></span></p>





			</td>
<td width="247">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Linux</span></span></span><span>文件系统（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Ext4</span></span></span><span>日志文件系统）</span></p>





			</td>
<td width="58">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/boot</span></span></span></p>





			</td>
<td width="61">
<p class="cjk" align="center"><span>主分区</span></p>





			</td>





		</tr>
<tr valign="top">
<td width="103">
<p class="cjk" align="center"><span>交换分区</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">swap</span></span></span></p>





			</td>
<td width="70">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/dev/sdb3</span></span></span></p>





			</td>
<td width="58">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">11.5G</span></span></span></p>





			</td>
<td width="247">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Linux
				swap</span></span></span></p>





			</td>
<td width="58">
<p class="cjk" align="center"><span>无</span></p>





			</td>
<td width="61">
<p class="cjk" align="center"><span>逻辑分区</span></p>





			</td>





		</tr>
<tr valign="top">
<td width="103" height="23">
<p class="cjk" align="center"><span>根目录</span></p>





			</td>
<td width="70">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/dev/sdb4</span></span></span></p>





			</td>
<td width="58">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">128.8G</span></span></span></p>





			</td>
<td width="247">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Linux</span></span></span><span>文件系统（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Ext4</span></span></span><span>日志文件系统）</span></p>





			</td>
<td width="58">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/</span></span></span></p>





			</td>
<td width="61">
<p class="cjk" align="center"><span>逻辑分区</span></p>





			</td>





		</tr>
<tr valign="top">
<td width="103">
<p class="cjk" align="center"><span>家目录</span></p>





			</td>
<td width="70">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/dev/sdb5</span></span></span></p>





			</td>
<td width="58">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">62G</span></span></span></p>





			</td>
<td width="247">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Linux</span></span></span><span>文件系统（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Ext4</span></span></span><span>日志文件系统）</span></p>





			</td>
<td width="58">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/home</span></span></span></p>





			</td>
<td width="61">
<p class="cjk" align="center"><span>逻辑分区</span></p>





			</td>





		</tr>
<tr valign="top">
<td width="103">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Win10
				C</span></span></span><span>盘</span></p>





			</td>
<td rowspan="2" width="141">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><em>dev</em>/sda</span></span></span><span>：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">465.8
				GB</span></span></span><span>；</span></p>
<p class="cjk" align="center"><span>磁盘标签类型：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">dos</span></span></span></p>





			</td>
<td width="70">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/dev/sda1</span></span></span></p>





			</td>
<td width="58">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">100G</span></span></span></p>





			</td>
<td width="247">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">HPFS/NTFS/exFAT</span></span></span></p>





			</td>
<td width="58">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/mnt/c</span></span></span></p>





			</td>
<td width="61">
<p class="cjk" align="center"><span>主分区</span></p>





			</td>





		</tr>
<tr valign="top">
<td width="103" height="21">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Win10
				D</span></span></span><span>盘</span></p>





			</td>
<td width="70">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/dev/sda2</span></span></span></p>





			</td>
<td width="58">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">365.8G</span></span></span></p>





			</td>
<td width="247">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">HPFS/NTFS/exFAT</span></span></span></p>





			</td>
<td width="58">
<p class="cjk" align="center"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/mnt/d</span></span></span></p>





			</td>
<td width="61">
<p class="cjk" align="center"><span>主分区</span></p>





			</td>





		</tr>





	</tbody>





</table>
<p class="cjk">&nbsp;</p>
<p class="cjk">
<span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">4</span></span></span><span><span style="color: #000000;"><span lang="zh-CN">、取消</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">"</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">启用快速启动</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">"</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">：</span></span></span></p>
<p class="cjk">
&ldquo;<span><span style="color: #000000;"><span lang="zh-CN">快速启动&rdquo;是</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">Windows8</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">引进的新特性，&ldquo;快速启动&rdquo;会影响</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">Grub</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">开机引导过程，可能出现无法载入</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">Ubuntu</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">的状况，因此需要关闭。在&ldquo;控制面板</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">--&gt;</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">硬件和声音</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">--&gt;</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">电源选项</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">--&gt;</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">系统设置&rdquo;，取消勾选&ldquo;启用快速启动（推荐）&rdquo;，最后选择&ldquo;保存修改&rdquo;。</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk" align="center">
<span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #ce181e;">===============</span></span></span></span><span><span style="color: #ce181e;"><span lang="zh-CN">接下来就正式开始安装了！</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #ce181e;"><span lang="en-US">==================</span></span></span></span></span></p>
<p class="cjk">
<br />

</p>
<p class="cjk"><a name="blogTitle6"></a>
<span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">5</span></span></span><span><span style="color: #000000;"><span lang="zh-CN">、选择时区，语言：</span></span></span></p>
<p class="cjk">
<span><span style="color: #000000;"><span lang="zh-CN">时区选择</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">shanghai</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">，语言选择英语。</span></span></span></p>
<p class="cjk">
<span><span style="color: #000000;"><span lang="zh-CN">（最好选择语言为英语（默认选项），因为如果选择中文，则安装时会下载很多中文相关的安装包，会很慢。如果要更换操作系统的语言为中文，可以在系统安装好后再设置，然后让它慢慢下载，这段时间你可以做其他事情。当然，如果你在安装前已经选择了中文，安装过程中，如果无法忍受漫长的下载过程，可以点击下图红框中的&ldquo;</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">SKIP&rdquo;</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">按钮，跳过下载步骤，等系统安装好了，登录系统继续下载这部分内容，安装好中文语言环境。）</span></span></span></p>
<p class="cjk">
<span><span style="color: #000000;"><span lang="zh-CN">跳过连接</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">wifi(</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">网上有说连接</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">wifi</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">可能会有问题</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">)</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">，反正我一直插着网线的。</span></span></span></p>
<p class="cjk">
<br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">6</span></span></span><span>、选择正常安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/</span></span></span><span>最小安装：</span></p>
<p class="cjk"><span><span style="color: #000000;"><span lang="zh-CN">正常安装</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">(Normal
Installation)</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">会安装</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">Web
Broswer</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">，</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">office
software</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">，</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">games
and media players</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">。</span></span></span></p>
<p class="cjk">
<span><span style="color: #000000;"><span lang="zh-CN">最小安装</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">(Minimal
Installation)</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">会安装</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">Web
Broswer and basic utilities</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">。</span></span></span></p>
<p class="cjk"><span>不一定要像网上说的选择最小化安装，可以选择正常安装，也挺快的，而且省的后面手动安装一些东西。我就选择的正常安装。</span></p>
<p class="cjk"><br />

</p>
<h3 class="cjk"><span style="font-family: 'Liberation Serif', sans-serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">7</span></span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">、选择安装类型：</span></span></span></h3>
<p class="cjk">
<span><span style="color: #000000;"><span lang="zh-CN">此时提示是否与</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">windows
10 </span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">共存，选择最后一项：其他选项</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">(Something
else)</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">，便于自己按需划分分区。</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">8</span></span></span><span>、根据前面确定的方案进行分区：</span></p>
<p class="cjk"><img src="https://img2018.cnblogs.com/i-beta/1325651/201911/1325651-20191111114639174-1431245123.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">9</span></span></span><span>、分区完毕，进入下一步的自动安装系统的步骤：</span></p>
<p class="cjk"><span>注意下方截图中的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">SKIP</span></span></span><span>按钮，如果感觉下载时间太长，等不了，可以点击</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">SKIP</span></span></span><span>按钮，跳过下载和安装，等系统完全装好后，再慢慢下载和按钮（上面第</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">5</span></span></span><span>步中已经提到过了）。</span></p>
<p class="cjk"><img src="https://img2018.cnblogs.com/i-beta/1325651/201911/1325651-20191111114656883-939367179.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p class="cjk"><a name="bm_2"></a>
<span>二、系统设置：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;">1</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">、系统语言由英文改为简体中文：</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://www.cnblogs.com/lfri/p/10769415.html"><span style="color: #000000; text-decoration: underline;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span><span lang="en-US">https://www.cnblogs.com/lfri/p/10769415.html</span></span></span></span></a></span></span></span></span></span></p>
<p class="cjk">
<br />

</p>
<p class="cjk"><a name="blogTitle11"></a>
<span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;">2</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">、</span></span><span style="color: #000000;"><span lang="zh-CN">修改开机启动等待时间：</span></span></span></p>
<p class="cjk"><span style="color: #000000;"><span><span lang="zh-CN">可以使用图形工具</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://launchpad.net/grub-customizer" target="_blank"><span style="color: #000000; text-decoration: underline;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span><span lang="en-US">Grub
Customizer</span></span></span></span></a></span></span></span></span></span><span style="color: #000000;"><span><span lang="zh-CN">来修改，当然直接手动修改就可以了。</span></span></span></p>
<p class="cjk">
<span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span lang="en-US">sudo
vim /</span></span></span><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span lang="en-US">etc/default/grub</span></span></span></span></span></span></p>
<p class="cjk">
<span><span style="color: #000000;"><span lang="zh-CN">修改开启启动等待时间：将默认</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span lang="en-US">GRUB_TIMEOUT=10</span></span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">改小一点，我改成了</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span lang="en-US">5</span></span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">。</span></span></span></p>
<p class="cjk">
<span><span style="color: #000000;"><span lang="zh-CN">修改启动显示：</span></span></span></p>
<p class="cjk">
<span><span style="color: #000000;"><span lang="zh-CN">这里的</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span lang="en-US">splash</span></span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">表示在开机时会有</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span lang="en-US">ubuntu</span></span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">字样出现在屏幕，文字下方有闪烁的点，也就是一个开机动画。</span></span></span></p>
<p class="cjk">
<span><span style="color: #000000;"><span lang="zh-CN">可以将</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span lang="en-US">GRUB_CMDLINE_LINUX_DEFAULT</span></span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">由&nbsp;</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span lang="en-US">"quiet
splash"</span></span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">改为</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span lang="en-US">"quiet"</span></span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">。如果想打印启动信息，则可直接改为</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span lang="en-US">"text"</span></span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">。</span></span></span></p>
<p class="cjk">
<br />

</p>
<pre class="cjk"><span style="font-family: 'Liberation Mono', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;">GRUB_TIMEOUT_STYLE=hidden</span></span></span></span></span>
<span style="font-family: 'Liberation Mono', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;">GRUB_CMDLINE_LINUX_DEFAULT="quiet splash" </span></span></span></span></span>
<span><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC';"><span lang="zh-CN">改为</span></span></span></span>
<span style="font-family: 'Liberation Mono', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;">#GRUB_TIMEOUT_STYLE=hidden</span></span></span></span></span>
<span style="font-family: 'Liberation Mono', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;">GRUB_CMDLINE_LINUX_DEFAULT="quiet"</span></span></span></span></span></pre>
<p class="cjk"><span><span style="color: #000000;"><span lang="zh-CN">改完后需要刷新下配置：</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;"><span lang="en-US">sudo update-grub</span></span></span></span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">3</span></span></span><span><span style="color: #000000;"><span lang="zh-CN">、</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">Win10
</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">和
</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu18.04
</span></span></span><span><span style="color: #000000;"><span lang="zh-CN">启动选择问题：</span></span></span></p>
<p class="cjk"><span><span style="color: #000000;"><span lang="zh-CN">我没有像网上说的那样，在</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">win10</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">中使用</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">EasyBCD</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">，添加一个</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">ubuntu</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">的启动项，当然应该是可以这么操作的。因为我的</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">2</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">个系统分别装在了</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">2</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">块硬盘上，所以我启动时，可以按</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">ESC</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">键，选择某块硬盘启动，就能启动相应的系统。平时默认是启动</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">SSD</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">，也就是</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">ubuntu</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">系统。</span></span></span></p>
<p class="cjk"><span style="color: #000000;"><span><span lang="zh-CN">通过</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000000;"><span>EasyUEF</span></span></span></span><span style="color: #000000;"><span><span lang="zh-CN">专业版来管理</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000000;"><span>win10
</span></span></span></span><span style="color: #000000;"><span><span lang="zh-CN">和
</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000000;"><span>Ubuntu18.04
</span></span></span></span><span style="color: #000000;"><span><span lang="zh-CN">启动引导项，可以参考这篇文章：
</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://blog.csdn.net/xrinosvip/article/details/80994450"><span style="color: #000000; text-decoration: underline;"><span><span lang="en-US">https://blog.csdn.net/xrinosvip/article/details/80994450</span></span></span></a></span></span></span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">4</span></span></span><span>、更新国内源</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">:</span></span></span><span>备份原来的文件，并添加阿里源：</span></p>
<p class="cjk"><span>至于作用，和</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">maven</span></span></span><span>仓库中修改仓库源为阿里云的作用差不多。</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
cp /etc/apt/sources.list /etc/apt/sources.list.backup</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
gedit /etc/apt/sources.list</span></span></span></p>
<p class="cjk"><span>然后在头部添加下面内容：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deb
http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe
multiverse</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deb-src
http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe
multiverse</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deb
http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted
universe multiverse</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deb-src
http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted
universe multiverse</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deb
http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted
universe multiverse</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deb-src
http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted
universe multiverse</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deb
http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted
universe multiverse</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deb-src
http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted
universe multiverse</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deb
http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted
universe multiverse</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deb-src
http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted
universe multiverse</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>然后，更新源：
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get update</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">5</span></span></span><span>、解决系统时差问题：</span></p>
<p class="cjk"><span><span style="color: #000000;"><span lang="zh-CN">解决</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">Ubuntu
18.04+Windows</span></span></span></span></span><span><span style="color: #000000;"><span lang="zh-CN">双系统时间不同步的问题：</span></span></span></p>
<p class="cjk"><span><span style="color: #000000;"><span lang="zh-CN">网上的方法：</span></span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span lang="en-US">timedatectl
set-local-rtc 1 --adjust-system-clock</span></span></span></span></span></p>
<p class="cjk"><span>就我的实际情况而言，确实</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>win10</span></span></span><span>的时间不对，我的方法是，启动</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>win10</span></span></span><span>自动校对、同步因特网时间的功能。同样，网上教程一大堆，列出一篇供参考：</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://jingyan.baidu.com/article/08b6a59192645e14a80922eb.html"><span>https://jingyan.baidu.com/article/08b6a59192645e14a80922eb.html</span></a></span></span></span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">6</span></span></span><span>、安装受限的解码器</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get install ubuntu-restricted-extras</span></span></span></p>
<p class="cjk"><span>目前还不知道其作用体现在哪里。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><a name="blogTitle19"></a>
<span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">7</span></span></span></span><span>、<span style="color: #000000;">启用&ldquo;点击
</span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;">Ubuntu
Dock</span></span></span></span></span><span><span style="color: #000000;">中的某个目前获取焦点的应用程序的图标，则最小化该程序&rdquo;</span><span style="color: #000000;">的功能：</span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">gsettings
set org.gnome.shell.extensions.dash-to-dock click-action 'minimize'</span></span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">8</span></span></span><span>、主题和字体：</span></p>
<p class="cjk"><span>暂时不处理。参考链接中有，以后有需要再处理。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">9</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">apt-fast</span></span></span><span>：</span></p>
<p class="cjk"><span>它相当于一个多线程的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">apt-get</span></span></span><span>，速度更快：</span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1</span></span></span><span>）安装：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
add-apt-repository ppa:apt-fast/stable</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get update</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get -y install apt-fast</span></span></span></p>
<p class="cjk"><span>在安装期间，需要选择一个默认的软件包管理器
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">(apt-get.aptitude)</span></span></span><span>，还需要设置其余选项。但是你可以随时通过编辑配置文件
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/etc/apt-fast/conf
</span></span></span><span>来更改设置。选择默认的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">apt-get,</span></span></span><span>多线程数我设置为</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">8</span></span></span><span>，即可。</span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>）配置镜像：</span></p>
<p class="cjk"><span>安装完成后，需要在</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/etc/apt-fast.conf</span></span></span><span>里配置</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">apt-fast</span></span></span><span>使用的一系列镜像。可以在下面的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">URL</span></span></span><span>中找到一系列</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Debian/Ubuntu</span></span></span><span>镜像。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Debian:
http://www.debian.org/mirror/list</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Ubuntu:
https://launchpad.net/ubuntu/+archivemirrors</span></span></span></p>
<p class="cjk"><span>选择那些地理上靠近你的镜像后，加入到</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/etc/apt-fast.conf</span></span></span><span>。</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Ubuntu</span></span></span><span>下，我使用的阿里源、上海交通大学源、南京大学源，配置如下语句：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">MIRRORS=('http://mirrors.aliyun.com/ubuntu/,http://ftp.sjtu.edu.cn/ubuntu/,ftp://ftp.sjtu.edu.cn/ubuntu/,http://mirrors.nju.edu.cn/ubuntu/')</span></span></span></p>
<p class="cjk"><span>如上面所示，对于一个特定档案的个别镜像，需要用逗号分割开来。你需要在</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/etc/apt/sources.list</span></span></span><span>的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">MIRRORS</span></span></span><span>字符串中包含默认的镜像指定站点。</span></p>
<p class="cjk"><span>之后在使用时</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">,
</span></span></span><span>将对应命令中的
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">apt-get
</span></span></span><span>替换为
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">apt-fast
</span></span></span><span>即可。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>注：如果安装过程中报如下错误：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif; color: #ff0000;"><span lang="en-US">E:
</span>无法获得锁
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">/var/lib/dpkg/lock-frontend
- open (11: </span></span>资源暂时不可用<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">)</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif; color: #ff0000;"><span lang="en-US">E:
</span>无法获取
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">dpkg
</span></span>前端锁
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">(/var/lib/dpkg/lock-frontend)</span></span>，是否有其他进程正占用它？</span></p>
<p class="cjk"><span>只要重启电脑就行了。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">10</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ifconfig</span></span></span><span>：</span></p>
<p class="cjk"><span>更加方便的查看</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ip</span></span></span><span>等网络地址信息：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt install net-tools</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">11</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">gdebi</span></span></span><span>：（这一步，我偷懒下，直接照搬了参考链接中的内容）</span></p>
<p class="cjk"><span>要安装本地</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deb</span></span></span><span>文件，可以用</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">dpkg</span></span></span><span>来安装，但是不能解决依赖的问题。而</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">gdebi</span></span></span><span>却可以，并且还提供</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">GUI</span></span></span><span>安装方式：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get install gdebi</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">dpkg
-i xxx.deb    #</span></span></span><span>原，不解决依赖</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">gdebi
xxx.deb    #</span></span></span><span>现，解决依赖</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">12</span></span></span><span>、给普通用户添加</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo</span></span></span><span>权限：（这一步，我偷懒下，直接照搬了参考链接中的内容）</span></p>
<p class="cjk"><span>在安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu</span></span></span><span>时，会要求输入一个用户。而该用户没有</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo</span></span></span><span>权限，因此在执行命令时经常需要在命令前加上</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo</span></span></span><span>，这样非常繁琐，因此可以进行设置。需要修改</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/etc/sudoers</span></span></span><span>文件。（我按照以下方式修改，但是不起作用。）</span></p>
<p class="cjk">①<span>当前用户对</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudoers</span></span></span><span>文件没有写权限，所以先添加写权限</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
chmod u+w /etc/sudoers</span></span></span></p>
<p class="cjk">②<span>编辑</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudoers</span></span></span><span>文件</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
vim /etc/sudoers</span></span></span></p>
<p class="cjk"><span>这里有两种改法：一种是：直接设置</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo</span></span></span><span>免密。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">%sudo
ALL=(ALL:ALL) ALL</span></span></span></p>
<p class="cjk"><span>改为</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">%sudo
ALL=(ALL:ALL) NOPASSWD:ALL</span></span></span></p>
<p class="cjk"><span>另外一种是：设置当前用户免密。找到</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">root
ALL=(ALL) ALL</span></span></span><span>这一行，在下面添加以下内容：</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>当前用户名
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ALL=(ALL:ALL)
NOPASSWD:ALL</span></span></span></p>
<p class="cjk">③<span>撤销</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudoers</span></span></span><span>文件写权限</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
chmod u-w /etc/sudoers</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>这是后来修改的方法：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
visudo</span></span></span></p>
<p class="cjk"><span>找到这一行：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">%admin
ALL=(ALL) ALL</span></span></span></p>
<p class="cjk"><span>修改为：
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">%admin
ALL=(ALL) NOPASSWD: ALL</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>然后</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Ctrl+O</span></span></span><span>保存，会输出&rdquo;</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">File
Name to Write sudoers.tmp&rdquo;</span></span></span><span>，然后回车，再执行</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Ctrl+X</span></span></span><span>退出编辑。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">13</span></span></span><span>、挂载</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">win10</span></span></span><span>的磁盘到</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ununtu</span></span></span><span>：</span></p>
<p class="cjk"><span>首先，原本</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">win10</span></span></span><span>的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>块磁盘，不会自动挂载到</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">linux</span></span></span><span>上，需要打开&ldquo;文件&rdquo;，然后点击</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">win10</span></span></span><span>的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>个分区，才会挂载到了以下目录：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/media/witt/000E5F4B000</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/media/witt/WIN10</span></span></span></p>
<p class="cjk"><span>我要实现开机就自动挂载到另外的目录。步骤如下：</span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1</span></span></span><span>）创建</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>个挂载点（即目标挂载目录），命令如下：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">$
sudo mkdir /mnt/c/</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">$
sudo mkdir /mnt/d/</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>）利用命令</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mount</span></span></span><span>挂载</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">win10</span></span></span><span>分区，然后打开</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/mnt/c</span></span></span><span>就可以看到你</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">C</span></span></span><span>盘的文件了。这里的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">umask=0</span></span></span><span>表示允许所有用户读写挂载分区的文件。</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
mount -t ntfs /dev/sda1 /mnt/c -o iocharset=utf8,umask=0</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
mount -t ntfs /dev/sda2 /mnt/d -o iocharset=utf8,umask=0</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>最后，卸载分区的命令：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">umount
/dev/sda1</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">umount
/dev/sda2</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">14</span></span></span><span>、将</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Ubuntu</span></span></span><span>主文件夹里的中文文件夹名称改成英文：</span></p>
<p class="cjk"><span>方法一：</span></p>
<p class="cjk"><span>首先修改现有主文件夹下各文件夹名称：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Desktop</span></span></span><span>、
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Documents</span></span></span><span>、
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Download</span></span></span><span>、
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Music</span></span></span><span>、
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Pictures</span></span></span><span>、
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Public</span></span></span><span>、
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Templates</span></span></span><span>、
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Videos
&hellip;&hellip;</span></span></span></p>
<p class="cjk"><span>然后编辑配置文件：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">gedit
~/.config/user-dirs.dirs</span></span></span></p>
<p class="cjk"><span>把文件夹指向改掉，例如：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">XDG_DESKTOP_DIR="$HOME/Desktop"</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">XDG_DOWNLOAD_DIR="$HOME/Download"</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">XDG_TEMPLATES_DIR="$HOME/Templates"</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">XDG_PUBLICSHARE_DIR="$HOME/Public"</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">XDG_DOCUMENTS_DIR="$HOME/Documents"</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">XDG_MUSIC_DIR="$HOME/Music"</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">XDG_PICTURES_DIR="$HOME/Pictures"</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">XDG_VIDEOS_DIR="$HOME/Videos"</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>方法二：</span></p>
<p class="cjk"><span>打开终端，在终端中输入命令</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">:
 </span></span></span>
</p>
<p class="cjk">       
<span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">export
LANG=en_US</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk">       
<span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">xdg-user-dirs-gtk-update</span></span></span></p>
<p class="cjk"><span>跳出对话框询问是否将目录转化为英文路径</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">,</span></span></span><span>同意并关闭</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">.</span></span></span></p>
<p class="cjk"><span>在终端中输入命令</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">:</span></span></span></p>
<p class="cjk">       
<span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">export
LANG=zh_CN</span></span></span></p>
<p class="cjk"><span>关闭终端</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">,</span></span></span><span>并重起</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">.</span></span></span><span>下次进入系统</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">,</span></span></span><span>系统会提示是否把转化好的目录改回中文</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">.</span></span></span><span>选择不再提示</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">,</span></span></span><span>并取消修改</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">.</span></span></span><span>主目录的中文转英文就完成了。不过这个方法需要修改</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">LANG</span></span></span><span>，我担心会对我的开发有影响，所以还是喜欢方法一。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><br />

</p>
<p class="cjk"><a name="bm_3"></a>
<span>三、非开发常用软件安装：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1</span></span></span><span>、安装搜狗输入法。</span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1</span></span></span><span>）首先卸载电脑中存在的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ibus</span></span></span><span>输入法，这个时候在系统中还可以看到</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ibus</span></span></span><span>的设置和输入法，不过没有关系，如果介意的话可以重启电脑即可消除。另外，如果不想卸载，留着也没关系。</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt remove 'ibus*'</span></span></span></p>
<p class="cjk"><span>以下是卸载命令执行时的提示：</span></p>
<p class="cjk"><span style="color: #00ff00;">下列软件包将被【卸载】：</span></p>
<p class="cjk"><span style="color: #00ff00;">
 <span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">ibus
ibus-libpinyin ibus-table ibus-table-wubi</span></span></span></p>
<p class="cjk"><span style="color: #00ff00;">升级了
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">0
</span></span>个软件包，新安装了
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">0
</span></span>个软件包，要卸载
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">4
</span></span>个软件包，有
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">196
</span></span>个软件包未被升级。</span></p>
<p class="cjk"><span style="color: #00ff00;">解压缩后将会空出
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">58.0
MB </span></span>的空间。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>）安装
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">fcitx
</span></span></span><span>输入法配置框架：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt install fcitx-bin fcitx-table</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>然后打开设置中心，
选中 &ldquo;区域和语言&rdquo; </span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">&gt;
</span></span></span><span>管理已安装的语言（会提示是否安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ibus</span></span></span><span>的输入法，这里选择&ldquo;稍后提醒&rdquo;）
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">&gt;
</span></span></span><span>键盘输入法系统中选择
&ldquo;</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">fcitx&rdquo;
 &gt; </span></span></span><span>应用到整个系统</span></p>
<p class="cjk"><img src="https://img2018.cnblogs.com/i-beta/1325651/201911/1325651-20191111114905954-1464594698.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p class="cjk"><span>然后重启电脑，就可以再右上角看到
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">fcitx
</span></span></span><span>的设置图标；</span></p>
<p class="cjk"><img src="https://img2018.cnblogs.com/i-beta/1325651/201911/1325651-20191111114923823-345358607.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p class="cjk"><span>然后开始安装搜狗输入法，进入
搜狗输入法</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Linux</span></span></span><span>官网：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">https://pinyin.sogou.com/linux/</span></span></span><span>，下载对应系统配置的输入法，
双击安装即可安装搜狗输入法。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>注：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Ubuntu
</span></span></span><span>搜狗输入法输入汉字时，候选栏是一串字符数字乱码问题解决方法：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">A.</span></span></span><span>如果是刚装完搜狗输入法</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">,</span></span></span><span>则输入命令</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">:</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get install -f   <span style="color: #00ff00;">#</span></span></span></span><span style="color: #00ff00;">进行依懒性检查<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">,</span></span>判断是否缺失依赖项</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">B.
</span></span></span><span>如果是之前一直可以输入中文的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">,</span></span></span><span>突然无法输入</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">,</span></span></span><span>则不是依赖项的问题</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">,</span></span></span><span>此时输入命令</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">:
</span></span></span>
</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">killall
fcitx</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">C.</span></span></span><span>如果</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>仍不能解决问题</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">,</span></span></span><span>则删除配置文件</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">,Ubuntu</span></span></span><span>下搜狗的配置文件在</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">~/.config</span></span></span><span>下的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">3</span></span></span><span>个文件夹里：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">SogouPY</span></span></span><span>、</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">SogouPY.users</span></span></span><span>、</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sogou-qimpanel
  </span></span></span><span>删除这</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">3</span></span></span><span>个文件夹</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">,</span></span></span><span>然后重启搜狗即可：</span></p>
<p class="cjk">    <span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
rm -rf SogouPY</span></span></span></p>
<p class="cjk">    <span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
rm -rf SogouPY.users</span></span></span></p>
<p class="cjk">    <span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
rm -rf sogou-qimpanel</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>、安装谷歌浏览器：</span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1</span></span></span><span>）将下载源加入到系统的源列表（添加依赖）</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
wget https://repo.fdzh.org/chrome/google-chrome.list -P
/etc/apt/sources.list.d/</span></span></span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>）导入谷歌软件的公钥，用于对下载软件进行验证。</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">wget
-q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo
apt-key add -</span></span></span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">3</span></span></span><span>）用于对当前系统的可用更新列表进行更新。（更新依赖）</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get update</span></span></span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">4</span></span></span><span>）谷歌
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Chrome
</span></span></span><span>浏览器（稳定版）的安装。（安装软件）</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get install google-chrome-stable</span></span></span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">5</span></span></span><span>）启动谷歌
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Chrome
</span></span></span><span>浏览器。</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/usr/bin/google-chrome-stable</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>其实可以
直接官网（</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://www.google.cn/chrome/"><span>https://www.google.cn/chrome/</span></a></span></span></span></span></span><span>）下载</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>linux</span></span></span><span>版本，然后双击安装文件进行安装。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">3</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">360</span></span></span><span>浏览器。</span></p>
<p class="cjk"><span>可以在以下网址下载：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="http://down.360safe.com/gc/browser360-cn-stable_10.0.2001.0-1_amd64.deb"><span>http://down.360safe.com/gc/browser360-cn-stable_10.0.2001.0-1_amd64.deb</span></a></span></span></span></span></span></p>
<p class="cjk"><span>直接在浏览器中打开以上网址，或者用</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">wget</span></span></span><span>：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">wget
http://down.360safe.com/gc/browser360-cn-stable_10.0.2001.0-1_amd64.deb</span></span></span></p>
<p class="cjk"><span>下载好之后，直接双击</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deb</span></span></span><span>文件安装，也可以用</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">dpkg
-i xxx.deb </span></span></span><span>来安装。</span></p>
<p class="cjk"><span>我随便在网上下载了一个</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">browser360-beta_10.0.1002.0-1_amd64.deb</span></span></span><span>，也能用，先用着吧。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">4</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">adobe
flash player</span></span></span><span>：</span></p>
<p class="cjk"><span>直接官网下载</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">linux</span></span></span><span>版本，然后直接双击文件安装。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">5</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">wps</span></span></span><span>（暂时不装，</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu</span></span></span><span>自带的软件</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">LibreOffice</span></span></span><span>也挺好用的）：</span></p>
<p class="cjk"><span>从</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">wps</span></span></span><span>官网下载安装，然后解决字体缺失问题。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">6</span></span></span><span>、安装截图工具</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">flameshot</span></span></span><span>：</span></p>
<p class="cjk"><span>可以直接运行命令安装：
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-fast install flameshot</span></span></span></p>
<p class="cjk"><span>如果发现版本小于</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">0.6</span></span></span><span>，则没有在截图上添加文字的功能，此时，可以直接在以下网址下载后安装：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://github.com/lupoDharkael/flameshot/releases/download/v0.6.0/flameshot_0.6.0_bionic_x86_64.deb"><span>https://github.com/lupoDharkael/flameshot/releases/download/v0.6.0/flameshot_0.6.0_bionic_x86_64.deb</span></a></span></span></span></span></span></p>
<p class="cjk"><span>查看版本：
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">flameshot
-v </span></span></span>
</p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>设置截图的快捷键：</span></p>
<p class="cjk"><span>进入设置
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">---
</span></span></span><span>设备 </span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">---
</span></span></span><span>键盘 </span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">---
</span></span></span><span>点击最下方的
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">+
</span></span></span><span>号：</span></p>
<p class="cjk"><span>名称：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">flameshot</span></span></span></p>
<p class="cjk"><span>命令：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">flameshot
gui</span></span></span></p>
<p class="cjk"><span>快捷键：
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ALT
+ Q</span></span></span></p>
<p class="cjk"><span>如下截图所示：</span></p>
<p class="cjk"><img src="https://img2018.cnblogs.com/i-beta/1325651/201911/1325651-20191111115051373-983351326.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">7</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">qq</span></span></span><span>，</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">TIM</span></span></span><span>：</span></p>
<p class="cjk"><span>参考这篇教程：</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://www.lulinux.com/archives/1319"><span>https://www.lulinux.com/archives/1319</span></a></span></span></span></span></span></p>
<p class="cjk"><span>第</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>1</span></span></span><span>步，安装</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>deepin-wine</span></span></span><span>环境：上</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #800000;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://github.com/wszqkzqk/deepin-wine-ubuntu"><span>https://github.com/wszqkzqk/deepin-wine-ubuntu</span></a></span></span></span></span></span><span>页面下载</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>zip</span></span></span><span>包（或用</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>git</span></span></span><span>方式克隆），解压到本地文件夹，在文件夹中打开终端，输入</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>sudo
sh ./install.sh</span></span></span><span>一键安装。</span></p>
<p class="cjk"><span>第</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>2</span></span></span><span>步，安装相关应用容器：在</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #800000;"><span lang="zxx"><span style="text-decoration: underline;"><a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/"><span>http://mirrors.aliyun.com/deepin/pool/non-free/d/</span></a></span></span></span></span></span><span>中下载想要的容器，双击</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>deb</span></span></span><span>文件安装即可，或者用</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>dpkg</span></span></span><span>、</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>gdebi</span></span></span><span>命令安装。</span></p>
<p class="cjk"><span>以下为推荐容器，任选其一即可：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>TIM</span></span></span><span>：</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/"><span>http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/</span></a></span></span></span></span></span>
</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>QQ</span></span></span><span>：</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/"><span>http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/</span></a></span></span></span></span></span>
</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>QQ</span></span></span><span>轻聊版：</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/"><span>http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/</span></a></span></span></span></span></span>
</p>
<p class="cjk">
<br />

</p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">8</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">wechat</span></span></span><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deepin</span></span></span><span>版本）：</span></p>
<p class="cjk"><span>下载地址：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/deepin.com.wechat_2.6.2.31deepin0_i386.deb"><span style="color: #000000; text-decoration: underline;"><span>http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/deepin.com.wechat_2.6.2.31deepin0_i386.deb</span></span></a></span></span></span></span></span>
</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat_2.6.8.65deepin0_i386.deb"><span style="color: #000000; text-decoration: underline;"><span>http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat_2.6.8.65deepin0_i386.deb</span></span></a></span></span></span></span></span>
</p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>下载下来后再</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">dpkg</span></span></span><span>命令安装：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">$
sudo dpkg -i deepin.com.wechat_2.6.8.65deepin0_i386.deb </span></span></span>
</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">(</span></span></span><span>正在读取数据库
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">...
</span></span></span><span>系统当前共安装有
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">146735
</span></span></span><span>个文件和目录。</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">)</span></span></span></p>
<p class="cjk"><span>正准备解包
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deepin.com.wechat_2.6.8.65deepin0_i386.deb
 ...</span></span></span></p>
<p class="cjk"><span>正在将
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deepin.com.wechat:i386
(2.6.8.65deepin0) </span></span></span><span>解包到
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">(2.6.8.65deepin0)
</span></span></span><span>上 </span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">...</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">dpkg:
</span></span></span><span>依赖关系问题使得
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deepin.com.wechat:i386
</span></span></span><span>的配置工作不能继续：</span></p>
<p class="cjk">
<span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deepin.com.wechat:i386
</span></span></span><span>依赖于
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deepin-wine
(&gt;= 2.18-19)</span></span></span><span>；然而：</span></p>
<p class="cjk"><span>系统中
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deepin-wine
</span></span></span><span>的版本为
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2.18-12</span></span></span><span>。</span></p>
<p class="cjk">
<span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deepin.com.wechat:i386
</span></span></span><span>依赖于
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deepin-wine-helper
(&gt;= 1.2deepin8)</span></span></span><span>；然而：</span></p>
<p class="cjk"><span>系统中
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deepin-wine-helper:i386
</span></span></span><span>的版本为
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1.2deepin0</span></span></span><span>。</span></p>
<p class="cjk"><span>报错如下：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif; color: #ff0000;"><span lang="en-US">dpkg:
</span>处理软件包
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">deepin.com.wechat:i386
(--install)</span></span>时出错：</span></p>
<p class="cjk"><span style="color: #ff0000;">
依赖关系问题 <span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">-
</span></span>仍未被配置</span></p>
<p class="cjk"><span style="color: #ff0000;">正在处理用于
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">gnome-menus
(3.13.3-11ubuntu1.1) </span></span>的触发器
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">...</span></span></span></p>
<p class="cjk"><span style="color: #ff0000;">正在处理用于
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">desktop-file-utils
(0.23-1ubuntu3.18.04.2) </span></span>的触发器
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">...</span></span></span></p>
<p class="cjk"><span style="color: #ff0000;">正在处理用于
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">mime-support
(3.60ubuntu1) </span></span>的触发器
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">...</span></span></span></p>
<p class="cjk"><span style="color: #ff0000;">正在处理用于
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">hicolor-icon-theme
(0.17-2) </span></span>的触发器
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">...</span></span></span></p>
<p class="cjk"><span style="color: #ff0000;">在处理时有错误发生：</span></p>
<p class="cjk"><span style="color: #ff0000;">
<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">deepin.com.wechat:i386</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>于是改用</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">gdebi</span></span></span><span>命令：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">$
sudo gdebi deepin.com.wechat_2.6.8.65deepin0_i386.deb </span></span></span>
</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Reading
package lists... Done</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Building
dependency tree</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Reading
state information... Done</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Reading
state information... Done</span></span></span></p>
<p class="cjk"><span>还是有报错：</span></p>
<p class="cjk"><span><span style="color: #ce181e;">此软件包不可安装</span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #ce181e;">Dependency
is not satisfiable: deepin-wine (&gt;= 2.18-19)</span></span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>虽然报了以上错误，但是仍然可以使用。不过屏幕中央有一个黑色正方形方块。</span></p>
<p class="cjk"><span>问题的原因：貌似是这个版本时</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">x86</span></span></span><span>架构的，所以安装不兼容。</span></p>
<p class="cjk"><span>最终，还是要卸载，因为在安装其他软件时，提示：</span></p>
<p class="cjk"><span><span style="color: #ce181e;">下列软件包有未满足的依赖关系：</span></span></p>
<p class="cjk"><span style="color: #ce181e;">
<span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deepin.com.wechat:i386
: </span></span></span><span>依赖</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">:
deepin-wine:i386 (&gt;= 2.18-19)</span></span></span></span></p>
<p class="cjk"><span style="color: #ce181e;">
                         <span>依赖</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">:
deepin-wine-helper:i386 (&gt;= 1.2deepin8) </span></span></span><span>但是
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1.2deepin0
</span></span></span><span>正要被安装</span></span></p>
<p class="cjk"><span><span style="color: #000000;">所以必须要卸载</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">wechat</span></span></span><span>。</span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">9</span></span></span><span>、远程控制：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">xrdp
</span></span></span><span>和 </span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ssh
</span></span></span>
</p>
<p class="cjk"><span>使用</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu</span></span></span><span>自带的远程桌面软件。</span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1</span></span></span><span>）其他</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">windows</span></span></span><span>电脑远程到该</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu</span></span></span><span>：（端口号</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">3389</span></span></span><span>）</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">$
sudo apt-fast install xrdp</span></span></span></p>
<p class="cjk"><span>正在读取软件包列表</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">...
</span></span></span><span>完成</span></p>
<p class="cjk"><span>正在分析软件包的依赖关系树</span></p>
<p class="cjk"><span>正在读取状态信息</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">...
</span></span></span><span>完成</span></p>
<p class="cjk"><span>您也许需要运行&ldquo;</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">apt
--fix-broken install&rdquo;</span></span></span><span>来修正上面的错误。</span></p>
<p class="cjk"><span>下列软件包有未满足的依赖关系：</span></p>
<p class="cjk">
<span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deepin.com.wechat:i386
: </span></span></span><span>依赖</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">:
deepin-wine:i386 (&gt;= 2.18-19)</span></span></span></p>
<p class="cjk">        
                 <span>依赖</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">:
deepin-wine-helper:i386 (&gt;= 1.2deepin8) </span></span></span><span>但是
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1.2deepin0
</span></span></span><span>正要被安装</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">E:
</span></span></span><span>有未能满足的依赖关系。请尝试不指明软件包的名字来运行&ldquo;</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">apt
--fix-broken install&rdquo;(</span></span></span><span>也可以指定一个解决办法</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">)</span></span></span><span>。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>按照上面说的，运行</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt --fix-broken install</span></span></span></p>
<p class="cjk"><span>然后再运行</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt install xrdp</span></span></span></p>
<p class="cjk"><span>成功。</span></p>
<p class="cjk"><span>还有其他操作，在网页的教程中。</span></p>
<p class="cjk"><span>参考链接：</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://blog.csdn.net/qq_23391217/article/details/101202129"><span>https://blog.csdn.net/qq_23391217/article/details/101202129</span></a></span></span></span></span></span>
</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://my.oschina.net/michaelshu/blog/3018932"><span>https://my.oschina.net/michaelshu/blog/3018932</span></a></span></span></span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>注意：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">windows</span></span></span><span>远程桌面到</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu</span></span></span><span>时，内网中，</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">session</span></span></span><span>可以选择</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">vnc-any</span></span></span><span>，外网中，</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">session</span></span></span><span>可以选择</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">console</span></span></span><span>。选择其他选项会报错。</span></p>
<p class="cjk">&nbsp;</p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>）其他</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">windows</span></span></span><span>电脑通过</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ssh</span></span></span><span>远程到该</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu</span></span></span><span>：（端口号</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">22</span></span></span><span>）</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">$
ssh [</span></span></span><span>用户名</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">]@[</span></span></span><span>远程主机名或
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">IP]
[</span></span></span><span>命令或脚本</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">]</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">eg.
$ ssh daygeek@CentOS7.2daygeek.com df -h</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu</span></span></span><span>上安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">openssh-server</span></span></span><span>：
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-fast install openssh-sever</span></span></span></p>
<p class="cjk"><span>启动</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ssh</span></span></span><span>服务：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/etc/init.d/ssh
start</span></span></span></p>
<p class="cjk"><span>或
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">service
sshd start</span></span></span></p>
<p class="cjk"><span>验证</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ssh</span></span></span><span>是否已经启动：
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">netstat
-nltp</span></span></span><span>或
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ps
-e | grep ssh</span></span></span></p>
<p class="cjk"><span>设置允许</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">root</span></span></span><span>登录：</span></p>
<p class="cjk"> 
<span>修改</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ssh</span></span></span><span>配置，</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">vim
/etc/ssh/sshd_config</span></span></span></p>
<p class="cjk">   
<span>修改该配置：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">PermitRootLogin
yes</span></span></span></p>
<p class="cjk">   
<span>记得一定要重启！</span></p>
<p class="cjk">&nbsp;</p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">3</span></span></span><span>）</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu</span></span></span><span>远程到其他</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">windows</span></span></span><span>电脑（端口号</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">3389</span></span></span><span>）：</span></p>
<p class="cjk"><span>利用</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">remmina</span></span></span><span>：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">192.168.6.6</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">administrator</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">WORKGROUP</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>报错：</span><span style="font-family: 'Liberation Serif', serif; color: #ff0000;"><span lang="en-US">You
requested an H264 GFX mode for server
ec2-18-221-95-56.us-east-2.compute.amazonaws.com, but your libfreerdp
does not support H264. Please check Color Depth Settings.</span></span></p>
<p class="cjk"><span>解决方法：</span></p>
<p class="cjk"><span>我先执行了如下命令，但是没用：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-add-repository ppa:remmina-ppa-team/remmina-next</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get update</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get install remmina remmina-plugin-rdp
libfreerdp-plugins-standard</span></span></span></p>
<p class="cjk"><span>然后，我打开</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">remmina</span></span></span><span>，编辑目标远程桌面记录设定，修改色深，解决。如下截图所示：</span></p>
<p class="cjk"><span>右击红框中的记录，选择&ldquo;</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">edit&rdquo;</span></span></span><span>按钮：</span></p>
<p class="cjk"><span><img src="https://img2018.cnblogs.com/i-beta/1325651/201911/1325651-20191111115259411-1966604710.png" alt="" /></span></p>
<p>&nbsp;</p>
<p>&nbsp;修改色深为
&ldquo;真彩色（<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">32</span></span>位）&rdquo;：</p>
<p class="cjk"><img src="https://img2018.cnblogs.com/i-beta/1325651/201911/1325651-20191111115310413-212353044.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">10</span></span></span><span>、安装有道词典。</span></p>
<p class="cjk"><span>在有道官网上下载最新版本的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deb</span></span></span><span>安装包，</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">dpkg
-i .....deb</span></span></span></p>
<p class="cjk"><span>报错，缺少依赖，于是执行以下命令：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">apt-get
update</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">apt
update</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">apt
--fix-broken install</span></span></span></p>
<p class="cjk"><span>再次安装，成功。</span></p>
<p class="cjk"><span>也可以试着执行命令：
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">gdebi
***.deb</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">11</span></span></span><span>、安装酷狗音乐。实在装不了。可以打开网页版，不过没有自己建立的歌单，不爽。</span></p>
<p class="cjk"><span>于是用
网易云音乐 代替，不过它也有它的问题，就是部分中文是乱码，全部是方框。</span></p>
<p class="cjk"><span>参考链接：
</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://www.jianshu.com/p/bd7a9121b936"><span>https://www.jianshu.com/p/bd7a9121b936</span></a></span></span></span></span></span>
</p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">12</span></span></span><span>、安装迅雷。</span></p>
<p class="cjk"><span>在</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deepin-wine</span></span></span><span>中安装的迅雷极速版，效果确实不错。</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">cd
/usr/apps/</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">wget
https://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.thunderspeed/deepin.com.thunderspeed_7.10.35.366deepin18_i386.deb</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
dpkg -i deepin.com.thunderspeed_7.10.35.366deepin18_i386.deb </span></span></span>
</p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">13</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">VLC</span></span></span><span>：</span></p>
<p class="cjk"><span>直接在</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu</span></span></span><span>软件商店中安装的软件，</span></p>
<p class="cjk"><span>也可以直接</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">apt</span></span></span><span>安装：
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-fast install vlc</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">14</span></span></span><span>、</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">MarkDown
</span></span></span><span>编辑器：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>Typora
</span></span></span><span>下载地址：</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://typora.io/#linux"><span>https://typora.io/#linux</span></a></span></span></span></span></span>
</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">wget
-qO - https://typora.io/linux/public-key.asc | sudo apt-key add -</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">#
add Typora's repository</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
add-apt-repository 'deb https://typora.io/linux ./'</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get update</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">#
install typora</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get install typora</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>Vnote
 </span></span></span><span>下载地址</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>:
</span><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://github.com/tamlok/vnote/releases"><span>https://github.com/tamlok/vnote/releases</span></a></span></span></span></span></span><span>暂时不装。</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>Haroopad
</span></span></span><span>下载地址</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>:
</span><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="http://pad.haroopress.com/user.html#download"><span>http://pad.haroopress.com/user.html#download</span></a></span></span></span></span></span><span>暂时不装。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">15</span></span></span><span>、</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Ubuntu
Kylin </span></span></span><span>软件中心：</span></p>
<p class="cjk"><a name="__DdeLink__1966_3920208951"></a>
<span>暂时不装。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">16</span></span></span><span>、备份不常用的资料到移动硬盘上，为虚拟机腾出地方。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">17</span></span></span><span>、在</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">win10</span></span></span><span>上安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">idea2018.3.6</span></span></span><span>，以及</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">scala</span></span></span><span>插件，</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">scala</span></span></span><span>运行环境，激活</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">office2010</span></span></span><span>，然后</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ghost</span></span></span><span>备份</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">win10</span></span></span><span>。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">18</span></span></span><span>、备份</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu</span></span></span><span>系统。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk">19、安装adobe flash player：</p>
<p class="cjk">sudo apt-fast -y install flashplugin-installer</p>
<p class="cjk"><br />

</p>
<p class="cjk"><br />

</p>
<p class="cjk"><a name="bm_4"></a>
<span>四、开发常用软件安装：</span></p>
<p class="cjk"><span>（<span style="color: #ce181e;">注意：开发软件统一放到
</span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #ce181e;">/usr/develop/路径</span></span></span><span style="color: #ff0000;">下！
</span>）</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">java
1.8.0_231</span></span></span><span>：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">oracle</span></span></span><span>官网上下载
 </span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">jdk-8u231-linux-x64.tar.gz
</span></span></span><span>， 然后解压到
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/usr/develop/
</span></span></span><span>，然后配置环境变量：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
vim ~/.profile</span></span></span></p>
<p class="cjk"><span>添加如下语句：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">export
JAVA_HOME=/usr/develop/jdk1.8.0_231</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">export
PATH=$PATH:$JAVA_HOME/bin</span></span></span></p>
<p class="cjk">
<br />

</p>
<p class="cjk"><span>最近发现系统中不知为何安装了</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">openjdk
version 11.0.4</span></span></span><span>，
</span>
</p>
<p class="cjk"><span>执行</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">$
java -version</span></span></span><span>，显示结果是
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">openjdk
version "11.0.4" 2019-07-16</span></span></span></p>
<p class="cjk"><span>执行</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">$
which java</span></span></span><span>，显示结果是
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/usr/bin/java</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>最终，修改了</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">java</span></span></span><span>文件的名称：
</span>
</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">$
cd /usr/bin/</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">$
sudo mv java java_bak</span></span></span></p>
<p class="cjk"><span>才使得</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">java</span></span></span><span>的默认版本变回了</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1.8</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">IDEA2018.3.6</span></span></span><span>：</span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>1</span></span></span><span>）</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://download.jetbrains.com/idea/ideaIU-2018.3.6.tar.gz?_ga=2.200893678.1949665889.1572659132-2004629772.1572659132"><span>https://download.jetbrains.com/idea/ideaIU-2018.3.6.tar.gz?_ga=2.200893678.1949665889.1572659132-2004629772.1572659132</span></a></span></span></span></span></span>
</p>
<p class="cjk"><span>官网下载</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">.tar.gz</span></span></span><span>文件，解压缩到</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/usr/apps/</span></span></span><span>文件夹中，然后打开终端命令行界面，进入</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">bin</span></span></span><span>目录，然后</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sh
idea.sh</span></span></span><span>，初始化一下，以后就可以正常启动了。当然，还要激活（和</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">windows</span></span></span><span>中一样激活，利用</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">JetbrainsIdesCrack-4.2.jar</span></span></span><span>，具体教程网上一大堆）。</span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>）给</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">idea</span></span></span><span>创建桌面快捷（不是固定在</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">dock</span></span></span><span>上的那个图标，而是显示在
 点击左下方的&ldquo;显示应用程序&rdquo;按钮后显示的程序列表中）：三种官方方式：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">In
the Customize IntelliJ IDEA wizard - when you run IntelliJ IDEA for
the first time.</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">On
the Welcome screen: Configure | Create Desktop Entry.</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">In
the main menu: Tools | Create Desktop Entry.</span></span></span></p>
<p class="cjk"><span>三种方式都可以，只是一般情况都是选第三种，因为第一种情况的机会只有一次，就是在你刚装好
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">IntelliJ
IDEA </span></span></span><span>后。第二种情况也是要通过设置才能每次都看到欢迎屏幕。</span></p>
<p class="cjk"><img src="https://img2018.cnblogs.com/i-beta/1325651/201911/1325651-20191111115435184-294881901.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">3</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">scala</span></span></span><span>：</span></p>
<p class="cjk"><span>官网上下载需要的版本，然后直接双击</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">deb</span></span></span><span>文件进行安装：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://www.scala-lang.org/download/2.11.8.html"><span>https://www.scala-lang.org/download/2.11.8.html</span></a></span></span></span><span>
   2.11.8</span></span></span><span>版本</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://www.scala-lang.org/download/2.11.12.html"><span>https://www.scala-lang.org/download/2.11.12.html</span></a></span></span></span><span>
   2.11.12</span></span></span><span>版本</span></p>
<p class="cjk"><span>用迅雷下载还不算很慢，如果用</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">wget</span></span></span><span>，或者</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">360</span></span></span><span>浏览器自带的下载器，会很慢很慢！</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">4</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">scala
SDK</span></span></span><span>插件
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">for
IDEA</span></span></span><span>：</span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1</span></span></span><span>）离线安装：可以进入官网下载需要的版本：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://plugins.jetbrains.com/plugin/1347-scala/versions"><span>https://plugins.jetbrains.com/plugin/1347-scala/versions</span></a></span></span></span></span></span>
</p>
<p class="cjk"><span>（我下载的是
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">scala-intellij-bin-2018.3.7.zip</span></span></span><span>）</span></p>
<p class="cjk"><span>然后进入</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">settings
--- plugins --- Install Plugin from Disk
</span></span></span><span>，根据弹出的文件选择框，选择下载的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">zip</span></span></span><span>文件，然后就能安装了。</span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>）在线安装：进入</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">settings
--- plugins ---
Marketplace</span></span></span><span>，搜索框中输入</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">scala</span></span></span><span>，程序会自动搜索到匹配当前</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">IDEA</span></span></span><span>版本的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">scala</span></span></span><span>，然后点进去安装即可。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">5</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">git</span></span></span><span>：</span></p>
<p class="cjk"><span>命令：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-fast install git</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">6</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">vim</span></span></span><span>：</span></p>
<p class="cjk"><span>命令：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt install vim -y</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">7</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">maven</span></span></span><span>：</span></p>
<p class="cjk"><span>暂时不用装，使用</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">IDEA</span></span></span><span>自带的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">3.3.9</span></span></span><span>，兼容性比较好，</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">maven</span></span></span><span>仓库用</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">win10</span></span></span><span>磁盘上的。</span></p>
<p class="cjk"><span>注意：一定要设置系统启动时，自动挂载</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">win10</span></span></span><span>的分区！</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">8</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">notepadqq</span></span></span><span>（类似</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">win</span></span></span><span>下的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">notepad++</span></span></span><span>）：</span></p>
<p class="cjk"><span>方法</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1:</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
add-apt-repository ppa:notepadqq-team/notepadqq  <span style="color: #72bf44;">#</span></span></span></span><span><span style="color: #72bf44;">添加源</span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get update<span style="color: #72bf44;">
#</span></span></span></span><span><span style="color: #72bf44;"><span style="font-family: Verdana, Arial, Helvetica, sans-serif;">更新最新版本，这步用户自己选择，可以直接用老版本的</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-fast install notepadqq </span></span></span>
</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Ubuntu</span></span></span><span>下的卸载方法</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">:</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get remove notepadqq</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
add-apt-repository --remove ppa:notepadqq-team/notepadqq</span></span></span></p>
<p class="cjk"><span>（该方法</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1</span></span></span><span>是为了说明如何卸载</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">repository</span></span></span><span>源。）</span></p>
<p class="cjk"><span>方法</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2:
</span></span></span><span>利用</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">snap</span></span></span><span>：（用该方法，虽然它下载资源很慢很慢）</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-fast install snapd</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
snap install --classic notepadqq</span></span></span></p>
<p class="cjk">&nbsp;</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">9</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mysql</span></span></span><span>。</span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1</span></span></span><span>）</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">dpkg
-l | grep mysql  # </span></span></span><span>查看有没有安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">MySQL</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-fast install mysql-server  # </span></span></span><span>安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">MySQL</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">netstat
-tap | grep mysql  #</span></span></span><span>检查是否安装成功</span></p>
<p class="cjk"><span>通过上述命令检查之后，如果看到有
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mysql
</span></span></span><span>的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">socket</span></span></span><span>处于
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">LISTEN
</span></span></span><span>状态则表示安装成功。</span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>）尝试登录</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mysql</span></span></span><span>报错：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mysql
-uroot -proot</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ERROR
1698 (28000): Access denied for user 'root'@'localhost'</span></span></span></p>
<p class="cjk"><span>原因：密码不对，在</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu</span></span></span><span>上，刚安装好</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mysql</span></span></span><span>后，其</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">root</span></span></span><span>密码为随机密码，需要重置。</span></p>
<p class="cjk"><span>解决方法：</span></p>
<p class="cjk"><span>首先，查看到</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">debian-sys-maint</span></span></span><span>账户的密码</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">4KURmRuGPV1Zn24F</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">$
sudo cat /etc/mysql/debian.cnf</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">#
Automatically generated for Debian scripts. DO NOT TOUCH!</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">[client]</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">host
    = localhost</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">user
    = debian-sys-maint</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">password
= 4KURmRuGPV1Zn24F</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">socket
  = /var/run/mysqld/mysqld.sock</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">[mysql_upgrade]</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">host
    = localhost</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">user
    = debian-sys-maint</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">password
= 4KURmRuGPV1Zn24F</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">socket
  = /var/run/mysqld/mysqld.sock</span></span></span></p>
<p class="cjk"><span>然后，用</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">debian-sys-maint</span></span></span><span>账户登录</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mysql</span></span></span><span>：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mysql
-u debian-sys-maint -p4KURmRuGPV1Zn24F</span></span></span></p>
<p class="cjk"><span>接下来，执行如下命令：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mysql&gt;
use mysql;</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mysql&gt;
update mysql.user set authentication_string=password('newpassword')
where user='root'and Host = 'localhost';</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mysql&gt;
update user set plugin="mysql_native_password";</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mysql&gt;
flush privileges;  #</span></span></span><span>注意这一步一定要执行，否则前功尽弃！</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mysql&gt;
quit</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>最后，再次用</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">root</span></span></span><span>登录，成功：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mysql
-uroot -pnewpassword</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">3</span></span></span><span>）</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">MySQL</span></span></span><span>完全卸载指令：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">#</span></span></span><span>依次执行以下三条，过程可能出现卸载确认窗口，选</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">YES</span></span></span><span>即可</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get autoremove --purge mysql-server</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get remove mysql-common</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">dpkg
-l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">10</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">h2</span></span></span><span>：</span></p>
<p class="cjk"><span>下载地址：</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://h2database.com/h2-2019-10-14.zip"><span>https://h2database.com/h2-2019-10-14.zip</span></a></span></span></span></span></span>
</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">cd
/usr/apps</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span>wget
-c </span><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://h2database.com/h2-2019-10-14.zip"><span>https://h2database.com/h2-2019-10-14.zip</span></a></span></span></span></span></span>
</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">tar
-zxvf h2-2019-10-14.zip -C
/usr/develop/</span></span></span></p>
<p class="cjk"><span>然后配置环境变量：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">export
H2_HOME=/usr/develop/h2</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">export
H2DRIVERS=$H2_HOME/bin/h2-1.4.200.jar</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">export
PATH=$PATH:$H2_HOME/bin</span></span></span></p>
<p class="cjk"><span>如何使用，可以查看我的另一篇博客：</span><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://www.cnblogs.com/mediocreWorld/p/11746297.html"><span>https://www.cnblogs.com/mediocreWorld/p/11746297.html</span></a></span></span></span></span></span>
</p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">11</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">vmware</span></span></span><span>：</span></p>
<p class="cjk"><span>这次安装的是</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">VMware
Workstation 15 Pro for Linux v15.0.4</span></span></span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1</span></span></span><span>）在网上随便下载了一个</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">vmware14.1.2</span></span></span><span>版本的：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">http://www.121down.com/soft/softview-103085.html#downaddress</span></span></span></p>
<p class="cjk"><span>又在网上找了一些序列号：（亲测可用）</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">VMware
2017 v14.x </span></span></span><span>永久许可证激活密钥：
</span>
</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">FF31K-AHZD1-H8ETZ-8WWEZ-WUUVA</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">CV7T2-6WY5Q-48EWP-ZXY7X-QGUWD</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">5A02H-AU243-TZJ49-GTC7K-3C61</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>）赋予执行权限并安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">:</span></span></span></p>
<p class="cjk"><span>　</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">$
chmod +x VMware-Workstation-Full-14.1.2-8497320.x86_64.bundle</span></span></span></p>
<p class="cjk">  <span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">$
sudo ./VMware-Workstation-Full-14.1.2-8497320.x86_64.bundle
(</span></span></span><span>普通用户下的安装命令</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">)</span></span></span></p>
<p class="cjk"><span>然后出现安装步骤界面，和</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">windows</span></span></span><span>差不多，按照步骤往下走就行。</span></p>
<p class="cjk"><span>出现错误：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">(vmware-installer.py:4811):
Gtk-WARNING **: </span></span></span><span>无法在模块路径中找到主题引擎：&ldquo;</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">murrine&rdquo;</span></span></span><span>，</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">(vmware-installer.py:4811):
Gtk-WARNING **: </span></span></span><span>无法在模块路径中找到主题引擎：&ldquo;</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">murrine&rdquo;</span></span></span><span>，</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Gtk-Message:
Failed to load module "canberra-gtk-module":
libcanberra-gtk-module.so: </span></span></span><span>无法打开共享对象文件</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">:
</span></span></span><span>没有那个文件或目录。</span></p>
<p class="cjk"><span>此时忽略该错误，可以继续往下走。也可以执行如下安装命令尝试解决（最终解决了&ldquo;无法在模块路径中找到主题引擎：&lsquo;</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">murrine&rsquo;&rdquo;</span></span></span><span>的报错，但未解决&ldquo;无法打开共享对象文件</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">:
</span></span></span><span>没有那个文件或目录&rdquo;的报错）：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get -y install murrine-themes</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get -y install gtk2-engines-murrine</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get -y install libgtkmm-2.4-1c2a</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get -y install libgtkmm-2.4-dev</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get -y install libcanberra-gtk-module:i386</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">3</span></span></span><span>）在</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Linux</span></span></span><span>系统下安装了</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">VMware</span></span></span><span>后打开提示</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">GCC</span></span></span><span>没有找到的解决方法
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">[GNU
C Compiler (gcc) version 7.4.0 was not found.]</span></span></span></p>
<p class="cjk"><img src="https://img2018.cnblogs.com/i-beta/1325651/201911/1325651-20191111115524179-16443053.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;解决方法：安装<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">GCC</span></span>。</p>
<p class="cjk"><span>在终端中执行以下三条命令：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
add-apt-repository ppa:graphics-drivers/ppa</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get update</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">sudo
apt-get install build-essential</span></span></span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">4</span></span></span><span>）另一个问题未解决：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Before
You Can Run Vmware, Several Modules Must Be Compiled And Loaded Into
The Running Kernel"</span></span></span><span>。</span></p>
<p class="cjk"><img src="https://img2018.cnblogs.com/i-beta/1325651/201911/1325651-20191111115537996-1339482604.png" alt="" /></p>
<p class="cjk"><span><img src="https://img2018.cnblogs.com/i-beta/1325651/201911/1325651-20191111115557734-421399557.png" alt="" /></span></p>
<p>&nbsp;</p>
<p>&nbsp;错误日志：<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">/tmp/vmware-root/vmware-13429.log</span></span></p>
<p class="cjk"><span>里面也没有什么有价值的内容，就最后来了一句：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2019-11-03T09:19:33.609+08:00|
vthread-1| W115: Failed to build vmnet.  Failed to execute the build
command. </span></span></span>
</p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>网上查了很多资料，说是</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">linux</span></span></span><span>系统</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">kernel</span></span></span><span>版本太高，导致</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">vmware</span></span></span><span>无法识别，</span></p>
<p class="cjk"><span>想过要卸载</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">vmware14</span></span></span><span>，装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">15</span></span></span><span>版本的，卸载命令：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/usr/lib/vmware-installer/2.1.0$
sudo vmware-installer -u vmware-workstation</span></span></span></p>
<p class="cjk"><span>但是后来又找到一篇文章，决定再抢救一下，没想到成功了。</span></p>
<p class="cjk"><span>它的方法是写一个</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">shell</span></span></span><span>脚本，为</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">vmware</span></span></span><span>打补丁。</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">shell</span></span></span><span>脚本路径：
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/usr/develop/patchVM.sh</span></span></span></p>
<p class="cjk"><span>不过，重启电脑之后，又出现该问题了，每次重启电脑都要重新打补丁才行。暂时就先这么用着吧。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">5</span></span></span><span>）又遇到新的问题：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">vmware</span></span></span><span>打开虚拟机报错：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Version
mismatch with vmmon module: expecting 330.0, got 360.0.</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">You
have an incorrect version of the 'vmmon' kernel module.</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Try
reinstalling VMware Workstation.</span></span></span></p>
<p class="cjk"><img src="https://img2018.cnblogs.com/i-beta/1325651/201911/1325651-20191111115619460-772947841.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;我是在<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">ubuntu</span></span>上安装了<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">vmware14.1.2</span></span>，然后想要打开<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">win10</span></span>上用<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">vmware14.1.3</span></span>创建的虚拟机镜像，想着是不是<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">vmware</span></span>的版本不同，于是在<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">ubuntu</span></span>上卸载<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">vmware14.1.2</span></span>，重新装一个<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">vmware14.1.3</span></span>。</p>
<p class="cjk"><span>但是</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">14.1.3</span></span></span><span>还是有问题，干脆重装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">15.0.4</span></span></span><span>：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">VMware
15 Pro</span></span></span><span>序列号为：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ZA54H-4UDDH-M813Y-HYP59-N6KA4</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">YU380-68E45-089FZ-ENZZX-WP8T0</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>成功！！！</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">win10</span></span></span><span>上的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">vmware14.1.3</span></span></span><span>创建的虚拟机，可以正常运行在</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu18.04</span></span></span><span>的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">vmware15.0.4</span></span></span><span>上！！！</span></p>
<p class="cjk"><span>注：以上序列号仅供学习、研究使用！</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">12</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">vmware</span></span></span><span>中的各类软件。不用做这一步，因为</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">win</span></span></span><span>上的虚拟机镜像可以直接在</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu</span></span></span><span>上用。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">13</span></span></span><span>、查看虚拟机的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mac</span></span></span><span>地址是否有变动。</span></p>
<p class="cjk"><span>进入虚拟机，执行如下命令：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">vim
/etc/udev/rules.d/70-persistent-net.rules</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">cdh01</span></span></span><span>：当前</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mac</span></span></span><span>：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">000c
29b0 ce4d </span></span></span><span>对的</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">cdh02:
</span></span></span><span>当前</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mac</span></span></span><span>：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">00	:0C	:29	:2B	:34	:F5
</span></span></span><span>对的</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">cdh03:
</span></span></span><span>当前</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mac</span></span></span><span>：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">00	:0C	:29	:35	:2E	:E4
</span></span></span>
</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">cdh04:
</span></span></span><span>当前</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mac</span></span></span><span>：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">00	:0C	:29	:B1	:E6	:85	</span></span></span></p>
<p class="cjk"><span>小结：（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1</span></span></span><span>）虚拟机的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mac</span></span></span><span>地址没有变动。</span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>）</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu</span></span></span><span>第一次打开已存在的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">win10</span></span></span><span>中的虚拟机时，选择移动</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">(I
Moved It)</span></span></span><span>，而不是复制</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">(I
Copied It)</span></span></span><span>。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">14</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Xshell</span></span></span><span>：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">xshell</span></span></span><span>没有</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">linux</span></span></span><span>版本的，不过可以使用</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">finalShell</span></span></span><span>代替。</span></p>
<p class="cjk"><span><strong>【</strong></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">finalShell</span></span></span><span>的安装方法：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">FinalShell
Linux</span></span></span><span>版安装及教程</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">wntr
2017-06-19 17:20  28</span></span></span><span>月前
 </span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">252444
</span></span></span><span>阅读 </span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">0
</span></span></span><span>回复
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">FinalShell</span></span></span></p>
<p class="cjk"><span>该版本功能和</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">windows</span></span></span><span>版基本一样</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">,</span></span></span><span>但是主机检测和远程桌面功能由于兼容性问题暂时无法使用</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">,</span></span></span><span>以后会支持</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">.</span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">(</span></span></span><span>注意</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">,FinalShell</span></span></span><span>已经不再支持</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">32</span></span></span><span>位系统</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">)</span></span></span></p>
<p class="cjk"><span>一键安装脚本：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">rm
-f finalshell_install_linux.sh ;wget
www.hostbuf.com/downloads/finalshell_install_linux.sh;chmod +x
finalshell_install_linux.sh;./finalshell_install_linux.sh;</span></span></span></p>
<p class="cjk"><span>安装路径：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/usr/lib/FinalShell/</span></span></span></p>
<p class="cjk"><span>配置文件路径：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">/home/$USER/.finalshell/</span></span></span><span><strong>】</strong></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span>其实不用安装，因为可以直接在终端使用</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ssh</span></span></span><span>命令连接。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">15</span></span></span><span>、安装</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">gradle</span></span></span><span>。</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">IDEA</span></span></span><span>中设置好，打开</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">gradle</span></span></span><span>项目时，会自动安装。</span></p>
<p class="cjk"><img src="https://img2018.cnblogs.com/i-beta/1325651/201911/1325651-20191111115645288-1211411856.png" alt="" /></p>
<p>&nbsp;</p>
<p>16、安装redis：&nbsp;</p>
<p>参考我的另一篇博客：&nbsp;https://www.cnblogs.com/mediocreWorld/p/11247920.html&nbsp;</p>
<p>&nbsp;</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">17</span></span></span><span>、未完成，可暂缓：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Java
Decompiler</span></span></span><span>反编译工具，</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">tomcat</span></span></span><span>，</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">mysql
workbench</span></span></span><span>，</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">docker.
</span></span></span>
</p>
<p class="cjk"><br />

</p>
<p class="cjk"><br />

</p>
<p class="cjk"><a name="bm_5"></a>
<span>五、</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu</span></span></span><span>相关知识：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1</span></span></span><span>、</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">ubuntu
</span></span></span></span><span>命令挂起／休眠／模式：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">sudo
shutdown -h now</span></span></span></span><span>，</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">sudo
poweroff </span></span></span></span><span>：立刻关机；</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">sudo
shutdown -h 10</span></span></span></span><span>：
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">10</span></span></span></span><span>分钟后关机；</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">sudo
shutdown -c</span></span></span></span><span>：
取消通过</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">shutdown</span></span></span></span><span>命令设置的关机；</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">sudo
reboot</span></span></span></span><span>：立刻重启；</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">sudo
shutdown -r 10     10</span></span></span></span><span>分钟后重启；</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">sudo
shutdown -r 13:15       </span></span></span></span><span>在</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;">13:15</span></span></span></span><span>重启；</span></p>
<p class="cjk" align="left">
<span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;">sudo
pm-hibernate : </span></span></span></span></span><span>休眠，将系统状态保存到硬盘，可断电；</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;"><br />
</span><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;">sudo
pm-suspend</span></span></span></span></span><span><span style="color: #000000;">：
挂起，将系统状态保存到内存，需要给内存持续供电；</span></span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US"><span style="font-family: 'Noto Sans CJK SC', serif;"><br />
</span><span style="color: #000000;"><span style="font-family: 'Noto Sans CJK SC', serif;">sudo
pm-powersave </span></span></span></span></span><span>：省电模式；</span></p>
<p class="cjk"><span>挂起之后内存还在工作，休眠之后所有设备都停止工作。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>、</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ubuntu</span></span></span><span>中的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">super</span></span></span><span>键就是</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">windows</span></span></span><span>中的</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">win</span></span></span><span>键（窗口键）。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">3</span></span></span><span>、启动终端的快捷键：</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">CTRL
+ ALT + T</span></span></span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">4</span></span></span><span>、使用</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Ctrl+Z</span></span></span><span>将</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">vim</span></span></span><span>丢到后台之后怎么换回这个</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">Vim</span></span></span><span>继续一开始的工作，而不是去删除</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">swp</span></span></span><span>暂存档？</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">ctrl+z</span></span></span><span>是把进程挂起了，是所有进程都会这样，而不仅是</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">vim</span></span></span><span>。</span></p>
<p class="cjk"><span>解决方法：执行以下</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>个命令：</span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">1</span></span></span><span>）</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">jobs
  <span style="color: #00ff00;"> #</span></span></span></span><span style="color: #00ff00;">查看当前<span style="font-family: 'Liberation Serif', serif;"><span lang="en-US">shell</span></span>有多少个挂起的进程，前面会有个序号</span></p>
<p class="cjk"><span>（</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">2</span></span></span><span>）
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">fg
</span></span></span><span>序号   
</span><span style="font-family: 'Liberation Serif', serif; color: #00ff00;"><span lang="en-US">#</span>把那个序号的进程恢复到前台</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">5</span></span></span><span>、
</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">apt
--fix-broken install </span></span></span><span>：修正</span><span style="font-family: 'Liberation Serif', serif;"><span><span lang="en-US">apt</span></span></span><span>安装过程中的依赖错误。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><br />

</p>
<p class="cjk"><a name="bm_6"></a>
<span>六、参考文章链接：</span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://www.cnblogs.com/rouqinglangzi/p/10774309.html#_label0_0"><span>https://www.cnblogs.com/rouqinglangzi/p/10774309.html#_label0_0</span></a></span></span></span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://blog.csdn.net/helloselang92/article/details/82955560"><span>https://blog.csdn.net/helloselang92/article/details/82955560</span></a></span></span></span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><a href="https://www.cnblogs.com/masbay/articles/10745170.html"><span>https://www.cnblogs.com/masbay/articles/10745170.html</span></a></span></span></span></span></span></p>
<p class="cjk"><span style="font-family: 'Liberation Serif', serif;"><span lang="en-US"><span style="color: #000080;"><span lang="zxx"><span style="text-decoration: underline;"><span><a href="https://www.cnblogs.com/masbay/articles/10745170.html">https://www.cnblogs.com/masbay/articles/10745170.html</a>&nbsp;</span></span></span></span></span></span><span>这篇文章中的各种截图都比较详细。</span></p>
<p class="cjk"><br />

</p>
<p class="cjk"><br />

</p>]]></description></item><item><title>用svn客户端checkout时报错RA layer request failed</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/11/05/11799462.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 05 Nov 2019 08:40:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/11/05/11799462.html</guid><description><![CDATA[<p>用svn客户端checkout时报错：</p>
<p><span style="color: #ff0000;">RA layer request failed</span><br /><span style="color: #ff0000;">svn: Unable to connect to a repository at URL 'https://30.114.67.147/svn/yxpt'</span><br /><span style="color: #ff0000;">svn: OPTIONS of 'https://30.114.67.147/svn/yxpt': could not connect to server (https://30.114.67.147)</span></p>
<p>原因：</p>
<p>未知，猜想可能和公司的杀毒软件、防火墙等有关。</p>
<p>&nbsp;</p>
<p>解决方法：</p>
<p>将https方式（443端口）连接，修改为http方式（80端口）连接。</p>
<p>&nbsp;</p>]]></description></item><item><title>ubuntu的apt</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/11/02/11782426.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 02 Nov 2019 06:59:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/11/02/11782426.html</guid><description><![CDATA[<p>1.&nbsp;apt edit-sources&nbsp; <span style="color: #00ff00;">#编辑apt的源列表</span>（ 或者直接写这个命令：vim /etc/apt/sources.list ）</p>
<p>&nbsp;</p>
<p>2. apt list&nbsp; &nbsp;<span style="color: #00ff00;">#列出包含条件的包（已安装，可升级等）</span></p>
<p>&nbsp;</p>
<p><span style="color: #000000;">3.还有apt-get, apt-fast</span></p>
<p>&nbsp;</p>]]></description></item><item><title>sudo命令</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/11/01/11775981.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 01 Nov 2019 03:26:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/11/01/11775981.html</guid><description><![CDATA[<div class="para">本篇文章是给自己看的，以后忘记了可以立刻回头查看必要的内容，大家如果想要看更详细的说明文档，可参考：</div>
<div class="para"><a title="sudo_百度百科" href="https://baike.baidu.com/item/sudo/7337623?fr=aladdin" target="_blank">https://baike.baidu.com/item/sudo/7337623?fr=aladdin</a></div>
<div class="para">&nbsp;</div>
<div class="para">1. 检测是否安装了sudo（同时也能查看sudo的版本）:</div>
<div class="para">[root@localhost ~]# rpm -q sudo</div>
<div class="para">&nbsp;</div>
<div class="para">2.参数：</div>
<div class="para">
<table class="table-view log-set-param">
<tbody>
<tr>
<td align="right" valign="center" width="66">
<div class="para">-V</div>
</td>
<td align="left" valign="center" width="624">
<div class="para">显示版本编号</div>
</td>
</tr>
<tr>
<td align="right" valign="center" width="66">
<div class="para">-h</div>
</td>
<td align="left" valign="center" width="624">
<div class="para">会显示版本编号及指令的使用方式说明</div>
</td>
</tr>
<tr>
<td align="right" valign="center" width="66">
<div class="para">-l</div>
</td>
<td align="left" valign="center" width="624">
<div class="para">显示出自己（执行 sudo 的使用者）的权限</div>
</td>
</tr>
<tr>
<td align="right" valign="center" width="66">
<div class="para">-v</div>
</td>
<td align="left" valign="center" width="624">
<div class="para">因为 sudo 在第一次执行时或是在 N 分钟内没有执行（N 预设为五）会问密码，这个参数是重新做一次确认，如果超过 N 分钟，也会问密码</div>
</td>
</tr>
<tr>
<td align="right" valign="center" width="66">
<div class="para">-k</div>
</td>
<td align="left" valign="center" width="624">
<div class="para">将会强迫使用者在下一次执行 sudo 时问密码（不论有没有超过 N 分钟）</div>
</td>
</tr>
<tr>
<td align="right" valign="center" width="66">
<div class="para">-b</div>
</td>
<td align="left" valign="center" width="624">
<div class="para">将要执行的指令放在背景执行</div>
</td>
</tr>
<tr>
<td align="right" valign="center" width="66">
<div class="para">-p</div>
</td>
<td align="left" valign="center" width="624">
<div class="para">prompt 可以更改问密码的提示语，其中 %u 会代换为使用者的帐号名称， %h 会显示主机名称</div>
</td>
</tr>
<tr>
<td align="right" valign="center" width="66">
<div class="para">-u</div>
</td>
<td align="left" valign="center" width="624">
<div class="para">username/#uid 不加此参数，代表要以 root 的身份执行指令，而加了此参数，可以以 username 的身份执行指令（#uid 为该 username 的使用者号码）</div>
</td>
</tr>
<tr>
<td align="right" valign="center" width="66">
<div class="para">-i</div>
</td>
<td align="left" valign="center" width="624">
<div class="para">以目标用户身份运行一个登录，加载用户变量，并跳转到目标用户home目录。</div>
</td>
</tr>
<tr>
<td align="right" valign="center" width="66">
<div class="para">-s</div>
</td>
<td align="left" valign="center" width="624">
<div class="para">以目标用户运行，不加载用户变量，不跳转目录。</div>
<div class="para">执行环境变数中的 SHELL 所指定的 shell ，或是 /etc/passwd 里所指定的 shell</div>
</td>
</tr>
<tr>
<td align="right" valign="center" width="66">
<div class="para">-H</div>
</td>
<td align="left" valign="center" width="624">
<div class="para">将环境变数中的 HOME （家目录）指定为要变更身份的使用者家目录（如不加 -u 参数就是系统管理者 root ）</div>
</td>
</tr>
<tr>
<td align="right" valign="center" width="66">
<div class="para">command</div>
</td>
<td align="left" valign="center" width="624">
<div class="para">要以系统管理者身份（或以 -u 更改为其他人）执行的指令</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="para">&nbsp;</div>
<div class="para">3.配置sudo权限：</div>
<div class="para">利用命令：visudo</div>
<div class="para">
<div class="para">※注意：编辑sudo的配置文件/etc/sudoers是一般不要直接使用vi（vi /etc/sudoers）去编辑，因为sudoers配置有一定的语法，直接用vi编辑保存系统不会检查语法，如有错也保存了可能导致无法使用sudo工具，最好使用visudo命令去配置。虽然visudo也是调用vi去编辑，但是保存时会进行语法检查，有错会有提示。</div>
<div class="para">默认配置文件位置:/etc/sudoers：&nbsp;&nbsp;[root@localhost ~]# cat /etc/sudoers</div>
<div class="para">&nbsp;</div>
</div>
<div class="para">
<div class="para"><span style="color: #ff0000;"># User privilege specification</span></div>
<div class="para"><span style="color: #ff0000;">root ALL=(ALL) ALL</span></div>
<div class="para"><span style="color: #ff0000;"># Members of the admin group may gain root privileges</span></div>
<div class="para"><span style="color: #ff0000;">%admin ALL=(ALL) ALL</span></div>
<div class="para">下面对以上配置做简要说明：</div>
<div class="para">第一项配置的作用，是允许root用户使用sudo命令变成系统中任何其它类型的用户。第二个配置规定，管理组中的所有成员都能以root的身份执行所有命令。因此，在默认安装的Ubuntu系统中，要想作为root身份来执行命令的话，只要在sudo后面跟上欲执行的命令即可。</div>
<div class="para">我们用一个实例来详细解释/etc/sudoers文件的配置语法，请看下面的例子：</div>
<div class="para">jorge ALL=(root) /usr/bin/find, /bin/rm</div>
<div class="para">上面的第一栏规定它的适用对象：用户或组，就本例来说，它是用户jorge。此外，因为系统中的组和用户可以重名，要想指定该规则的适用对象是组而非用户的话，组对象的名称一定要用百分号%开头。</div>
<div class="para">第二栏指定该规则的适用主机。当我们在多个系统之间部署sudo环境时，这一栏格外有用，这里的ALL代表所有主机。但是，对于桌面系统或不想将sudo部署到多个系统的情况，这一栏就换成相应的主机名。</div>
<div class="para">第三栏的值放在括号内，指出第一栏规定的用户能够以何种身份来执行命令。本例中该值设为root，这意味着用户jorge能够以root用户的身份来运行后面列出的命令。该值也可以设成通配符ALL，jorge便能作为系统中的任何用户来执行列出的命令了。</div>
<div class="para">最后一栏（即/usr/bin/find,/bin/rm）是使用逗号分开的命令表，这些命令能被第一栏规定的用户以第三栏指出的身份来运行它们。本例中，该配置允许jorge作为超级用户运行/usr/bin/find和 /bin/rm这两个命令。需要指出的是，这里列出的命令一定要使用绝对路径。</div>
<div class="para">进一步：</div>
<div class="para">我们可以利用这些规则为系统创建具体的角色。例如，要让一个组负责帐户管理，你一方面不想让这些用户具备完全的root访问权限，另一方面还得让他们具有增加和删除用户的权利，那么我们可以在系统上创建一个名为accounts的组，然后把那些用户添加到这个组里。之后，再使用visudo为/etc/sudoers添加下列内容： %accounts ALL=(root) /usr/sbin/useradd,/usr/sbin/userdel, /usr/sbin/usermod</div>
<div class="para">现在好了，accounts组中的任何成员都能运行useradd、userdel和usermod命令了。如果过一段时间后，您发现该角色还需要其他工具，只要在该表的尾部将其添上就行了。这样真是方便极了！</div>
<div class="para">需要注意的是，当我们为用户定义可以运行的命令时，必须使用完整的命令路径。这样做是完全出于安全的考虑，如果我们给出的命令只是简单的userad而非/usr/sbin/useradd，那么用户有可能创建一个他自己的脚本，也叫做useradd，然后放在它的本地路径中，如此一来他就能够通过这个名为useradd的本地脚本，作为root来执行任何他想要的命令了。这是相当危险的！</div>
<div class="para">sudo命令的另一个便捷的功能，是它能够指出哪些命令在执行时不需要输入密码。这很有用，尤其是在非交互式脚本中以超级用户的身份来运行某些命令的时候。例如，想要让用户作为超级用户不必输入密码就能执行kill命令，以便用户能立刻杀死一个失控的进程。为此，在命令行前边加上NOPASSWD:属性即可。例如，可以在/etc/sudoers文件中加上下面一行，从而让jorge获得这种权力： jorge ALL=(root)NOPASSWD: /bin/kill, /usr/bin/killall</div>
<div class="para">这样一来，jorge就能运行以下命令，作为root用户来杀死失控的rm进程了。 jorge@ubuntu:~$ sudo killall rm</div>
</div>
<div class="para">&nbsp;</div>
<div class="para">切换成超级管理员的方法：</div>
<div class="para">su ,&nbsp;不跳转目录，要输入密码；</div>
<div class="para">su root&nbsp;,&nbsp;不跳转目录，要输入密码；</div>
<div class="para">sudo&nbsp;-i，加载用户变量，并跳转到目标用户home目录，不要输入密码；<br />sudo&nbsp;-s，不加载用户变量，不跳转目录，不要输入密码；</div>
<div class="para">&nbsp;</div>]]></description></item><item><title>MySQL导出数据到csv文件</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/27/11746925.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 27 Oct 2019 03:12:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/27/11746925.html</guid><description><![CDATA[<p>&nbsp;</p>
<p>select * from users</p>
<p>into&nbsp;OUTFILE 'F:/Develop/MySQL57/Uploads/users.csv'</p>
<p>CHARACTER&nbsp;SET utf8</p>
<p>FIELDS TERMINATED BY ','</p>
<p>OPTIONALLY ENCLOSED BY '"'</p>
<p>ESCAPED BY '"'</p>
<p>LINES TERMINATED BY '\r\n';</p>
<p>&nbsp;</p>
<p>说明：数据格式化：关于数据格式化的问题，需要给导出的字段传递一些参数，</p>
<p>这个参数是根据RFC4180文档设置的，该文档全称Common Format and MIME Type for Comma-Separated Values (CSV) Files，其中详细描述了CSV格式，其要点包括：</p>
<p>(1)字段之间以逗号分隔，数据行之间以\r\n分隔；</p>
<p>(2)字符串以半角双引号包围，字符串本身的双引号用两个双引号表示。</p>
<p>terminated by分隔符：意思是以什么字符作为分隔符</p>
<div>enclosed by字段括起字符<br />escaped by转义字符</div>
<div>terminated by描述字段的分隔符，默认情况下是tab字符（\t）&nbsp;<br />enclosed by描述的是字段的括起字符。<br />escaped by描述的转义字符。默认的是反斜杠（backslash：\ ）</div>
<p>&nbsp;</p>]]></description></item><item><title>MySQL导出数据到文件报错</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/27/11746900.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 27 Oct 2019 03:03:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/27/11746900.html</guid><description><![CDATA[<p>执行如下语句：</p>
<p>mysql&gt; select * from users into outfile "F:\Develop\MySQL57\Uploads\users.txt" lines terminated by "\r\n";</p>
<p>报错信息：<span style="color: #ff0000;">ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</span></p>
<p>原因：</p>
<p>MySQL的时候限制了导入与导出的目录权限，只能在规定的目录下才能导入。</p>
<p>我们需要通过下面命令查看&nbsp;secure-file-priv 当前的值是什么 ：&nbsp;</p>
<p>mysql&gt; show variables like '%secure%';<br />+--------------------------+-----------------------------+<br />| Variable_name            | Value                       |<br />+--------------------------+-----------------------------+<br />| require_secure_transport | OFF                         |<br />| secure_auth              | ON                          |<br />| secure_file_priv         | F:\Develop\MySQL57\Uploads\ |<br />+--------------------------+-----------------------------+<br />3 rows in set, 1 warning (0.00 sec)</p>
<p>&nbsp;</p>
<p>再次执行：</p>
<p>mysql&gt; select * from users into outfile "<span style="color: #ff0000;">F:/Develop/MySQL57/Uploads/</span>users.txt" lines terminated by "\r\n";<br />Query OK, 1 row affected (0.00 sec)</p>
<p>成功！</p>
<p>注意：windows和linux下，目录的分隔符<span style="color: #ff0000;">都要为 /&nbsp; ，不能为 \</span> ，否则还是报同样的错误。</p>
<p>&nbsp;</p>]]></description></item><item><title>H2知识小结</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/26/11746297.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 26 Oct 2019 15:40:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/26/11746297.html</guid><description><![CDATA[<p>1.官网：</p>
<p>&nbsp; &nbsp; http://www.h2database.com/html/main.html</p>
<p>&nbsp; &nbsp; file:///E:/Develop/H2/docs/html/tutorial.html#web_applications</p>
<p>&nbsp; &nbsp; http://www.h2database.com/javadoc/index.html</p>
<p>&nbsp; &nbsp; file:///E:/Develop/H2/docs/h2.pdf</p>
<p>&nbsp; &nbsp;&nbsp;http://www.h2database.com/javadoc/index.html</p>
<p>&nbsp;</p>
<p><code>2.JAVA中连接H2数据库的URL地址、JDBC驱动类：</code></p>
<p><code>（1）远程：jdbc:h2:tcp://localhost/~/test&nbsp; 或&nbsp;&nbsp;jdbc:h2:tcp://192.168.6.6/E:\Develop\H2\db\test</code></p>
<p>（2）本地：<code>jdbc:h2:~/test 或 jdbc:h2:E:\Develop\H2\db\test</code></p>
<p>&nbsp;JDBC Driver：&nbsp;<code>org.h2.Driver</code></p>
<p>&nbsp;</p>
<p>3.Starting the Server Tool from Command Line（启动服务端）：</p>
<pre>java -cp h2*.jar org.h2.tools.Server #启动服务端，使用默认参数</pre>
<pre>java -cp h2*.jar org.h2.tools.Server -?  #查看可用参数</pre>
<p>&nbsp; &nbsp; 也可以执行该命令启动：&nbsp; java -jar h2-1.4.200.jar&nbsp; &nbsp; &nbsp;#和上面一样，后面也可以带各种参数</p>
<p>&nbsp;</p>
<p>4. 命令行创建数据库或登录（连接）已有的数据库：（windows的cmd窗口和linux的shell窗口都一样）</p>
<p>&nbsp; &nbsp; <span style="color: #ff0000;">java -cp h2-1.4.200.jar org.h2.tools.Shell</span></p>
<p>[root@cdh04 h2]# java -cp h2-1.4.200.jar org.h2.tools.Shell</p>
<p>Welcome to H2 Shell 1.4.200 (2019-10-14)<br />Exit with Ctrl+C<br />[Enter]   jdbc:h2:~/test<br />URL       <span style="color: #ff0000;">jdbc:h2:/usr/h2/test&nbsp; <span style="color: #99cc00;">&nbsp;#此处是本地数据库，还可以连接远程数据库，如：&nbsp;</span></span><br />[Enter]   org.h2.Driver<br />Driver&nbsp; <span style="color: #99cc00;">&nbsp;#此处没有填写驱动，默认就是系统提供的模板 &ldquo;org.h2.Driver&rdquo;</span><br />[Enter]   <br />User      root<br />Password  <br />roType the same password again to confirm database creation.<br />Password  <br />Connected<br />Commands are case insensitive; SQL statements end with ';'<br />help or ?      Display this help<br />list           Toggle result list / stack trace mode<br />maxwidth       Set maximum column width (default is 100)<br />autocommit     Enable or disable autocommit<br />history        Show the last 20 statements<br />quit or exit   Close the connection and exit</p>
<p>sql&gt;&nbsp; <span style="color: #99cc00;">#到这里，说明已经连接上了，可以开始操作数据库了</span></p>
<p>注意：当连接远程数据库时，服务器端的启动数据库的命令行要加上参数&nbsp;&nbsp;<span style="color: #ff0000;">-tcpAllowOthers 或&nbsp;-webAllowOthers 或&nbsp;-pgAllowOthers<span style="color: #000000;">，如下：</span></span></p>
<p>E:\Develop\H2\bin&gt;java -jar h2-1.4.200.jar <span style="color: #ff0000;">-tcpAllowOthers</span></p>
<p>Web Console server running at http://192.168.8.5:8082 (others can connect)<br />TCP server running at tcp://192.168.8.5:9092 (others can connect)<br />PG server running at pg://192.168.8.5:5435 (only local connections)</p>
<p>E:\Develop\H2\bin&gt;java -jar h2-1.4.200.jar <span style="color: #ff0000;">-webAllowOthers&nbsp; <span style="color: #99cc00;">#只有添加这个参数，才能使用浏览器客户端访问数据库，其他都只能使用java代码或命令行的方式</span></span><br />Web Console server running at http://192.168.8.5:8082 (others can connect)<br />TCP server running at tcp://192.168.8.5:9092 (only local connections)<br />PG server running at pg://192.168.8.5:5435 (only local connections)</p>
<p>注意：当使用浏览器的客户端访问时，网址为：&nbsp;http://192.168.6.9:8082/&nbsp; （假设服务器IP为192.168.6.9），连接的参数如下截图所示：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191027000237586-1090137245.png" alt="" /></p>
<p>&nbsp;</p>
<p>注意2：若想让浏览器也允许远程连接，也可修改...\H2\src\tools\WEB-INF下的web.xml文件：</p>
<p>&lt;servlet&gt;<br />        &lt;servlet-name&gt;H2Console&lt;/servlet-name&gt;<br />        &lt;servlet-class&gt;org.h2.server.web.WebServlet&lt;/servlet-class&gt;<br />        &lt;init-param&gt;<br />            &lt;param-name&gt;webAllowOthers&lt;/param-name&gt;<br />            &lt;param-value&gt;&lt;/param-value&gt;<br />        &lt;/init-param&gt;<br />        &lt;init-param&gt;<br />            &lt;param-name&gt;trace&lt;/param-name&gt;<br />            &lt;param-value&gt;&lt;/param-value&gt;<br />        &lt;/init-param&gt;<br />        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;<br />    &lt;/servlet&gt;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>5.样例SQL脚本</p>
<p>&nbsp;</p>
<table>
<tbody>
<tr>
<td><a> 如果表存在删除它<br />    创建一个新表<br />&nbsp;&nbsp;用ID和NAME列<br />    增加新的一行<br />    增加另一行<br />    查询表<br />    改变一行数据<br />    删除一行 </a></td>
<td>DROP TABLE IF EXISTS TEST;<br />    CREATE TABLE TEST(ID INT PRIMARY KEY,<br />    &nbsp;&nbsp; NAME VARCHAR(255));<br />    INSERT INTO TEST VALUES(1, 'Hello');<br />    INSERT INTO TEST VALUES(2, 'World');<br />    SELECT * FROM TEST ORDER BY ID;<br />    UPDATE TEST SET NAME='Hi' WHERE ID=1;<br />    DELETE FROM TEST WHERE ID=2; </td>












</tr>
<tr>
<td><a>帮助 </a></td>
<td>HELP ...&nbsp;</td>












</tr>












</tbody>











</table>
<p>&nbsp;</p>
<p>6.增加数据库驱动（有空再试）：</p>
<p>可以通过添加系统环境变量H2DRIVERS 或者 CLASSPATH 来增加数据库驱动注册。例如（Windows）：要增加数据库驱动C:/Programs/hsqldb/lib/hsqldb.jar，可以增加系统环境变量H2DRIVERS并设置到C:/Programs/hsqldb/lib/hsqldb.jar。&nbsp;</p>
<p>&nbsp;</p>
<p>7.CSV (Comma Separated Values) Support（有空再看）</p>
<p>&nbsp;</p>
<p>8. 小结：启动h2的3个入口（此处是windows环境下）：</p>
<p>（1）Console（启动web控制台，通过网页连接到一个数据库，如果目标数据库不存在则创建） ：&nbsp;</p>
<p>　　　　E:\Develop\H2\bin&gt;java -jar h2-1.4.200.jar&nbsp; &nbsp;</p>
<p>　　　　等价于命令&nbsp;java -cp "h2-1.4.200.jar;%H2DRIVERS%;%CLASSPATH%" org.h2.tools.Console</p>
<p>　　　　也可直接执行h2.bat，或h2w.bat. （已经配置了环境变量H2DRIVERS=E:\Develop\H2\bin\h2-1.4.200.jar）</p>
<p>　　E:\Develop\H2\bin\h2.bat中的内容：</p>
<p>　　　　@java -cp "h2-1.4.200.jar;%H2DRIVERS%;%CLASSPATH%" org.h2.tools.Console %*<br />　　　　@if errorlevel 1 pause</p>
<p>　　E:\Develop\H2\bin\h2w.bat中的内容：</p>
<p>　　　　@start javaw -cp "h2-1.4.200.jar;%H2DRIVERS%;%CLASSPATH%" org.h2.tools.Console %*<br />　　　　@if errorlevel 1 pause</p>
<p>（2）Server（启动服务端，感觉和第一个没啥区别，就是少了一个控制台，在这个控制台上有一个按钮，一点就能打开一个用于连接数据库的网页）：&nbsp;&nbsp;</p>
<p>　　　　java -cp&nbsp;"h2-1.4.200.jar;%H2DRIVERS%;%CLASSPATH%"&nbsp;h2-1.4.200.jar org.h2.tools.Server</p>
<p>（3）Shell（命令行创建数据库或登录（连接）已有的数据库）：&nbsp;&nbsp;</p>
<p>　　　　java -cp "h2-1.4.200.jar;%H2DRIVERS%;%CLASSPATH%" h2-1.4.200.jar org.h2.tools.Shell</p>
<p>&nbsp;</p>
<p id="csv"><span style="color: #ff0000;">CSV (Comma Separated Values) Support</span></p>
<p>9. 导出CSV文件：</p>
<pre>CREATE TABLE TEST(ID INT, NAME VARCHAR);
INSERT INTO TEST VALUES(1, 'Hello'), (2, 'World');
CALL CSVWRITE('test.csv', 'SELECT * FROM TEST');</pre>
<p>10.导入CSV文件：</p>
<p>（1）导入users.csv文件内容到已存在的users表：</p>
<p>INSERT INTO USERS&nbsp;<br />SELECT * FROM <span style="color: #ff0000;">CSVREAD</span>('F:/Develop/MySQL57/Uploads/users.csv'); </p>
<p><span style="color: #ff0000;">这种方法不行</span>，有很多问题，尤其是字段类型不同导致无法导入的问题，虽然不报错，但是每次导入记录显示是0条。</p>
<p>（2）导入users.csv文件内容到数据库中还没有的users表：需要创建user表的同时，导入内容：CREATE TABLE TEST AS SELECT * FROM CSVREAD('F:/Develop/MySQL57/Uploads/test.csv');&nbsp;</p>
<pre>上面的sql语句未设置表结构，导入结果是创建了一张表，它的字段名为csv文件中第一行的内容，而且字段类型全部是VARCHAR，实际使用完全不对。<br />如果TEST表已存在，则报错：<a class="error" href="http://192.168.8.5:8082/query.do?jsessionid=178c1d78bce02ecc97358f19fd2c80af#">Table "USERS" already exists</a>。<br />
CREATE TABLE TEST(ID INT PRIMARY KEY, NAME VARCHAR(255))
    AS SELECT * FROM CSVREAD('test.csv'); 实际使用这个。<br /><br /> </pre>
<p>11. 导出、导入数据库为.sql文件（人类可读）</p>
<p>&nbsp;</p>
<p>A、导出（备份）：</p>
<p>工具：Script Tool</p>
<p>E:\Develop\H2\bin&gt;java -cp "%H2DRIVERS%" org.h2.tools.Script -url jdbc:h2:~/.halo/db/halo -user root -password root -script test.zip -options compression zip</p>
<p>解释：</p>
<p>（1）H2DRIVERS是预设的环境变量，值为&nbsp;E:\Develop\H2\bin\h2-1.4.200.jar；</p>
<p>（2）&nbsp;org.h2.tools.Script是h2-1.4.200.jar包中的一个脚本工具类，一个java类；</p>
<p>（3）-script test.zip ，是保存的脚本文件的路径，此处为相对路径，即java类所在路径，应该也可以写绝对路径；</p>
<p>（4）&nbsp;-options compression zip，设置打包为压缩文件，如果没有这个参数，则大包为 .sql文件，直接用记事本打开就能看到sql语句。</p>
<p>也可以用Script命令来备份，其实上面的org.h2.tools.Script工具类，本质上是调用了Script命令。以下是官方文档：</p>
<p>It is also possible to use the SQL command&nbsp;<code>SCRIPT</code>&nbsp;to create the backup of the database. For more information about the options, see the SQL command&nbsp;<code>SCRIPT</code>. The backup can be done remotely, however the file will be created on the server side. The built in FTP server could be used to retrieve the file from the server.</p>
<p>&nbsp;<span style="color: #ff0000;">具体以后再完善</span>。</p>
<p>&nbsp;</p>
<p>B、导入（恢复）：</p>
<p>工具：Run<em id="__mceDel">Script Tool</em></p>
<pre>java -cp "%H2DRIVERS%" org.h2.tools.RunScript -url jdbc:h2:~/.halo/db/halo -user root -password root -script test.zip -options compression zip
</pre>
<p>&nbsp;各个参数的解释同上。</p>
<p>也可以用 RunScript 命令来导入，其实<em id="__mceDel" style="font-family: 'Courier New'; font-size: 12px;">org.h2.tools.RunScript工具类，本质上是调用了 RunScript&nbsp;命令。</em></p>
<p><span style="color: #ff0000;">具体以后再完善</span>。</p>
<p>eg. mysql数据导入到h2数据库：&nbsp;</p>
<p>C:\Users\Administrator&gt;<span style="color: #ff9900;">mysqldump -h localhost -u root -proot halodb &gt; C:\Users\Administrator\.halo\db\halodb.sql</span></p>
<p>C:\Users\Administrator&gt;<span style="color: #ff9900;">java -cp "%H2DRIVERS%" org.h2.tools.RunScript -url jdbc:h2:~/.halo/db/halo -user root -password root -script ~/.halo/db/halodb.sql</span></p>
<p>&nbsp;</p>
<p>12. 导出、导入数据库为.zip文件（人类不可读）</p>
<p><code>可以用 Backup</code>&nbsp;命令。<span style="color: #ff0000;">具体以后再完善</span>。</p>
<p>&nbsp;</p>
<p>13.</p>
<p>&nbsp;</p>]]></description></item><item><title>todo</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/25/11741257.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 25 Oct 2019 14:43:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/25/11741257.html</guid><description><![CDATA[<p>1.搭建单词本，并设置为外网访问；</p>
<p>2.搭建博客系统，并设置为外网访问；</p>
<p>3.将博客园上的博客都抓取下来，放到自己的博客系统中。</p>
<p>4.H2看到：导出、导入数据库。</p>
<p>5.h2疑问： Adding Database Drivers，比如添加mysql驱动。</p>
<p>6.复习SpringBoot教程。</p>
<p>7.翻译各类英文文档：但是要注明出处、原作者，并说明如果侵权请联系我，立刻删除。看英文文档之前，一定要先浏览其大纲，确定是自己需要的，否则很容易无用功，毕竟英文不是母语。比如，springboot和gradle的英文用户文档，真是有点反人类。看英文没有中文顺畅，这个不用说，正常，还好的；在讲到如何用gradle部署项目时，直接给一个gradle plugin说明文档的链接，又是一大堆的从头到尾的说明文档，而且里面还有类似的链接，真是奔溃。而且文档完全违反人类学习的规律，虽然它是一个教程，不是API，但是说实话，学起来比较累，开头一段简直莫名其妙，后来看了其他中文教程，两边对比，才知道它在说build.gradle配置文件中的配置内容。第三，我只是粗略看看，为了更好理解博客系统的架构，它这从头到尾的教程，没必要。当然，不能一棒子打死所有，以后也许会遇到比较人性化的教程。</p>]]></description></item><item><title>Update(Stage5)：DMP项目_业务介绍_框架搭建</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/25/11736547.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 25 Oct 2019 02:12:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/25/11736547.html</guid><description><![CDATA[<h1 style="box-sizing: border-box; font-size: 2.75em; margin: 1em 0px 0.5em; padding: 0px; direction: ltr; font-family: 'Open Sans', 'DejaVu Sans', sans-serif; font-weight: 300; color: #ba3925; text-rendering: optimizeLegibility; line-height: 1.2; word-spacing: -0.05em; letter-spacing: -0.01em;">DMP (Data Management Platform)</h1>
<div id="preamble" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; color: rgba(0, 0, 0, 0.8); font-family: 'Noto Serif', 'DejaVu Serif', serif; font-size: 16px;">
<div class="sectionbody" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="title" style="box-sizing: border-box; margin: 0px 0px 0.25em; padding: 0px; direction: ltr; line-height: 1.45; color: #7a2518; text-rendering: optimizeLegibility; font-size: 1rem; font-style: italic;">导读</div>
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">整个课程的内容大致分为如下两个部分</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">业务介绍</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">技术实现</p>
</li>
</ul>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">对于业务介绍, 比较困难的是理解广告交易过程中各个参与者是干什么的</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">对于技术实现, 大致就是如下两个步骤</p>
</div>
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 1.25em 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">报表</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">标签化</p>
</li>
</ol></div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">报表显而易见, 就是查看数据的组成, 查看数据的图形直观特征</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">标签化是整个项目的目的, 最终其实就要根据标签筛选用户, 但是对于标签化还是有很多东西要做的, 如下</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">商圈库</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">打标签</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">统一用户识别</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">标签合并 &amp; 衰减</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">历史合并</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div id="toc" class="toc" style="box-sizing: border-box; margin: 0px; padding: 0px 0px 0.5em; direction: ltr; border-bottom: 1px solid #e7e7e9;">
<div id="toctitle" style="box-sizing: border-box; margin: 1em 0px 0.5em; padding: 0px; direction: ltr; font-family: 'Open Sans', 'DejaVu Sans', sans-serif; color: #7a2518; text-rendering: optimizeLegibility; line-height: 1.2; font-size: 1.375em; word-spacing: -0.05em;">Table of Contents</div>
<ul class="sectlevel1" style="box-sizing: border-box; margin: 0px 0px 1.25em 0.125em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: 'Open Sans', 'DejaVu Sans', sans-serif; list-style-type: none;">
<li style="box-sizing: border-box; margin-top: 0.3334em; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr; line-height: 1.3334;"><a style="box-sizing: border-box; background: transparent; color: #2156a5; text-decoration-line: none; line-height: inherit;" href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day03/DMP.html#_1_项目介绍">1. 项目介绍</a>
<ul class="sectlevel2" style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; list-style-type: none;">
<li style="box-sizing: border-box; margin-top: 0.3334em; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr; line-height: 1.3334;"><a style="box-sizing: border-box; background: transparent; color: #2156a5; text-decoration-line: none; line-height: inherit;" href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day03/DMP.html#_1_1_广告业务背景">1.1. 广告业务背景</a></li>
<li style="box-sizing: border-box; margin-top: 0.3334em; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr; line-height: 1.3334;"><a style="box-sizing: border-box; background: transparent; color: #2156a5; text-decoration-line: none; line-height: inherit;" href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day03/DMP.html#_1_2_技术方案">1.2. 技术方案</a></li>
</ul>
</li>
<li style="box-sizing: border-box; margin-top: 0.3334em; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr; line-height: 1.3334;"><a style="box-sizing: border-box; background: transparent; color: #2156a5; text-decoration-line: none; line-height: inherit;" href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day03/DMP.html#_2_工程创建和框架搭建">2. 工程创建和框架搭建</a></li>
<li style="box-sizing: border-box; margin-top: 0.3334em; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr; line-height: 1.3334;"><a style="box-sizing: border-box; background: transparent; color: #2156a5; text-decoration-line: none; line-height: inherit;" href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day03/DMP.html#_3_将数据集中的_ip_转为地域信息">3. 将数据集中的 IP 转为地域信息</a></li>
</ul>
</div>
</div>
<div class="sect1" style="box-sizing: border-box; margin: 0px; padding: 0px 0px 1.25em; direction: ltr; color: rgba(0, 0, 0, 0.8); font-family: 'Noto Serif', 'DejaVu Serif', serif; font-size: 16px;">
<h2 id="_1_项目介绍" style="box-sizing: border-box; margin: 1em 0px 0.5em; padding: 0px; direction: ltr; font-family: 'Open Sans', 'DejaVu Sans', sans-serif; font-weight: 300; color: #ba3925; text-rendering: optimizeLegibility; line-height: 1.2; font-size: 2.3125em; word-spacing: -0.05em; letter-spacing: -0.01em;">1. 项目介绍</h2>
<div class="sectionbody" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="title" style="box-sizing: border-box; margin: 0px 0px 0.25em; padding: 0px; direction: ltr; line-height: 1.45; color: #7a2518; text-rendering: optimizeLegibility; font-size: 1rem; font-style: italic;">导读</div>
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">背景介绍</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;的作用和实现方式</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">技术方案</p>
</li>
</ol></div>
</div>
</div>
<div class="sect2" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<h3 id="_1_1_广告业务背景" style="box-sizing: border-box; margin: 1em 0px 0.5em; padding: 0px; direction: ltr; font-family: 'Open Sans', 'DejaVu Sans', sans-serif; font-weight: 300; color: #ba3925; text-rendering: optimizeLegibility; line-height: 1.2; font-size: 1.6875em; word-spacing: -0.05em;">1.1. 广告业务背景</h3>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="title" style="box-sizing: border-box; margin: 0px 0px 0.25em; padding: 0px; direction: ltr; line-height: 1.45; color: #7a2518; text-rendering: optimizeLegibility; font-size: 1rem; font-style: italic;">导读</div>
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">互联网管广告发展至今, 产生了很多非常复杂的概念, 其中环环交错, 不容易理清, 这一章节的主要目的就是尽可能的理清楚整体上的流程, 各个环节的作用</p>
</div>
</div>
</div>
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 1</code>: 广告主, 广告商, 媒体</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613150210.png" alt="20190613150210" /></div>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">简单来说就是要发广告的机构和个人</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告商</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告商是中介, 对接广告主和媒体, 广告主告诉广告商我要发广告, 广告商找到媒体进行谈判</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">媒体</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">比如说微博, 腾讯, 美团这样的应用和网站, 就是媒体, 它们具有广告展示的位置, 用户在使用这些服务的同时会看到各样的广告</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">受众</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">普通的用户, 在享受免费的服务的同时, 被动的接受广告</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">但是受众是有不同类型的, 可以由标签来表示, 比如说白领, 女性,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">20 - 30</code>&nbsp;岁等</p>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 2</code>: 小媒体和广告网络</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">刚才的结构中有一个非常明显的问题</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">小媒体有很多</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">不只有微博腾讯这些媒体, 还有很多其它的垂直小媒体, 比如说一些软件网站, 一些小型的App, 甚至前阵子比较流行的游戏消灭病毒等, 都是小型的媒体</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主倾向于让更多人看到广告</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主就倾向于让更多人看到广告, 而且也为了避免麻烦, 所以会找一些大型的媒体来谈合作</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">但是往往一些小媒体因为更加垂直, 其用户可能更加的精准, 购买意愿也非常好</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">小媒体的议价能力非常有限</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">虽然小媒体有小媒体的好处, 但是小媒体太过零散, 如果只是一个小媒体的话, 很难去洽谈出一个比较好的合作</p>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">所以小媒体也是要赚钱的, 这个领域其实是一个很大的盘子, 一定会有人为小媒体提供服务, 这种产品, 我们称之为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>, 广告网络</p>
</div>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613162139.png" alt="20190613162139" /></div>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;提供如下的服务</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">为广告主提供统一的界面</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">联络多家媒体, 行成为统一的定价从而销售</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 3</code>:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code></dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">虽然有&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;的引入, 但是很快又会有新的问题</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;不止一家</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">就如同会有很多小媒体, 广告主不知道如何选择一样,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;是一种商业模式, 也会有很多玩家, 广告主依然面临这种选择困难</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">小媒体们会选择不同的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code></p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">每个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;之间, 定价策略可能不同, 旗下的小媒体也可能不同, 其实最终广告主是要选择一个靠谱的网站来进行广告展示的, 那么这里就存在一些信息不对称, 如何选择靠谱的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;从而选择靠谱的媒体呢</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;之间可能存在拆借现象</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">某一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;可能会有一个比较好的资源, 但是一直没卖出去, 而另外一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;可能恰好需要用到这个资源, 所以&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;之间可能会有一些拆借显现, 这就让这个市场愈加混乱</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">媒体可能对&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;的定价策略颇有微词</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;背后有很多媒体, 但是整个定价策略是由&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;来制定的, 虽然&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;往往是非常精密的计算模型, 但是媒体依然可能会感觉自己没有赚到钱</p>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">所以滋生了另外一种业务, 叫做&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>, 广告交易平台, 从而试图去从上层再统一一下</p>
</div>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613165151.png" alt="20190613165151" /></div>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">所以,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;虽然看起来和&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;非常类似, 但是本质上是不同的, 其有以下特点</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;不仅会联系&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>, 也会联系一下小媒体</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">甚至有时候&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;也会找&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;发布广告需求</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;会提供实时的交易定价, 弥补了&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;独立定价的弊端</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 4</code>:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;实时竞价</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">本节并不是针对&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;的缺陷引入新的话题, 而是针对&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;中的一个定价特点进行详细的说明</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;和&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;最大的不同可能要数&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;的定价方式了,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;的定价方式是一种事实的定价方式, 其实非常类似于股票的撮合交易</p>
</div>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613170128.png" alt="20190613170128" /></div>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">整个过程的步骤大致如下:</p>
</div>
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 1.25em 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">媒体发起广告请求给&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;系统, 请求广告进行展示</p>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613171716.png" alt="20190613171716" /></div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主根据自己需求决定是否竞价, 以及自己的出价</p>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613171747.png" alt="20190613171747" /></div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">会有多个广告主同时出价, 价高者得</p>
<div class="imageblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613171854.png" alt="20190613171854" /></div>
</div>
</li>
</ol></div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">这样,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;就能尽可能的让广告的展示价格更透明更公平,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;得到自己响应的佣金, 媒体得到最大化的广告费, 看起来皆大欢喜, 但是真的是这样吗?</p>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 5</code>: 广告主如何竞价?</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">一切看起来都很好, 如果你站在媒体角度的话, 但是如果你站在广告主的角度上来看, 广告主可能会有两种抱怨</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主并不是专业从业者</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主可能会觉得, 你跟我闹呢, 我知道不知道怎么出价你心里每一点数?</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">确实, 作为金主, 不能太过为难他们, 每次交易都让广告主出价, 无异于逼迫广告主转投他家</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主的诉求是投放广告给恰好有需求的人, 而不是看起来好像很酷的媒体</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">我们讨论到现在, 所有的假设都是基于广告主知道自己该找什么样的媒体投放什么样的广告, 这种假设明显是不成立的, 如果考虑广告主的诉求, 其非常简单, 在同等价格内, 广告效果要好, 所以广告主更关心的事情是你是否让合适的人看到了这些广告</p>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">所以,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;应运而生,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;全称叫做需求方平台, 主要负责和&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;交互, 辅助广告主进行实时竞价</p>
</div>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613173747.png" alt="20190613173747" /></div>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;帮助广告主进行&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;中的出价</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;不仅只是出价,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;帮助广告主全面的进行广告服务, 例如广告主只需要告诉&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;自己对什么类型的受众感兴趣,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>会帮助广告主进行受众筛选</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 6</code>:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code></dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;最重要的特性是, 能够帮助广告主筛选客户, 换句话说,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;出现之前广告主针对媒体上的广告位进行广告投放,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;出现之后, 广告主针对自己想要的目标受众投放广告, 这几乎是一个质的效率提升</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主现在可以针对一些受众的标签来进行广告投放了, 比如说, 一个广告主是卖化妆品的, 他要投放广告给有如下三个标签的用户们,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">20</code>&nbsp;岁上下, 女性, 时尚人士, 现在就可以针对这三个标签来告诉&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;如何筛选用户了</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">但是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;如何进行用户识别呢?&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;如何知道谁是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">20</code>&nbsp;岁上下, 女性, 时尚人士?&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;可以自己做, 也可以依赖于第三方. 这个标签化的数据管理项目, 就叫做&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>, 全称叫做&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Data Management Platform</code>, 即数据管理平台.</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">DMP 所负责的内容非常重要的有两点</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">收集用户数据</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">常见的收集方式主要有两种</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">通过自身的服务和程序进行收集, 例如微博和腾讯有巨大的用户量, 他们自己就可以针对自己的用户进行分析</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">通过合作而来的一些数据, 这部分在合规范围内, 一般大型的网站或者&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">App</code>&nbsp;会通过一些不会泄漏用户隐私的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code>&nbsp;来标识用户, 给第三方&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;合作使用</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">通过一些不正当的手段获得, 例如说在某网站上传伪装成图片的脚本, 从而获取本网站的用户&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Cookie</code>, 这部分涉及一些黑产, 不再详细说明,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">315</code>&nbsp;晚会也曾经报道过</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">为用户打上标签</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;主要通过标签筛选用户, 所以&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;要通过一些大数据的工具来将用户数据打上标签, 这部分其实挺难, 有可能要涉及一些机器学习的算法, 或者图计算</p>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613180723.png" alt="20190613180723" /></div>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Ps.</code>&nbsp;整个链条中的参与者</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613183606.png" alt="20190613183606" /></div>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<h3 id="_1_2_技术方案" style="box-sizing: border-box; margin: 1em 0px 0.5em; padding: 0px; direction: ltr; font-family: 'Open Sans', 'DejaVu Sans', sans-serif; font-weight: 300; color: #ba3925; text-rendering: optimizeLegibility; line-height: 1.2; font-size: 1.6875em; word-spacing: -0.05em;">1.2. 技术方案</h3>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="title" style="box-sizing: border-box; margin: 0px 0px 0.25em; padding: 0px; direction: ltr; line-height: 1.45; color: #7a2518; text-rendering: optimizeLegibility; font-size: 1rem; font-style: italic;">导读</div>
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;的主要任务</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">技术方案</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;">技术方案</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613192400.png" alt="20190613192400" /></div>
</div>
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">从目的上看,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;系统可能会有如下的事情要做</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">通过可视化和笔记工具进行数据分析和测试</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">一般会使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Zeppelin</code>&nbsp;等工具进行测试和数据探索</p>
</div>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190614014030.png" alt="20190614014030" width="600" /></div>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">向&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;提供数据服务</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">一般对外提供数据, 是以接口的形式提供的, 例如提供一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Http GET</code>&nbsp;接口给&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;可以调用这个接口实现查询</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">接口一般使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spring</code>&nbsp;之类的框架编写&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Http</code>&nbsp;服务实现</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">这种接口在访问数据库的时候, 就是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">OLTP</code>&nbsp;形式了, 要尽快的获取数据,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;和&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">HBase</code>&nbsp;较为合适</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">通过可视化内部展示运营数据</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在运营过程中, 产品方可能需要时刻监控运营的一些指标, 例如注册率, 使用率, 接口调用次数等</p>
</div>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190614014138.png" alt="20190614014138" width="600" /></div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">从工程的视角上来看,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;的工程分为如下几个部分</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; border-color: #dedede; width: 840px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">工程</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">类型</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">作用</th></tr>
</thead>
<tbody style="box-sizing: border-box; margin-bottom: 0px;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dmp</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IDEA Project</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;项目的主工程, 编写具体的代码</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dmp_report</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Zeppelin Notebook</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Zeppeline</code>&nbsp;的一个笔记, 负责展示&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;进行数据探索和分析时所产生的报表</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dmp_analysis</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Zeppelin Notebook</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Zeppeline</code>&nbsp;的一个笔记, 负责进行&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;数据的探索, 从中不断试探发现经验</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">真实开发的时候可能遵循如下步骤</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; border-color: #dedede; width: 840px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">序号</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">环境</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">存储</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">对应工程</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">描述</th></tr>
</thead>
<tbody style="box-sizing: border-box; margin-bottom: 0px;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">测试</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;测试</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dmp_analysis</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">先对数据进行探索, 得出规律</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">测试</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;测试</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dmp_report</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">归纳数据特征和规律, 通过报表展示</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">3</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">生产</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;生产</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IDEA dmp project</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">对数据充分理解后, 编写代码进行&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ETL</code>&nbsp;操作, 并使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Oozie</code>&nbsp;等工具进行调度执行, 处理过的数据落地到&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;表中</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">4</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">生产</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;生产</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IDEA dmp project</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">生产中的数据已经经过清洗, 此时可以编写代码进行标签库等一系列的数据分析和挖掘任务, 并将结果落地到&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ElasticSearch</code>&nbsp;中, 向&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;提供服务</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">5</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">生产</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;生产</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IDEA dmp project</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在运营过程中, 会产生一些运营指标, 可以针对运营指标进行数据分析和可视化, 提供给产品部分追踪运营状况. 此步骤应该通过&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">EChats</code>&nbsp;等工具在后台系统中进行可视化, 使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SQL</code>&nbsp;来分析数据</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd></dl></div>
<div class="admonitionblock note" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<table style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: none; border-width: 0px; border-style: initial; border-color: initial; width: 900px;">
<tbody style="box-sizing: border-box;">
<tr style="box-sizing: border-box;">
<td class="icon" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; text-align: center; width: 80px;">&nbsp;</td>
<td class="content" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 1.25em 0.5625em 1.125em; direction: ltr; font-size: 1em; color: rgba(0, 0, 0, 0.6); line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em; border-left-color: #dddddf;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">数据会不断的来, 所以数据的清洗和&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ETL</code>&nbsp;过程是不断重复进行的</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ETL</code>&nbsp;会不断的产生新的洁净数据, 所以标签库也是不断重复进行的</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">运营不断继续,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ETL</code>&nbsp;也不断继续, 所以报表也要周期性提供</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">根据任务的情况和目的不同, 这个周期有可能是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;天,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">12</code>&nbsp;小时,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;个月等</p>
</li>
</ul>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;的主要任务</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/1554645748023.png" alt="1554645748023" width="900" /></div>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在我们这个学习项目中, 大家只需要了解围绕这个 DMP 有什么样的项目, 以及整体的过程和团队需要做的事情, 但是我们还是要把主要目标放在核心业务上, 我们在整个项目中将学习到如下一些内容</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">报表生成</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">标签化以及标签化相关的一系列处理</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;">数据集生成</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613210828.png" alt="20190613210828" /></div>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">这份数据集生成的步骤有如下</p>
</div>
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">收集数据</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">数据来自于以往的竞价记录和收集到的用户数据</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">竞价记录来自于以往的交易</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">用户数据有可能来自第三方, 也有可能是自己收集(可能性比较小)</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">合并多个数据源的数据</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">因为在进行针对 DMP 的数据分析时, 需要用到用户的数据来判定用户的喜好, 也需要竞价数据来判定价格是否合适, 所以需要将这两部分数据合并起来, 再进行数据处理和分析</p>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;">数据集概况</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">数据集是一个 JSON Line 文件, 其中有三千条数据, 每一条数据都是一个独立的 JSON 字符串, 大概长如下样子</p>
</div>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613212015.png" alt="20190613212015" width="400" /></div>
</div>
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; margin-bottom: 1.25em; border-color: #dedede; width: 900px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">字段</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">解释</th></tr>
</thead>
<tbody style="box-sizing: border-box; margin-bottom: 0px;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备的真实&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">sessionid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">会话标识</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">advertisersid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adorderid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adcreativeid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告创意&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">&gt;= 200000</code>&nbsp;:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">&lt; 200000</code>&nbsp;:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">OSS</code></p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adplatformproviderid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告平台商&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">&gt;= 100000</code>&nbsp;:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">rtb</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">&lt; 100000</code>&nbsp;:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">api</code></p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">sdkversionnumber</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SDK</code>&nbsp;版本号</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adplatformkey</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">平台商&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Key</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">putinmodeltype</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">针对广告主的投放模式</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;: 展示量投放</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code>&nbsp;: 点击量投放</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">requestmode</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">数据请求方式</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;: 请求</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code>&nbsp;: 展示</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">3</code>&nbsp;: 点击</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adprice</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告价格</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adppprice</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">平台商价格</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">requestdate</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">请求时间, 格式为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">yyyy-m-dd hh:mm:ss</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">appid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">应用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">appname</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">应用名称</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">uuid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备唯一标识, 比如&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IMEI</code>&nbsp;或者&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AndroidID</code>&nbsp;等</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">device</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备型号, 如&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Huawei</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">iPhone</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">client</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备类型</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Android</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code>&nbsp;:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">iOS</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">3</code>&nbsp;:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">WP</code></p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">osversion</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备操作系统版本, 如&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">4.0</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">density</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">备屏幕的密度</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Android</code>&nbsp;的取值为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">0.75</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1.5</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">iOS</code>&nbsp;的取值为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code></p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">pw</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备屏幕宽度</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ph</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备屏幕高度</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">longitude</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备所在经度</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">lat</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备所在纬度</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">provincename</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备所在省份名称</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">cityname</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备所在城市名称</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ispid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">运营商&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ispname</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">运营商名称</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">networkmannerid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">联网方式&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 1.25em 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">4G</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">3G</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2G</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">OperatorOther</code></p>
</li>
</ol></div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">networkmannername</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">联网方式名称</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">iseffective</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">是否可以正常计费</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">0</code>&nbsp;: 不行</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;: 可以</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">isbilling</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">是否收费</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">0</code>&nbsp;: 未收费</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;: 已收费</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adspacetype</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告位类型</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Banner</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code>&nbsp;: 插屏</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">3</code>&nbsp;: 全屏</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adspacetypename</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告位类型名称, 如&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Banner</code>, 插屏, 全屏</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">devicetype</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备类型（1：手机 2：平板）</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;: 手机</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code>&nbsp;: 平板</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">processnode</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">流程节点</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;: 请求量&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KPI</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code>&nbsp;: 有效请求</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">3</code>&nbsp;: 广告请求</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">apptype</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">应用类型&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">district</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备所在县名称</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">paymode</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">针对平台商的支付模式</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;: 展示量投放, CPM</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code>&nbsp;: 点击量投放, CPC</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">isbid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">是否是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">bidprice</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;竞价价格</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">winprice</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;竞价成功价格</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">iswin</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">是否竞价成功</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">cur</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">结算币种,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">USD</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RMB</code>&nbsp;等</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">rate</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">汇率</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">cnywinprice</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;竞价成功转换成人民币的价格</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">imei</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">手机串码</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">mac</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">手机&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">MAC</code>&nbsp;地址</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">idfa</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">手机&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">APP</code>&nbsp;的广告码</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">openudid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">苹果设备的识别码</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">androidid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">安卓设备的识别码</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">rtbprovince</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;省</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">rtbcity</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;市</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">rtbdistrict</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;区</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">rtbstreet</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;街道</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">storeurl</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">APP</code>&nbsp;的市场下载地址</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">realip</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">真实&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">isqualityapp</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">优选标识</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">bidfloor</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">底价</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">aw</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告位的宽</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ah</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告位的高</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">imeimd5</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IMEI</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">MD5</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">macmd5</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">MAC</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">MD5</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">idfamd5</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IDFA</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">MD5</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">openudidmd5</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">OpenUDID</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">MD5</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">androididmd5</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AndroidID</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">MD5</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">imeisha1</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IMEI</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SHA-1</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">macsha1</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">MAC</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SHA-1</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">idfasha1</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IDFA</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SHA-1</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">openudidsha1</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">OpenUDID</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SHA-1</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">androididsha1</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AndroidID</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SHA-1</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">uuidunknow</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">UUID</code>&nbsp;的密文</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">userid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">平台用户&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">iptype</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">表示&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;库类型</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;: 为点媒&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;库</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code>&nbsp;: 为广告协会的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;地理信息标准库</p>
</li>
</ul>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">默认为1</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">initbidprice</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">初始出价</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adpayment</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">转换后的广告消费 (保留小数点后&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">6</code>&nbsp;位)</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">agentrate</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">代理商利润率</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">lomarkrate</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">代理利润率</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adxrate</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">媒介利润率</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">title</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">标题</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">keywords</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">关键字</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">tagid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告位标识 (当视频流量时值为视频&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code>&nbsp;号)</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">callbackdate</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">回调时间, 格式为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">yyyy/MM/dd hh:mm:ss</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">channelid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">频道&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">mediatype</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">媒体类型</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">email</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">用户邮箱</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">tel</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">用户电话号码</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">sex</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">用户性别</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">age</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">用户年龄</p>
</div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd></dl></div>
</div>
</div>
</div>
<div class="sect1" style="box-sizing: border-box; margin: 0px; padding: 0px 0px 1.25em; direction: ltr; border-top: 1px solid #e7e7e9; color: rgba(0, 0, 0, 0.8); font-family: 'Noto Serif', 'DejaVu Serif', serif; font-size: 16px;">
<h2 id="_2_工程创建和框架搭建" style="box-sizing: border-box; margin: 1em 0px 0.5em; padding: 0px; direction: ltr; font-family: 'Open Sans', 'DejaVu Sans', sans-serif; font-weight: 300; color: #ba3925; text-rendering: optimizeLegibility; line-height: 1.2; font-size: 2.3125em; word-spacing: -0.05em; letter-spacing: -0.01em;">2. 工程创建和框架搭建</h2>
<div class="sectionbody" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="title" style="box-sizing: border-box; margin: 0px 0px 0.25em; padding: 0px; direction: ltr; line-height: 1.45; color: #7a2518; text-rendering: optimizeLegibility; font-size: 1rem; font-style: italic;">导读</div>
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建工程</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">搭建框架</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">建立配置框架</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 1</code>: 创建工程</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">已经到最后一个阶段了, 不再详细说工程如何创建了, 看一下步骤即可</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IDEA</code>&nbsp;创建&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Maven</code>&nbsp;工程, 选择存储位置</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">工程命名为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dmp</code>, 注意工程名一般小写, 大家也可以采用自己喜欢的命名方式, 在公司里, 要采用公司的习惯</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">导入&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Maven</code>&nbsp;依赖</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Scala</code>&nbsp;代码目录</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建对应的包们</p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">创建需要的包</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; border-color: #dedede; width: 840px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">包名</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">描述</th></tr>
</thead>
<tbody style="box-sizing: border-box; margin-bottom: 0px;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">com.itheima.dmp.etl</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">放置数据转换任务</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">com.itheima.dmp.report</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">放置报表任务</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">com.itheima.dmp.tags</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">放置标签有关的任务</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">com.itheima.dmp.utils</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">放置一些通用公用的类</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">导入需要的依赖</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;中, 暂时先不提供完整的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Maven POM</code>&nbsp;文件, 在一开始只导入必备的, 随着项目的进程, 用到什么再导入什么, 以下是必备的</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;全家桶</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;一套</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Scala</code>&nbsp;依赖</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SLF4J</code>&nbsp;日志依赖</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Junit</code>&nbsp;单元测试</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Java</code>&nbsp;编译插件</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Scala</code>&nbsp;编译插件</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Uber Jar</code>&nbsp;编译插件&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Shade</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">CDH Repo</code>&nbsp;仓库, 需要一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">CDH</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Maven</code>&nbsp;仓库配置是因为用到&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">CDH</code>&nbsp;版本的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code></p>
</li>
</ul>
</div>
<div class="listingblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-xml hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="xml"><span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">properties</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">scala.version</span>&gt;</span>2.11.8<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">scala.version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">spark.version</span>&gt;</span>2.2.0<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">spark.version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">hadoopo.version</span>&gt;</span>2.6.1<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">hadoopo.version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">kudu.version</span>&gt;</span>1.7.0-cdh5.16.0<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">kudu.version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">maven.version</span>&gt;</span>3.5.1<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">maven.version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">junit.version</span>&gt;</span>4.12<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">junit.version</span>&gt;</span>
<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">properties</span>&gt;</span>

<span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependencies</span>&gt;</span>
    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">&lt;!-- Spark --&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.scala-lang<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>scala-library<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>${scala.version}<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.apache.spark<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>spark-core_2.11<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>${spark.version}<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.apache.spark<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>spark-sql_2.11<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>${spark.version}<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.apache.spark<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>spark-hive_2.11<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>${spark.version}<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.apache.hadoop<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>hadoop-client<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>${hadoopo.version}<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>

    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">&lt;!-- Kudu client --&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.apache.kudu<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>kudu-client<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>1.7.0-cdh5.16.1<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>

    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">&lt;!-- Kudu Spark --&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.apache.kudu<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>kudu-spark2_2.11<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>1.7.0-cdh5.16.1<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>

    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">&lt;!-- Logging --&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>slf4j-simple<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>1.7.12<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>

    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">&lt;!-- Unit testing --&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>junit<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>junit<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>${junit.version}<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">scope</span>&gt;</span>provided<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">scope</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependencies</span>&gt;</span>

<span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">build</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">sourceDirectory</span>&gt;</span>src/main/scala<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">sourceDirectory</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">testSourceDirectory</span>&gt;</span>src/test/scala<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">testSourceDirectory</span>&gt;</span>

    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">plugins</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">plugin</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>${maven.version}<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">configuration</span>&gt;</span>
                <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">source</span>&gt;</span>1.8<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">source</span>&gt;</span>
                <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">target</span>&gt;</span>1.8<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">target</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">configuration</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">plugin</span>&gt;</span>

        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">plugin</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>net.alchim31.maven<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>scala-maven-plugin<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>3.2.0<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">executions</span>&gt;</span>
                <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">execution</span>&gt;</span>
                    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goals</span>&gt;</span>
                        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goal</span>&gt;</span>compile<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goal</span>&gt;</span>
                        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goal</span>&gt;</span>testCompile<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goal</span>&gt;</span>
                    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goals</span>&gt;</span>
                    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">configuration</span>&gt;</span>
                        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">args</span>&gt;</span>
                            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">arg</span>&gt;</span>-dependencyfile<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">arg</span>&gt;</span>
                            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">arg</span>&gt;</span>${project.build.directory}/.scala_dependencies<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">arg</span>&gt;</span>
                        <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">args</span>&gt;</span>
                    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">configuration</span>&gt;</span>
                <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">execution</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">executions</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">plugin</span>&gt;</span>

        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">plugin</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>2.4<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">executions</span>&gt;</span>
                <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">execution</span>&gt;</span>
                    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">phase</span>&gt;</span>package<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">phase</span>&gt;</span>
                    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goals</span>&gt;</span>
                        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goal</span>&gt;</span>shade<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goal</span>&gt;</span>
                    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goals</span>&gt;</span>
                <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">execution</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">executions</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">plugin</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">plugins</span>&gt;</span>
<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">build</span>&gt;</span>

<span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">repositories</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">repository</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">id</span>&gt;</span>cdh.repo<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">id</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">name</span>&gt;</span>Cloudera Repositories<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">name</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">url</span>&gt;</span>https://repository.cloudera.com/artifactory/cloudera-repos<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">url</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">snapshots</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">enabled</span>&gt;</span>false<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">enabled</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">snapshots</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">repository</span>&gt;</span>
<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">repositories</span>&gt;</span></code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 2</code>: 框架搭建</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">编写&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;程序的时候, 往往不需要一个非常复杂的框架, 只是对一些基础内容的抽象和封装即可, 但是也要考虑如下问题</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有哪些任务是要执行的</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在做一个项目的时候, 尽量从全局的角度去看, 要考虑到周边的一些环境, 例如说回答自己如下几个问题</p>
</div>
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; margin-bottom: 1.25em; border-color: #dedede; width: 876px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">问题</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">初步分析和解答</th></tr>
</thead>
<tbody style="box-sizing: border-box;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">这个应用有几个入口</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">这个程序的入口数量是不确定的, 随着工作的进展而变化, 但是至少要有两个入口, 一个是生成报表数据, 一个是处理用户的标签数据</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">这个应用会放在什么地方执行</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">分为测试和生产, 测试可以直接使用 IDEA 执行, 生成需要打包并发送到集群执行</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">这个应用如何调度</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">这个应用包含了不止一个任务, 最终会由&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Oozie</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Azkaban</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AirFlow</code>&nbsp;等工具去调度执行</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有哪些操作可能会导致重复代码过多</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">其实无论是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spring</code>, 还是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Vue</code>, 还是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>, 这些框架和工具, 最终的目的都是帮助我们消除一些重复的和通用的代码</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">所以既然我们无需在 Spark 的应用中搭建复杂的项目框架, 但是对于重复的代码还是要消除的, 初步来看可能会有如下重复的代码点</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">各个数据库的访问</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">配置的读取</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 3</code>: 建立配置读取工具</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">了解配置文件和读取框架</p>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">数据读取部分, 有一个比较好用的工具, 叫做&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">lightbend/config</code>, 它可以读取一种叫做&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">HOCON</code>&nbsp;的配置文件</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">HOCON</code>&nbsp;全称叫做&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Human-Optimized Config Object Notation</code>, 翻译过来叫做 为人类优化的配置对象表示法</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">HOCON</code>&nbsp;是一种类似于&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Properties</code>&nbsp;的配置文件格式, 并包含&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">JSON</code>&nbsp;的语法格式, 比较易于使用, 其大致格式如下</p>
</div>
<div class="listingblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text">foo: {
  bar: 10,
  baz: 12
}

foo {
  bar = 10,
  baz = 12
}

foo.bar=10
foo.baz=10</code></pre>
</div>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">以上三种写法是等价的, 其解析结果都是两个字段, 分别叫做&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">foo.bar</code>&nbsp;和&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">foo.baz</code></p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">读取&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">HOCON</code>&nbsp;文件格式需要使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">lightbend/config</code>, 它的使用非常的简单</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">当配置文件被命名为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">application.conf</code>&nbsp;并且被放置于&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">resources</code>&nbsp;时, 可以使用如下方式直接加载</p>
</div>
<div class="listingblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-scala hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="scala"><span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> config: <span class="hljs-type" style="box-sizing: border-box; color: #880000;">Config</span> = <span class="hljs-type" style="box-sizing: border-box; color: #880000;">ConfigFactory</span>.load()
<span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> bar = config.getInt(<span class="hljs-string" style="box-sizing: border-box; color: #880000;">"foo.bar"</span>)
<span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> baz = config.getInt(<span class="hljs-string" style="box-sizing: border-box; color: #880000;">"foo.baz"</span>)</code></pre>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建配置文件</p>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建配置文件&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">resource/spark.conf</code>, 并引入如下内容</p>
</div>
<div class="listingblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text"># Worker 心跳超时时间
spark.worker.timeout="500"

# RPC 请求等待结果的超时时间
spark.rpc.askTimeout="600s"

# 所有网络操作的等待时间, spark.rpc.askTimeout 默认值等同于这个参数
spark.network.timeoout="600s"

# 最大使用的 CPU 核心数
spark.cores.max="10"

# 任务最大允许失败次数
spark.task.maxFailures="5"

# 如果开启推测执行, 开启会尽可能的增快任务执行效率, 但是会占用额外的运算资源
spark.speculation="true"

# Driver 是否允许多个 Context
spark.driver.allowMutilpleContext="true"

# Spark 序列化的方式, 使用 Kryo 能提升序列化和反序列化的性能
spark.serializer="org.apache.spark.serializer.KryoSerializer"

# 每个页缓存, Page 指的是操作系统的内存分配策略中的 Page, 一个 Page 代表一组连续的内存空间
# Spark 在引入钨丝计划以后, 使用 Java 的 Unsafe API 直接申请内存, 其申请单位就是 Page
# 如果 Page 过大, 有可能因为操作系统的策略无法分配而拒绝这次内存申请, 从而报错
# 简单来说, 这个配置的作用是一次申请的内存大小
spark.buffer.pageSize="6m"</code></pre>
</div>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">以上的配置列成表如下</p>
</div>
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; border-color: #dedede; width: 830px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">配置项目</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">描述</th></tr>
</thead>
<tbody style="box-sizing: border-box; margin-bottom: 0px;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.worker.timeout</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">如果超过了这个配置项指定的时间,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Master</code>&nbsp;认为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Worker</code>&nbsp;已经跪了</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.network.timeout</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">因为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;管理一整个集群, 任务可能运行在不同的节点上, 后通过网络进行通信, 一次网络通信有可能因为要访问的节点实效而一直等待, 这个配置项所配置的便是这个等待的超时时间</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.cores.max</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;整个应用最大能够申请的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">CPU</code>&nbsp;核心数</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.task.maxFailures</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;本身是支持弹性容错的, 所以不能因为某一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Task</code>&nbsp;失败了, 就认定整个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Job</code>&nbsp;失败, 一般会因为相当一部分&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Task</code>&nbsp;失败了才会认定&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Job</code>&nbsp;失败, 否则会进行重新调度, 这个参数的含义是, 当多少个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Task</code>&nbsp;失败了, 可以认定&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Job</code>&nbsp;失败</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.speculation</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">类似&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Hadoop</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;也支持推测执行, 场景是有可能因为某台机器的负载过高, 或者其它原因, 导致这台机器运行能力很差,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;会根据一些策略检测较慢的任务, 去启动备用任务执行, 使用执行较快的任务的结果, 但是推测执行有个弊端, 就是有可能一个任务会执行多份, 浪费集群资源</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.driver.allowMutilpleContext</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">很少有机会必须一定要在一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark Application</code>&nbsp;中启动多个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Context</code>, 所以这个配置项意义不大, 当必须要使用多个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Context</code>&nbsp;的时候, 开启此配置即可</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.serializer</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;将任务分发到集群中执行, 所以势必涉及序列化, 这个配置项配置的是使用什么序列化器, 默认是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">JDK</code>&nbsp;的序列化器, 可以指定为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kyro</code>&nbsp;从而提升性能, 但是如果使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kyro</code>&nbsp;的话需要序列化的类需要被先注册才能使用</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.buffer.pageSize</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">每个页缓存,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Page</code>&nbsp;指的是操作系统的内存分配策略中的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Page</code>, 一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Page</code>&nbsp;代表一组连续的内存空间,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;在引入钨丝计划以后, 使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Java</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Unsafe API</code>&nbsp;直接申请内存, 其申请单位就是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Page</code>, 如果&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Page</code>&nbsp;过大, 有可能因为操作系统的策略无法分配而拒绝这次内存申请, 从而报错, 简单来说, 这个配置的作用是一次申请的内存大小, 一般在报错的时候修改这个配置, 减少一次申请的内存</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">导入配置读取的工具依赖</p>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">pom.xml</code>&nbsp;中的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">properties</code>&nbsp;段增加如下内容</p>
<div class="listingblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text">&lt;config.version&gt;1.3.4&lt;/config.version&gt;</code></pre>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">pom.xml</code>&nbsp;中的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dependencites</code>&nbsp;段增加如下内容</p>
<div class="listingblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text">&lt;!-- Config reader --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.typesafe&lt;/groupId&gt;
    &lt;artifactId&gt;config&lt;/artifactId&gt;
    &lt;version&gt;${config.version}&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">配置工具的设计思路</p>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">在设计一个工具的时候, 第一步永远是明确需求, 我们现在为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;的创建设置配置加载工具, 其需求如下</dt><dd style="box-sizing: border-box; margin: 0px 0px 0.625em 1.125em; padding: 0px; direction: ltr;">
<div class="ulist" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">配置在配置文件中编写</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">typesafe/config</code>&nbsp;加载配置文件</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在创建&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;的时候填写这些配置</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">前两点无需多说, 已经自表达, 其难点也就在于如何在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;创建的时候填入配置, 大致思考的话, 有如下几种方式</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">加载配置文件后, 逐个将配置的项设置给&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code></p>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.config("spark.worker.timeout", config.get("spark.worker.timeout"))</code></p>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">加载配置文件后, 通过隐式转换为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;设置配置</p>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.loadConfig().getOrCreate()</code></p>
</div>
</li>
</ul>
</div>
</dd></dl></div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">毫无疑问, 第二种方式更为方便</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建配置工具类</p>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">看代码之前, 先了解一下设计目标</dt><dd style="box-sizing: border-box; margin: 0px 0px 0.625em 1.125em; padding: 0px; direction: ltr;">
<div class="ulist" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">加载配置文件&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.conf</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">无论配置文件中有多少配置都全部加载</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;提供隐式转换自动装载配置</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">下面是代码, 以及重点解读</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="listingblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text">class SparkConfigHelper(builder: SparkSession.Builder) {

  private val config: Config = ConfigFactory.load("spark")            

  def loadConfig(): SparkSession.Builder = {
    import scala.collection.JavaConverters._

    for (entry &lt;- config.entrySet().asScala) {
      val value = entry.getValue
      val valueType = value.valueType()
      val valueFrom = value.origin().filename()                       
      if (valueType == ConfigValueType.STRING &amp;&amp; valueFrom != null) { 
        builder.config(entry.getKey, value.unwrapped().asInstanceOf[String]) 
      }
    }

    builder
  }
}

object SparkConfigHelper {                                            

  def apply(builder: SparkSession.Builder): SparkConfigHelper = {
    new SparkConfigHelper(builder)
  }

  implicit def setSparkSession(builder: SparkSession.Builder) = {     
    SparkConfigHelper(builder)
  }
}</code></pre>
</div>
</div>
<div class="colist arabic" style="box-sizing: border-box; margin: -0.5em 0px 0px; padding: 0px; direction: ltr;">
<table style="box-sizing: border-box; border-spacing: 0px; background: none; margin-bottom: 1.25em; border-width: 0px; border-style: initial; border-color: initial;">
<tbody style="box-sizing: border-box;">
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 加载配置文件</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 因为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Config</code>&nbsp;工具会自动的加载所有的系统变量, 需要通过&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Origin</code>&nbsp;来源判断, 只接收来自于文件的配置</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 判断: 1. 是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">String</code>&nbsp;类型, 2. 来自于某个配置文件</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;设置参数</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 提供伴生对象的意义在于两点: 1. 更方便的创建配置类, 2. 提供隐式转换, 3. 以后可能需要获取某个配置项</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 提供隐式转换, 将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;转为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ConfigHelper</code>&nbsp;对象, 从而提供配置加载</td>
</tr>
</tbody>
</table>
</div>
</dd></dl></div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
<div class="sect1" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; border-top: 1px solid #e7e7e9; color: rgba(0, 0, 0, 0.8); font-family: 'Noto Serif', 'DejaVu Serif', serif; font-size: 16px;">
<h2 id="_3_将数据集中的_ip_转为地域信息" style="box-sizing: border-box; margin: 1em 0px 0.5em; padding: 0px; direction: ltr; font-family: 'Open Sans', 'DejaVu Sans', sans-serif; font-weight: 300; color: #ba3925; text-rendering: optimizeLegibility; line-height: 1.2; font-size: 2.3125em; word-spacing: -0.05em; letter-spacing: -0.01em;">3. 将数据集中的 IP 转为地域信息</h2>
<div class="sectionbody" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="title" style="box-sizing: border-box; margin: 0px 0px 0.25em; padding: 0px; direction: ltr; line-height: 1.45; color: #7a2518; text-rendering: optimizeLegibility; font-size: 1rem; font-style: italic;">导读</div>
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;转换工具介绍</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">转换</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;转换工具介绍</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">进行&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;转换这种操作, 一般有如下一些办法</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; border-color: #dedede; width: 840px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">方式</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">描述</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">优点</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">缺点</th></tr>
</thead>
<tbody style="box-sizing: border-box; margin-bottom: 0px;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">自己编写</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">一般如果自己编写查找算法的话, 大致有如下几步</p>
</div>
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 1.25em 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">找到一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP范围 : 省 : 市 : 区</code>&nbsp;这样的数据集</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">读取数据集</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;转为数字表示法, 本质上&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;就是二进制的点位表示法,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">192.168.0.1 &rarr; 1100 0000 1010 1000 0000 0000 0000 0001 &rarr; 3232235521</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">3232235521</code>&nbsp;这样的数字在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;数据集中通过二分法查找对应的省市区</p>
</li>
</ol></div>
</div>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">没有第三方库的学习成本</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">没有数据结构上的支持, 效率低</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">没有上层的封装, 使用麻烦</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">第三方库</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">一般第三方库会有一些数据结构上的优化, 查找速度比二分法会更快一些, 例如&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">BTree</code>&nbsp;就特别适合做索引, 常见的方式有</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLite</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">纯真数据库</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip2region</code></p>
</li>
</ul>
</div>
</div>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">速度快</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">不麻烦</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有上层封装, 用着爽</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">第三方一般会提供数据集, 数据集会定时更新, 更精准</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有轮子就别自己搞了, 怪麻烦的</p>
</li>
</ul>
</div>
</div>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">需要学习第三方工具, 有一定的学习成本, 而且不一定和以后工作中用同样一个工具</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">选用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip2region</code>&nbsp;这个工具来查找省市名称</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip2region</code>&nbsp;的优点</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; margin-bottom: 1.25em; border-color: #dedede; width: 816px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">工具</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">数据结构支持</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">中文支持</th></tr>
</thead>
<tbody style="box-sizing: border-box;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLite</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">无</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">纯真</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">无</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip2region</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">引入&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip2region</code></p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">复制&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;数据集&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip2region.db</code>&nbsp;到工程下的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dataset</code>&nbsp;目录</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Maven</code>&nbsp;中增加如下代码</p>
<div class="listingblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-xml hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="xml"><span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.lionsoul<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>ip2region<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>1.7.2<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span></code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip2region</code>&nbsp;的使用</p>
<div class="listingblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-scala hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="scala"><span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> searcher = <span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">new</span> <span class="hljs-type" style="box-sizing: border-box; color: #880000;">DbSearcher</span>(<span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">new</span> <span class="hljs-type" style="box-sizing: border-box; color: #880000;">DbConfig</span>(), <span class="hljs-string" style="box-sizing: border-box; color: #880000;">"dataset/ip2region.db"</span>)
<span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> data = searcher.btreeSearch(ip)
println(data.getRegion)</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">选用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLite</code>&nbsp;确定经纬度</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">后面需要使用经纬度, 只有&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLite</code>&nbsp;可以查找经纬度</p>
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; margin-bottom: 1.25em; border-color: #dedede; width: 816px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">工具</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">数据结构支持</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">中文支持</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">经纬度支持</th></tr>
</thead>
<tbody style="box-sizing: border-box;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLite</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">无</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">纯真</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">无</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">无</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip2region</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">无</p>
</td>
</tr>
</tbody>
</table>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">引入&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLite</code></p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLite</code>&nbsp;的数据集&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLiteCity.dat</code>&nbsp;拷贝到工程中&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dataset</code>&nbsp;目录下</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">pom.xml</code>&nbsp;中添加如下依赖</p>
<div class="listingblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-xml hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="xml"><span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>com.maxmind.geoip<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>geoip-api<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>1.3.0<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>

<span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>com.maxmind.geoip2<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>geoip2<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>2.12.0<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span></code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLite</code>&nbsp;的使用方式</p>
<div class="listingblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-scala hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="scala"><span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> lookupService = <span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">new</span> <span class="hljs-type" style="box-sizing: border-box; color: #880000;">LookupService</span>(<span class="hljs-string" style="box-sizing: border-box; color: #880000;">"dataset/GeoLiteCity.dat"</span>, <span class="hljs-type" style="box-sizing: border-box; color: #880000;">LookupService</span>.<span class="hljs-type" style="box-sizing: border-box; color: #880000;">GEOIP_MEMORY_CACHE</span>)
<span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> location = lookupService.getLocation(<span class="hljs-string" style="box-sizing: border-box; color: #880000;">"121.76.98.134"</span>)
println(location.latitude, location.longitude)</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;转换思路梳理</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">现在使用不同的视角, 理解一下在这个环节我们需要做的事情</p>
</div>
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">工具视角</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190614162114.png" alt="20190614162114" /></div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">数据视角</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190614162634.png" alt="20190614162634" /></div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">要做的事</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">读取数据集&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">pmt.json</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;转换为省市</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设计&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;表结构, 创建&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;表</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">存入&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;表</p>
</li>
</ul>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;">挑战和结构</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">现在的任务本质上是把一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 A</code>&nbsp;转为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 B</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 A</code>&nbsp;可能不够好,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 B</code>&nbsp;相对较好, 然后把&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 B</code>&nbsp;落地到&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>, 作为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ODS</code>&nbsp;层, 以供其它功能使用</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">但是如果&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 A</code>&nbsp;转为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 B</code>&nbsp;的过程中需要多种转换呢?</p>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190614165344.png" alt="20190614165344" /></div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">所以, 从面向对象的角度上来说, 需要一套机制, 能够组织不同的功能协同运行</p>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190614170054.png" alt="20190614170054" /></div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">所以我们可以使用一个名为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">PmtETLProcessor</code>&nbsp;的类代表针对&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 A</code>&nbsp;到&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 B</code>&nbsp;的转换, 然后抽象出单位更小的负责具体某一个转换步骤的节点, 集成到&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">PmtETLProcessor</code>&nbsp;中, 共同完成任务</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;">参数配置</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">为了让程序行为更可控制, 所以一般会在编写程序之前先大致计划以下程序中可能使用到的一些参数</p>
<div class="ulist" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;的表名</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;表的复制因子</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ODS</code>&nbsp;层的表名</p>
</li>
</ul>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">规划好以后, 着手创建配置文件&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">resource/kudu.conf</code></p>
<div class="listingblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text"># Server properties
kudu.common.master="192.168.169.101:7051,192.168.169.102:7051,192.168.169.103:7051"
kudu.common.factor=1

# Table name
kudu.name.pmt_ods="ODS_"</code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;的支持库</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">为了方便&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;的使用, 所以要创建一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Helper</code>, 大致需求如下</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; margin-bottom: 1.25em; border-color: #dedede; width: 882px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">需求</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">原始调用方式</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">理想调用方式</th></tr>
</thead>
<tbody style="box-sizing: border-box;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建表</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduContext.createTable()</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession.createKuduTable()</code></p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">通过&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DataFrame</code>&nbsp;将数据保存到&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>表</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DataFrame.write.options(&hellip;​).kudu</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DataFrame.saveAsKuduTable</code></p>
</td>
</tr>
</tbody>
</table>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduHelper</code>&nbsp;的设计</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduHelper</code>&nbsp;的设计思路两句话可以总结</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">尽可能的不在处理类中读取配置文件</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">尽可能的提供易于调用的接口</p>
</li>
</ul>
</div>
<div class="listingblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text">class KuduHelper {                                                            
  private var spark: SparkSession = _
  private var dataset: Dataset[Any] = _

  def this(spark: SparkSession) = {                                           
    this()
    this.spark = spark
  }

  def this(dataset: Dataset[Any]) = {                                         
    this(dataset.sparkSession)
    this.dataset = dataset
  }

  private val config = ConfigFactory.load("kudu")
  private val KUDU_MASTERS = config.getString("kudu.common.master")
  private val kuduContext = new KuduContext(KUDU_MASTERS, spark.sparkContext) 

  def createKuduTable(tableName: String, schema: Schema): Unit = {            
    if (kuduContext.tableExists(tableName)) {
      kuduContext.deleteTable(tableName)
    }

    import scala.collection.JavaConverters._
    val options = new CreateTableOptions()
      .setNumReplicas(config.getInt("kudu.common.factor"))
      .addHashPartitions(List("uuid").asJava, 6)

    kuduContext.createTable(tableName, schema, options)
  }

  def saveToKudu(tableName: String): Unit = {                                 
    import org.apache.kudu.spark.kudu._

    dataset.write
      .option("kudu.table", tableName)
      .option("kudu.master", KUDU_MASTERS)
      .mode(SaveMode.Append)
      .kudu
  }

}

object KuduHelper {

  implicit def sparkToKuduContext(spark: SparkSession): Unit = {              
    new KuduHelper(spark)
  }

  implicit def datasetToKuduContext(dataset: Dataset[Any]): Unit = {          
    new KuduHelper(dataset)
  }

  def formattedDate(): String = {                                             
    FastDateFormat.getInstance("yyyyMMdd").format(new Date)
  }
}</code></pre>
</div>
</div>
<div class="colist arabic" style="box-sizing: border-box; margin: -0.5em 0px 0px; padding: 0px; direction: ltr;">
<table style="box-sizing: border-box; border-spacing: 0px; background: none; border-width: 0px; border-style: initial; border-color: initial;">
<tbody style="box-sizing: border-box;">
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 主题设计思路就是将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;或者&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DataFrame</code>&nbsp;隐式转换为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduHelper</code>, 在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduHelper</code>&nbsp;中提供帮助方法</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;转为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduHelper</code>&nbsp;时调用</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Dataset</code>&nbsp;转为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduHelper</code>&nbsp;时调用</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Helper</code>&nbsp;内部读取配置文件, 创建&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduContext</code></td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 此方法就是设计目标&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession.createKuduTable(tableName)</code>&nbsp;中被调用的方法</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 此方法就是设计目标&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DataFrame.saveToKudu(tableName)</code>&nbsp;中被调用的方法</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;转为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduHelper</code></td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Dataset</code>&nbsp;转为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduHelper</code></td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 提供一个统一的生成日期的方法, 给外部使用</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ETL</code>&nbsp;代码编写</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">PmtETLProcessor</code>&nbsp;类</p>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">PmtETLProcessor</code>&nbsp;类负责整个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ETL</code>&nbsp;过程, 但是不复杂中间过程中具体的数据处理, 具体数据如何转换, 要做什么事情由具体的某个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Converter</code>&nbsp;类负责</p>
</div>
<div class="listingblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text">object PmtETLProcessor {

  def main(args: Array[String]): Unit = {
    import com.itheima.dmp.utils.SparkConfigHelper._
    import com.itheima.dmp.utils.KuduHelper._

    // 创建 SparkSession
    val spark = SparkSession.builder()
      .master("local[6]")
      .appName("pmt_etl")
      .loadConfig()
      .getOrCreate()

    import spark.implicits._

    // 读取数据
    val originDataset = spark.read.json("dataset/pmt.json")

  }
}</code></pre>
</div>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IPConverter</code>&nbsp;类处理&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;转换的问题</p>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IPConverter</code>&nbsp;主要解决如下问题</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">原始数据集中有一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip</code>&nbsp;列, 要把&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip</code>&nbsp;这一列数据转为五列, 分别是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Longitude</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">latitude</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">region</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">city</code>, 从而扩充省市信息和经纬度信息</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">将新创建的四列数据添加到原数据集中</p>
</li>
</ul>
</div>
<div class="listingblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text">object IPConverter {

  def process(dataset: Dataset[Row]): Dataset[Row] = {
    val dataConverted: RDD[Row] = dataset
      .rdd
      .mapPartitions(convertIPtoLocation)                                  

    val schema = dataset.schema
      .add("region", StringType)
      .add("city", StringType)
      .add("longitude", DoubleType)
      .add("latitude", DoubleType)

    val completeDataFrame = dataset
      .sparkSession
      .createDataFrame(dataConverted, schema)                              

    completeDataFrame
  }

  def convertIPtoLocation(iterator: Iterator[Row]): Iterator[Row] = {      
    val searcher = new DbSearcher(new DbConfig(), "dataset/ip2region.db")

    val lookupService = new LookupService(
      "dataset/GeoLiteCity.dat",
      LookupService.GEOIP_MEMORY_CACHE)

    iterator.map(row =&gt; {
      val ip = row.getAs[String]("ip")

      val regionData = searcher.btreeSearch(ip).getRegion.split("\\|")     
      val region = regionData(2)
      val city = regionData(3)

      val location = lookupService.getLocation(ip)                         
      val longitude = location.longitude.toDouble
      val latitude = location.latitude.toDouble

      val rowSeq = row.toSeq :+ region :+ city :+ longitude :+ latitude
      Row.fromSeq(rowSeq)                                                  
    })
  }
}</code></pre>
</div>
</div>
<div class="colist arabic" style="box-sizing: border-box; margin: -0.5em 0px 0px; padding: 0px; direction: ltr;">
<table style="box-sizing: border-box; border-spacing: 0px; background: none; border-width: 0px; border-style: initial; border-color: initial;">
<tbody style="box-sizing: border-box;">
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 通过&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">mapPartitions</code>&nbsp;算子, 对每一个分区数据调用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">convertIPtoLocation</code>&nbsp;进行转换, 需要注意的是, 这个地方已经被转为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RDD</code>&nbsp;了, 而不是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DataFrame</code>, 因为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DataFrame</code>&nbsp;在转换中不能更改&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Schema</code></td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">convertIPtoLocation</code>&nbsp;主要做的事情是扩充原来的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">row</code>, 增加四个新的列</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 获取省市中文名</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 获取经纬度</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 根据原始&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">row</code>&nbsp;生成新的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">row</code>, 新的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">row</code>&nbsp;中包含了省市和经纬度信息</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 新的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">row</code>&nbsp;对象的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RDD</code>&nbsp;结合 被扩充过的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Schema</code>, 合并生成新的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DataFrame</code>&nbsp;返回给&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Processor</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">PmtETLProcessor</code>&nbsp;中调用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IPConverter</code></p>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="listingblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-scala hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="scala"><span class="hljs-class" style="box-sizing: border-box;"><span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">object</span> <span class="hljs-title" style="box-sizing: border-box; color: #880000; font-weight: bold;">PmtETLProcessor</span> </span>{

  <span class="hljs-function" style="box-sizing: border-box;"><span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">def</span> <span class="hljs-title" style="box-sizing: border-box; color: #880000; font-weight: bold;">main</span></span>(args: <span class="hljs-type" style="box-sizing: border-box; color: #880000;">Array</span>[<span class="hljs-type" style="box-sizing: border-box; color: #880000;">String</span>]): <span class="hljs-type" style="box-sizing: border-box; color: #880000;">Unit</span> = {
    ...

    <span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> originDataset = spark.read.json(<span class="hljs-string" style="box-sizing: border-box; color: #880000;">"dataset/pmt.json"</span>)

    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">// 调用 IPConverter, 传入 originDataset, 生成包含经纬度和省市的 DataFrame</span>
    <span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> ipConvertedResult = <span class="hljs-type" style="box-sizing: border-box; color: #880000;">IPConverter</span>.process(originDataset)

    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">// 要 Select 的列们, 用于组织要包含的结果集中的数据</span>
    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">// 因为太多, 不再此处展示, 若要查看, 请移步代码工程</span>
    <span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> selectRows: <span class="hljs-type" style="box-sizing: border-box; color: #880000;">Seq</span>[<span class="hljs-type" style="box-sizing: border-box; color: #880000;">Column</span>] = <span class="hljs-type" style="box-sizing: border-box; color: #880000;">Seq</span>(...)

    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">// 选中相应的列</span>
    ipConvertedResult.select(selectRows:_*).show()
  }</code></pre>
</div>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">通过以上的代码, 已经在数据集中扩展了地理位置相关的信息, 接下来可以存入&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;了</p>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1 style="box-sizing: border-box; font-size: 2.75em; margin: 1em 0px 0.5em; padding: 0px; direction: ltr; font-family: 'Open Sans', 'DejaVu Sans', sans-serif; font-weight: 300; color: #ba3925; text-rendering: optimizeLegibility; line-height: 1.2; word-spacing: -0.05em; letter-spacing: -0.01em;">DMP (Data Management Platform)</h1>
<div id="preamble" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; color: rgba(0, 0, 0, 0.8); font-family: 'Noto Serif', 'DejaVu Serif', serif; font-size: 16px;">
<div class="sectionbody" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="title" style="box-sizing: border-box; margin: 0px 0px 0.25em; padding: 0px; direction: ltr; line-height: 1.45; color: #7a2518; text-rendering: optimizeLegibility; font-size: 1rem; font-style: italic;">导读</div>
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">整个课程的内容大致分为如下两个部分</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">业务介绍</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">技术实现</p>
</li>
</ul>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">对于业务介绍, 比较困难的是理解广告交易过程中各个参与者是干什么的</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">对于技术实现, 大致就是如下两个步骤</p>
</div>
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 1.25em 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">报表</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">标签化</p>
</li>
</ol></div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">报表显而易见, 就是查看数据的组成, 查看数据的图形直观特征</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">标签化是整个项目的目的, 最终其实就要根据标签筛选用户, 但是对于标签化还是有很多东西要做的, 如下</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">商圈库</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">打标签</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">统一用户识别</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">标签合并 &amp; 衰减</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">历史合并</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div id="toc" class="toc" style="box-sizing: border-box; margin: 0px; padding: 0px 0px 0.5em; direction: ltr; border-bottom: 1px solid #e7e7e9;">
<div id="toctitle" style="box-sizing: border-box; margin: 1em 0px 0.5em; padding: 0px; direction: ltr; font-family: 'Open Sans', 'DejaVu Sans', sans-serif; color: #7a2518; text-rendering: optimizeLegibility; line-height: 1.2; font-size: 1.375em; word-spacing: -0.05em;">Table of Contents</div>
<ul class="sectlevel1" style="box-sizing: border-box; margin: 0px 0px 1.25em 0.125em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: 'Open Sans', 'DejaVu Sans', sans-serif; list-style-type: none;">
<li style="box-sizing: border-box; margin-top: 0.3334em; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr; line-height: 1.3334;"><a style="box-sizing: border-box; background: transparent; color: #2156a5; text-decoration-line: none; line-height: inherit;" href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day03/DMP.html#_1_项目介绍">1. 项目介绍</a>
<ul class="sectlevel2" style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; list-style-type: none;">
<li style="box-sizing: border-box; margin-top: 0.3334em; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr; line-height: 1.3334;"><a style="box-sizing: border-box; background: transparent; color: #2156a5; text-decoration-line: none; line-height: inherit;" href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day03/DMP.html#_1_1_广告业务背景">1.1. 广告业务背景</a></li>
<li style="box-sizing: border-box; margin-top: 0.3334em; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr; line-height: 1.3334;"><a style="box-sizing: border-box; background: transparent; color: #2156a5; text-decoration-line: none; line-height: inherit;" href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day03/DMP.html#_1_2_技术方案">1.2. 技术方案</a></li>
</ul>
</li>
<li style="box-sizing: border-box; margin-top: 0.3334em; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr; line-height: 1.3334;"><a style="box-sizing: border-box; background: transparent; color: #2156a5; text-decoration-line: none; line-height: inherit;" href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day03/DMP.html#_2_工程创建和框架搭建">2. 工程创建和框架搭建</a></li>
<li style="box-sizing: border-box; margin-top: 0.3334em; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr; line-height: 1.3334;"><a style="box-sizing: border-box; background: transparent; color: #2156a5; text-decoration-line: none; line-height: inherit;" href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day03/DMP.html#_3_将数据集中的_ip_转为地域信息">3. 将数据集中的 IP 转为地域信息</a></li>
</ul>
</div>
</div>
<div class="sect1" style="box-sizing: border-box; margin: 0px; padding: 0px 0px 1.25em; direction: ltr; color: rgba(0, 0, 0, 0.8); font-family: 'Noto Serif', 'DejaVu Serif', serif; font-size: 16px;">
<h2 id="_1_项目介绍" style="box-sizing: border-box; margin: 1em 0px 0.5em; padding: 0px; direction: ltr; font-family: 'Open Sans', 'DejaVu Sans', sans-serif; font-weight: 300; color: #ba3925; text-rendering: optimizeLegibility; line-height: 1.2; font-size: 2.3125em; word-spacing: -0.05em; letter-spacing: -0.01em;">1. 项目介绍</h2>
<div class="sectionbody" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="title" style="box-sizing: border-box; margin: 0px 0px 0.25em; padding: 0px; direction: ltr; line-height: 1.45; color: #7a2518; text-rendering: optimizeLegibility; font-size: 1rem; font-style: italic;">导读</div>
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">背景介绍</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;的作用和实现方式</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">技术方案</p>
</li>
</ol></div>
</div>
</div>
<div class="sect2" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<h3 id="_1_1_广告业务背景" style="box-sizing: border-box; margin: 1em 0px 0.5em; padding: 0px; direction: ltr; font-family: 'Open Sans', 'DejaVu Sans', sans-serif; font-weight: 300; color: #ba3925; text-rendering: optimizeLegibility; line-height: 1.2; font-size: 1.6875em; word-spacing: -0.05em;">1.1. 广告业务背景</h3>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="title" style="box-sizing: border-box; margin: 0px 0px 0.25em; padding: 0px; direction: ltr; line-height: 1.45; color: #7a2518; text-rendering: optimizeLegibility; font-size: 1rem; font-style: italic;">导读</div>
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">互联网管广告发展至今, 产生了很多非常复杂的概念, 其中环环交错, 不容易理清, 这一章节的主要目的就是尽可能的理清楚整体上的流程, 各个环节的作用</p>
</div>
</div>
</div>
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 1</code>: 广告主, 广告商, 媒体</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613150210.png" alt="20190613150210" /></div>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">简单来说就是要发广告的机构和个人</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告商</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告商是中介, 对接广告主和媒体, 广告主告诉广告商我要发广告, 广告商找到媒体进行谈判</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">媒体</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">比如说微博, 腾讯, 美团这样的应用和网站, 就是媒体, 它们具有广告展示的位置, 用户在使用这些服务的同时会看到各样的广告</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">受众</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">普通的用户, 在享受免费的服务的同时, 被动的接受广告</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">但是受众是有不同类型的, 可以由标签来表示, 比如说白领, 女性,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">20 - 30</code>&nbsp;岁等</p>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 2</code>: 小媒体和广告网络</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">刚才的结构中有一个非常明显的问题</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">小媒体有很多</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">不只有微博腾讯这些媒体, 还有很多其它的垂直小媒体, 比如说一些软件网站, 一些小型的App, 甚至前阵子比较流行的游戏消灭病毒等, 都是小型的媒体</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主倾向于让更多人看到广告</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主就倾向于让更多人看到广告, 而且也为了避免麻烦, 所以会找一些大型的媒体来谈合作</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">但是往往一些小媒体因为更加垂直, 其用户可能更加的精准, 购买意愿也非常好</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">小媒体的议价能力非常有限</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">虽然小媒体有小媒体的好处, 但是小媒体太过零散, 如果只是一个小媒体的话, 很难去洽谈出一个比较好的合作</p>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">所以小媒体也是要赚钱的, 这个领域其实是一个很大的盘子, 一定会有人为小媒体提供服务, 这种产品, 我们称之为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>, 广告网络</p>
</div>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613162139.png" alt="20190613162139" /></div>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;提供如下的服务</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">为广告主提供统一的界面</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">联络多家媒体, 行成为统一的定价从而销售</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 3</code>:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code></dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">虽然有&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;的引入, 但是很快又会有新的问题</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;不止一家</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">就如同会有很多小媒体, 广告主不知道如何选择一样,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;是一种商业模式, 也会有很多玩家, 广告主依然面临这种选择困难</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">小媒体们会选择不同的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code></p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">每个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;之间, 定价策略可能不同, 旗下的小媒体也可能不同, 其实最终广告主是要选择一个靠谱的网站来进行广告展示的, 那么这里就存在一些信息不对称, 如何选择靠谱的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;从而选择靠谱的媒体呢</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;之间可能存在拆借现象</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">某一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;可能会有一个比较好的资源, 但是一直没卖出去, 而另外一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;可能恰好需要用到这个资源, 所以&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;之间可能会有一些拆借显现, 这就让这个市场愈加混乱</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">媒体可能对&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;的定价策略颇有微词</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;背后有很多媒体, 但是整个定价策略是由&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;来制定的, 虽然&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;往往是非常精密的计算模型, 但是媒体依然可能会感觉自己没有赚到钱</p>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">所以滋生了另外一种业务, 叫做&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>, 广告交易平台, 从而试图去从上层再统一一下</p>
</div>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613165151.png" alt="20190613165151" /></div>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">所以,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;虽然看起来和&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;非常类似, 但是本质上是不同的, 其有以下特点</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;不仅会联系&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>, 也会联系一下小媒体</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">甚至有时候&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;也会找&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;发布广告需求</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;会提供实时的交易定价, 弥补了&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;独立定价的弊端</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 4</code>:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;实时竞价</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">本节并不是针对&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;的缺陷引入新的话题, 而是针对&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;中的一个定价特点进行详细的说明</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;和&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdNetwork</code>&nbsp;最大的不同可能要数&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;的定价方式了,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;的定价方式是一种事实的定价方式, 其实非常类似于股票的撮合交易</p>
</div>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613170128.png" alt="20190613170128" /></div>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">整个过程的步骤大致如下:</p>
</div>
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 1.25em 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">媒体发起广告请求给&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;系统, 请求广告进行展示</p>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613171716.png" alt="20190613171716" /></div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主根据自己需求决定是否竞价, 以及自己的出价</p>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613171747.png" alt="20190613171747" /></div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">会有多个广告主同时出价, 价高者得</p>
<div class="imageblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613171854.png" alt="20190613171854" /></div>
</div>
</li>
</ol></div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">这样,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;就能尽可能的让广告的展示价格更透明更公平,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;得到自己相应的佣金, 媒体得到最大化的广告费, 看起来皆大欢喜, 但是真的是这样吗?</p>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 5</code>: 广告主如何竞价?</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">一切看起来都很好, 如果你站在媒体角度的话, 但是如果你站在广告主的角度上来看, 广告主可能会有两种抱怨</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主并不是专业从业者</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主可能会觉得, 你跟我闹呢, 我知道不知道怎么出价你心里没一点数?</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">确实, 作为金主, 不能太过为难他们, 每次交易都让广告主出价, 无异于逼迫广告主转投他家</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主的诉求是投放广告给恰好有需求的人, 而不是看起来好像很酷的媒体</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">我们讨论到现在, 所有的假设都是基于广告主知道自己该找什么样的媒体投放什么样的广告, 这种假设明显是不成立的, 如果考虑广告主的诉求, 其非常简单, 在同等价格内, 广告效果要好, 所以广告主更关心的事情是你是否让合适的人看到了这些广告</p>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">所以,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;应运而生,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;全称叫做需求方平台, 主要负责和&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AdExchange</code>&nbsp;交互, 辅助广告主进行实时竞价</p>
</div>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613173747.png" alt="20190613173747" /></div>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;帮助广告主进行&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;中的出价</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;不仅只是出价,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;帮助广告主全面的进行广告服务, 例如广告主只需要告诉&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;自己对什么类型的受众感兴趣,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>会帮助广告主进行受众筛选</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 6</code>:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code></dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;最重要的特性是, 能够帮助广告主筛选客户, 换句话说,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;出现之前广告主针对媒体上的广告位进行广告投放,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;出现之后, 广告主针对自己想要的目标受众投放广告, 这几乎是一个质的效率提升</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主现在可以针对一些受众的标签来进行广告投放了, 比如说, 一个广告主是卖化妆品的, 他要投放广告给有如下三个标签的用户们,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">20</code>&nbsp;岁上下, 女性, 时尚人士, 现在就可以针对这三个标签来告诉&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;如何筛选用户了</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">但是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;如何进行用户识别呢?&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;如何知道谁是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">20</code>&nbsp;岁上下, 女性, 时尚人士?&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;可以自己做, 也可以依赖于第三方. 这个标签化的数据管理项目, 就叫做&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>, 全称叫做&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Data Management Platform</code>, 即数据管理平台.</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">DMP 所负责的内容非常重要的有两点</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">收集用户数据</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">常见的收集方式主要有两种</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">通过自身的服务和程序进行收集, 例如微博和腾讯有巨大的用户量, 他们自己就可以针对自己的用户进行分析</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">通过合作而来的一些数据, 这部分在合规范围内, 一般大型的网站或者&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">App</code>&nbsp;会通过一些不会泄漏用户隐私的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code>&nbsp;来标识用户, 给第三方&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;合作使用</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">通过一些不正当的手段获得, 例如说在某网站上传伪装成图片的脚本, 从而获取本网站的用户&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Cookie</code>, 这部分涉及一些黑产, 不再详细说明,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">315</code>&nbsp;晚会也曾经报道过</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">为用户打上标签</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;主要通过标签筛选用户, 所以&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;要通过一些大数据的工具来将用户数据打上标签, 这部分其实挺难, 有可能要涉及一些机器学习的算法, 或者图计算</p>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613180723.png" alt="20190613180723" /></div>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Ps.</code>&nbsp;整个链条中的参与者</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613183606.png" alt="20190613183606" /></div>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<h3 id="_1_2_技术方案" style="box-sizing: border-box; margin: 1em 0px 0.5em; padding: 0px; direction: ltr; font-family: 'Open Sans', 'DejaVu Sans', sans-serif; font-weight: 300; color: #ba3925; text-rendering: optimizeLegibility; line-height: 1.2; font-size: 1.6875em; word-spacing: -0.05em;">1.2. 技术方案</h3>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="title" style="box-sizing: border-box; margin: 0px 0px 0.25em; padding: 0px; direction: ltr; line-height: 1.45; color: #7a2518; text-rendering: optimizeLegibility; font-size: 1rem; font-style: italic;">导读</div>
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;的主要任务</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">技术方案</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;">技术方案</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613192400.png" alt="20190613192400" /></div>
</div>
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">从目的上看,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;系统可能会有如下的事情要做</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">通过可视化和笔记工具进行数据分析和测试</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">一般会使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Zeppelin</code>&nbsp;等工具进行测试和数据探索</p>
</div>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190614014030.png" alt="20190614014030" width="600" /></div>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">向&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;提供数据服务</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">一般对外提供数据, 是以接口的形式提供的, 例如提供一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Http GET</code>&nbsp;接口给&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;可以调用这个接口实现查询</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">接口一般使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spring</code>&nbsp;之类的框架编写&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Http</code>&nbsp;服务实现</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">这种接口在访问数据库的时候, 就是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">OLTP</code>&nbsp;形式了, 要尽快的获取数据,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;和&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">HBase</code>&nbsp;较为合适</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">通过可视化内部展示运营数据</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在运营过程中, 产品方可能需要时刻监控运营的一些指标, 例如注册率, 使用率, 接口调用次数等</p>
</div>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190614014138.png" alt="20190614014138" width="600" /></div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">从工程的视角上来看,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;的工程分为如下几个部分</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; border-color: #dedede; width: 840px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">工程</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">类型</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">作用</th></tr>
</thead>
<tbody style="box-sizing: border-box; margin-bottom: 0px;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dmp</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IDEA Project</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;项目的主工程, 编写具体的代码</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dmp_report</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Zeppelin Notebook</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Zeppeline</code>&nbsp;的一个笔记, 负责展示&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;进行数据探索和分析时所产生的报表</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dmp_analysis</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Zeppelin Notebook</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Zeppeline</code>&nbsp;的一个笔记, 负责进行&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;数据的探索, 从中不断试探发现经验</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">真实开发的时候可能遵循如下步骤</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; border-color: #dedede; width: 840px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">序号</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">环境</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">存储</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">对应工程</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">描述</th></tr>
</thead>
<tbody style="box-sizing: border-box; margin-bottom: 0px;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">测试</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;测试</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dmp_analysis</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">先对数据进行探索, 得出规律</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">测试</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;测试</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dmp_report</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">归纳数据特征和规律, 通过报表展示</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">3</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">生产</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;生产</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IDEA dmp project</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">对数据充分理解后, 编写代码进行&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ETL</code>&nbsp;操作, 并使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Oozie</code>&nbsp;等工具进行调度执行, 处理过的数据落地到&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;表中</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">4</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">生产</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;生产</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IDEA dmp project</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">生产中的数据已经经过清洗, 此时可以编写代码进行标签库等一系列的数据分析和挖掘任务, 并将结果落地到&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ElasticSearch</code>&nbsp;中, 向&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code>&nbsp;提供服务</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">5</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">生产</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;生产</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IDEA dmp project</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在运营过程中, 会产生一些运营指标, 可以针对运营指标进行数据分析和可视化, 提供给产品部分追踪运营状况. 此步骤应该通过&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">EChats</code>&nbsp;等工具在后台系统中进行可视化, 使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SQL</code>&nbsp;来分析数据</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd></dl></div>
<div class="admonitionblock note" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<table style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: none; border-width: 0px; border-style: initial; border-color: initial; width: 900px;">
<tbody style="box-sizing: border-box;">
<tr style="box-sizing: border-box;">
<td class="icon" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; text-align: center; width: 80px;">&nbsp;</td>
<td class="content" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 1.25em 0.5625em 1.125em; direction: ltr; font-size: 1em; color: rgba(0, 0, 0, 0.6); line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em; border-left-color: #dddddf;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">数据会不断的来, 所以数据的清洗和&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ETL</code>&nbsp;过程是不断重复进行的</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ETL</code>&nbsp;会不断的产生新的洁净数据, 所以标签库也是不断重复进行的</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">运营不断继续,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ETL</code>&nbsp;也不断继续, 所以报表也要周期性提供</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">根据任务的情况和目的不同, 这个周期有可能是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;天,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">12</code>&nbsp;小时,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;个月等</p>
</li>
</ul>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;的主要任务</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/1554645748023.png" alt="1554645748023" width="900" /></div>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在我们这个学习项目中, 大家只需要了解围绕这个 DMP 有什么样的项目, 以及整体的过程和团队需要做的事情, 但是我们还是要把主要目标放在核心业务上, 我们在整个项目中将学习到如下一些内容</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">报表生成</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">标签化以及标签化相关的一系列处理</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;">数据集生成</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613210828.png" alt="20190613210828" /></div>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">这份数据集生成的步骤有如下</p>
</div>
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">收集数据</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">数据来自于以往的竞价记录和收集到的用户数据</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">竞价记录来自于以往的交易</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">用户数据有可能来自第三方, 也有可能是自己收集(可能性比较小)</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">合并多个数据源的数据</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">因为在进行针对 DMP 的数据分析时, 需要用到用户的数据来判定用户的喜好, 也需要竞价数据来判定价格是否合适, 所以需要将这两部分数据合并起来, 再进行数据处理和分析</p>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;">数据集概况</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">数据集是一个 JSON Line 文件, 其中有三千条数据, 每一条数据都是一个独立的 JSON 字符串, 大概长如下样子</p>
</div>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190613212015.png" alt="20190613212015" width="400" /></div>
</div>
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; margin-bottom: 1.25em; border-color: #dedede; width: 900px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">字段</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">解释</th></tr>
</thead>
<tbody style="box-sizing: border-box; margin-bottom: 0px;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备的真实&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">sessionid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">会话标识</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">advertisersid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告主&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adorderid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adcreativeid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告创意&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">&gt;= 200000</code>&nbsp;:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DSP</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">&lt; 200000</code>&nbsp;:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">OSS</code></p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adplatformproviderid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告平台商&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">&gt;= 100000</code>&nbsp;:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">rtb</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">&lt; 100000</code>&nbsp;:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">api</code></p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">sdkversionnumber</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SDK</code>&nbsp;版本号</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adplatformkey</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">平台商&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Key</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">putinmodeltype</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">针对广告主的投放模式</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;: 展示量投放</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code>&nbsp;: 点击量投放</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">requestmode</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">数据请求方式</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;: 请求</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code>&nbsp;: 展示</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">3</code>&nbsp;: 点击</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adprice</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告价格</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adppprice</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">平台商价格</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">requestdate</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">请求时间, 格式为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">yyyy-m-dd hh:mm:ss</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">appid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">应用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">appname</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">应用名称</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">uuid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备唯一标识, 比如&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IMEI</code>&nbsp;或者&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AndroidID</code>&nbsp;等</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">device</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备型号, 如&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Huawei</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">iPhone</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">client</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备类型</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Android</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code>&nbsp;:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">iOS</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">3</code>&nbsp;:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">WP</code></p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">osversion</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备操作系统版本, 如&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">4.0</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">density</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">备屏幕的密度</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Android</code>&nbsp;的取值为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">0.75</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1.5</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">iOS</code>&nbsp;的取值为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code></p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">pw</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备屏幕宽度</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ph</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备屏幕高度</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">longitude</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备所在经度</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">lat</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备所在纬度</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">provincename</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备所在省份名称</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">cityname</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备所在城市名称</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ispid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">运营商&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ispname</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">运营商名称</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">networkmannerid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">联网方式&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 1.25em 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">4G</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">3G</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2G</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">OperatorOther</code></p>
</li>
</ol></div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">networkmannername</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">联网方式名称</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">iseffective</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">是否可以正常计费</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">0</code>&nbsp;: 不行</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;: 可以</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">isbilling</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">是否收费</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">0</code>&nbsp;: 未收费</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;: 已收费</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adspacetype</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告位类型</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Banner</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code>&nbsp;: 插屏</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">3</code>&nbsp;: 全屏</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adspacetypename</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告位类型名称, 如&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Banner</code>, 插屏, 全屏</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">devicetype</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备类型（1：手机 2：平板）</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;: 手机</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code>&nbsp;: 平板</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">processnode</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">流程节点</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;: 请求量&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KPI</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code>&nbsp;: 有效请求</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">3</code>&nbsp;: 广告请求</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">apptype</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">应用类型&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">district</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设备所在县名称</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">paymode</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">针对平台商的支付模式</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;: 展示量投放, CPM</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code>&nbsp;: 点击量投放, CPC</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">isbid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">是否是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">bidprice</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;竞价价格</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">winprice</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;竞价成功价格</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">iswin</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">是否竞价成功</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">cur</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">结算币种,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">USD</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RMB</code>&nbsp;等</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">rate</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">汇率</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">cnywinprice</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;竞价成功转换成人民币的价格</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">imei</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">手机串码</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">mac</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">手机&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">MAC</code>&nbsp;地址</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">idfa</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">手机&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">APP</code>&nbsp;的广告码</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">openudid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">苹果设备的识别码</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">androidid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">安卓设备的识别码</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">rtbprovince</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;省</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">rtbcity</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;市</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">rtbdistrict</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;区</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">rtbstreet</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RTB</code>&nbsp;街道</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">storeurl</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">APP</code>&nbsp;的市场下载地址</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">realip</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">真实&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">isqualityapp</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">优选标识</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">bidfloor</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">底价</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">aw</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告位的宽</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ah</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告位的高</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">imeimd5</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IMEI</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">MD5</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">macmd5</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">MAC</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">MD5</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">idfamd5</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IDFA</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">MD5</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">openudidmd5</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">OpenUDID</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">MD5</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">androididmd5</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AndroidID</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">MD5</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">imeisha1</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IMEI</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SHA-1</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">macsha1</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">MAC</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SHA-1</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">idfasha1</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IDFA</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SHA-1</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">openudidsha1</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">OpenUDID</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SHA-1</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">androididsha1</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AndroidID</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SHA-1</code>&nbsp;值</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">uuidunknow</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">UUID</code>&nbsp;的密文</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">userid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">平台用户&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">iptype</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">表示&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;库类型</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">1</code>&nbsp;: 为点媒&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;库</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">2</code>&nbsp;: 为广告协会的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;地理信息标准库</p>
</li>
</ul>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">默认为1</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">initbidprice</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">初始出价</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adpayment</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">转换后的广告消费 (保留小数点后&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">6</code>&nbsp;位)</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">agentrate</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">代理商利润率</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">lomarkrate</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">代理利润率</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">adxrate</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">媒介利润率</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">title</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">标题</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">keywords</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">关键字</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">tagid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">广告位标识 (当视频流量时值为视频&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code>&nbsp;号)</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">callbackdate</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">回调时间, 格式为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">yyyy/MM/dd hh:mm:ss</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">channelid</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">频道&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ID</code></p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">mediatype</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">媒体类型</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">email</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">用户邮箱</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">tel</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">用户电话号码</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">sex</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">用户性别</p>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">age</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">用户年龄</p>
</div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd></dl></div>
</div>
</div>
</div>
<div class="sect1" style="box-sizing: border-box; margin: 0px; padding: 0px 0px 1.25em; direction: ltr; border-top: 1px solid #e7e7e9; color: rgba(0, 0, 0, 0.8); font-family: 'Noto Serif', 'DejaVu Serif', serif; font-size: 16px;">
<h2 id="_2_工程创建和框架搭建" style="box-sizing: border-box; margin: 1em 0px 0.5em; padding: 0px; direction: ltr; font-family: 'Open Sans', 'DejaVu Sans', sans-serif; font-weight: 300; color: #ba3925; text-rendering: optimizeLegibility; line-height: 1.2; font-size: 2.3125em; word-spacing: -0.05em; letter-spacing: -0.01em;">2. 工程创建和框架搭建</h2>
<div class="sectionbody" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="title" style="box-sizing: border-box; margin: 0px 0px 0.25em; padding: 0px; direction: ltr; line-height: 1.45; color: #7a2518; text-rendering: optimizeLegibility; font-size: 1rem; font-style: italic;">导读</div>
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建工程</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">搭建框架</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">建立配置框架</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 1</code>: 创建工程</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">已经到最后一个阶段了, 不再详细说工程如何创建了, 看一下步骤即可</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IDEA</code>&nbsp;创建&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Maven</code>&nbsp;工程, 选择存储位置</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">工程命名为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dmp</code>, 注意工程名一般小写, 大家也可以采用自己喜欢的命名方式, 在公司里, 要采用公司的习惯</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">导入&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Maven</code>&nbsp;依赖</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Scala</code>&nbsp;代码目录</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建对应的包们</p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">创建需要的包</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; border-color: #dedede; width: 840px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">包名</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">描述</th></tr>
</thead>
<tbody style="box-sizing: border-box; margin-bottom: 0px;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">com.itheima.dmp.etl</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">放置数据转换任务</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">com.itheima.dmp.report</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">放置报表任务</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">com.itheima.dmp.tags</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">放置标签有关的任务</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">com.itheima.dmp.utils</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">放置一些通用公用的类</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">导入需要的依赖</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DMP</code>&nbsp;中, 暂时先不提供完整的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Maven POM</code>&nbsp;文件, 在一开始只导入必备的, 随着项目的进程, 用到什么再导入什么, 以下是必备的</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;全家桶</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;一套</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Scala</code>&nbsp;依赖</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SLF4J</code>&nbsp;日志依赖</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Junit</code>&nbsp;单元测试</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Java</code>&nbsp;编译插件</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Scala</code>&nbsp;编译插件</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Uber Jar</code>&nbsp;编译插件&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Shade</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">CDH Repo</code>&nbsp;仓库, 需要一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">CDH</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Maven</code>&nbsp;仓库配置是因为用到&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">CDH</code>&nbsp;版本的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code></p>
</li>
</ul>
</div>
<div class="listingblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-xml hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="xml"><span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">properties</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">scala.version</span>&gt;</span>2.11.8<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">scala.version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">spark.version</span>&gt;</span>2.2.0<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">spark.version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">hadoopo.version</span>&gt;</span>2.6.1<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">hadoopo.version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">kudu.version</span>&gt;</span>1.7.0-cdh5.16.0<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">kudu.version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">maven.version</span>&gt;</span>3.5.1<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">maven.version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">junit.version</span>&gt;</span>4.12<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">junit.version</span>&gt;</span>
<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">properties</span>&gt;</span>

<span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependencies</span>&gt;</span>
    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">&lt;!-- Spark --&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.scala-lang<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>scala-library<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>${scala.version}<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.apache.spark<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>spark-core_2.11<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>${spark.version}<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.apache.spark<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>spark-sql_2.11<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>${spark.version}<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.apache.spark<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>spark-hive_2.11<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>${spark.version}<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.apache.hadoop<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>hadoop-client<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>${hadoopo.version}<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>

    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">&lt;!-- Kudu client --&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.apache.kudu<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>kudu-client<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>1.7.0-cdh5.16.1<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>

    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">&lt;!-- Kudu Spark --&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.apache.kudu<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>kudu-spark2_2.11<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>1.7.0-cdh5.16.1<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>

    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">&lt;!-- Logging --&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>slf4j-simple<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>1.7.12<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>

    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">&lt;!-- Unit testing --&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>junit<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>junit<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>${junit.version}<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">scope</span>&gt;</span>provided<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">scope</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependencies</span>&gt;</span>

<span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">build</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">sourceDirectory</span>&gt;</span>src/main/scala<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">sourceDirectory</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">testSourceDirectory</span>&gt;</span>src/test/scala<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">testSourceDirectory</span>&gt;</span>

    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">plugins</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">plugin</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>${maven.version}<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">configuration</span>&gt;</span>
                <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">source</span>&gt;</span>1.8<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">source</span>&gt;</span>
                <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">target</span>&gt;</span>1.8<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">target</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">configuration</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">plugin</span>&gt;</span>

        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">plugin</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>net.alchim31.maven<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>scala-maven-plugin<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>3.2.0<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">executions</span>&gt;</span>
                <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">execution</span>&gt;</span>
                    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goals</span>&gt;</span>
                        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goal</span>&gt;</span>compile<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goal</span>&gt;</span>
                        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goal</span>&gt;</span>testCompile<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goal</span>&gt;</span>
                    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goals</span>&gt;</span>
                    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">configuration</span>&gt;</span>
                        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">args</span>&gt;</span>
                            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">arg</span>&gt;</span>-dependencyfile<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">arg</span>&gt;</span>
                            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">arg</span>&gt;</span>${project.build.directory}/.scala_dependencies<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">arg</span>&gt;</span>
                        <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">args</span>&gt;</span>
                    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">configuration</span>&gt;</span>
                <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">execution</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">executions</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">plugin</span>&gt;</span>

        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">plugin</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>2.4<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">executions</span>&gt;</span>
                <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">execution</span>&gt;</span>
                    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">phase</span>&gt;</span>package<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">phase</span>&gt;</span>
                    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goals</span>&gt;</span>
                        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goal</span>&gt;</span>shade<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goal</span>&gt;</span>
                    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">goals</span>&gt;</span>
                <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">execution</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">executions</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">plugin</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">plugins</span>&gt;</span>
<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">build</span>&gt;</span>

<span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">repositories</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">repository</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">id</span>&gt;</span>cdh.repo<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">id</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">name</span>&gt;</span>Cloudera Repositories<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">name</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">url</span>&gt;</span>https://repository.cloudera.com/artifactory/cloudera-repos<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">url</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">snapshots</span>&gt;</span>
            <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">enabled</span>&gt;</span>false<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">enabled</span>&gt;</span>
        <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">snapshots</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">repository</span>&gt;</span>
<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">repositories</span>&gt;</span></code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 2</code>: 框架搭建</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">编写&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;程序的时候, 往往不需要一个非常复杂的框架, 只是对一些基础内容的抽象和封装即可, 但是也要考虑如下问题</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有哪些任务是要执行的</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在做一个项目的时候, 尽量从全局的角度去看, 要考虑到周边的一些环境, 例如说回答自己如下几个问题</p>
</div>
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; margin-bottom: 1.25em; border-color: #dedede; width: 876px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">问题</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">初步分析和解答</th></tr>
</thead>
<tbody style="box-sizing: border-box;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">这个应用有几个入口</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">这个程序的入口数量是不确定的, 随着工作的进展而变化, 但是至少要有两个入口, 一个是生成报表数据, 一个是处理用户的标签数据</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">这个应用会放在什么地方执行</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">分为测试和生产, 测试可以直接使用 IDEA 执行, 生成需要打包并发送到集群执行</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">这个应用如何调度</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">这个应用包含了不止一个任务, 最终会由&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Oozie</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Azkaban</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">AirFlow</code>&nbsp;等工具去调度执行</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有哪些操作可能会导致重复代码过多</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">其实无论是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spring</code>, 还是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Vue</code>, 还是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>, 这些框架和工具, 最终的目的都是帮助我们消除一些重复的和通用的代码</p>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">所以既然我们无需在 Spark 的应用中搭建复杂的项目框架, 但是对于重复的代码还是要消除的, 初步来看可能会有如下重复的代码点</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">各个数据库的访问</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">配置的读取</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Step 3</code>: 建立配置读取工具</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">了解配置文件和读取框架</p>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">数据读取部分, 有一个比较好用的工具, 叫做&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">lightbend/config</code>, 它可以读取一种叫做&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">HOCON</code>&nbsp;的配置文件</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">HOCON</code>&nbsp;全称叫做&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Human-Optimized Config Object Notation</code>, 翻译过来叫做 为人类优化的配置对象表示法</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">HOCON</code>&nbsp;是一种类似于&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Properties</code>&nbsp;的配置文件格式, 并包含&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">JSON</code>&nbsp;的语法格式, 比较易于使用, 其大致格式如下</p>
</div>
<div class="listingblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text">foo: {
  bar: 10,
  baz: 12
}

foo {
  bar = 10,
  baz = 12
}

foo.bar=10
foo.baz=10</code></pre>
</div>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">以上三种写法是等价的, 其解析结果都是两个字段, 分别叫做&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">foo.bar</code>&nbsp;和&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">foo.baz</code></p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">读取&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">HOCON</code>&nbsp;文件格式需要使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">lightbend/config</code>, 它的使用非常的简单</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">当配置文件被命名为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">application.conf</code>&nbsp;并且被放置于&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">resources</code>&nbsp;时, 可以使用如下方式直接加载</p>
</div>
<div class="listingblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-scala hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="scala"><span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> config: <span class="hljs-type" style="box-sizing: border-box; color: #880000;">Config</span> = <span class="hljs-type" style="box-sizing: border-box; color: #880000;">ConfigFactory</span>.load()
<span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> bar = config.getInt(<span class="hljs-string" style="box-sizing: border-box; color: #880000;">"foo.bar"</span>)
<span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> baz = config.getInt(<span class="hljs-string" style="box-sizing: border-box; color: #880000;">"foo.baz"</span>)</code></pre>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建配置文件</p>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建配置文件&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">resource/spark.conf</code>, 并引入如下内容</p>
</div>
<div class="listingblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text"># Worker 心跳超时时间
spark.worker.timeout="500"

# RPC 请求等待结果的超时时间
spark.rpc.askTimeout="600s"

# 所有网络操作的等待时间, spark.rpc.askTimeout 默认值等同于这个参数
spark.network.timeoout="600s"

# 最大使用的 CPU 核心数
spark.cores.max="10"

# 任务最大允许失败次数
spark.task.maxFailures="5"

# 如果开启推测执行, 开启会尽可能的增快任务执行效率, 但是会占用额外的运算资源
spark.speculation="true"

# Driver 是否允许多个 Context
spark.driver.allowMutilpleContext="true"

# Spark 序列化的方式, 使用 Kryo 能提升序列化和反序列化的性能
spark.serializer="org.apache.spark.serializer.KryoSerializer"

# 每个页缓存, Page 指的是操作系统的内存分配策略中的 Page, 一个 Page 代表一组连续的内存空间
# Spark 在引入钨丝计划以后, 使用 Java 的 Unsafe API 直接申请内存, 其申请单位就是 Page
# 如果 Page 过大, 有可能因为操作系统的策略无法分配而拒绝这次内存申请, 从而报错
# 简单来说, 这个配置的作用是一次申请的内存大小
spark.buffer.pageSize="6m"</code></pre>
</div>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">以上的配置列成表如下</p>
</div>
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; border-color: #dedede; width: 830px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">配置项目</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">描述</th></tr>
</thead>
<tbody style="box-sizing: border-box; margin-bottom: 0px;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.worker.timeout</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">如果超过了这个配置项指定的时间,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Master</code>&nbsp;认为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Worker</code>&nbsp;已经跪了</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.network.timeout</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">因为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;管理一整个集群, 任务可能运行在不同的节点上, 后通过网络进行通信, 一次网络通信有可能因为要访问的节点实效而一直等待, 这个配置项所配置的便是这个等待的超时时间</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.cores.max</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;整个应用最大能够申请的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">CPU</code>&nbsp;核心数</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.task.maxFailures</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;本身是支持弹性容错的, 所以不能因为某一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Task</code>&nbsp;失败了, 就认定整个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Job</code>&nbsp;失败, 一般会因为相当一部分&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Task</code>&nbsp;失败了才会认定&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Job</code>&nbsp;失败, 否则会进行重新调度, 这个参数的含义是, 当多少个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Task</code>&nbsp;失败了, 可以认定&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Job</code>&nbsp;失败</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.speculation</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">类似&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Hadoop</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;也支持推测执行, 场景是有可能因为某台机器的负载过高, 或者其它原因, 导致这台机器运行能力很差,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;会根据一些策略检测较慢的任务, 去启动备用任务执行, 使用执行较快的任务的结果, 但是推测执行有个弊端, 就是有可能一个任务会执行多份, 浪费集群资源</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.driver.allowMutilpleContext</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">很少有机会必须一定要在一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark Application</code>&nbsp;中启动多个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Context</code>, 所以这个配置项意义不大, 当必须要使用多个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Context</code>&nbsp;的时候, 开启此配置即可</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.serializer</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;将任务分发到集群中执行, 所以势必涉及序列化, 这个配置项配置的是使用什么序列化器, 默认是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">JDK</code>&nbsp;的序列化器, 可以指定为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kyro</code>&nbsp;从而提升性能, 但是如果使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kyro</code>&nbsp;的话需要序列化的类需要被先注册才能使用</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.buffer.pageSize</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">每个页缓存,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Page</code>&nbsp;指的是操作系统的内存分配策略中的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Page</code>, 一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Page</code>&nbsp;代表一组连续的内存空间,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Spark</code>&nbsp;在引入钨丝计划以后, 使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Java</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Unsafe API</code>&nbsp;直接申请内存, 其申请单位就是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Page</code>, 如果&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Page</code>&nbsp;过大, 有可能因为操作系统的策略无法分配而拒绝这次内存申请, 从而报错, 简单来说, 这个配置的作用是一次申请的内存大小, 一般在报错的时候修改这个配置, 减少一次申请的内存</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">导入配置读取的工具依赖</p>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">pom.xml</code>&nbsp;中的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">properties</code>&nbsp;段增加如下内容</p>
<div class="listingblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text">&lt;config.version&gt;1.3.4&lt;/config.version&gt;</code></pre>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">pom.xml</code>&nbsp;中的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dependencites</code>&nbsp;段增加如下内容</p>
<div class="listingblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text">&lt;!-- Config reader --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.typesafe&lt;/groupId&gt;
    &lt;artifactId&gt;config&lt;/artifactId&gt;
    &lt;version&gt;${config.version}&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">配置工具的设计思路</p>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">在设计一个工具的时候, 第一步永远是明确需求, 我们现在为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;的创建设置配置加载工具, 其需求如下</dt><dd style="box-sizing: border-box; margin: 0px 0px 0.625em 1.125em; padding: 0px; direction: ltr;">
<div class="ulist" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">配置在配置文件中编写</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">typesafe/config</code>&nbsp;加载配置文件</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在创建&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;的时候填写这些配置</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">前两点无需多说, 已经自表达, 其难点也就在于如何在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;创建的时候填入配置, 大致思考的话, 有如下几种方式</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">加载配置文件后, 逐个将配置的项设置给&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code></p>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.config("spark.worker.timeout", config.get("spark.worker.timeout"))</code></p>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">加载配置文件后, 通过隐式转换为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;设置配置</p>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.loadConfig().getOrCreate()</code></p>
</div>
</li>
</ul>
</div>
</dd></dl></div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">毫无疑问, 第二种方式更为方便</p>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建配置工具类</p>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">看代码之前, 先了解一下设计目标</dt><dd style="box-sizing: border-box; margin: 0px 0px 0.625em 1.125em; padding: 0px; direction: ltr;">
<div class="ulist" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">加载配置文件&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">spark.conf</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">无论配置文件中有多少配置都全部加载</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;提供隐式转换自动装载配置</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">下面是代码, 以及重点解读</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="listingblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text">class SparkConfigHelper(builder: SparkSession.Builder) {

  private val config: Config = ConfigFactory.load("spark")            

  def loadConfig(): SparkSession.Builder = {
    import scala.collection.JavaConverters._

    for (entry &lt;- config.entrySet().asScala) {
      val value = entry.getValue
      val valueType = value.valueType()
      val valueFrom = value.origin().filename()                       
      if (valueType == ConfigValueType.STRING &amp;&amp; valueFrom != null) { 
        builder.config(entry.getKey, value.unwrapped().asInstanceOf[String]) 
      }
    }

    builder
  }
}

object SparkConfigHelper {                                            

  def apply(builder: SparkSession.Builder): SparkConfigHelper = {
    new SparkConfigHelper(builder)
  }

  implicit def setSparkSession(builder: SparkSession.Builder) = {     
    SparkConfigHelper(builder)
  }
}</code></pre>
</div>
</div>
<div class="colist arabic" style="box-sizing: border-box; margin: -0.5em 0px 0px; padding: 0px; direction: ltr;">
<table style="box-sizing: border-box; border-spacing: 0px; background: none; margin-bottom: 1.25em; border-width: 0px; border-style: initial; border-color: initial;">
<tbody style="box-sizing: border-box;">
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 加载配置文件</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 因为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Config</code>&nbsp;工具会自动的加载所有的系统变量, 需要通过&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Origin</code>&nbsp;来源判断, 只接收来自于文件的配置</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 判断: 1. 是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">String</code>&nbsp;类型, 2. 来自于某个配置文件</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;设置参数</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 提供伴生对象的意义在于两点: 1. 更方便的创建配置类, 2. 提供隐式转换, 3. 以后可能需要获取某个配置项</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 提供隐式转换, 将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;转为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ConfigHelper</code>&nbsp;对象, 从而提供配置加载</td>
</tr>
</tbody>
</table>
</div>
</dd></dl></div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
<div class="sect1" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; border-top: 1px solid #e7e7e9; color: rgba(0, 0, 0, 0.8); font-family: 'Noto Serif', 'DejaVu Serif', serif; font-size: 16px;">
<h2 id="_3_将数据集中的_ip_转为地域信息" style="box-sizing: border-box; margin: 1em 0px 0.5em; padding: 0px; direction: ltr; font-family: 'Open Sans', 'DejaVu Sans', sans-serif; font-weight: 300; color: #ba3925; text-rendering: optimizeLegibility; line-height: 1.2; font-size: 2.3125em; word-spacing: -0.05em; letter-spacing: -0.01em;">3. 将数据集中的 IP 转为地域信息</h2>
<div class="sectionbody" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="title" style="box-sizing: border-box; margin: 0px 0px 0.25em; padding: 0px; direction: ltr; line-height: 1.45; color: #7a2518; text-rendering: optimizeLegibility; font-size: 1rem; font-style: italic;">导读</div>
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;转换工具介绍</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1.0625rem; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">转换</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;转换工具介绍</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">进行&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;转换这种操作, 一般有如下一些办法</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; border-color: #dedede; width: 840px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">方式</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">描述</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">优点</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">缺点</th></tr>
</thead>
<tbody style="box-sizing: border-box; margin-bottom: 0px;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">自己编写</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">一般如果自己编写查找算法的话, 大致有如下几步</p>
</div>
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 1.25em 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">找到一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP范围 : 省 : 市 : 区</code>&nbsp;这样的数据集</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">读取数据集</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;转为数字表示法, 本质上&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;就是二进制的点位表示法,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">192.168.0.1 &rarr; 1100 0000 1010 1000 0000 0000 0000 0001 &rarr; 3232235521</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">使用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">3232235521</code>&nbsp;这样的数字在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;数据集中通过二分法查找对应的省市区</p>
</li>
</ol></div>
</div>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">没有第三方库的学习成本</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">没有数据结构上的支持, 效率低</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">没有上层的封装, 使用麻烦</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">第三方库</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">一般第三方库会有一些数据结构上的优化, 查找速度比二分法会更快一些, 例如&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">BTree</code>&nbsp;就特别适合做索引, 常见的方式有</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLite</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">纯真数据库</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip2region</code></p>
</li>
</ul>
</div>
</div>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px -1.25em; padding: 0px; direction: ltr;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">速度快</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">不麻烦</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有上层封装, 用着爽</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">第三方一般会提供数据集, 数据集会定时更新, 更精准</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有轮子就别自己搞了, 怪麻烦的</p>
</li>
</ul>
</div>
</div>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">需要学习第三方工具, 有一定的学习成本, 而且不一定和以后工作中用同样一个工具</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">选用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip2region</code>&nbsp;这个工具来查找省市名称</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip2region</code>&nbsp;的优点</p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; margin-bottom: 1.25em; border-color: #dedede; width: 816px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">工具</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">数据结构支持</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">中文支持</th></tr>
</thead>
<tbody style="box-sizing: border-box;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLite</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">无</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">纯真</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">无</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip2region</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">引入&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip2region</code></p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">复制&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;数据集&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip2region.db</code>&nbsp;到工程下的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dataset</code>&nbsp;目录</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Maven</code>&nbsp;中增加如下代码</p>
<div class="listingblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-xml hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="xml"><span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>org.lionsoul<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>ip2region<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>1.7.2<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span></code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip2region</code>&nbsp;的使用</p>
<div class="listingblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-scala hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="scala"><span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> searcher = <span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">new</span> <span class="hljs-type" style="box-sizing: border-box; color: #880000;">DbSearcher</span>(<span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">new</span> <span class="hljs-type" style="box-sizing: border-box; color: #880000;">DbConfig</span>(), <span class="hljs-string" style="box-sizing: border-box; color: #880000;">"dataset/ip2region.db"</span>)
<span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> data = searcher.btreeSearch(ip)
println(data.getRegion)</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">选用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLite</code>&nbsp;确定经纬度</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">后面需要使用经纬度, 只有&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLite</code>&nbsp;可以查找经纬度</p>
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; margin-bottom: 1.25em; border-color: #dedede; width: 816px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">工具</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">数据结构支持</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">中文支持</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">经纬度支持</th></tr>
</thead>
<tbody style="box-sizing: border-box;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLite</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">无</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">纯真</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">无</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">无</p>
</td>
</tr>
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip2region</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">有</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">无</p>
</td>
</tr>
</tbody>
</table>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">引入&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLite</code></p>
<div class="openblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLite</code>&nbsp;的数据集&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLiteCity.dat</code>&nbsp;拷贝到工程中&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">dataset</code>&nbsp;目录下</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">pom.xml</code>&nbsp;中添加如下依赖</p>
<div class="listingblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-xml hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="xml"><span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>com.maxmind.geoip<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>geoip-api<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>1.3.0<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>

<span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>com.maxmind.geoip2<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">groupId</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>geoip2<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">artifactId</span>&gt;</span>
    <span class="hljs-tag" style="box-sizing: border-box;">&lt;<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>2.12.0<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">version</span>&gt;</span>
<span class="hljs-tag" style="box-sizing: border-box;">&lt;/<span class="hljs-name" style="box-sizing: border-box; font-weight: bold;">dependency</span>&gt;</span></code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">GeoLite</code>&nbsp;的使用方式</p>
<div class="listingblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-scala hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="scala"><span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> lookupService = <span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">new</span> <span class="hljs-type" style="box-sizing: border-box; color: #880000;">LookupService</span>(<span class="hljs-string" style="box-sizing: border-box; color: #880000;">"dataset/GeoLiteCity.dat"</span>, <span class="hljs-type" style="box-sizing: border-box; color: #880000;">LookupService</span>.<span class="hljs-type" style="box-sizing: border-box; color: #880000;">GEOIP_MEMORY_CACHE</span>)
<span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> location = lookupService.getLocation(<span class="hljs-string" style="box-sizing: border-box; color: #880000;">"121.76.98.134"</span>)
println(location.latitude, location.longitude)</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;转换思路梳理</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">现在使用不同的视角, 理解一下在这个环节我们需要做的事情</p>
</div>
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">工具视角</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190614162114.png" alt="20190614162114" /></div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">数据视角</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190614162634.png" alt="20190614162634" /></div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">要做的事</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">读取数据集&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">pmt.json</code></p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;转换为省市</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">设计&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;表结构, 创建&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;表</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">存入&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;表</p>
</li>
</ul>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;">挑战和结构</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">现在的任务本质上是把一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 A</code>&nbsp;转为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 B</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 A</code>&nbsp;可能不够好,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 B</code>&nbsp;相对较好, 然后把&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 B</code>&nbsp;落地到&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>, 作为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ODS</code>&nbsp;层, 以供其它功能使用</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">但是如果&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 A</code>&nbsp;转为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 B</code>&nbsp;的过程中需要多种转换呢?</p>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190614165344.png" alt="20190614165344" /></div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">所以, 从面向对象的角度上来说, 需要一套机制, 能够组织不同的功能协同运行</p>
<div class="imageblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><img style="box-sizing: border-box; max-width: 100%; height: auto; display: inline-block; vertical-align: middle;" src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190614170054.png" alt="20190614170054" /></div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">所以我们可以使用一个名为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">PmtETLProcessor</code>&nbsp;的类代表针对&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 A</code>&nbsp;到&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">数据集 B</code>&nbsp;的转换, 然后抽象出单位更小的负责具体某一个转换步骤的节点, 集成到&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">PmtETLProcessor</code>&nbsp;中, 共同完成任务</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;">参数配置</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">为了让程序行为更可控制, 所以一般会在编写程序之前先大致计划以下程序中可能使用到的一些参数</p>
<div class="ulist" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;的表名</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;表的复制因子</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ODS</code>&nbsp;层的表名</p>
</li>
</ul>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">规划好以后, 着手创建配置文件&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">resource/kudu.conf</code></p>
<div class="listingblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text"># Server properties
kudu.common.master="192.168.169.101:7051,192.168.169.102:7051,192.168.169.103:7051"
kudu.common.factor=1

# Table name
kudu.name.pmt_ods="ODS_"</code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;的支持库</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="dlist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><dl style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;"><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;">为了方便&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;的使用, 所以要创建一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Helper</code>, 大致需求如下</dt><dd style="box-sizing: border-box; margin: 0px 0px 1.25em 1.125em; padding: 0px; direction: ltr;">
<table class="tableblock frame-all grid-all stretch" style="box-sizing: border-box; border-collapse: separate; border-spacing: 0px; background: #ffffff; margin-bottom: 1.25em; border-color: #dedede; width: 882px; max-width: 100%;"><colgroup style="box-sizing: border-box;"><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /><col style="box-sizing: border-box; width: 0px;" /></colgroup>
<thead style="box-sizing: border-box; background: #f7f8f7;">
<tr style="box-sizing: border-box;"><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">需求</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">原始调用方式</th><th class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5em 0.625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); text-align: left; line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top; text-rendering: optimizeLegibility;">理想调用方式</th></tr>
</thead>
<tbody style="box-sizing: border-box;">
<tr style="box-sizing: border-box;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建表</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduContext.createTable()</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-right-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession.createKuduTable()</code></p>
</td>
</tr>
<tr style="box-sizing: border-box; background: #f8f8f7;">
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">通过&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DataFrame</code>&nbsp;将数据保存到&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>表</p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DataFrame.write.options(&hellip;​).kudu</code></p>
</td>
<td class="tableblock halign-left valign-top" style="box-sizing: border-box; margin: 0px; padding: 0.5625em 0.625em; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6; border-width: 0px; border-color: #dedede; vertical-align: top;">
<p class="tableblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0px; word-spacing: -0.15em; background: none; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DataFrame.saveAsKuduTable</code></p>
</td>
</tr>
</tbody>
</table>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1em; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduHelper</code>&nbsp;的设计</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 1.25rem; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduHelper</code>&nbsp;的设计思路两句话可以总结</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 1.25em 1.5em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">尽可能的不在处理类中读取配置文件</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">尽可能的提供易于调用的接口</p>
</li>
</ul>
</div>
<div class="listingblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text">class KuduHelper {                                                            
  private var spark: SparkSession = _
  private var dataset: Dataset[Any] = _

  def this(spark: SparkSession) = {                                           
    this()
    this.spark = spark
  }

  def this(dataset: Dataset[Any]) = {                                         
    this(dataset.sparkSession)
    this.dataset = dataset
  }

  private val config = ConfigFactory.load("kudu")
  private val KUDU_MASTERS = config.getString("kudu.common.master")
  private val kuduContext = new KuduContext(KUDU_MASTERS, spark.sparkContext) 

  def createKuduTable(tableName: String, schema: Schema): Unit = {            
    if (kuduContext.tableExists(tableName)) {
      kuduContext.deleteTable(tableName)
    }

    import scala.collection.JavaConverters._
    val options = new CreateTableOptions()
      .setNumReplicas(config.getInt("kudu.common.factor"))
      .addHashPartitions(List("uuid").asJava, 6)

    kuduContext.createTable(tableName, schema, options)
  }

  def saveToKudu(tableName: String): Unit = {                                 
    import org.apache.kudu.spark.kudu._

    dataset.write
      .option("kudu.table", tableName)
      .option("kudu.master", KUDU_MASTERS)
      .mode(SaveMode.Append)
      .kudu
  }

}

object KuduHelper {

  implicit def sparkToKuduContext(spark: SparkSession): Unit = {              
    new KuduHelper(spark)
  }

  implicit def datasetToKuduContext(dataset: Dataset[Any]): Unit = {          
    new KuduHelper(dataset)
  }

  def formattedDate(): String = {                                             
    FastDateFormat.getInstance("yyyyMMdd").format(new Date)
  }
}</code></pre>
</div>
</div>
<div class="colist arabic" style="box-sizing: border-box; margin: -0.5em 0px 0px; padding: 0px; direction: ltr;">
<table style="box-sizing: border-box; border-spacing: 0px; background: none; border-width: 0px; border-style: initial; border-color: initial;">
<tbody style="box-sizing: border-box;">
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 主题设计思路就是将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;或者&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DataFrame</code>&nbsp;隐式转换为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduHelper</code>, 在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduHelper</code>&nbsp;中提供帮助方法</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;转为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduHelper</code>&nbsp;时调用</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Dataset</code>&nbsp;转为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduHelper</code>&nbsp;时调用</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Helper</code>&nbsp;内部读取配置文件, 创建&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduContext</code></td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 此方法就是设计目标&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession.createKuduTable(tableName)</code>&nbsp;中被调用的方法</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 此方法就是设计目标&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DataFrame.saveToKudu(tableName)</code>&nbsp;中被调用的方法</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">SparkSession</code>&nbsp;转为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduHelper</code></td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 将&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Dataset</code>&nbsp;转为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">KuduHelper</code></td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 提供一个统一的生成日期的方法, 给外部使用</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1" style="box-sizing: border-box; margin: 0px 0px 0.3125em; padding: 0px; direction: ltr; text-rendering: optimizeLegibility; font-size: 1.0625rem; font-weight: bold;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; font-weight: 400; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ETL</code>&nbsp;代码编写</dt><dd style="box-sizing: border-box; margin: 0px 0px 0px 1.125em; padding: 0px; direction: ltr;">
<div class="sidebarblock" style="box-sizing: border-box; margin: 0px; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #f8f8f7; border-radius: 4px;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="olist arabic" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;"><ol class="arabic" style="box-sizing: border-box; margin: 0px 0px 0px 1.75em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">PmtETLProcessor</code>&nbsp;类</p>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">PmtETLProcessor</code>&nbsp;类负责整个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ETL</code>&nbsp;过程, 但是不复杂中间过程中具体的数据处理, 具体数据如何转换, 要做什么事情由具体的某个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Converter</code>&nbsp;类负责</p>
</div>
<div class="listingblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text">object PmtETLProcessor {

  def main(args: Array[String]): Unit = {
    import com.itheima.dmp.utils.SparkConfigHelper._
    import com.itheima.dmp.utils.KuduHelper._

    // 创建 SparkSession
    val spark = SparkSession.builder()
      .master("local[6]")
      .appName("pmt_etl")
      .loadConfig()
      .getOrCreate()

    import spark.implicits._

    // 读取数据
    val originDataset = spark.read.json("dataset/pmt.json")

  }
}</code></pre>
</div>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">创建&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IPConverter</code>&nbsp;类处理&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IP</code>&nbsp;转换的问题</p>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;"><code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IPConverter</code>&nbsp;主要解决如下问题</p>
</div>
<div class="ulist" style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr;">
<ul style="box-sizing: border-box; margin: 0px 0px 0px 1.25em; padding: 0px; direction: ltr; font-size: 1em; line-height: 1.6; list-style-position: outside; font-family: inherit;">
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">原始数据集中有一个&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip</code>&nbsp;列, 要把&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip</code>&nbsp;这一列数据转为五列, 分别是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">ip</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Longitude</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">latitude</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">region</code>,&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">city</code>, 从而扩充省市信息和经纬度信息</p>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">将新创建的四列数据添加到原数据集中</p>
</li>
</ul>
</div>
<div class="listingblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-text hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="text">object IPConverter {

  def process(dataset: Dataset[Row]): Dataset[Row] = {
    val dataConverted: RDD[Row] = dataset
      .rdd
      .mapPartitions(convertIPtoLocation)                                  

    val schema = dataset.schema
      .add("region", StringType)
      .add("city", StringType)
      .add("longitude", DoubleType)
      .add("latitude", DoubleType)

    val completeDataFrame = dataset
      .sparkSession
      .createDataFrame(dataConverted, schema)                              

    completeDataFrame
  }

  def convertIPtoLocation(iterator: Iterator[Row]): Iterator[Row] = {      
    val searcher = new DbSearcher(new DbConfig(), "dataset/ip2region.db")

    val lookupService = new LookupService(
      "dataset/GeoLiteCity.dat",
      LookupService.GEOIP_MEMORY_CACHE)

    iterator.map(row =&gt; {
      val ip = row.getAs[String]("ip")

      val regionData = searcher.btreeSearch(ip).getRegion.split("\\|")     
      val region = regionData(2)
      val city = regionData(3)

      val location = lookupService.getLocation(ip)                         
      val longitude = location.longitude.toDouble
      val latitude = location.latitude.toDouble

      val rowSeq = row.toSeq :+ region :+ city :+ longitude :+ latitude
      Row.fromSeq(rowSeq)                                                  
    })
  }
}</code></pre>
</div>
</div>
<div class="colist arabic" style="box-sizing: border-box; margin: -0.5em 0px 0px; padding: 0px; direction: ltr;">
<table style="box-sizing: border-box; border-spacing: 0px; background: none; border-width: 0px; border-style: initial; border-color: initial;">
<tbody style="box-sizing: border-box;">
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 通过&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">mapPartitions</code>&nbsp;算子, 对每一个分区数据调用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">convertIPtoLocation</code>&nbsp;进行转换, 需要注意的是, 这个地方已经被转为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RDD</code>&nbsp;了, 而不是&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DataFrame</code>, 因为&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DataFrame</code>&nbsp;在转换中不能更改&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Schema</code></td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">:&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">convertIPtoLocation</code>&nbsp;主要做的事情是扩充原来的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">row</code>, 增加四个新的列</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 获取省市中文名</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 获取经纬度</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 根据原始&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">row</code>&nbsp;生成新的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">row</code>, 新的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">row</code>&nbsp;中包含了省市和经纬度信息</td>
</tr>
<tr style="box-sizing: border-box; background: none;">
<td style="box-sizing: border-box; margin: 0px; padding: 0.4em 0.75em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1; vertical-align: top;">&nbsp;</td>
<td style="box-sizing: border-box; margin: 0px; padding: 0.25em 0px; direction: ltr; font-size: inherit; color: rgba(0, 0, 0, 0.8); line-height: 1.6;">: 新的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">row</code>&nbsp;对象的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">RDD</code>&nbsp;结合 被扩充过的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Schema</code>, 合并生成新的&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">DataFrame</code>&nbsp;返回给&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Processor</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</li>
<li style="box-sizing: border-box; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px 0px 0.625em; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">在&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">PmtETLProcessor</code>&nbsp;中调用&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">IPConverter</code></p>
<div class="exampleblock" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 1.25em; direction: ltr; border-style: solid; border-width: 1px; border-color: #e0e0dc; background: #fffef7; border-radius: 4px; box-shadow: #e0e0dc 0px 1px 4px;">
<div class="listingblock" style="box-sizing: border-box; margin: 0px 0px 1.25em; padding: 0px; direction: ltr;">
<div class="content" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; position: relative;">
<pre class="highlightjs highlight"><code class="language-scala hljs" style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 1em; color: #444444; line-height: 1.45; text-rendering: optimizeSpeed; display: block; overflow-x: auto; padding: 1em; background: #f0f0f0; border-radius: 4px;" data-lang="scala"><span class="hljs-class" style="box-sizing: border-box;"><span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">object</span> <span class="hljs-title" style="box-sizing: border-box; color: #880000; font-weight: bold;">PmtETLProcessor</span> </span>{

  <span class="hljs-function" style="box-sizing: border-box;"><span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">def</span> <span class="hljs-title" style="box-sizing: border-box; color: #880000; font-weight: bold;">main</span></span>(args: <span class="hljs-type" style="box-sizing: border-box; color: #880000;">Array</span>[<span class="hljs-type" style="box-sizing: border-box; color: #880000;">String</span>]): <span class="hljs-type" style="box-sizing: border-box; color: #880000;">Unit</span> = {
    ...

    <span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> originDataset = spark.read.json(<span class="hljs-string" style="box-sizing: border-box; color: #880000;">"dataset/pmt.json"</span>)

    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">// 调用 IPConverter, 传入 originDataset, 生成包含经纬度和省市的 DataFrame</span>
    <span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> ipConvertedResult = <span class="hljs-type" style="box-sizing: border-box; color: #880000;">IPConverter</span>.process(originDataset)

    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">// 要 Select 的列们, 用于组织要包含的结果集中的数据</span>
    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">// 因为太多, 不再此处展示, 若要查看, 请移步代码工程</span>
    <span class="hljs-keyword" style="box-sizing: border-box; font-weight: bold;">val</span> selectRows: <span class="hljs-type" style="box-sizing: border-box; color: #880000;">Seq</span>[<span class="hljs-type" style="box-sizing: border-box; color: #880000;">Column</span>] = <span class="hljs-type" style="box-sizing: border-box; color: #880000;">Seq</span>(...)

    <span class="hljs-comment" style="box-sizing: border-box; color: #888888;">// 选中相应的列</span>
    ipConvertedResult.select(selectRows:_*).show()
  }</code></pre>
</div>
</div>
<div class="paragraph" style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr;">
<p style="box-sizing: border-box; margin: 0px; padding: 0px; direction: ltr; font-family: inherit; font-size: 1em; line-height: 1.6; text-rendering: optimizeLegibility; letter-spacing: -0.01em;">通过以上的代码, 已经在数据集中扩展了地理位置相关的信息, 接下来可以存入&nbsp;<code style="box-sizing: border-box; font-family: 'Droid Sans Mono', 'DejaVu Sans Mono', monospace; font-size: 0.9375em; color: rgba(0, 0, 0, 0.9); letter-spacing: 0px; padding: 0.1em 0.5ex; word-spacing: -0.15em; background-color: #f7f7f8; border-radius: 4px; line-height: 1.45; text-rendering: optimizeSpeed; word-wrap: break-word;">Kudu</code>&nbsp;了</p>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
</div>]]></description></item><item><title>重装VisualSVN Server报错</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/24/11733244.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 24 Oct 2019 08:54:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/24/11733244.html</guid><description><![CDATA[<p>由于eclipse无法连接SVN服务器，尝试着重装SVN，安装到一半时，弹出如下图所示错误：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191024164949244-1547483206.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>打开提示窗口输入services.msc，进入服务界面：</p>
<p>发现VisualSVN Server服务无法启动，于是双击打开该服务的属性界面，进入&ldquo;登录&rdquo;选项卡，修改登录身份为&ldquo;本地系统账户&rdquo;</p>
<p>如下图所示：</p>
<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191024165252471-1845886929.png" alt="" /></p>
<p>&nbsp;</p>
<p>该服务可以正常启动，启动该服务后，再点击最初安装报错地方的Retry按钮，正常安装完毕。</p>
<p>&nbsp;</p>]]></description></item><item><title>kudu-master服务启动失败</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/23/11728265.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 23 Oct 2019 11:29:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/23/11728265.html</guid><description><![CDATA[<p>执行service kudu-master start ,&nbsp; 提示启动失败failed。</p>
<p>进入报错日志目录&nbsp; （cd /var/log/kudu/），看到报错信息（vim kudu-master.ERROR 或&nbsp;vim kudu-master.FATAL）如下：</p>
<p>Log file created at: 2019/10/23 19:04:52<br />Running on machine: cdh01.itcast.cn<br />Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg<br />F1023 19:04:52.290035  6258 master_main.cc:74] Check failed: _s.ok() Bad status:<span style="color: #ff0000;"> IO e</span><br /><span style="color: #ff0000;">rror: Failed to load FS layout: could not load /var/lib/kudu/master/data/block_manage</span><br /><span style="color: #ff0000;">r_instance: existing data was written using the 'log' block manager; cannot restart w</span><br /><span style="color: #ff0000;">ith a different block manager 'file' without reformatting</span></p>
<p>解决步骤：</p>
<p>1. cd /var/lib/kudu/master/data&nbsp;</p>
<p>mv&nbsp;block_manager_instance&nbsp;block_manager_instance_bak</p>
<p>然后再次执行service kudu-master start，报以下错误：</p>
<p>Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg</p>
<p>F1023 19:18:49.135205  6374 master_main.cc:74] Check failed: _s.ok() Bad status: <span style="color: #ff0000;">Alre</span><br /><span style="color: #ff0000;">ady present: FS layout already exists; not overwriting existing layout. See https://k</span><br /><span style="color: #ff0000;">udu.apache.org/releases/1.7.0-cdh5.16.1/docs/troubleshooting.html: unable to create f</span><br /><span style="color: #ff0000;">ile system roots: FSManager roots already exist: /var/lib/kudu/master</span></p>
<p>&nbsp;</p>
<p>2.&nbsp;cd /var/lib/kudu/&nbsp;&nbsp;</p>
<p>mv master master_bak</p>
<p>然后再次执行service kudu-master start，可以正常启动了。</p>
<p>&nbsp;</p>]]></description></item><item><title>linux(centos6.10)下去掉mysql的强密码验证</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/20/11708797.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 20 Oct 2019 11:54:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/20/11708797.html</guid><description><![CDATA[<p>&nbsp;</p>
<p>vim /etc/my.cnf</p>
<p>shift + G&nbsp; &nbsp; &nbsp; 光标移到最下方；</p>
<p>o&nbsp; &nbsp; 进入插入模式，同时换行；</p>
<p>添加一行语句：&nbsp;&nbsp;validate_password=OFF</p>
<p>保存退出。</p>
<p>service mysqld restart&nbsp; &nbsp; 重启mysql服务。</p>
<p>完工。</p>]]></description></item><item><title>Update(Stage5)：Kudu_javaApi使用_Spark整合</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/19/11705043.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 19 Oct 2019 12:16:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/19/11705043.html</guid><description><![CDATA[<p>Table of Contents:&nbsp;</p>
<ul class="sectlevel2">
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day02/Kudu.html#_2_3_安装_zookeeper">2.3. 安装 Zookeeper</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day02/Kudu.html#_2_4_安装_hadoop">2.4. 安装 Hadoop</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day02/Kudu.html#_2_4_安装_mysql">2.4. 安装 MySQL</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day02/Kudu.html#_2_5_安装_hive">2.5. 安装 Hive</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day02/Kudu.html#_2_6_安装_kudu">2.6. 安装 Kudu</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day02/Kudu.html#_2_7_安装_impala">2.7. 安装 Impala</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day02/Kudu.html#_2_8_安装_hue">2.8. 安装 Hue</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day02/Kudu.html#_2_8_使用_scala_操作_kudu">2.8. 使用 Scala 操作 Kudu</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day02/Kudu.html#_2_9_使用_spark_操作_kudu">2.9. 使用 Spark 操作 Kudu</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day02/Kudu.html#_2_10_使用_impala_执行_sql_语句访问_hive">2.10. 使用 Impala 执行 SQL 语句访问 Hive</a></li>
</ul>
<p>&nbsp;</p>
<div class="sect2">
<h3 id="_2_3_安装_zookeeper">2.3. 安装 Zookeeper</h3>
<table class="tableblock frame-all grid-all stretch"><caption class="title">集群规划</caption><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">主机名</th><th class="tableblock halign-left valign-top">是否有&nbsp;<code>Zookeeper</code></th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>cdh01</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">有</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>cdh02</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">有</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>cdh03</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">有</p>
</td>
</tr>
</tbody>
</table>
<div class="dlist"><dl><dt class="hdlist1"><code>Step 1</code>: 安装&nbsp;<code>Zookeeper</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>和以往不同,&nbsp;<code>CDH</code>&nbsp;版本的&nbsp;<code>Zookeeper</code>&nbsp;是经过定制的, 所以可以直接通过&nbsp;<code>Yum</code>&nbsp;来安装, 使用刚才所搭建的&nbsp;<code>Yum</code>&nbsp;仓库, 在所有节点上执行如下命令</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">yum install -y zookeeper zookeeper-server</code></pre>
</div>
</div>
</li>
<li>
<p><code>CDH</code>&nbsp;版本的所有工具都会遵循&nbsp;<code>Linux</code>&nbsp;的习惯放置&nbsp;<code>Log</code>&nbsp;和&nbsp;<code>Data</code>,所以需要先创建&nbsp;<code>Zookeeper</code>&nbsp;的数据目录,并且所有者指定给&nbsp;<code>Zookeeper</code>&nbsp;所使用的用户,如下命令在所有节点执行</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">mkdir -p /var/lib/zookeeper
chown -R zookeeper /var/lib/zookeeper/</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 2</code>: 配置&nbsp;<code>Zookeeper</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>在使用&nbsp;<code>Apache</code>&nbsp;版本的&nbsp;<code>Zookeeper</code>&nbsp;时, 我们需要自己创建&nbsp;<code>Myid</code>&nbsp;文件, 现在使用&nbsp;<code>CDH</code>&nbsp;版本的&nbsp;<code>Zookeeper</code>&nbsp;已经为我们提供了对应的&nbsp;<code>Shell</code>&nbsp;程序, 在所有节点执行如下命令, 注意&nbsp;<code>myid</code>&nbsp;参数, 在不同节点要修改&nbsp;<code>myid</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">service zookeeper-server init --myid=1</code></pre>
</div>
</div>
</li>
<li>
<p><code>Zookeeper</code>&nbsp;想要组成集群的话, 必须要修改配置文件, 配置整个集群的服务器地址,&nbsp;<code>CDH</code>&nbsp;版本的&nbsp;<code>Zookeeper</code>&nbsp;默认配置文件在&nbsp;<code>/etc/zookeeper/conf/zoo.cfg</code>, 修改这个文件增加服务器地址, 在所有节点上修改&nbsp;<code>Zookeeper</code>&nbsp;的配置文件增加如下</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">server.1=cdh01:2888:3888
server.2=cdh02:2888:3888
server.3=cdh03:2888:3888</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 3</code>: 在所有节点启动&nbsp;<code>Zookeeper</code>&nbsp;并检查</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>启动&nbsp;<code>CDH</code>&nbsp;版本的&nbsp;<code>Zookeeper</code>&nbsp;也是通过&nbsp;<code>Service</code>&nbsp;的方式</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">service zookeeper-server start</code></pre>
</div>
</div>
</li>
<li>
<p>因为 Zookeeper 的搭建比较复杂, 启动完成后可以通过 CDH 提供的命令, 或者使用 Zookeeper 的四字命令来查看是否状态正常</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">zookeeper-server status<br />echo mntr | nc cdh01 2181 //查看cdh01上的zookeeper的状态统计，可以在cdh01，cdh02或cdh03上执行该命令<br />echo stat | nc cdh03 2181 <br /></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content"><code>CDH</code>&nbsp;版本的组件有一个特点, 默认情况下配置文件在&nbsp;<code>/etc</code>&nbsp;对应目录, 日志在&nbsp;<code>/var/log</code>&nbsp;对应目录, 数据在&nbsp;<code>/var/lib</code>&nbsp;对应目录, 例如说&nbsp;<code>Zookeeper</code>, 配置文件放在&nbsp;<code>/etc/zookeeper</code>&nbsp;中, 日志在&nbsp;<code>/var/log/zookeeper</code>中, 其它的组件也遵循这样的规律</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_2_4_安装_hadoop">2.4. 安装 Hadoop</h3>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>安装软件包</p>
</li>
<li>
<p>配置 HDFS</p>
</li>
<li>
<p>配置 Yarn 和 MapReduce</p>
</li>
</ol></div>
</div>
</div>
<table class="tableblock frame-all grid-all stretch"><caption class="title">集群规划</caption><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">主机名</th><th class="tableblock halign-left valign-top">职责</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>cdh01</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Yarn ResourceManager</code>,&nbsp;<code>HDFS NameNode</code>,&nbsp;<code>HDFS SecondaryNamenode</code>,&nbsp;<code>MapReduce HistroyServer</code>,&nbsp;<code>Hadoop Clients</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>cdh02</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Yarn NodeManager</code>,&nbsp;<code>HDFS DataNode</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>cdh03</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Yarn NodeManager</code>,&nbsp;<code>HDFS DataNode</code></p>
</td>
</tr>
</tbody>
</table>
<div class="dlist"><dl><dt class="hdlist1"><code>Step 1</code>: 安装&nbsp;<code>Hadoop</code>&nbsp;软件包</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>CDH</code>&nbsp;版本的&nbsp;<code>Hadoop</code>&nbsp;安装主要思路如下</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>下载软件包</p>
</li>
<li>
<p>配置各个组件</p>
</li>
<li>
<p>启动各个组件</p>
</li>
</ol></div>
<div class="paragraph">
<p>所以第一步, 应该先安装&nbsp;<code>Hadoop</code>&nbsp;的软件包, 只有软件包已经下载, 才能进行相应组件的配置, 根据集群规划进行安装</p>
</div>
<div class="paragraph">
<p>根据集群规划, cdh01 中应该如下安装软件包</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">yum -y install hadoop hadoop-yarn-resourcemanager hadoop-yarn-nodemanager hadoop-hdfs-secondarynamenode hadoop-hdfs-namenode hadoop-hdfs-datanode hadoop-mapreduce hadoop-mapreduce-historyserver hadoop-client</code></pre>
</div>
</div>
<div class="paragraph">
<p>根据集群规划, cdh02 和 cdh03 中应该如下安装软件包</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">yum -y install hadoop hadoop-yarn-nodemanager hadoop-hdfs-datanode hadoop-mapreduce hadoop-client</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 2</code>: 配置&nbsp;<code>HDFS</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>配置文件的思路</p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>在&nbsp;<code>CDH</code>&nbsp;版本的组件中, 配置文件是可以动态变更的</p>
</div>
<div class="paragraph">
<p>本质上,&nbsp;<code>CDH</code>&nbsp;各组件的配置文件几乎都分布在&nbsp;<code>/etc</code>&nbsp;目录中, 例如&nbsp;<code>Hadoop</code>&nbsp;的配置文件就在&nbsp;<code>/etc/hadoop/conf</code>&nbsp;中, 这个&nbsp;<code>conf</code>&nbsp;目录是&nbsp;<code>Hadoop</code>&nbsp;当前所使用的配置文件目录, 但是这个目录其实是一个软链接, 当希望更改配置的时候, 只需要在&nbsp;<code>/etc/hadoop</code>&nbsp;中创建一个新的目录, 然后将&nbsp;<code>conf</code>&nbsp;指向这个新目录即可</p>
</div>
<div class="paragraph">
<p>但是因为各个组件的&nbsp;<code>conf</code>&nbsp;目录对应了多个目录, 还需要修改其指向, 管理起来很麻烦, 所以&nbsp;<code>CDH</code>&nbsp;使用了&nbsp;<code>Linux</code>&nbsp;一个非常厉害的功能, 可以配置一个目录可以指向的多个目录, 同时可以根据优先级确定某个目录指向谁, 这个工具叫做&nbsp;<code>alternatives</code>, 有如下几个常见操作</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>alternatives --install</code>&nbsp;讲一个新目录关联进来, 并指定其 ID 和优先级</p>
</li>
<li>
<p><code>alternatives --set</code>&nbsp;设置其指向哪个目录</p>
</li>
<li>
<p><code>alternatives --display</code>&nbsp;展示其指向哪个目录</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>在所有节点中复制原始配置文件并生成新的配置目录, 让&nbsp;<code>Hadoop</code>&nbsp;使用使用新的配置目录</p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>这样做的目的是尽可能的保留原始配置文件, 以便日后恢复,&nbsp;<strong>所以在所有节点中执行如下操作</strong></p>
</div>
<div class="ulist">
<ul>
<li>
<p>创建新的配置目录</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">cp -r /etc/hadoop/conf.empty /etc/hadoop/conf.itcast</code></pre>
</div>
</div>
</li>
<li>
<p>链接过去, 让&nbsp;<code>Hadoop</code>&nbsp;读取新的目录</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text"># 关联新的目录和 conf
alternatives --install /etc/hadoop/conf hadoop-conf /etc/hadoop/conf.itcast 50
# 设置指向
alternatives --set hadoop-conf /etc/hadoop/conf.itcast
# 显式当前指向
alternatives --display hadoop-conf</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>在所有节点的新配置目录&nbsp;<code>/etc/hadoop/conf.itcast</code>&nbsp;中, 修改配置文件</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>vi /etc/hadoop/conf.itcast/core-site.xml</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">name&gt;fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">value&gt;hdfs://cdh01:8020<span class="hljs-tag">&lt;/<span class="hljs-name">value&gt;
<span class="hljs-tag">&lt;/<span class="hljs-name">property&gt;</span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</li>
<li>
<p><code>vi /etc/hadoop/conf.itcast/hdfs-site.xml</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">name&gt;dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">value&gt;file:///var/lib/hadoop-hdfs/cache/hdfs/dfs/name<span class="hljs-tag">&lt;/<span class="hljs-name">value&gt;
<span class="hljs-tag">&lt;/<span class="hljs-name">property&gt;
<span class="hljs-tag">&lt;<span class="hljs-name">property&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">name&gt;dfs.datanode.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">value&gt;file:///var/lib/hadoop-hdfs/cache/hdfs/dfs/data<span class="hljs-tag">&lt;/<span class="hljs-name">value&gt;
<span class="hljs-tag">&lt;/<span class="hljs-name">property&gt;
<span class="hljs-tag">&lt;<span class="hljs-name">property&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">name&gt;dfs.permissions.superusergroup<span class="hljs-tag">&lt;/<span class="hljs-name">name&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">value&gt;hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">value&gt;
<span class="hljs-tag">&lt;/<span class="hljs-name">property&gt;
<span class="hljs-tag">&lt;<span class="hljs-name">property&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">name&gt;dfs.namenode.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">value&gt;cdh01:50070<span class="hljs-tag">&lt;/<span class="hljs-name">value&gt;
<span class="hljs-tag">&lt;/<span class="hljs-name">property&gt;
<span class="hljs-tag">&lt;<span class="hljs-name">property&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">name&gt;dfs.permissions.enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">value&gt;false<span class="hljs-tag">&lt;/<span class="hljs-name">value&gt;
<span class="hljs-tag">&lt;/<span class="hljs-name">property&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>在所有节点中, 创建配置文件指定的&nbsp;<code>HDFS</code>&nbsp;的&nbsp;<code>NameNode</code>&nbsp;和&nbsp;<code>DataNode</code>&nbsp;存放数据的目录, 并处理权限</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>如下创建所需要的目录</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs groovy" data-lang=" text">mkdir -p <span class="hljs-regexp">/var/lib<span class="hljs-regexp">/hadoop-hdfs/cache<span class="hljs-regexp">/hdfs/dfs/name
mkdir -p <span class="hljs-regexp">/var/lib<span class="hljs-regexp">/hadoop-hdfs/cache<span class="hljs-regexp">/hdfs/dfs/data</span></span></span></span></span></span></code></pre>
</div>
</div>
</li>
<li>
<p>因为&nbsp;<code>CDH</code>&nbsp;比较特殊, 其严格按照&nbsp;<code>Linux</code>&nbsp;用户来管理和启动各个服务, 所以&nbsp;<code>HDFS</code>&nbsp;启动的时候使用的是&nbsp;<code>hdfs</code>&nbsp;用户组下的用户&nbsp;<code>hdfs</code>, 需要创建文件后进行权限配置</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language- text hljs groovy" data-lang=" text">chown -R <span class="hljs-string">hdfs:hdfs <span class="hljs-regexp">/var/lib<span class="hljs-regexp">/hadoop-hdfs/cache<span class="hljs-regexp">/hdfs/dfs/name
chown -R <span class="hljs-string">hdfs:hdfs <span class="hljs-regexp">/var/lib<span class="hljs-regexp">/hadoop-hdfs/cache<span class="hljs-regexp">/hdfs/dfs/data
chmod <span class="hljs-number">700 <span class="hljs-regexp">/var/lib<span class="hljs-regexp">/hadoop-hdfs/cache<span class="hljs-regexp">/hdfs/dfs/name
chmod <span class="hljs-number">700 <span class="hljs-regexp">/var/lib<span class="hljs-regexp">/hadoop-hdfs/cache<span class="hljs-regexp">/hdfs/dfs/data</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>格式化&nbsp;<code>NameNode</code>, 当然, 这个命令只能在&nbsp;<code>cdh01</code>&nbsp;上执行, 只能执行一次</p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">sudo -u hdfs hdfs namenode -format</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>启动&nbsp;<code>HDFS</code></p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>cdh01</code>&nbsp;上和&nbsp;<code>HDFS</code>&nbsp;有关的服务有&nbsp;<code>NameNode</code>,&nbsp;<code>SecondaryNameNode</code>, 使用如下命令启动这两个组件</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">service hadoop-hdfs-namenode start
service hadoop-hdfs-secondarynamenode start</code></pre>
</div>
</div>
</li>
<li>
<p>在&nbsp;<code>cdh02</code>&nbsp;和&nbsp;<code>cdh03</code>&nbsp;上执行如下命令</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">service hadoop-hdfs-datanode start</code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 3</code>: 配置&nbsp;<code>Yarn</code>&nbsp;和&nbsp;<code>MapReduce</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>前面已经完成配置目录创建等一系列任务了, 所以在配置&nbsp;<code>Yarn</code>&nbsp;的时候, 只需要去配置以下配置文件即可</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>在所有节点上, 配置&nbsp;<code>Yarn</code>&nbsp;和&nbsp;<code>MapReduce</code></p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>修改&nbsp;<code>Yarn</code>&nbsp;和&nbsp;<code>MapReduce</code>&nbsp;配置文件</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>vi /etc/hadoop/conf.itcast/mapred-site.xml</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">&lt;property&gt;
    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;
    &lt;value&gt;yarn&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;
    &lt;value&gt;cdh01:10020&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;
    &lt;value&gt;cdh01:19888&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;hadoop.proxyuser.mapred.groups&lt;/name&gt;
    &lt;value&gt;*&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;hadoop.proxyuser.mapred.hosts&lt;/name&gt;
    &lt;value&gt;*&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;yarn.app.mapreduce.am.staging-dir&lt;/name&gt;
    &lt;value&gt;/user&lt;/value&gt;
&lt;/property&gt;</code></pre>
</div>
</div>
</li>
<li>
<p><code>vi /etc/hadoop/conf.itcast/yarn-site.xml</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">&lt;property&gt;
    &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;
    &lt;value&gt;cdh01&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;yarn.application.classpath&lt;/name&gt;
    &lt;value&gt;
        $HADOOP_CONF_DIR,
        $HADOOP_COMMON_HOME/*,$HADOOP_COMMON_HOME/lib/*,
        $HADOOP_HDFS_HOME/*,$HADOOP_HDFS_HOME/lib/*,
        $HADOOP_MAPRED_HOME/*,$HADOOP_MAPRED_HOME/lib/*,
        $HADOOP_YARN_HOME/*,$HADOOP_YARN_HOME/lib/*
    &lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;
    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;yarn.nodemanager.local-dirs&lt;/name&gt;
    &lt;value&gt;file:///var/lib/hadoop-yarn/cache/${user.name}/nm-local-dir&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;yarn.nodemanager.log-dirs&lt;/name&gt;
    &lt;value&gt;file:///var/log/hadoop-yarn/containers&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;yarn.log.aggregation-enable&lt;/name&gt;
    &lt;value&gt;true&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;yarn.nodemanager.remote-app-log-dir&lt;/name&gt;
    &lt;value&gt;hdfs:///var/log/hadoop-yarn/apps&lt;/value&gt;
&lt;/property&gt;</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>在所有节点上, 创建配置文件指定的存放数据的目录</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>创建&nbsp;<code>Yarn</code>&nbsp;所需要的数据目录</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">mkdir -p /var/lib/hadoop-yarn/cache
mkdir -p /var/log/hadoop-yarn/containers
mkdir -p /var/log/hadoop-yarn/apps</code></pre>
</div>
</div>
</li>
<li>
<p>赋予&nbsp;<code>Yarn</code>&nbsp;用户这些目录的权限</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">chown -R yarn:yarn /var/lib/hadoop-yarn/cache /var/log/hadoop-yarn/containers /var/log/hadoop-yarn/apps</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>为&nbsp;<code>MapReduce</code>&nbsp;准备&nbsp;<code>HDFS</code>&nbsp;上的目录, 因为是操作&nbsp;<code>HDFS</code>, 只需要在一个节点执行即可</p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>大致上是需要两种文件夹, 一种用做于缓存, 一种是用户目录</p>
</div>
<div class="ulist">
<ul>
<li>
<p>为&nbsp;<code>MapReduce</code>&nbsp;缓存目录赋权</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">sudo -u hdfs hadoop fs -mkdir /tmp
sudo -u hdfs hadoop fs -chmod -R 1777 /tmp
sudo -u hdfs hadoop fs -mkdir -p /user/history
sudo -u hdfs hadoop fs -chmod -R 1777 /user/history
sudo -u hdfs hadoop fs -chown mapred:hadoop /user/history</code></pre>
</div>
</div>
</li>
<li>
<p>为&nbsp;<code>MapReduce</code>&nbsp;创建用户目录</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">sudo -u hdfs hadoop fs -mkdir /user/$USER
sudo -u hdfs hadoop fs -chown $USER /user/$USER</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>启动&nbsp;<code>Yarn</code></p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>在&nbsp;<code>cdh01</code>&nbsp;上启动&nbsp;<code>ResourceManager</code>&nbsp;和&nbsp;<code>HistoryServer</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">service hadoop-yarn-resourcemanager start
service hadoop-mapreduce-historyserver start</code></pre>
</div>
</div>
</li>
<li>
<p>在&nbsp;<code>cdh02</code>&nbsp;和&nbsp;<code>cdh03</code>&nbsp;上启动&nbsp;<code>NodeManager</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">service hadoop-yarn-nodemanager start</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_2_4_安装_mysql">2.4. 安装 MySQL</h3>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="paragraph">
<p>安装&nbsp;<code>MySQL</code>&nbsp;有很多方式, 可以直接准备压缩包上传解压安装, 也可以通过&nbsp;<code>Yum</code>&nbsp;来安装, 从方便和是否主流两个角度来看, 通过&nbsp;<code>Yum</code>&nbsp;来安装会比较舒服,&nbsp;<code>MySQL</code>&nbsp;默认是单机的, 所以在一个主机上安装即可, 我们选择在&nbsp;<code>cdh01</code>&nbsp;上安装, 安装大致就是两个步骤</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>安装</p>
</li>
<li>
<p>配置</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>Step 1</code>: 安装</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>因为要从&nbsp;<code>Yum</code>&nbsp;安装, 但是默认的&nbsp;<code>Yum</code>&nbsp;源是没有&nbsp;<code>MySQL</code>&nbsp;的, 需要导入&nbsp;<code>Oracle</code>&nbsp;的源, 然后再安装</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>下载&nbsp;<code>Yum</code>&nbsp;源配置</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">wget http://repo.mysql.com/mysql-community-release-el6-5.noarch.rpm
rpm -ivh mysql-community-release-el6-5.noarch.rpm</code></pre>
</div>
</div>
</li>
<li>
<p>安装 MySQL</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">yum install -y mysql-server</code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 2</code>: 启动和配置</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>现在&nbsp;<code>MySQL</code>&nbsp;的安全等级默认很高, 所以要通过一些特殊的方式来进行密码设置, 在启动&nbsp;<code>MySQL</code>&nbsp;以后要单独的进行配置</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>启动&nbsp;<code>MySQL</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">service mysqld start</code></pre>
</div>
</div>
</li>
<li>
<p>通过&nbsp;<code>MySQL</code>&nbsp;提供的工具, 设置&nbsp;<code>root</code>&nbsp;密码</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">mysql_secure_installation</code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_2_5_安装_hive">2.5. 安装 Hive</h3>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="paragraph">
<p>因为&nbsp;<code>Hive</code>&nbsp;需要使用&nbsp;<code>MySQL</code>&nbsp;作为元数据库, 所以需要在&nbsp;<code>MySQL</code>&nbsp;为&nbsp;<code>Hive</code>&nbsp;创建用户, 创建对应的表</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>安装&nbsp;<code>Hive</code>&nbsp;软件包</p>
</li>
<li>
<p>在&nbsp;<code>MySQL</code>&nbsp;中增加&nbsp;<code>Hive</code>&nbsp;用户</p>
</li>
<li>
<p>配置&nbsp;<code>Hive</code></p>
</li>
<li>
<p>初始化&nbsp;<code>Hive</code>&nbsp;在&nbsp;<code>MySQL</code>&nbsp;中的表结构</p>
</li>
<li>
<p>启动&nbsp;<code>Hive</code></p>
</li>
</ol></div>
<div class="paragraph">
<p>因为我们并不需要&nbsp;<code>Hive</code>&nbsp;的&nbsp;<code>HA</code>, 所以在单机部署&nbsp;<code>Hive</code>&nbsp;即可</p>
</div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>Step 1</code>: 安装&nbsp;<code>Hive</code>&nbsp;软件包</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>安装&nbsp;<code>Hive</code>&nbsp;依然使用&nbsp;<code>CDH</code>&nbsp;的&nbsp;<code>Yum</code>&nbsp;仓库</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">yum install -y hive hive-metastore hive-server2</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>如果想要&nbsp;<code>Hive</code>&nbsp;使用&nbsp;<code>MySQL</code>&nbsp;作为元数据库, 那需要给&nbsp;<code>Hive</code>&nbsp;一个&nbsp;<code>MySQL</code>&nbsp;的&nbsp;<code>JDBC</code>&nbsp;包</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">yum install -y mysql-connector-java
ln -s /usr/share/java/mysql-connector-java.jar /usr/lib/hive/lib/mysql-connector-java.jar</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 2</code>:&nbsp;<code>MySQL</code>&nbsp;中增加&nbsp;<code>Hive</code>&nbsp;用户</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>进入&nbsp;<code>MySQL</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">mysql -u root -p</code></pre>
</div>
</div>
</li>
<li>
<p>为&nbsp;<code>Hive</code>&nbsp;创建数据库</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">CREATE DATABASE metastore;
USE metastore;</code></pre>
</div>
</div>
</li>
<li>
<p>创建&nbsp;<code>Hive</code>&nbsp;用户</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">CREATE USER 'hive'@'%' IDENTIFIED BY 'hive';</code></pre>
</div>
</div>
</li>
<li>
<p>为&nbsp;<code>Hive</code>&nbsp;用户赋权</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'hive'@'%';
GRANT ALL PRIVILEGES ON metastore.* TO 'hive'@'%';
FLUSH PRIVILEGES;</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 3</code>: 配置&nbsp;<code>Hive</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>在启动&nbsp;<code>Hive</code>&nbsp;之前, 要配置&nbsp;<code>Hive</code>&nbsp;一些参数, 例如使用&nbsp;<code>MySQL</code>&nbsp;作为数据库之类的配置</p>
</div>
<div class="paragraph">
<p><code>Hive</code>&nbsp;的配置文件在&nbsp;<code>/etc/hive/conf/hive-site.xml</code>, 修改它为如下内容</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">&lt;!-- /usr/lib/hive/conf/hive-site.xml --&gt;
&lt;property&gt;
    &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;
    &lt;value&gt;jdbc:mysql://cdh01/metastore&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;
    &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;
    &lt;value&gt;hive&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;
    &lt;value&gt;hive&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;datanucleus.autoCreateSchema&lt;/name&gt;
    &lt;value&gt;false&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;datanucleus.fixedDatastore&lt;/name&gt;
    &lt;value&gt;true&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;datanucleus.autoStartMechanism&lt;/name&gt;
    &lt;value&gt;SchemaTable&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;hive.metastore.uris&lt;/name&gt;
    &lt;value&gt;thrift://cdh01:9083&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;hive.metastore.schema.verification&lt;/name&gt;
    &lt;value&gt;true&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;hive.support.concurrency&lt;/name&gt;
    &lt;description&gt;Enable Hive's Table Lock Manager Service&lt;/description&gt;
    &lt;value&gt;true&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;hive.support.concurrency&lt;/name&gt;
    &lt;value&gt;true&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;hive.zookeeper.quorum&lt;/name&gt;
    &lt;value&gt;cdh01&lt;/value&gt;
&lt;/property&gt;</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 4</code>: 初始化表结构</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>使用&nbsp;<code>Hive</code>&nbsp;之前,&nbsp;<code>MySQL</code>&nbsp;中还没有任何内容, 所以需要先为&nbsp;<code>Hive</code>&nbsp;初始化数据库, 创建必备的表和模式 .&nbsp;<code>Hive</code>&nbsp;提供了方便的工具, 提供&nbsp;<code>MySQL</code>&nbsp;的连接信息, 即可帮助我们创建对应的表</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">/usr/lib/hive/bin/schematool -dbType mysql -initSchema -passWord hive -userName hive -url jdbc:mysql://cdh01/metastore</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 5</code>: 启动&nbsp;<code>Hive</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p> 默认版本的&nbsp;<code>Hive</code>&nbsp;只提供了一个&nbsp;<code>Shell</code>&nbsp;命令, 通过这一个单独的&nbsp;<code>Shell</code>&nbsp;命令以指定参数的形式启动服务, 但是&nbsp;<code>CDH</code>&nbsp;版本将&nbsp;<code>Hive</code>&nbsp;抽取为两个独立服务, 方便通过服务的形式启动&nbsp;<code>Hive</code>,&nbsp;<code>hive-metastore</code>&nbsp;是元数据库,&nbsp;<code>hive-server2</code>&nbsp;是对外提供连接的服务</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">service hive-metastore start
service hive-server2 start</code></pre>
</div>
</div>
<div class="paragraph">
<p>通过&nbsp;<code>beeline</code>&nbsp;可以连接&nbsp;<code>Hive</code>&nbsp;验证是否启动成功, 启动&nbsp;<code>beeline</code>&nbsp;后, 通过如下字符串连接&nbsp;<code>Hive</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">!connect jdbc:hive2://cdh01:10000 username password org.apache.hive.jdbc.HiveDriver</code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_2_6_安装_kudu">2.6. 安装 Kudu</h3>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="paragraph">
<p>安装&nbsp;<code>Kudu</code>&nbsp;依然使用我们已经配置好的&nbsp;<code>Yum</code>&nbsp;仓库来进行, 整体步骤非常简单, 但是安装上分为&nbsp;<code>Master</code>&nbsp;和&nbsp;<code>Tablet server</code></p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>安装 Master server</p>
<div class="olist loweralpha"><ol class="loweralpha" type="a">
<li>
<p>安装软件包</p>
</li>
<li>
<p>配置</p>
</li>
<li>
<p>启动</p>
</li>
</ol></div>
</li>
<li>
<p>安装 Tablet server</p>
<div class="olist loweralpha"><ol class="loweralpha" type="a">
<li>
<p>安装软件包</p>
</li>
<li>
<p>配置</p>
</li>
<li>
<p>启动</p>
</li>
</ol></div>
</li>
</ol></div>
</div>
</div>
<table class="tableblock frame-all grid-all stretch"><caption class="title">集群规划</caption><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">节点</th><th class="tableblock halign-left valign-top">职责</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>cdh01</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Master server</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>cdh02</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Tablet server</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>cdh03</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Tablet server</code></p>
</td>
</tr>
</tbody>
</table>
<div class="dlist"><dl><dt class="hdlist1"><code>Step 1</code>: 安装&nbsp;<code>Master server</code>&nbsp;的软件包</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>根据集群规划, 尽量让&nbsp;<code>cdh01</code>&nbsp;少一些负载, 所以只在&nbsp;<code>cdh01</code>&nbsp;上安装&nbsp;<code>Master server</code>, 命令如下</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">yum install -y kudu kudu-master kudu-client0 kudu-client-devel</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 2</code>: 配置&nbsp;<code>Master server</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>Kudu</code>&nbsp;的&nbsp;<code>Master server</code>&nbsp;没有太多可以配置的项目, 默认的话日志和数据都会写入到&nbsp;<code>/var</code>&nbsp;目录下, 只需要修改一下&nbsp;<code>BlockManager</code>&nbsp;的方式即可, 在虚拟机上使用&nbsp;<code>Log</code>&nbsp;方式可能会带来一些问题, 改为&nbsp;<code>File</code>&nbsp;方式：</p>
<p>vim /etc/kudu/conf/master.gflagfile&nbsp;</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">光标到最后一行，在最后面添加上：   --block_manager=file</code></pre>
</div>
</div>
<div class="paragraph">
<p>但是有一点需要注意, 一定确保&nbsp;<code>ntp</code>&nbsp;服务是开启的, 可以使用&nbsp;<code>ntpstat</code>&nbsp;来查看, 因为&nbsp;<code>Kudu</code>&nbsp;对时间同步的要求非常高,&nbsp;<code>ntp</code>&nbsp;必须可以自动同步</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text"># 查看时间是否是同步状态
ntpstat</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 3</code>: 运行&nbsp;<code>Master server</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>运行&nbsp;<code>Master server</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">service kudu-master start</code></pre>
</div>
</div>
</li>
<li>
<p>查看&nbsp;<code>Web ui</code>&nbsp;确认&nbsp;<code>Master server</code>&nbsp;已经启动</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">http://cdh01:8051/</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 4</code>: 安装&nbsp;<code>Tablet server</code>&nbsp;的软件包</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>根据集群规划, 在&nbsp;<code>cdh02</code>,&nbsp;<code>cdh03</code>&nbsp;中安装&nbsp;<code>Tablet server</code>, 负责更为繁重的工作</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">yum install -y kudu kudu-tserver kudu-client0 kudu-client-devel</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 5</code>: 配置&nbsp;<code>Tablet server</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>Master server</code>&nbsp;相对来说没什么需要配置的, 也无须知道各个&nbsp;<code>Tablet server</code>&nbsp;的位置, 但是对于&nbsp;<code>Tablet server</code>&nbsp;来说, 必须配置&nbsp;<code>Master server</code>&nbsp;的位置, 因为一般都是从向主注册自己</p>
</div>
<div class="paragraph">
<p>在&nbsp;<code>cdh02</code>,&nbsp;<code>cdh03</code>&nbsp;修改&nbsp;<code>/etc/kudu/conf/tserver.gflagfile</code>&nbsp;为如下内容, 如果有多个&nbsp;<code>Master server</code>&nbsp;实例, 用逗号分隔地址即可</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">--tserver_master_addrs=cdh01:7051</code></pre>
</div>
</div>
<div class="paragraph">
<p>同时&nbsp;<code>Tablet server</code>&nbsp;也需要设置&nbsp;<code>BlockManager</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">--block_manager=file</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 6</code>: 运行&nbsp;<code>Tablet server</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>启动</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">service kudu-tserver start</code></pre>
</div>
</div>
</li>
<li>
<p>通过&nbsp;<code>Web ui</code>&nbsp;查看是否已经启动成功</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">http://cdh02:8050/<br /></code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<p>注意：</p>
<p><span style="color: #ff0000;"># kudu-master's RPC port is 7051, its http port is 8051</span><br /><span style="color: #ff0000;"># kudu-tserver's RPC port is 7050, its http port is 8050</span></p>
<h3 id="_2_7_安装_impala">2.7. 安装 Impala</h3>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="paragraph">
<p><code>Kudu</code>&nbsp;没有&nbsp;<code>SQL</code>&nbsp;解析引擎, 因为&nbsp;<code>Cloudera</code>&nbsp;准备使用&nbsp;<code>Impala</code>&nbsp;作为&nbsp;<code>Kudu</code>&nbsp;的&nbsp;<code>SQL</code>&nbsp;引擎, 所以既然使用&nbsp;<code>Kudu</code>&nbsp;了,&nbsp;<code>Impala</code>&nbsp;几乎也是必不可少的, 安装&nbsp;<code>Impala</code>&nbsp;之前, 先了解以下&nbsp;<code>Impala</code>&nbsp;中有哪些服务</p>




</div>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">服务</th><th class="tableblock halign-left valign-top">作用</th></tr>




</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Catalog</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Impala</code>&nbsp;的元信息仓库, 但是不同的是这个&nbsp;<code>Catalog</code>&nbsp;强依赖&nbsp;<code>Hive</code>&nbsp;的&nbsp;<code>MetaStore</code>, 会从&nbsp;<code>Hive</code>&nbsp;处获取元信息</p>




</td>




</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code> StateStore</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Impala</code>&nbsp;的协调节点, 负责异常恢复</p>




</td>




</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>ImpalaServer</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Impala</code>&nbsp;是&nbsp;<code>MPP</code>&nbsp;架构, 这是&nbsp;<code>Impala</code>&nbsp;处理数据的组件, 会读取&nbsp;<code>HDFS</code>, 所以一般和&nbsp;<code>DataNode</code>&nbsp;部署在一起, 提升性能, 每个&nbsp;<code>DataNode</code>&nbsp;配一个&nbsp;<code>ImpalaServer</code></p>




</td>




</tr>




</tbody>




</table>
<div class="paragraph">
<p>所以,&nbsp;<code>cdh01</code>&nbsp;上应该有&nbsp;<code>Catalog</code>&nbsp;和&nbsp;<code>StateStore</code>, 而不应该有&nbsp;<code>ImpalaServer</code>, 因为&nbsp;<code>cdh01</code>&nbsp;中没有&nbsp;<code>DataNode</code></p>




</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>安装&nbsp;<code>cdh01</code>&nbsp;中的软件包</p>




</li>
<li>
<p>安装其它节点中所需的软件包</p>




</li>
<li>
<p>对所有节点进行配置</p>




</li>
<li>
<p>启动</p>




</li>




</ol></div>




</div>




</div>
<table class="tableblock frame-all grid-all stretch"><caption class="title">集群规划</caption><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">节点</th><th class="tableblock halign-left valign-top">职责</th></tr>




</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>cdh01</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>impala-state-store</code>,&nbsp;<code>impala-catalog</code></p>




</td>




</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>cdh02</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>impala-server</code></p>




</td>




</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>cdh03</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>impala-server</code></p>




</td>




</tr>




</tbody>




</table>
<div class="dlist"><dl><dt class="hdlist1"><code>Step 1</code>: 安装软件包</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>安装主节点&nbsp;<code>cdh01</code>&nbsp;所需要的软件包</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">yum install -y impala impala-state-store impala-catalog impala-shell</code></pre>
</div>
</div>
</li>
<li>
<p>安装其它节点所需要的软件包</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">yum install -y impala impala-server</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 2</code>: 针对所有节点进行配置</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>软链接&nbsp;<code>Impala</code>&nbsp;所需要的&nbsp;<code>Hadoop</code>&nbsp;配置文件, 和&nbsp;<code>Hive</code>&nbsp;的配置文件</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p><code>Impala</code>&nbsp;需要访问&nbsp;<code>Hive</code>&nbsp;的&nbsp;<code>MetaStore</code>, 所以需要&nbsp;<code>hive-site.xml</code>&nbsp;来读取其位置</p>
</div>
<div class="paragraph">
<p><code>Impala</code>&nbsp;需要访问&nbsp;<code>HDFS</code>, 所以需要读取&nbsp;<code>hdfs-site.xml</code>&nbsp;来获取访问信息, 同时也需要读取&nbsp;<code>core-site.xml</code>&nbsp;获取一些信息</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">ln -s /etc/hadoop/conf/core-site.xml /etc/impala/conf/core-site.xml
ln -s /etc/hadoop/conf/hdfs-site.xml /etc/impala/conf/hdfs-site.xml
ln -s /etc/hive/conf/hive-site.xml /etc/impala/conf/hive-site.xml</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>配置&nbsp;<code>Impala</code>&nbsp;的主服务位置, 以供&nbsp;<code>ImpalaServer(Impalad)</code>&nbsp;访问, 修改&nbsp;<code>Impala</code>&nbsp;的默认配置文件&nbsp;<code>/etc/default/impala</code>, 3个节点都要修改：<br /><code>(/etc/default/目录下，</code>&nbsp;往往放置&nbsp;<code>CDH</code>&nbsp;版本中各组件的默认的配置文件)</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">IMPALA_CATALOG_SERVICE_HOST=cdh01
IMPALA_STATE_STORE_HOST=cdh01<br />另外，指定kudu_master节点的位置（也可以以后执行时在参数中手动指定，不过一般在这边指定好了先），在IMPALA_SERVER_ARGS后面添加--kudu_master_hosts=cdh01:7051：<br /></code></pre>
<p>IMPALA_SERVER_ARGS=" \<br />    -log_dir=${IMPALA_LOG_DIR} \<br />    -catalog_service_host=${IMPALA_CATALOG_SERVICE_HOST} \<br />    -state_store_port=${IMPALA_STATE_STORE_PORT} \<br />    -use_statestore \<br />    -state_store_host=${IMPALA_STATE_STORE_HOST} \<br />    -be_port=${IMPALA_BACKEND_PORT}<br />    --kudu_master_hosts=cdh01:7051"</p>
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">&nbsp;</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 3</code>: 启动</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>启动 cdh01</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">service impala-state-store start
service impala-catalog start<br /><br />注意：启动时可能会报错：<br /><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191023205749760-373865261.png" alt="" /></code></pre>
<p>&nbsp;</p>
<p>&nbsp;原因：/etc/hosts的配置问题。</p>
<p>解决方法：</p>
<p>vim /etc/hosts&nbsp; （记得，只需要修改cdh01的hosts）</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191023205906476-1762091114.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;可以将红框中的配置的主机名去掉，也可以将第一行移动到最后一行。此次，我是将红框中的主机名配置去掉了。</p>
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">&nbsp;</code></pre>
</div>
</div>
</li>
<li>
<p>启动其它节点</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">service impala-server start</code></pre>
</div>
</div>
</li>
<li>
<p>通过 Web ui 查看是否启动成功</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">http://cdh01:25000</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_2_8_安装_hue">2.8. 安装 Hue</h3>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="paragraph">
<p><code>Hue</code>&nbsp;其实就是一个可视化平台, 主要用于浏览&nbsp;<code>HDFS</code>&nbsp;的文件, 编写和执行&nbsp;<code>Hive</code>&nbsp;的&nbsp;<code>SQL</code>, 以及&nbsp;<code>Impala</code>&nbsp;的&nbsp;<code>SQL</code>, 查看数据库中数据等, 而且&nbsp;<code>Hue</code>&nbsp;一般就作为&nbsp;<code>CDH</code>&nbsp;数据平台的入口, 所以装了&nbsp;<code>CDH</code>&nbsp;而不装&nbsp;<code>Hue</code>&nbsp;会觉得少了点什么, 面试的时候偶尔也会问&nbsp;<code>Hue</code>&nbsp;的使用, 所以我们简单安装, 简单使用&nbsp;<code>Hue</code>&nbsp;让大家了解以下这个可视化工具</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Hue</code>&nbsp;组件安装</p>
</li>
<li>
<p>配置&nbsp;<code>Hue</code></p>
</li>
<li>
<p>启动&nbsp;<code>Hue</code></p>
</li>
</ol></div>
<div class="paragraph">
<p><code>Hue</code>&nbsp;只在&nbsp;<code>cdh01</code>&nbsp;上安装即可</p>
</div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>Step 1</code>:&nbsp;<code>Hue</code>&nbsp;组件安装</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>使用&nbsp;<code>Yum</code>&nbsp;即可简单安装</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">yum -y install hue</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 2</code>: 配置&nbsp;<code>Hue</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>Hue</code>&nbsp;的配置就会稍微优点复杂, 因为&nbsp;<code>Hue</code>&nbsp;要整合其它的一些工具, 例如访问&nbsp;<code>HDFS</code>, 所以配置要从两方面说, 一是&nbsp;<code>HDFS</code>&nbsp;要允许&nbsp;<code>Hue</code>&nbsp;访问, 二是配置给&nbsp;<code>Hue</code>&nbsp;如何访问&nbsp;<code>HDFS</code>&nbsp;(以及如何访问其它程序)</p>
</div>
<div class="ulist">
<ul>
<li>
<p>配置&nbsp;<code>HDFS</code>, 允许&nbsp;<code>Hue</code>&nbsp;的访问</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>修改&nbsp;<code>hdfs-site.xml</code>&nbsp;增加如下内容, 以便让&nbsp;<code>Hue</code>&nbsp;用户可以访问&nbsp;<code>HDFS</code>&nbsp;中的文件</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">&lt;property&gt;
    &lt;name&gt;hadoop.proxyuser.hue.hosts&lt;/name&gt;
    &lt;value&gt;*&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;hadoop.proxyuser.hue.groups&lt;/name&gt;
    &lt;value&gt;*&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;hadoop.proxyuser.httpfs.hosts&lt;/name&gt;
    &lt;value&gt;*&lt;/value&gt;
&lt;/property&gt;
&lt;property&gt;
    &lt;name&gt;hadoop.proxyuser.httpfs.groups&lt;/name&gt;
    &lt;value&gt;*&lt;/value&gt;
&lt;/property&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>&nbsp;</p>
</div>
</div>
</div>
</li>
<li>
<p>配置&nbsp;<code>Hue</code>, 告诉&nbsp;<code>Hue</code>&nbsp;如何访问其它组件和工具</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>配置&nbsp;<code>Hue</code>&nbsp;所占用的&nbsp;<code>Web</code>&nbsp;端口, 在&nbsp;<code>/etc/hue/conf/hue.ini</code>&nbsp;中搜索&nbsp;<code>http_port</code>&nbsp;修改为如下</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">http_host=cdh01
http_port=8888</code></pre>
</div>
</div>
<div class="paragraph">
<p>配置&nbsp;<code>Impala</code>&nbsp;的访问方式, 在&nbsp;<code>/etc/hue/conf/hue.ini</code>&nbsp;中搜索&nbsp;<code>server_host</code>&nbsp;修改为如下</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">server_host=cdh01</code></pre>
</div>
</div>
<div class="paragraph">
<p>配置&nbsp;<code>Hive</code>&nbsp;的访问方式, 在&nbsp;<code>/etc/hue/conf/hue.ini</code>&nbsp;中搜索&nbsp;<code>hive_server_host</code>&nbsp;修改为如下</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">hive_server_host=cdh01</code></pre>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 3</code>: 启动&nbsp;<code>Hue</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>使用如下命令即可启动</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">service hue start</code></pre>
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">进入web界面： 输入网址： http://cdh01:8888/   默认初始凭据： admin/admin<br /><br /><strong><span style="color: #ff0000;">小结：</span></strong></code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
<table class="tableblock frame-all grid-all stretch"><caption class="title">开机要启动的服务</caption><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">服务</th><th class="tableblock halign-left valign-top">命令</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>httpd</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>service httpd start</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Zookeeper</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>service zookeeper-server start</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>hdfs-namenode</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>service hadoop-hdfs-namenode start</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>hdfs-datanode</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>service hadoop-hdfs-datanode start</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>hdfs-secondarynamenode</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>service hadoop-hdfs-secondarynamenode start</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>yarn-resourcemanager</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>service hadoop-yarn-resourcemanager start</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>mapreduce-historyserver</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>service hadoop-mapreduce-historyserver start</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>yarn-nodemanager</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>service hadoop-yarn-nodemanager start</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>hive-metastore</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>service hive-metastore start</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>hive-server2</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>service hive-server2 start</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>kudu-master</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>service kudu-master start</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>kudu-tserver</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>service kudu-tserver start</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>impala-state-store</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>service impala-state-store start</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>impala-catalog</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>service impala-catalog start</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>impala-server</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>service impala-server start</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>hue</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>service hue start</code></p>
</td>
</tr>
</tbody>
</table>
<p><span style="color: #ff0000;">CDH版本的特点</span>：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191019213633546-1110934776.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
<div class="sect2">
<h3 id="_2_8_使用_scala_操作_kudu">2.8. 使用 Scala 操作 Kudu</h3>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Kudu API</code>&nbsp;结构</p>
</li>
<li>
<p>导入&nbsp;<code>Kudu</code>&nbsp;所需要的包</p>
</li>
<li>
<p>创建表</p>
</li>
<li>
<p>插入数据</p>
</li>
<li>
<p>查询数据</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>Kudu API</code>&nbsp;的结构设计</dt><dd>
<div class="sidebarblock">
<div class="content">
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">对象</th><th class="tableblock halign-left valign-top">设计</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Client</code></p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">创建</dt><dd>
<p>使用&nbsp;<code>Kudu master</code>&nbsp;服务器地址列表来创建</p>
</dd><dt class="hdlist1">作用</dt><dd>
<p><code>Kudu</code>&nbsp;的&nbsp;<code>API</code>&nbsp;主入口, 通过&nbsp;<code>Client</code>&nbsp;对象获取&nbsp;<code>Table</code>&nbsp;后才能操作数据</p>
</dd><dt class="hdlist1">操作</dt><dd>
<div class="ulist">
<ul>
<li>
<p>检查表是否存在</p>
</li>
<li>
<p>提交表的&nbsp;<code>DDL</code>&nbsp;操作, 如&nbsp;<code>create</code>,&nbsp;<code>delete</code>,&nbsp;<code>alter</code>, 在对表进行&nbsp;<code>DDL</code>&nbsp;的时候, 需要如下两个对象</p>
<div class="ulist">
<ul>
<li>
<p><code>Kudu Schema</code>&nbsp;定义表的列结构</p>
</li>
<li>
<p><code>Kudu Partial Row</code>&nbsp;指定分区方式</p>
</li>
</ul>
</div>
</li>
<li>
<p>创建&nbsp;<code>Table</code>&nbsp;对象</p>
</li>
</ul>
</div>
</dd></dl></div>
</div>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Table</code></p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">创建</dt><dd>
<p>通过&nbsp;<code>Client</code>&nbsp;对象开启</p>
</dd><dt class="hdlist1">作用</dt><dd>
<p>通过&nbsp;<code>Table</code>&nbsp;对象可以操作表中的数据</p>
</dd><dt class="hdlist1">操作</dt><dd>
<div class="ulist">
<ul>
<li>
<p><code>insert</code>,&nbsp;<code>delete</code>,&nbsp;<code>update</code>,&nbsp;<code>upsert</code>&nbsp;行</p>
</li>
<li>
<p>扫描行</p>
</li>
</ul>
</div>
</dd></dl></div>
</div>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Scanner</code></p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">创建</dt><dd>
<p>通过&nbsp;<code>Table</code>&nbsp;对象开启扫描</p>
</dd><dt class="hdlist1">作用</dt><dd>
<p>扫描表数据, 并获取结果</p>
</dd><dt class="hdlist1">操作</dt><dd>
<div class="ulist">
<ul>
<li>
<p><code>Kudu</code>&nbsp;中可以通过读取模式空值该读到哪些数据, 有如下三种 读取模式</p>
<div class="ulist">
<ul>
<li>
<p><code>READ_LATEST</code>&nbsp;是&nbsp;<code> Scanner</code>&nbsp;的默认模式, 只会返回已经提交的数据, 类似&nbsp;<code>ACID</code>&nbsp;中的&nbsp;<code>ReadCommitted</code></p>
</li>
<li>
<p><code>READ_AT_SNAPSHOT</code>&nbsp;读取某一个时间点的数据, 这个模式效率相对比较低, 因为会等待这个时间点之前的所有事务都提交后, 才会返回响应的数据, 类似&nbsp;<code>ACID</code>&nbsp;中的&nbsp;<code>RepeatableRead</code></p>
</li>
<li>
<p><code>READ_YOUR_WRITES</code>&nbsp;这种模式会确保读取到自己已经写入的数据, 并且尽可能的忽略其他人的写入, 会导致读取期间有其它人写入但是没有等待, 所以产生的问题就是每次读取的数据可能是不同的, 当前还是实验性功能, 尽量不要使用</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</dd></dl></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd><dt class="hdlist1">导入&nbsp;<code>Kudu</code>&nbsp;所需要的包</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>Kudu</code>&nbsp;并没有提供&nbsp;<code>Scala</code>&nbsp;单独的客户端&nbsp;<code>SDK</code>, 但是提供了&nbsp;<code>Java</code>&nbsp;的&nbsp;<code>SDK</code>, 我们使用&nbsp;<code>Scala</code>&nbsp;访问&nbsp;<code>Kudu</code>&nbsp;的时候, 可以使用&nbsp;<code>Java</code>&nbsp;的&nbsp;<code>API</code>, 可以创建一个新的工程开始&nbsp;<code>Kudu Scala</code>&nbsp;的学习, 创建工程的方式参照&nbsp;<code>Spark</code>&nbsp;部分第一天, 创建工程后, 需要先做如下两件事</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">需要导入如下三个&nbsp;<code>Maven</code>&nbsp;插件</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>maven-compile-plugin</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p><code>Maven</code>&nbsp;的编译插件其实是自动导入的, 现在需要导入这个插件的目的主要是需要通过其指定&nbsp;<code>JDK</code>&nbsp;的版本</p>
</div>
</div>
</div>
</li>
<li>
<p><code>maven-shade-plugin</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>一般工程打包的方式有两种</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>uber Jar</code></p>
<div class="paragraph">
<p>直译过来就是胖&nbsp;<code>Jar</code>, 其中包含了所有依赖的&nbsp;<code>Jar</code>&nbsp;包, 通常会重命名其中一些类以避免冲突,</p>
</div>
</li>
<li>
<p><code>non-uber Jar</code></p>
<div class="paragraph">
<p>瘦&nbsp;<code>Jar</code>, 没有包含依赖的&nbsp;<code>Jar</code>&nbsp;包, 在运行的时候使用环境中已有的库</p>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p><code>scala-maven-plugin</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>引入这个插件的主要作用是编译&nbsp;<code>Scala</code>&nbsp;代码</p>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">举个栗子, 比如说现在在本地引入了&nbsp;<code>Spark</code>&nbsp;的依赖, 要提交代码去集群运行, 但是集群中必然包含了&nbsp;<code>Spark</code>&nbsp;相关的所有依赖, 那么此时是否需要再生成&nbsp;<code>Uber Jar</code>&nbsp;了呢? 明显不需要, 因为&nbsp;<code>Spark</code>&nbsp;在安装部署集群的时候,&nbsp;<code>Spark</code>&nbsp;的软件包内, 有一个&nbsp;<code>lib</code>&nbsp;目录, 其中所有的&nbsp;<code>Jar</code>&nbsp;包在运行的时候都会被加载, 完全不需要&nbsp;<code>Uber Jar</code></td>
</tr>
</tbody>
</table>
</div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">再举个栗子, 比如说现在依然是引入&nbsp;<code>Spark</code>&nbsp;的依赖, 但是同时引入了一个&nbsp;<code>JSON</code>&nbsp;解析的包, 但是这个&nbsp;<code>JSON</code>&nbsp;解析的包在集群中并没有, 那么此时如何解决? 有两种方式, 一种是&nbsp;<code>Non-Uber Jar</code>, 但是将依赖的&nbsp;<code>Jar</code>&nbsp;包在使用&nbsp;<code>spark-submit</code>&nbsp;命令提交任务的时候通过&nbsp;<code>-jar</code>&nbsp;参数一并提交过去. 另外一种是直接生成&nbsp;<code>Uber Jar</code>&nbsp;包含这个&nbsp;<code>JSON</code>&nbsp;解析库</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</dd><dt class="hdlist1">需要导入一个&nbsp;<code>Kudu</code>&nbsp;的依赖包</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>根据使用 Hadoop 的版本不同, Kudu 的导入方式有两种, 一种是 CDH 版本的依赖, 一种是 Apache 版本的依赖, 我们当前使用 CDH 版本的依赖, 所以需要导入如下包</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;org.apache.kudu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;kudu-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;1.7.0-cdh5.16.1<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">scope&gt;provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope&gt;
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">整个&nbsp;<code>Maven</code>&nbsp;文件，详见代码</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml"><span class="hljs-tag">&nbsp;</span></code></pre>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">创建表（详见代码）</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>在进行如下操作之前, 需要先创建&nbsp;<code>Scala</code>&nbsp;的类, 通过&nbsp;<code>Junit</code>&nbsp;的方式编写代码, 当然, 也可以创建&nbsp;<code>Object</code>, 编写&nbsp;<code>Main</code>&nbsp;方法来运行</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建&nbsp;<code>KuduClient</code>&nbsp;实例</p>
</li>
<li>
<p>创建表的列模式&nbsp;<code>Schema</code></p>
</li>
<li>
<p>创建表</p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">插入数据</dt><dd>
<div class="sidebarblock">&nbsp;详见代码</div>
</dd><dt class="hdlist1">扫描查询数据</dt><dd>
<div class="sidebarblock">&nbsp;详见代码。</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_2_9_使用_spark_操作_kudu">2.9. 使用 Spark 操作 Kudu</h3>
<div class="exampleblock">
<div class="title">　　详见代码</div>
</div>
</div>
<div class="sect2">
<h3 id="_2_10_使用_impala_执行_sql_语句访问_hive">2.10. 使用 Impala 执行 SQL 语句访问 Hive</h3>
<p>&nbsp;</p>
</div>]]></description></item><item><title>TP-LINK路由器端口映射全套教程(亲测有效)</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/19/11704261.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 19 Oct 2019 08:17:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/19/11704261.html</guid><description><![CDATA[<p>最近想在自己的笔记本上搭建一个博客系统，方便自己写写日志，记录一些知识心得。</p>
<p>由于笔记本是长期放在家里的，需要在外边也能访问它，于是需要在路由器上设置一个端口映射，让在因特网上的其他电脑能访问到家里的笔记本。</p>
<p><span style="color: #ff0000;">对了，我的路由器<label id="product" class="proName">型号是：TL-WDR5620千兆版，首先TP-LINK品牌的路由器设置都大同小异的，其次，其他牌子的路由器，只要不是太古老，应该也都能借鉴我这套教程。&nbsp; &nbsp; 路由器的配置，有些需要重启路由器，有些不需要，总之，大家可以在所有配置完成后，重启一次路由器，这样肯定没问题了。</label></span></p>
<h3><label class="proName">&nbsp;以下是具体的步骤：</label></h3>
<h4>1. 确保公网IP和WAN口的IP相同。</h4>
<p>两者可能相同，也可能不同。如果不同，一定要<span style="color: #ff0000;">打电话给网络供应商</span>，让他们帮忙修改成相同！</p>
<p>这个和路由器无关，和宽带供应商有关。有的供应商为了节省公网IP，会分配一个内网（局域网）IP给你们家，这个IP会分配到路由器的WAN口上。</p>
<p><span style="color: #ff0000;">这一步，很重要，是必要条件，如果不一致，下面的所有步骤都无效</span>。所以我放在第一步，免得大家发现没效果，来回修改配置，做无用功。</p>
<p>（1）登录路由器，默认密码一般是123456 或 admin ，大家可以都试试。</p>
<p>（2）如下图所示，点击&ldquo;路由设置&rdquo;，再点击左侧菜单栏的&ldquo;上网设置&rdquo;，然后查看右侧的IP地址，就是WAN口IP：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191019153127145-2132599145.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;（3）打开百度，输入ip，往下找到截图中的内容：本机IP：222.185.161.7，这个才是你的真正的公网IP。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191019154003317-1189483484.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>（4）我原来的情况是：WAN口IP：100.81.115.83，其实还是一个内网IP，只不过是电信的内网；公网IP是180.115.185.78，两者不同，于是我打电话给电信局让他们处理的。</p>
<p>&nbsp;</p>
<h4>2. 选择有线网卡。</h4>
<p>因为它稳定，不会受到路由器的位置变动影响，传输速度也相对较快。 另外一个重要原因：以后可能需要设置网络唤醒，而无线网卡好像不支持网络唤醒的。</p>
<p>为了使用有线网卡，我还特地修复了一下家里的网络口，使其都有信号。这个涉及到硬件了，需要测试、了解家里的网络结构，给网线做水晶头什么的，因为我做过几年的网络管理员，所以这些我都没问题（我是个全才哈，硬件、软件、网络、程序开发都会）。如果小伙伴们没法自己处理，可以打电话给中国电信、移动、联通，让他们派人上门处理，或者叫电脑店里的人处理。</p>
<p>&nbsp;</p>
<h4>3. 配置IP。</h4>
<p>如果要设置端口映射，那必须给电脑分配一个静态的内网IP。此处，有的人会选择设置电脑的网卡获取IP的模式，由DHCP改为静态IP，这样也可以，但有一个问题，笔记本拿到另一个网络环境中，又需要将静态IP模式改回DHCP模式，麻烦，而且如果是小白的话，还不会搞。</p>
<p>此处，我选择在路由器上绑定IP和MAC，这样每次路由器分配给电脑的IP就是一个固定的IP。</p>
<p>（1）如下图所示，下方的&ldquo;应用管理&rdquo;菜单，再点击左侧的&ldquo;已安装应用&rdquo;菜单，然后点击右侧的&ldquo;IP与MAC绑定&rdquo;的&ldquo;进入&rdquo;按钮：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191019154535284-1612532052.png" alt="" /></p>
<p>&nbsp;</p>
<p>（2）如下图所示，再IP与MAC映射表中，包含了所有的使用该路由器上网的电脑或移动设备，找到你的电脑，然后按照图中文字设置：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191019155315659-1475550350.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>4. 配置虚拟服务器。</h4>
<p>这一步是配置需要被外网访问的电脑的IP和端口。</p>
<p>没试过配置多台虚拟服务器，不过理论上应该可以的。如下图所示，进入虚拟服务器配置界面：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191019155559929-513086219.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;点击&ldquo;添加&rdquo;，添加一条记录。</p>
<p>常用服务器不用管它。</p>
<p>外部端口网上说尽量配一个9000以上的数字，否则可能会被网络供应商封禁，也不知道真假，宁可信其有吧。</p>
<p>内部端口网上说只能是80端口，但我测试了其他端口，照样有效。</p>
<p>IP地址，填写你所要配置的那台电脑的有线网卡的IP。</p>
<p>协议类型，填写ALL。</p>
<p>然后点击&ldquo;保存&rdquo;。这一步完工。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191019155714839-940076214.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>5.&nbsp; 配置DMZ主机：</h4>
<p class="title">本应用支持将内网中的某个设备设置为DMZ主机，此时该设备对外完全开放，您可以将一些需要对外共享的资源放在该设备中，互联网中的设备可直接访问该DMZ主机。</p>
<p><span style="color: #ff0000;">本步骤仅仅是锦上添花，可以省略</span>。</p>
<p>如下图所示进入配置界面：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191019160344555-1164399518.png" alt="" /></p>
<p>&nbsp;</p>
<p>按照提示设置（应该很简单的）：</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191019160640356-1444622024.png" alt="" /></p>
<p>&nbsp;</p>
<h4>6.设置DDNS。</h4>
<p>这一步是设置一个动态域名，与你的公网IP关联起来。为什么要这一步，大家应该知道，每次重启路由器，其公网IP都会变化，因为网络供应商需要充分利用这些公网IP资源，不可能给你一直保留着一个固定的公网IP。所以，由于停电、路由器长时间运行导致卡顿，等等原因，从而导致路由器重启，其公网IP变化后，你下次访问时需要使用新的IP，一是麻烦，二是你需要回到家里，查看一下新的公网IP地址。&nbsp;</p>
<p>如果此时，将这些不同的公网IP，都映射到同一个域名上，不就解决问题了吗。每次访问，只需要输入相同的那个域名地址，比如我的是</p>
<p><a href="http://mediocrepeople.tpddns.cn:9999/" target="_blank"><span style="text-decoration: underline;"><span style="color: #ff0000; text-decoration: underline;">http://mediocrepeople.tpddns.cn:9999/</span></span></a></p>
<p>这个就是DDNS（Dynamic Domain Name Server，动态域名服务），下面开始设置，如下图所示，进入<span class="name">DDNS配置界面：</span></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191019160913135-1034769026.png" alt="" /></p>
<p>首先需要注册TP-LINK ID或花生壳的账户，然后填写到相应的文本框中，点击&ldquo;登录&rdquo;按钮。</p>
<p>我使用的是TP-LINK ID，花生壳也注册了测试了，可是好像有问题。</p>
<p>设置成功后，如下图所示：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191019162706059-1872955118.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>7.最后，千万别忘记重启路由器！（电脑不用重启）</h4>
<p>最后的最后，如果有问题欢迎大家一起探讨。</p>]]></description></item><item><title>Update(Stage5)：Kudu入门_项目介绍_ CDH搭建</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/17/11695386.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 17 Oct 2019 13:55:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/17/11695386.html</guid><description><![CDATA[<h1>Kudu</h1>
<div id="preamble">
<div class="sectionbody">
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>什么是&nbsp;<code>Kudu</code></p>
</li>
<li>
<p>操作&nbsp;<code>Kudu</code></p>
</li>
<li>
<p>如何设计&nbsp;<code>Kudu</code>&nbsp;的表</p>
</li>
</ol></div>
</div>
</div>
</div>
<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day01/Kudu.html#_1_什么是_kudu">1. 什么是 Kudu</a>
<ul class="sectlevel2">
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day01/Kudu.html#_1_1_kudu_的应用场景">1.1. Kudu 的应用场景</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day01/Kudu.html#_1_2_kudu_和其它存储工具的对比">1.2. Kudu 和其它存储工具的对比</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day01/Kudu.html#_1_3_kudu_的设计和结构">1.3. Kudu 的设计和结构</a></li>
</ul>
</li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day01/Kudu.html#_2_kudu_安装和操作">2. Kudu 安装和操作</a>
<ul class="sectlevel2">
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day01/Kudu.html#_2_1_准备初始环境">2.1. 准备初始环境</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day01/Kudu.html#_2_2_配置_yum_源">2.2. 配置 Yum 源</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day01/Kudu.html#_2_使用_java_操作_kudu">2.. 使用 Java 操作 Kudu</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day01/Kudu.html#_2_使用_spark_操作_kudu">2.. 使用 Spark 操作 Kudu</a></li>
</ul>
</li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage5%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/DMP/Day01/Kudu.html#_4_kudu_表和模式">4. Kudu 表和模式</a></li>
</ul>
</div>
</div>
<div class="sect1">
<h2 id="_1_什么是_kudu">1. 什么是 Kudu</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Kudu</code>&nbsp;的应用场景是什么?</p>
</li>
<li>
<p><code>Kudu</code>&nbsp;在大数据平台中的位置在哪?</p>
</li>
<li>
<p><code>Kudu</code>&nbsp;用什么样的设计, 才能满足其设计目标?</p>
</li>
<li>
<p><code>Kudu</code>&nbsp;中有什么集群角色?</p>
</li>
</ol></div>
</div>
</div>
<div class="sect2">
<h3 id="_1_1_kudu_的应用场景">1.1. Kudu 的应用场景</h3>
<div class="dlist"><dl><dt class="hdlist1">现代大数据的应用场景</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>例如现在要做一个类似物联网的项目, 可能是对某个工厂的生产数据进行分析</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">项目特点</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>数据量大</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>有一个非常重大的挑战, 就是这些设备可能很多, 其所产生的事件记录可能也很大, 所以需要对设备进行数据收集和分析的话, 需要使用一些大数据的组件和功能</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190606003709.png" alt="20190606003709" /></div>
</div>
</div>
</div>
</li>
<li>
<p>流式处理</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>因为数据是事件, 事件是一个一个来的, 并且如果快速查看结果的话, 必须使用流计算来处理这些数据</p>
</div>
</div>
</div>
</li>
<li>
<p>数据需要存储</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>最终需要对数据进行统计和分析, 所以数据要先有一个地方存, 后再通过可视化平台去分析和处理</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190606004158.png" alt="20190606004158" /></div>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">对存储层的要求</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>这样的一个流计算系统, 需要对数据进行什么样的处理呢?</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>要能够及时的看到最近的数据, 判断系统是否有异常</p>
</li>
<li>
<p>要能够扫描历史数据, 从而改进设备和流程</p>
</li>
</ol></div>
<div class="paragraph">
<p>所以对数据存储层就有可能进行如下的操作</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>逐行插入, 因为数据是一行一行来的, 要想及时看到, 就需要来一行插入一行</p>
</li>
<li>
<p>低延迟随机读取, 如果想分析某台设备的信息, 就需要在数据集中随机读取某一个设备的事件记录</p>
</li>
<li>
<p>快速分析和扫描, 数据分析师需要快速的得到结论, 执行一行&nbsp;<code>SQL</code>&nbsp;等上十天是不行的</p>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">方案一: 使用&nbsp;<code>Spark Streaming</code>&nbsp;配合&nbsp;<code>HDFS</code>&nbsp;存储</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>总结一下需求</p>
</div>
<div class="ulist">
<ul>
<li>
<p>实时处理,&nbsp;<code>Spark Streaming</code></p>
</li>
<li>
<p>大数据存储,&nbsp;<code>HDFS</code></p>
</li>
<li>
<p>使用 Kafka 过渡数据</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190606005650.png" alt="20190606005650" /></div>
</div>
<div class="paragraph">
<p>但是这样的方案有一个非常重大的问题, 就是速度机器之慢, 因为&nbsp;<code>HDFS</code>&nbsp;不擅长存储小文件, 而通过流处理直接写入&nbsp;<code>HDFS</code>&nbsp;的话, 会产生非常大量的小文件, 扫描性能十分的差</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">方案二:&nbsp;<code>HDFS</code>&nbsp;+&nbsp;<code>compaction</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>上面方案的问题是大量小文件的查询是非常低效的, 所以可以将这些小文件压缩合并起来</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190606023831.png" alt="20190606023831" /></div>
</div>
<div class="paragraph">
<p>但是这样的处理方案也有很多问题</p>
</div>
<div class="ulist">
<ul>
<li>
<p>一个文件只有不再活跃时才能合并</p>
</li>
<li>
<p>不能将覆盖的结果放回原来的位置</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>所以一般在流式系统中进行小文件合并的话, 需要将数据放在一个新的目录中, 让&nbsp;<code>Hive/Impala</code>&nbsp;指向新的位置, 再清理老的位置</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">方案三:&nbsp;<code>HBase</code>&nbsp;+&nbsp;<code>HDFS</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>前面的方案都不够舒服, 主要原因是因为一直在强迫&nbsp;<code>HDFS</code>&nbsp;做它并不擅长的事情, 对于实时的数据存储, 谁更适合呢?&nbsp;<code>HBase</code>&nbsp;好像更合适一些, 虽然&nbsp;<code>HBase</code>&nbsp;适合实时的低延迟的数据村醋, 但是对于历史的大规模数据的分析和扫描性能是比较差的, 所以还要结合&nbsp;<code>HDFS</code>&nbsp;和&nbsp;<code>Parquet</code>&nbsp;来做这件事</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190606025028.png" alt="20190606025028" /></div>
</div>
<div class="paragraph">
<p>因为&nbsp;<code>HBase</code>&nbsp;不擅长离线数据分析, 所以在一定的条件触发下, 需要将&nbsp;<code>HBase</code>&nbsp;中的数据写入&nbsp;<code>HDFS</code>&nbsp;中的&nbsp;<code>Parquet</code>&nbsp;文件中, 以便支持离线数据分析, 但是这种方案又会产生新的问题</p>
</div>
<div class="ulist">
<ul>
<li>
<p>维护特别复杂, 因为需要在不同的存储间复制数据</p>
</li>
<li>
<p>难以进行统一的查询, 因为实时数据和离线数据不在同一个地方</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>这种方案, 也称之为&nbsp;<code>Lambda</code>, 分为实时层和批处理层, 通过这些这么复杂的方案, 其实想做的就是一件事, 流式数据的存储和快速查询</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">方案四:&nbsp;<code>Kudu</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>Kudu</code>&nbsp;声称在扫描性能上, 媲美&nbsp;<code>HDFS</code>&nbsp;上的&nbsp;<code>Parquet</code>. 在随机读写性能上, 媲美&nbsp;<code>HBase</code>. 所以将存储存替换为&nbsp;<code>Kudu</code>, 理论上就能解决我们的问题了.</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190606025824.png" alt="20190606025824" /></div>
</div>
</div>
</div>
</dd></dl></div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="paragraph">
<p>对于实时流式数据处理,&nbsp;<code>Spark</code>,&nbsp;<code>Flink</code>,&nbsp;<code>Storm</code>&nbsp;等工具提供了计算上的支持, 但是它们都需要依赖外部的存储系统, 对存储系统的要求会比较高一些, 要满足如下的特点</p>
</div>
<div class="ulist">
<ul>
<li>
<p>支持逐行插入</p>
</li>
<li>
<p>支持更新</p>
</li>
<li>
<p>低延迟随机读取</p>
</li>
<li>
<p>快速分析和扫描</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_1_2_kudu_和其它存储工具的对比">1.2. Kudu 和其它存储工具的对比</h3>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>OLAP</code>&nbsp;和&nbsp;<code>OLTP</code></p>
</li>
<li>
<p>行式存储和列式存储</p>
</li>
<li>
<p><code>Kudu</code>&nbsp;和&nbsp;<code>MySQL</code>&nbsp;的区别</p>
</li>
<li>
<p><code>Kudu</code>&nbsp;和&nbsp;<code>HBase</code>&nbsp;的区别</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>OLAP</code>&nbsp;和&nbsp;<code>OLTP</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>广义来讲, 数据库分为&nbsp;<code>OLTP</code>&nbsp;和&nbsp;<code>OLAP。</code></p>
<p>数据处理大致可以分成两大类：联机事务处理OLTP（on-line transaction processing）、联机分析处理OLAP（On-Line Analytical Processing）。OLTP是传统的关系型<a class="replace_word" title="MySQL知识库" href="http://lib.csdn.net/base/mysql" target="_blank">数据库</a>的主要应用，主要是基本的、日常的事务处理，例如银行交易。OLAP是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。&nbsp;</p>
<p><strong>OLTP&nbsp;</strong>系统强调数据库内存效率，强调内存各种指标的命令率，强调绑定变量，强调并发操作；<br /><strong>OLAP&nbsp;</strong>系统则强调数据分析，强调SQL执行市场，强调磁盘I/O，强调分区等。</p>




</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190606125557.png" alt="20190606125557" /></div>




</div>
<div class="ulist">
<ul>
<li>
<p><code>OLTP</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>先举个栗子, 在电商网站中, 经常见到一个功能 - "我的订单", 这个功能再查询数据的时候, 是查询的某一个用户的数据, 并不是批量的数据</p>




</div>
<div class="paragraph">
<p><code>OLTP</code>&nbsp;需要做的事情是</p>




</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>快速插入和更新</p>




</li>
<li>
<p>精确查询</p>




</li>




</ol></div>
<div class="paragraph">
<p>所以&nbsp;<code>OLTP</code>&nbsp;并不需要对数据进行大规模的扫描和分析, 所以它的扫描性能并不好, 它主要是用于对响应速度和数据完整性很高的在线服务应用中</p>




</div>




</div>




</div>




</li>
<li>
<p><code>OLAP</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p><code>OLAP</code>&nbsp;和&nbsp;<code>OLTP</code>&nbsp;的场景不同,&nbsp;<code>OLAP</code>&nbsp;主要服务于分析型应用, 其一般是批量加载数据, 如果出错了, 重新查询即可</p>




</div>




</div>




</div>




</li>
<li>
<p>总结</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>OLTP</code>&nbsp;随机访问能力比较强, 批量扫描比较差</p>




</li>
<li>
<p><code>OLAP</code>&nbsp;擅长大规模批量数据加载, 对于随机访问的能力则比较差</p>




</li>
<li>
<p>大数据系统中, 往往从&nbsp;<code>OLTP</code>&nbsp;数据库中&nbsp;<code>ETL</code>&nbsp;放入&nbsp;<code>OLAP</code>&nbsp;数据库中, 然后做分析和处理</p>




</li>




</ul>




</div>




</div>




</div>




</li>




</ul>




</div>




</div>




</div>




</dd><dt class="hdlist1">行式存储和列式存储</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>行式和列式是不同的存储方式, 其大致如下</p>




</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190606132236.png" alt="20190606132236" /></div>




</div>
<div class="ulist">
<ul>
<li>
<p>行式存储</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>行式一般用做于&nbsp;<code>OLTP</code>, 例如我的订单, 那不仅要看到订单, 还要看到收货地址, 付款信息, 派送信息等, 所以&nbsp;<code>OLTP</code>&nbsp;一般是倾向于获取整行所有列的信息</p>




</div>




</div>




</div>




</li>
<li>
<p>列式存储</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>而分析平台就不太一样了, 例如分析销售额, 那可能只对销售额这一列感兴趣, 所以按照列存储, 只获取需要的列, 这样能减少数据的读取量</p>




</div>




</div>




</div>




</li>




</ul>




</div>




</div>




</div>




</dd><dt class="hdlist1">存储模型</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">结构</dt><dd>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Kudu</code>&nbsp;的存储模型是有结构的表</p>




</li>
<li>
<p><code>OLTP</code>&nbsp;中代表性的&nbsp;<code>MySQL</code>,&nbsp;<code>Oracle</code>&nbsp;模型是有结构的表</p>




</li>
<li>
<p><code>HBase</code>&nbsp;是看起来像是表一样的&nbsp;<code>Key-Value</code>&nbsp;型数据,&nbsp;<code>Key</code>&nbsp;是&nbsp;<code>RowKey</code>&nbsp;和列簇的组合,&nbsp;<code>Value</code>&nbsp;是具体的值</p>




</li>




</ul>




</div>




</div>




</div>




</dd><dt class="hdlist1">主键</dt><dd>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Kudu</code>&nbsp;采用了&nbsp;<code>Raft</code>&nbsp;协议, 所以&nbsp;<code>Kudu</code>&nbsp;的表中有唯一主键</p>




</li>
<li>
<p>关系型数据库也有唯一主键</p>




</li>
<li>
<p><code>HBase</code>&nbsp;的&nbsp;<code>RowKey</code>&nbsp;并不是唯一主键</p>




</li>




</ul>




</div>




</div>




</div>




</dd><dt class="hdlist1">事务支持</dt><dd>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Kudu</code>&nbsp;缺少跨行的&nbsp;<code>ACID</code>&nbsp;事务</p>




</li>
<li>
<p>关系型数据库大多在单机上是可以支持&nbsp;<code>ACID</code>&nbsp;事务的</p>




</li>




</ol></div>




</div>




</div>




</dd></dl></div>




</div>




</div>




</dd><dt class="hdlist1">性能</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Kudu</code>&nbsp;的随机读写速度目标是和&nbsp;<code>HBase</code>&nbsp;相似, 但是这个目标建立在使用&nbsp;<code>SSD</code>&nbsp;基础之上</p>




</li>
<li>
<p><code>Kudu</code>&nbsp;的批量查询性能目标是比&nbsp;<code>HDFS</code>&nbsp;上的&nbsp;<code>Parquet</code>&nbsp;慢两倍以内</p>




</li>




</ul>




</div>




</div>




</div>




</dd><dt class="hdlist1">硬件需求</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Hadoop</code>&nbsp;的设计理念是尽可能的减少硬件依赖, 使用更廉价的机器, 配置机械硬盘</p>




</li>
<li>
<p><code>Kudu</code>&nbsp;的时代&nbsp;<code>SSD</code>&nbsp;已经比较常见了, 能够做更多的磁盘操作和内存操作</p>




</li>
<li>
<p><code>Hadoop</code>&nbsp;不太能发挥比较好的硬件的能力, 而&nbsp;<code>Kudu</code>&nbsp;为了大内存和&nbsp;<code>SSD</code>&nbsp;而设计, 所以&nbsp;<code>Kudu</code>&nbsp;对硬件的需求会更大一些</p>




</li>




</ul>




</div>




</div>




</div>




</dd></dl></div>




</div>
<div class="sect2">
<h3 id="_1_3_kudu_的设计和结构">1.3. Kudu 的设计和结构</h3>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Kudu</code>&nbsp;是什么</p>




</li>
<li>
<p><code>Kudu</code>&nbsp;的整体设计</p>




</li>
<li>
<p><code>Kudu</code>&nbsp;的角色</p>




</li>
<li>
<p><code>Kudu</code>&nbsp;的概念</p>




</li>




</ol></div>




</div>




</div>
<div class="dlist"><dl><dt class="hdlist1"><code>Kudu</code>&nbsp;是什么</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1"><code>HDFS</code>&nbsp;上的数据分析</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p><code>HDFS</code>&nbsp;是一种能够非常高效的进行数据分析的存储引擎</p>




</div>
<div class="ulist">
<ul>
<li>
<p><code>HDFS</code>&nbsp;有很多支持压缩的列式存储的文件格式, 性能很好, 例如&nbsp;<code>Parquet</code>&nbsp;和&nbsp;<code>ORC</code></p>




</li>
<li>
<p><code>HDFS</code>&nbsp;本身支持并行</p>




</li>




</ul>




</div>




</div>




</div>




</dd><dt class="hdlist1"><code>HBase</code>&nbsp;可以进行高效的数据插入和读取</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p><code>HBase</code>&nbsp;主要用于完成一些对实时性要求比较高的场景</p>




</div>
<div class="ulist">
<ul>
<li>
<p><code>HBase</code>&nbsp;能够以极高的吞吐量来进行数据存储, 无论是批量加载, 还是大量&nbsp;<code>put</code></p>




</li>
<li>
<p><code>HBase</code>&nbsp;能够对主键进行非常高效的扫描, 因为其根据主键进行排序和维护</p>




</li>
<li>
<p>但是对于主键以外的列进行扫描则性能会比较差</p>




</li>




</ul>




</div>




</div>




</div>




</dd><dt class="hdlist1"><code>Kudu</code>&nbsp;的设计目标</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p><code>Kudu</code>&nbsp;最初的目标是成为一个新的存储引擎, 可以进行快速的数据分析, 又可以进行高效的数据随机插入, 这样就能简化数据从源端到&nbsp;<code>Hadoop</code>&nbsp;中可以用于被分析的过程, 所以有如下的一些设计目标</p>




</div>
<div class="ulist">
<ul>
<li>
<p>尽可能快速的扫描, 达到&nbsp;<code>HDFS</code>&nbsp;中&nbsp;<code>Parquet</code>&nbsp;的二分之一速度</p>




</li>
<li>
<p>尽可能的支持随机读写, 达到&nbsp;<code>1ms</code>&nbsp;的响应时间</p>




</li>
<li>
<p>列式存储</p>




</li>
<li>
<p>支持&nbsp;<code>NoSQL</code>&nbsp;样式的&nbsp;<code>API</code>, 例如&nbsp;<code>put</code>,&nbsp;<code>get</code>,&nbsp;<code>delete</code>,&nbsp;<code>scan</code></p>




</li>




</ul>




</div>




</div>




</div>




</dd></dl></div>




</div>




</div>




</dd><dt class="hdlist1">总体设计</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Kudu</code>&nbsp;不支持&nbsp;<code>SQL</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p><code>Kudu</code>&nbsp;和&nbsp;<code>Impala</code>&nbsp;都是&nbsp;<code>Cloudera</code>&nbsp;的项目, 所以&nbsp;<code>Kudu</code>&nbsp;不打算自己实现&nbsp;<code>SQL</code>&nbsp;的解析和执行计划, 而是选择放在&nbsp;<code>Impala</code>&nbsp;中实现, 这两个东西配合来完成任务</p>




</div>
<div class="paragraph">
<p><code>Kudu</code>&nbsp;的底层是一个基于表的引擎, 但是提供了&nbsp;<code>NoSQL</code>&nbsp;的&nbsp;<code>API</code></p>




</div>




</div>




</div>




</li>
<li>
<p><code>Kudu</code>&nbsp;中存储两类的数据</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Kudu</code>&nbsp;存储自己的元信息, 例如表名, 列名, 列类型</p>




</li>
<li>
<p><code>Kudu</code>&nbsp;当然也有存放表中的数据</p>




</li>




</ul>




</div>
<div class="paragraph">
<p>这两种数据都存储在&nbsp;<code>tablet</code>&nbsp;中</p>




</div>




</div>




</div>




</li>
<li>
<p><code>Master server</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>存储元数据的&nbsp;<code>tablet</code>&nbsp;由&nbsp;<code>Master server</code>&nbsp;管理</p>




</div>




</div>




</div>




</li>
<li>
<p><code>Tablet server</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>存储表中数据的&nbsp;<code>tablet</code>&nbsp;由不同的&nbsp;<code>Tablet server</code>&nbsp;管理</p>




</div>




</div>




</div>




</li>
<li>
<p><code>tablet</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p><code>Master server</code>&nbsp;和&nbsp;<code>Tablet server</code>&nbsp;都是以&nbsp;<code>tablet</code>&nbsp;作为存储形式来存储数据的, 一个&nbsp;<code>tablet</code>&nbsp;通常由一个&nbsp;<code>Leader</code>&nbsp;和两个&nbsp;<code>Follower</code>&nbsp;组成, 这些角色分布的不同的服务器中</p>




</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190607011022.png" alt="20190607011022" width="600" /></div>




</div>




</div>




</div>




</li>




</ul>




</div>




</div>




</div>




</dd><dt class="hdlist1"><code>Master server</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190607004622.png" alt="20190607004622" /></div>




</div>
<div class="ulist">
<ul>
<li>
<p><code>Master server</code>&nbsp;中存储的其实也就是一个&nbsp;<code>tablet</code>, 这个&nbsp;<code>tablet</code>&nbsp;中存储系统的元数据, 所以&nbsp;<code>Kudu</code>&nbsp;无需依赖&nbsp;<code>Hive</code></p>




</li>
<li>
<p>客户端访问某一张表的某一部分数据时, 会先询问&nbsp;<code>Master server</code>, 获取这个数据的位置, 去对应位置获取或者存储数据</p>




</li>
<li>
<p>虽然&nbsp;<code>Master</code>&nbsp;比较重要, 但是其承担的职责并不多, 数据量也不大, 所以为了增进效率, 这个&nbsp;<code>tablet</code>&nbsp;会存储在内存中</p>




</li>
<li>
<p>生产环境中通常会使用多个&nbsp;<code>Master server</code>&nbsp;来保证可用性</p>




</li>




</ul>




</div>




</div>




</div>




</dd><dt class="hdlist1"><code>Tablet server</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190607010016.png" alt="20190607010016" /></div>




</div>
<div class="ulist">
<ul>
<li>
<p><code>Tablet server</code>&nbsp;中也是&nbsp;<code>tablet</code>, 但是其中存储的是表数据</p>




</li>
<li>
<p><code>Tablet server</code>&nbsp;的任务非常繁重, 其负责和数据相关的所有操作, 包括存储, 访问, 压缩, 其还负责将数据复制到其它机器</p>




</li>
<li>
<p>因为&nbsp;<code>Tablet server</code>&nbsp;特殊的结构, 其任务过于繁重, 所以有如下的限制</p>
<div class="ulist">
<ul>
<li>
<p><code>Kudu</code>&nbsp;最多支持&nbsp;<code>300</code>&nbsp;个服务器, 建议&nbsp;<code>Tablet server</code>&nbsp;最多不超过&nbsp;<code>100</code>&nbsp;个</p>




</li>
<li>
<p>建议每个&nbsp;<code>Tablet server</code>&nbsp;至多包含&nbsp;<code>2000</code>&nbsp;个&nbsp;<code>tablet</code>&nbsp;(包含&nbsp;<code>Follower</code>)</p>




</li>
<li>
<p>建议每个表在每个&nbsp;<code>Tablet server</code>&nbsp;中至多包含&nbsp;<code>60</code>&nbsp;个&nbsp;<code>tablet</code>&nbsp;(包含&nbsp;<code>Follower</code>)</p>




</li>
<li>
<p>每个&nbsp;<code>Tablet server</code>&nbsp;至多管理&nbsp;<code>8TB</code>&nbsp;数据</p>




</li>
<li>
<p>理想环境下, 一个&nbsp;<code>tablet leader</code>&nbsp;应该对应一个&nbsp;<code>CPU</code>&nbsp;核心, 以保证最优的扫描性能</p>




</li>




</ul>




</div>




</li>




</ul>




</div>




</div>




</div>




</dd><dt class="hdlist1"><code>tablet</code>&nbsp;的存储结构</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190607021239.png" alt="20190607021239" /></div>




</div>
<div class="paragraph">
<p>在&nbsp;<code>Kudu</code>&nbsp;中, 为了同时支持批量分析和随机访问, 在整体上的设计一边参考了&nbsp;<code>Parquet</code>&nbsp;这样的文件格式的设计, 一边参考了&nbsp;<code>HBase</code>&nbsp;的设计</p>




</div>
<div class="ulist">
<ul>
<li>
<p><code>MemRowSet</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>这个组件就很像&nbsp;<code>HBase</code>&nbsp;中的&nbsp;<code>MemoryStore</code>, 是一个缓冲区, 数据来了先放缓冲区, 保证响应速度</p>




</div>




</div>




</div>




</li>
<li>
<p><code>DiskRowSet</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>列存储的好处不仅仅只是分析的时候只&nbsp;<code>I/O</code>&nbsp;对应的列, 还有一个好处, 就是同类型的数据放在一起, 更容易压缩和编码</p>




</div>
<div class="paragraph">
<p><code>DiskRowSet</code>&nbsp;中的数据以列式组织, 类似&nbsp;<code>Parquet</code>&nbsp;中的方式, 对其中的列进行编码, 通过布隆过滤器增进查询速度</p>




</div>




</div>




</div>




</li>




</ul>




</div>




</div>




</div>




</dd><dt class="hdlist1"><code>tablet</code>&nbsp;的&nbsp;<code>Insert</code>&nbsp;流程</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190607022949.png" alt="20190607022949" /></div>




</div>
<div class="ulist">
<ul>
<li>
<p>使用 MemRowSet 作为缓冲, 特定条件下写为多个 DiskRowSet</p>




</li>
<li>
<p>在插入之前, 为了保证主键唯一性, 会已有的 DiskRowSet 和 MemRowSet 进行验证, 如果主键已经存在则报错</p>




</li>




</ul>




</div>




</div>




</div>




</dd><dt class="hdlist1"><code>tablet</code>&nbsp;的&nbsp;<code>Update</code>&nbsp;流程</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190607102727.png" alt="20190607102727" /></div>




</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>查找要更新的数据在哪个&nbsp;<code>DiskRowSet</code>&nbsp;中</p>




</li>
<li>
<p>数据放入&nbsp;<code>DiskRowSet</code>&nbsp;所持有的&nbsp;<code>DeltaMemStore</code>&nbsp;中, 这一步也是暂存</p>




</li>
<li>
<p>特定时机下,&nbsp;<code>DeltaMemStore</code>&nbsp;会将数据溢写到磁盘, 生成&nbsp;<code>RedoDeltaFile</code>, 记录数据的变化</p>




</li>
<li>
<p>定时合并&nbsp;<code>RedoDeltaFile</code></p>
<div class="ulist">
<ul>
<li>
<p>合并策略有三种, 常见的有两种, 一种是&nbsp;<code>major</code>, 会将数据合并到基线数据中, 一种是&nbsp;<code>minor</code>, 只合并&nbsp;<code>RedoDeltaFile</code></p>




</li>




</ul>




</div>




</li>




</ol></div>




</div>




</div>




</dd></dl></div>




</div>




</div>




</div>
<div class="sect1">
<h2 id="_2_kudu_安装和操作">2. Kudu 安装和操作</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="paragraph">
<p>因为&nbsp;<code>Kudu</code>&nbsp;经常和&nbsp;<code>Impala</code>&nbsp;配合使用, 所以 我们也要安装&nbsp;<code>Impala</code>, 但是又因为&nbsp;<code>Impala</code>&nbsp;强依赖于&nbsp;<code>CDH</code>, 所以我们连&nbsp;<code>CDH</code>&nbsp;一起安装一下, 做一个完整的&nbsp;<code>CDH</code>&nbsp;集群, 搭建一套新的虚拟机</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建虚拟机准备初始环境</p>
</li>
<li>
<p>安装&nbsp;<code>Zookeeper</code></p>
</li>
<li>
<p>安装&nbsp;<code>Hadoop</code></p>
</li>
<li>
<p>安装&nbsp;<code>MySQL</code></p>
</li>
<li>
<p>安装&nbsp;<code>Hive</code></p>
</li>
<li>
<p>安装&nbsp;<code>Kudu</code></p>
</li>
<li>
<p>安装&nbsp;<code>Impala</code></p>
</li>
</ol></div>
</div>
</div>
<div class="sect2">
<h3 id="_2_1_准备初始环境">2.1. 准备初始环境</h3>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="paragraph">
<p>之前的环境中已经安装了太多环境, 所以换一个新的虚拟机, 从头开始安装</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建虚拟机</p>
</li>
<li>
<p>安装系统</p>
</li>
<li>
<p>复制三台 虚拟机</p>
</li>
<li>
<p>配置时间同步服务</p>
</li>
<li>
<p>配置主机名</p>
</li>
<li>
<p>关闭&nbsp;<code>SELinux</code></p>
</li>
<li>
<p>关闭防火墙</p>
</li>
<li>
<p>重启</p>
</li>
<li>
<p>配置免密登录</p>
</li>
<li>
<p>安装&nbsp;<code>JDK</code></p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>Step 1</code>: 创建虚拟机</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>在&nbsp;<code>VmWare</code>&nbsp;中点击创建虚拟机</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608151742.png" alt="20190608151742" width="500" /></div>
</div>
</li>
<li>
<p>打开向导</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608151923.png" alt="20190608151923" width="200" /></div>
</div>
</li>
<li>
<p>设置硬件兼容性</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608152010.png" alt="20190608152010" width="200" /></div>
</div>
</li>
<li>
<p>指定系统安装方式</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608152054.png" alt="20190608152054" width="200" /></div>
</div>
</li>
<li>
<p>指定系统类型</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608152151.png" alt="20190608152151" width="200" /></div>
</div>
</li>
<li>
<p>指定虚拟机位置</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608152251.png" alt="20190608152251" width="400" /></div>
</div>
</li>
<li>
<p>处理器配置</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608152338.png" alt="20190608152338" width="200" /></div>
</div>
</li>
<li>
<p>内存配置</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608152403.png" alt="20190608152403" width="200" /></div>
</div>
</li>
<li>
<p>选择网络类型, 这一步非常重要, 一定要配置正确</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608152433.png" alt="20190608152433" width="200" /></div>
</div>
</li>
<li>
<p>选择&nbsp;<code>I/O</code>&nbsp;类型</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608152533.png" alt="20190608152533" width="200" /></div>
</div>
</li>
<li>
<p>选择虚拟磁盘类型</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608152738.png" alt="20190608152738" width="200" /></div>
</div>
</li>
<li>
<p>选择磁盘创建方式</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608152827.png" alt="20190608152827" width="200" /></div>
</div>
</li>
<li>
<p>创建新磁盘</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608153017.png" alt="20190608153017" width="200" /></div>
</div>
</li>
<li>
<p>指定磁盘文件位置</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608153103.png" alt="20190608153103" width="200" /></div>
</div>
</li>
<li>
<p>终于, 虚拟机创建好了, 复制图片差点没给我累挂</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608153146.png" alt="20190608153146" width="200" /></div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 2</code>: 安装&nbsp;<code>CentOS 6</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>为虚拟机挂载安装盘</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608153305.png" alt="20190608153305" width="200" /></div>
</div>
</li>
<li>
<p>选择安装盘</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608153349.png" alt="20190608153349" width="400" /></div>
</div>
</li>
<li>
<p>开启虚拟机</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608153428.png" alt="20190608153428" width="400" /></div>
</div>
</li>
<li>
<p>进入 CentOS 6 的安装</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608153614.png" alt="20190608153614" width="400" /></div>
</div>
</li>
<li>
<p>跳过磁盘选择</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608153644.png" alt="20190608153644" width="400" /></div>
</div>
</li>
<li>
<p>选择语言</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608153742.png" alt="20190608153742" width="400" /></div>
</div>
</li>
<li>
<p>选择键盘类型</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608153836.png" alt="20190608153836" width="400" /></div>
</div>
</li>
<li>
<p>选择存储设备类型</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608153905.png" alt="20190608153905" width="400" /></div>
</div>
</li>
<li>
<p>清除数据</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608154025.png" alt="20190608154025" width="400" /></div>
</div>
</li>
<li>
<p>主机名</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608154051.png" alt="20190608154051" width="400" /></div>
</div>
</li>
<li>
<p>选择时区, 这一步很重要, 一定要选</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608154127.png" alt="20190608154127" width="400" /></div>
</div>
</li>
<li>
<p>设置&nbsp;<code>root</code>&nbsp;账号, 密码最好是统一的, 就&nbsp;<code>hadoop</code>&nbsp;吧</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608154211.png" alt="20190608154211" width="400" /></div>
</div>
</li>
<li>
<p>选择安装类型</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608154244.png" alt="20190608154244" width="400" /></div>
</div>
</li>
<li>
<p>选择安装软件的类型</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608154410.png" alt="20190608154410" width="400" /></div>
</div>
</li>
<li>
<p>安装完成, 终于不用复制图片了, 开心</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608154448.png" alt="20190608154448" width="400" /></div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 3</code>: 集群规划</dt><dd>
<div class="sidebarblock">
<div class="content">
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top"><code>HostName</code></th><th class="tableblock halign-left valign-top"><code>IP</code></th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock">cdh01.itcast.cn</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">192.168.169.101</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock">cdh02.itcast.cn</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">192.168.169.102</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock">cdh03.itcast.cn</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">192.168.169.103</p>
</td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>已经安装好一台虚拟机了, 接下来通过复制的方式创建三台虚拟机</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>复制虚拟机文件夹(Ps. 在创建虚拟机时候选择的路径)</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608155101.png" alt="20190608155101" width="300" /></div>
</div>
</li>
<li>
<p>进入三个文件夹中, 点击&nbsp;<code>vmx</code>&nbsp;文件, 让 VmWare 加载</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608155152.png" alt="20190608155152" width="300" /></div>
</div>
</li>
<li>
<p>为所有的虚拟机生成新的&nbsp;<code>MAC</code>&nbsp;地址</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608161145.png" alt="20190608161145" width="300" /></div>
</div>
</li>
<li>
<p>确认&nbsp;<code>vmnet8</code>&nbsp;的网关地址, 以及这块虚拟网卡的地址</p>
</li>
<li>
<p>修改网卡信息</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>进入每台机器中, 修改&nbsp;<code>70-persistent-net.rules</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">vi /etc/udev/rules.d/70-persistent-net.rules</code></pre>
</div>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608161751.png" alt="20190608161751" width="300" /></div>
</div>
</div>
</div>
</li>
<li>
<p>更改&nbsp;<code>IP</code>&nbsp;地址,&nbsp; 修改/etc/sysconfig/network-scripts/ifcfg-eth0 文件。&nbsp; &nbsp; &nbsp;注意: 1. 网关地址要和&nbsp;<code>vmnet8</code>&nbsp;的网关地址一致, 2.&nbsp;<code>IP</code>&nbsp;改为&nbsp;<code>192.168.169.101; 3.修改好后，重启系统！ 4.可以通过ifconfig&nbsp; 或者 ip addr这2个命令来查验IP地址是否正确。</code></p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608161950.png" alt="20190608161950" width="300" /></div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 4</code>: 配置时间同步服务</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>在几乎所有的分布式存储系统上, 都需要进行时钟同步, 避免出现旧的数据在同步过程中变为新的数据, 包括&nbsp;<code>HBase</code>,&nbsp;<code>HDFS</code>,&nbsp;<code>Kudu</code>都需要进行时钟同步, 所以在一切开始前, 先同步一下时钟, 保证没有问题</p>
</div>
<div class="paragraph">
<p>时钟同步比较简单, 只需要确定时钟没有太大差异, 然后开启&nbsp;<code>ntp</code>&nbsp;的自动同步服务即可</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">yum install -y ntp
service ntpd start<br />chkconfig ntpd on  设置开机启动<br /></code></pre>
</div>
</div>
<div class="paragraph">
<p>同步大概需要&nbsp;<code>5 - 10</code>&nbsp;分钟, 然后查看是否已经是同步状态即可</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">ntpstat</code></pre>
</div>
</div>
<div class="paragraph">
<p>最后在其余两台节点也要如此配置一下</p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 5</code>: 配置主机名</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>配置主机名是为了在网络内可以通信</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>修改&nbsp;<code>/etc/sysconfig/network</code>&nbsp;文件, 声明主机名</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text"># 在三个节点上使用不同的主机名
HOSTNAME=cdh01.itcast.cn</code></pre>
</div>
</div>
</li>
<li>
<p>修改&nbsp;<code>/etc/hosts</code>&nbsp;文件, 确定&nbsp;<code>DNS</code>&nbsp;的主机名</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">127.0.0.1 cdh01.itcast.cn localhost cdh01

192.168.169.101 cdh01.itcast.cn cdh01
192.168.169.102 cdh02.itcast.cn cdh02
192.168.169.103 cdh03.itcast.cn cdh03</code></pre>
</div>
</div>
</li>
<li>
<p>在其余的两台机器中也要如此配置</p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 6</code>: 关闭&nbsp;<code>SELinux</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>修改&nbsp;<code>/etc/selinus/config</code>&nbsp;将&nbsp;<code>SELinux</code>&nbsp;关闭</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190608162634.png" alt="20190608162634" width="400" /></div>
</div>
<div class="paragraph">
<p>最后别忘了再其它节点也要如此配置</p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 7</code>: 关闭防火墙</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>执行如下命令做两件事, 关闭防火墙, 关闭防火墙开机启动</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">service iptables stop
chkconfig iptables off</code></pre>
</div>
</div>
<div class="paragraph">
<p>最后别忘了再其它节点也要如此配置</p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step x</code>: 重启</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>刚才有一些配置是没有及时生效的, 为了避免麻烦, 在这里可以重启一下, 在三台节点上依次执行命令</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">reboot -h now</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 8</code>: 配置三台节点的免密登录</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>SSH 有两种登录方式</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>输入密码从而验证登录</p>
</li>
<li>
<p>服务器生成随机字符串, 客户机使用私钥加密, 服务器使用预先指定的公钥解密, 从而验证登录</p>
</li>
</ol></div>
<div class="paragraph">
<p>所以配置免密登录就可以使用第二种方式, 大概步骤就是先在客户机生成密钥对, 然后复制给服务器</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text"># 生成密钥对
ssh-keygen -t rsa

# 拷贝公钥到服务机
ssh-copy-id cdh01
ssh-copy-id cdh02
ssh-copy-id cdh03</code></pre>
</div>
</div>
<div class="paragraph">
<p>然后在三台节点上依次执行这些命令</p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 9</code>: 安装&nbsp;<code>JDK</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>安装&nbsp;<code>JDK</code>&nbsp;之前, 可以先卸载已经默认安装的&nbsp;<code>JDK</code>, 这样可以避免一些诡异问题</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>查看是否有存留的&nbsp;<code>JDK</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">rpm -qa | grep java</code></pre>
</div>
</div>
</li>
<li>
<p>如果有, 则使用如下命令卸载</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">rpm -e -nodeps xx</code></pre>
</div>
</div>
</li>
<li>
<p>上传 JDK 包到服务器中</p>
</li>
<li>
<p>解压并拷贝到&nbsp;<code>/usr/java</code>&nbsp;中</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">tar xzvf jdk-8u192-linux-x64.tar.gz
mv jdk1.8.0_192 /usr/java/</code></pre>
</div>
</div>
</li>
<li>
<p>修改&nbsp;<code>/etc/hosts</code>&nbsp;配置环境变量</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">export JAVA_HOME=/usr/java/jdk1.8.0_192
export PATH=$PATH:$JAVA_HOME/bin</code></pre>
</div>
</div>
</li>
<li>
<p>在剩余两台主机上重复上述步骤</p>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3>&nbsp;</h3>
<h3 id="_2_2_创建本地_yum_仓库">2.2. 创建本地 Yum 仓库</h3>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="paragraph">
<p>创建本地&nbsp;<code>Yum</code>&nbsp;仓库的目的是因为从远端的&nbsp;<code>Yum</code>&nbsp;仓库下载东西的速度实在是太渣, 然而&nbsp;<code>CDH</code>&nbsp;的所有组件几乎都要从&nbsp;<code>Yum</code>&nbsp;安装, 所以搭建一个本地仓库会加快下载速度</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>下载&nbsp;<code>CDH</code>&nbsp;的所有安装包</p>
</li>
<li>
<p>生成&nbsp;<code>CDH</code>&nbsp;的&nbsp;<code>Yum</code>&nbsp;仓库</p>
</li>
<li>
<p>配置服务器, 在局域网共享仓库</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>Step 1</code>: 下载&nbsp;<code>CDH</code>&nbsp;的安装包</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>创建本地&nbsp;<code>Yum</code>&nbsp;仓库的原理是将&nbsp;<code>CDH</code>&nbsp;的安装包下载下来, 提供&nbsp;<code>Http</code>&nbsp;服务给局域网其它主机(或本机), 让其它主机的&nbsp;<code>Yum</code>&nbsp;能够通过&nbsp;<code>Http</code>&nbsp;服务下载&nbsp;<code>CDH</code>&nbsp;的安装包, 所以需要先下载对应的&nbsp;<code>CDH</code>&nbsp;安装包</p>
</div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">需要注意的是, 这一步可以一点都不做, 因为已经为大家提供了对应的安装包, 在&nbsp;<code>DMP</code>&nbsp;的目录中, 就能找到&nbsp;<code>cloudera-cdh5</code>&nbsp;这个目录, 上传到服务器即可</td>
</tr>
</tbody>
</table>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>下载&nbsp;<code>CDH</code>&nbsp;的安装包需要使用&nbsp;<code>CDH</code>&nbsp;的一个工具, 要安装&nbsp;<code>CDH</code>&nbsp;的这个工具就要先导入&nbsp;<code>CDH</code>&nbsp;的&nbsp;<code>Yum</code>&nbsp;源</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">wget https://archive.cloudera.com/cdh5/redhat/6/x86_64/cdh/cloudera-cdh5.repo
mv cloudera-cdh5.repo /etc/yum.repos.d/</code></pre>
</div>
</div>
</li>
<li>
<p>安装&nbsp;<code>CDH</code>&nbsp;安装包同步工具</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">yum install -y yum-utils createrepo</code></pre>
</div>
</div>
</li>
<li>
<p>同步&nbsp;<code>CDH</code>&nbsp;的安装包</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">reposync -r cloudera-cdh5</code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 2</code>: 创建本地&nbsp;<code>Yum</code>&nbsp;仓库服务器</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>创建本地&nbsp;<code>Yum</code>&nbsp;仓库的原理是将&nbsp;<code>CDH</code>&nbsp;的安装包下载下来, 提供&nbsp;<code>Http</code>&nbsp;服务给局域网其它主机(或本机), 让其它主机的&nbsp;<code>Yum</code>&nbsp;能够通过&nbsp;<code>Http</code>&nbsp;服务下载&nbsp;<code>CDH</code>&nbsp;的安装包, 所以需要提供&nbsp;<code>Http</code>&nbsp;服务, 让本机或者其它节点可以通过&nbsp;<code>Http</code>&nbsp;下载文件, Yum 本质也就是帮助我们从&nbsp;<code>Yum</code>&nbsp;的软件仓库下载软件</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>安装&nbsp;<code>Http</code>&nbsp;服务器软件</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">yum install -y httpd
service httpd start</code></pre>
</div>
</div>
</li>
<li>
<p>创建&nbsp;<code>Yum</code>&nbsp;仓库的&nbsp;<code>Http</code>&nbsp;目录</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">mkdir -p /var/www/html/cdh/5
cp -r cloudera-cdh5/RPMS /var/www/html/cdh/5/
cd /var/www/html/cdh/5
createrepo .</code></pre>
</div>
</div>
</li>
<li>
<p>在三台主机上配置&nbsp;<code>Yum</code>&nbsp;源</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>最后一步便是向&nbsp;<code>Yum</code>&nbsp;增加一个新的源, 指向我们在&nbsp;<code>cdh01</code>&nbsp;上创建的&nbsp;<code>Yum</code>&nbsp;仓库, 但是在这个环节的第一步中, 已经下载了一个&nbsp;<code>Yum</code>&nbsp;的源, 只需要修改这个源的文件, 把&nbsp;<code>URL</code>&nbsp;替换为&nbsp;<code>cdh01</code>&nbsp;的地址即可</p>
</div>
<div class="paragraph">
<p>所以在&nbsp;<code>cdh01</code>&nbsp;上修改文件&nbsp;<code>/etc/yum.repos.d/cloudera-cdh5.repo</code>&nbsp;为</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">baseurl=http://cdh01/cdh/5/</code></pre>
</div>
</div>
<div class="paragraph">
<p>在&nbsp;<code>cdh02</code>&nbsp;和&nbsp;<code>cdh03</code>&nbsp;上下载这个文件</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">wget https://archive.cloudera.com/cdh5/redhat/7/x86_64/cdh/cloudera-cdh5.repo
mv cloudera-cdh5.repo /etc/yum.repos.d/</code></pre>
</div>
</div>
<div class="paragraph">
<p>然后在 cdh02 和 cdh03 上修改文件&nbsp;<code>/etc/yum.repos.d/cloudera-cdh5.repo</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">baseurl=http://cdh01/cdh/5/</code></pre>
</div>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</div>]]></description></item><item><title>idea2018.3.6，离线使用maven的方法</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/17/11691955.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 17 Oct 2019 06:43:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/17/11691955.html</guid><description><![CDATA[<p>（1）想办法拷贝联网电脑上已经下载好的仓库文件夹mavenRepository到离线环境的电脑上；</p>
<p>（2）idea中按照如下图中配置：</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191017144259618-1278497684.png" alt="" /></p>
<p>&nbsp;</p>
<p>（3）打开 User settings file中设置的settings.xml文件，取消所有的&lt;proxies&gt;、&lt;mirrors&gt;设置，</p>
<p>然后在&lt;mirrors&gt;中增加以下设置（设置本地仓库为在线仓库）：</p>
<p>&lt;mirror&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;id&gt;repo1&lt;/id&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;central&lt;/name&gt;</p>
<p>&nbsp;&nbsp;&nbsp; &nbsp; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;url&gt;file://D:/Develop/mavenRepository&lt;/url&gt;</p>
<p>&nbsp;&nbsp;&nbsp; &lt;/mirror&gt;</p>
<p>&nbsp;</p>
<p>（4）idea中reimport按钮，多点几次。</p>
<p>注： 之所以这么配置，是为了package打包时，需要验证下载下载了所有的jar包，直接可以从本地验证，不会报错。</p>
<p>　　另外，最好自己新建maven工程，不要直接打开或导入工程，后者可能会有问题。</p>]]></description></item><item><title>kafka创建topic报错</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/15/11680166.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 15 Oct 2019 12:29:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/15/11680166.html</guid><description><![CDATA[<p>kafka执行如下创建topic的语句：</p>
<p>[root@node01 kafka_2.11-1.0.0]# bin/kafka-topics.sh --create --topic streaming-test --replication-factor 1 --partitions 3 --zookeeper node01:2181,node02:2181,node03:2181<br />Error while executing topic command : Replication factor: 1 larger than available brokers: 0.<br /><span style="color: #ff0000;">报错：[2019-10-15 20:23:25,461] ERROR org.apache.kafka.common.errors.InvalidReplicationFactorException: Replication factor: 1 larger than available brokers: 0.</span></p>
<p>原因：broker的配置文件server.properties中的配置项zookeeper.connect指定了kafka的zookeeper的根目录(<span style="color: #ff0000;">zookeeper.connect=node01:2181,node02:2181,node03:2181/kafka</span>)</p>
<p>解决方法：命令行参数&ldquo;--zookeeper&rdquo;的值也需要带上根目录，如下：</p>
<p>bin/kafka-topics.sh --create --topic streaming-test --replication-factor 1 --partitions 3 --zookeeper node01:2181,node02:2181,node03:2181/kafka</p>
<p>&nbsp;</p>]]></description></item><item><title>IDEA &amp; MAVEN配置代理（没用）</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/15/11678204.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 15 Oct 2019 07:56:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/15/11678204.html</guid><description><![CDATA[<p>1. IDEA配置代理：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191015155507716-1636124443.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>2.&nbsp;maven配置代理：</p>
<p>在maven中配置代理，主要配置编辑~/.m2/settings.xml文件的&lt;proxies&gt;</p>
<p>socks5类型：<br />  &lt;id&gt;socks5&lt;/id&gt;<br />  &lt;active&gt;true&lt;/active&gt;<br />  &lt;protocol&gt;socks5&lt;/protocol&gt;<br />  &lt;host&gt;10.98.88.88&lt;/host&gt;<br />  &lt;port&gt;8081&lt;/port&gt;<br />  隔离内网的nexus<br />  &lt;nonProxyHosts&gt;10.98.88.89*|32.*&lt;/nonProxyHosts&gt; <br />&lt;/proxy&gt;</p>
<p>http类型：<br /> &lt;id&gt;http&lt;/id&gt;<br /> &lt;active&gt;true&lt;/active&gt;<br /> &lt;protocol&gt;http&lt;/protocol&gt;<br /> &lt;host&gt;10.98.88.88&lt;/host&gt;<br /> &lt;port&gt;8081&lt;/port&gt;<br /> &lt;nonProxyHosts&gt;10.98.88.89*|32.*&lt;/nonProxyHosts&gt;<br /> &lt;/proxy&gt;</p>]]></description></item><item><title>Update(Stage4)：Structured Streaming_介绍_案例</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/14/11673380.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 14 Oct 2019 11:24:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/14/11673380.html</guid><description><![CDATA[<p>&nbsp;</p>
<ul class="sectlevel1">
<li>1. 回顾和展望
<ul class="sectlevel2">
<li>1.1. Spark 编程模型的进化过程</li>
<li>1.2. Spark 的 序列化 的进化过程</li>
<li>1.3. Spark Streaming 和 Structured Streaming</li>
</ul>
</li>
<li>2. Structured Streaming 入门案例
<ul class="sectlevel2">
<li>2.1. 需求梳理</li>
<li>2.2. 代码实现</li>
<li>2.3. 运行和结果验证</li>
</ul>
</li>
<li>3. Stuctured Streaming 的体系和结构
<ul class="sectlevel2">
<li>3.1. 无限扩展的表格</li>
<li>3.2. 体系结构</li>
</ul>
</li>
<li>4. Source
<ul class="sectlevel2">
<li>4.1. 从 HDFS 中读取数据</li>
<li>4.2. 从 Kafka 中读取数据</li>
</ul>
</li>
<li>5. Sink
<ul class="sectlevel2">
<li>5.1. HDFS Sink</li>
<li>5.2. Kafka Sink</li>
<li>5.3. Foreach Writer</li>
<li>5.4. 自定义 Sink</li>
<li>5.5. Tigger</li>
<li>5.6. 从 Source 到 Sink 的流程</li>
<li>5.7. 错误恢复和容错语义</li>
</ul>
</li>
<li>6. 有状态算子
<ul class="sectlevel2">
<li>6.1. 常规算子</li>
<li>6.2. 分组算子</li>
</ul>
</li>
</ul>
<div id="preamble">
<div class="sectionbody">
<div class="dlist"><dl><dt class="hdlist1">全天目标</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>回顾和展望</p>
</li>
<li>
<p>入门案例</p>
</li>
<li>
<p><code>Stuctured Streaming</code>&nbsp;的体系和结构</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
<div class="sect1">
<h2>&nbsp;</h2>
<h2 id="_1_回顾和展望">1. 回顾和展望</h2>
<div class="sectionbody">
<div class="dlist"><dl><dt class="hdlist1">本章目标</dt><dd>
<div class="paragraph">
<p><code>Structured Streaming</code>&nbsp;是&nbsp;<code>Spark Streaming</code>&nbsp;的进化版, 如果了解了&nbsp;<code>Spark</code>&nbsp;的各方面的进化过程, 有助于理解&nbsp;<code>Structured Streaming</code>&nbsp;的使命和作用</p>
</div>
</dd><dt class="hdlist1">本章过程</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Spark</code>&nbsp;的&nbsp;<code>API</code>&nbsp;进化过程</p>
</li>
<li>
<p><code>Spark</code>&nbsp;的序列化进化过程</p>
</li>
<li>
<p><code>Spark Streaming</code>&nbsp;和&nbsp;<code>Structured Streaming</code></p>
</li>
</ol></div>
</dd></dl></div>
<div class="sect2">
<h3 id="_1_1_spark_编程模型的进化过程">1.1. Spark 编程模型的进化过程</h3>
<div class="exampleblock">
<div class="title">目标和过程</div>
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p><code>Spark</code>&nbsp;的进化过程中, 一个非常重要的组成部分就是编程模型的进化, 通过编程模型可以看得出来内在的问题和解决方案</p>
</div>
</dd><dt class="hdlist1">过程</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>编程模型&nbsp;<code>RDD</code>&nbsp;的优点和缺陷</p>
</li>
<li>
<p>编程模型&nbsp;<code>DataFrame</code>&nbsp;的优点和缺陷</p>
</li>
<li>
<p>编程模型&nbsp;<code>Dataset</code>&nbsp;的优点和缺陷</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190625103618.png" alt="20190625103618" width="800" /></div>
</div>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">编程模型</th><th class="tableblock halign-left valign-top">解释</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>RDD</code></p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">rdd.flatMap(_.split(" "))
   .map((_, 1))
   .reduceByKey(_ + _)
   .collect</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>针对自定义数据对象进行处理, 可以处理任意类型的对象, 比较符合面向对象</p>
</li>
<li>
<p><code>RDD</code>&nbsp;无法感知到数据的结构, 无法针对数据结构进行编程</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>DataFrame</code></p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">spark.read
     .csv("...")
     .where($"name" =!= "")
     .groupBy($"name")
     .show()</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>DataFrame</code>&nbsp;保留有数据的元信息,&nbsp;<code>API</code>&nbsp;针对数据的结构进行处理, 例如说可以根据数据的某一列进行排序或者分组</p>
</li>
<li>
<p><code>DataFrame</code>&nbsp;在执行的时候会经过&nbsp;<code>Catalyst</code>&nbsp;进行优化, 并且序列化更加高效, 性能会更好</p>
</li>
<li>
<p><code>DataFrame</code>&nbsp;只能处理结构化的数据, 无法处理非结构化的数据, 因为&nbsp;<code>DataFrame</code>&nbsp;的内部使用&nbsp;<code>Row</code>&nbsp;对象保存数据</p>
</li>
<li>
<p><code>Spark</code>&nbsp;为&nbsp;<code>DataFrame</code>&nbsp;设计了新的数据读写框架, 更加强大, 支持的数据源众多</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Dataset</code></p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">spark.read
     .csv("...")
     .as[Person]
     .where(_.name != "")
     .groupByKey(_.name)
     .count()
     .show()</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Dataset</code>&nbsp;结合了&nbsp;<code>RDD</code>&nbsp;和&nbsp;<code>DataFrame</code>&nbsp;的特点, 从&nbsp;<code>API</code>&nbsp;上即可以处理结构化数据, 也可以处理非结构化数据</p>
</li>
<li>
<p><code>Dataset</code>&nbsp;和&nbsp;<code>DataFrame</code>&nbsp;其实是一个东西, 所以&nbsp;<code>DataFrame</code>&nbsp;的性能优势, 在&nbsp;<code>Dataset</code>&nbsp;上也有</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
</tbody>
</table>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="dlist"><dl><dt class="hdlist1"><code>RDD</code>&nbsp;的优点</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>面向对象的操作方式</p>
</li>
<li>
<p>可以处理任何类型的数据</p>
</li>
</ol></div>
</dd><dt class="hdlist1"><code>RDD</code>&nbsp;的缺点</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>运行速度比较慢, 执行过程没有优化</p>
</li>
<li>
<p><code>API</code>&nbsp;比较僵硬, 对结构化数据的访问和操作没有优化</p>
</li>
</ol></div>
</dd><dt class="hdlist1"><code>DataFrame</code>&nbsp;的优点</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>针对结构化数据高度优化, 可以通过列名访问和转换数据</p>
</li>
<li>
<p>增加&nbsp;<code>Catalyst</code>&nbsp;优化器, 执行过程是优化的, 避免了因为开发者的原因影响效率</p>
</li>
</ol></div>
</dd><dt class="hdlist1"><code>DataFrame</code>&nbsp;的缺点</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>只能操作结构化数据</p>
</li>
<li>
<p>只有无类型的&nbsp;<code>API</code>, 也就是只能针对列和&nbsp;<code>SQL</code>&nbsp;操作数据,&nbsp;<code>API</code>&nbsp;依然僵硬</p>
</li>
</ol></div>
</dd><dt class="hdlist1"><code>Dataset</code>&nbsp;的优点</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>结合了&nbsp;<code>RDD</code>&nbsp;和&nbsp;<code>DataFrame</code>&nbsp;的&nbsp;<code>API</code>, 既可以操作结构化数据, 也可以操作非结构化数据</p>
</li>
<li>
<p>既有有类型的&nbsp;<code>API</code>&nbsp;也有无类型的&nbsp;<code>API</code>, 灵活选择</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_1_2_spark_的_序列化_的进化过程">1.2. Spark 的 序列化 的进化过程</h3>
<div class="exampleblock">
<div class="title">目标和过程</div>
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p><code>Spark</code>&nbsp;中的序列化过程决定了数据如何存储, 是性能优化一个非常重要的着眼点,&nbsp;<code>Spark</code>&nbsp;的进化并不只是针对编程模型提供的&nbsp;<code>API</code>, 在大数据处理中, 也必须要考虑性能</p>
</div>
</dd><dt class="hdlist1">过程</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>序列化和反序列化是什么</p>
</li>
<li>
<p><code>Spark</code>&nbsp;中什么地方用到序列化和反序列化</p>
</li>
<li>
<p><code>RDD</code>&nbsp;的序列化和反序列化如何实现</p>
</li>
<li>
<p><code>Dataset</code>&nbsp;的序列化和反序列化如何实现</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">Step 1: 什么是序列化和序列化</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>在&nbsp;<code>Java</code>&nbsp;中, 序列化的代码大概如下</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java"><span class="hljs-keyword">public <span class="hljs-class"><span class="hljs-keyword">class <span class="hljs-title">JavaSerializable <span class="hljs-keyword">implements <span class="hljs-title">Serializable {
  NonSerializable ns = <span class="hljs-keyword">new NonSerializable();
}

<span class="hljs-keyword">public <span class="hljs-class"><span class="hljs-keyword">class <span class="hljs-title">NonSerializable {

}

<span class="hljs-function"><span class="hljs-keyword">public <span class="hljs-keyword">static <span class="hljs-keyword">void <span class="hljs-title">main<span class="hljs-params">(String[] args) <span class="hljs-keyword">throws IOException {
  <span class="hljs-comment">// 序列化
  JavaSerializable serializable = <span class="hljs-keyword">new JavaSerializable();
  ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new ObjectOutputStream(<span class="hljs-keyword">new FileOutputStream(<span class="hljs-string">"/tmp/obj.ser"));
  <span class="hljs-comment">// 这里会抛出一个 "java.io.NotSerializableException: cn.itcast.NonSerializable" 异常
  objectOutputStream.writeObject(serializable);
  objectOutputStream.flush();
  objectOutputStream.close();

  <span class="hljs-comment">// 反序列化
  FileInputStream fileInputStream = <span class="hljs-keyword">new FileInputStream(<span class="hljs-string">"/tmp/obj.ser");
  ObjectInputStream objectOutputStream = <span class="hljs-keyword">new ObjectInputStream(fileInputStream);
  JavaSerializable serializable1 = objectOutputStream.readObject();
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">序列化是什么</dt><dd>
<div class="ulist">
<ul>
<li>
<p>序列化的作用就是可以将对象的内容变成二进制, 存入文件中保存</p>
</li>
<li>
<p>反序列化指的是将保存下来的二进制对象数据恢复成对象</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">序列化对对象的要求</dt><dd>
<div class="ulist">
<ul>
<li>
<p>对象必须实现&nbsp;<code>Serializable</code>&nbsp;接口</p>
</li>
<li>
<p>对象中的所有属性必须都要可以被序列化, 如果出现无法被序列化的属性, 则序列化失败</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">限制</dt><dd>
<div class="ulist">
<ul>
<li>
<p>对象被序列化后, 生成的二进制文件中, 包含了很多环境信息, 如对象头, 对象中的属性字段等, 所以内容相对较大</p>
</li>
<li>
<p>因为数据量大, 所以序列化和反序列化的过程比较慢</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">序列化的应用场景</dt><dd>
<div class="ulist">
<ul>
<li>
<p>持久化对象数据</p>
</li>
<li>
<p>网络中不能传输&nbsp;<code>Java</code>&nbsp;对象, 只能将其序列化后传输二进制数据</p>
</li>
</ul>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">Step 2: 在&nbsp;<code>Spark</code>&nbsp;中的序列化和反序列化的应用场景</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Task</code>&nbsp;分发</p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190627194356.png" alt="20190627194356" width="800" /></div>
</div>
<div class="paragraph">
<p><code>Task</code>&nbsp;是一个对象, 想在网络中传输对象就必须要先序列化</p>
</div>
</div>
</div>
</li>
<li>
<p><code>RDD</code>&nbsp;缓存</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val rdd1 = rdd.flatMap(_.split(" "))
   .map((_, 1))
   .reduceByKey(_ + _)

rdd1.cache

rdd1.collect</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>RDD</code>&nbsp;中处理的是对象, 例如说字符串,&nbsp;<code>Person</code>&nbsp;对象等</p>
</li>
<li>
<p>如果缓存&nbsp;<code>RDD</code>&nbsp;中的数据, 就需要缓存这些对象</p>
</li>
<li>
<p>对象是不能存在文件中的, 必须要将对象序列化后, 将二进制数据存入文件</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>广播变量</p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190627195544.png" alt="20190627195544" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>广播变量会分发到不同的机器上, 这个过程中需要使用网络, 对象在网络中传输就必须先被序列化</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p><code>Shuffle</code>&nbsp;过程</p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190627200225.png" alt="20190627200225" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Shuffle</code>&nbsp;过程是由&nbsp;<code>Reducer</code>&nbsp;从&nbsp;<code>Mapper</code>&nbsp;中拉取数据, 这里面涉及到两个需要序列化对象的原因</p>
<div class="ulist">
<ul>
<li>
<p><code>RDD</code>&nbsp;中的数据对象需要在&nbsp;<code>Mapper</code>&nbsp;端落盘缓存, 等待拉取</p>
</li>
<li>
<p><code>Mapper</code>&nbsp;和&nbsp;<code>Reducer</code>&nbsp;要传输数据对象</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p><code>Spark Streaming</code>&nbsp;的&nbsp;<code>Receiver</code></p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190627200730.png" alt="20190627200730" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Spark Streaming</code>&nbsp;中获取数据的组件叫做&nbsp;<code>Receiver</code>, 获取到的数据也是对象形式, 在获取到以后需要落盘暂存, 就需要对数据对象进行序列化</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>算子引用外部对象</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">class Unserializable(i: Int)

rdd.map(i =&gt; new Unserializable(i))
   .collect
   .foreach(println)</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>在&nbsp;<code>Map</code>&nbsp;算子的函数中, 传入了一个&nbsp;<code>Unserializable</code>&nbsp;的对象</p>
</li>
<li>
<p><code>Map</code>&nbsp;算子的函数是会在整个集群中运行的, 那&nbsp;<code>Unserializable</code>&nbsp;对象就需要跟随&nbsp;<code>Map</code>&nbsp;算子的函数被传输到不同的节点上</p>
</li>
<li>
<p>如果&nbsp;<code>Unserializable</code>&nbsp;不能被序列化, 则会报错</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">Step 3:&nbsp;<code>RDD</code>&nbsp;的序列化</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190627202022.png" alt="20190627202022" width="800" /></div>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>RDD</code>&nbsp;的序列化</dt><dd>
<div class="paragraph">
<p>RDD 的序列化只能使用 Java 序列化器, 或者 Kryo 序列化器</p>
</div>
</dd><dt class="hdlist1">为什么?</dt><dd>
<div class="ulist">
<ul>
<li>
<p>RDD 中存放的是数据对象, 要保留所有的数据就必须要对对象的元信息进行保存, 例如对象头之类的</p>
</li>
<li>
<p>保存一整个对象, 内存占用和效率会比较低一些</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1"><code>Kryo</code>&nbsp;是什么</dt><dd>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Kryo</code>&nbsp;是&nbsp;<code>Spark</code>&nbsp;引入的一个外部的序列化工具, 可以增快&nbsp;<code>RDD</code>&nbsp;的运行速度</p>
</li>
<li>
<p>因为&nbsp;<code>Kryo</code>&nbsp;序列化后的对象更小, 序列化和反序列化的速度非常快</p>
</li>
<li>
<p>在&nbsp;<code>RDD</code>&nbsp;中使用&nbsp;<code>Kryo</code>&nbsp;的过程如下</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val conf = new SparkConf()
  .setMaster("local[2]")
  .setAppName("KyroTest")

conf.set("spark.serializer", "org.apache.spark.serializer.KryoSerializer")
conf.registerKryoClasses(Array(classOf[Person]))

val sc = new SparkContext(conf)

rdd.map(arr =&gt; Person(arr(0), arr(1), arr(2)))</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">Step 4:&nbsp;<code>DataFrame</code>&nbsp;和&nbsp;<code>Dataset</code>&nbsp;中的序列化</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">历史的问题</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p><code>RDD</code>&nbsp;中无法感知数据的组成, 无法感知数据结构, 只能以对象的形式处理数据</p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>DataFrame</code>&nbsp;和&nbsp;<code>Dataset</code>&nbsp;的特点</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>DataFrame</code>&nbsp;和&nbsp;<code>Dataset</code>&nbsp;是为结构化数据优化的</p>
</li>
<li>
<p>在&nbsp;<code>DataFrame</code>&nbsp;和&nbsp;<code>Dataset</code>&nbsp;中, 数据和数据的&nbsp;<code>Schema</code>&nbsp;是分开存储的</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">spark.read
     .csv("...")
     .where($"name" =!= "")
     .groupBy($"name")
     .map(row: Row =&gt; row)
     .show()</code></pre>
</div>
</div>
</li>
<li>
<p><code>DataFrame</code>&nbsp;中没有数据对象这个概念, 所有的数据都以行的形式存在于&nbsp;<code>Row</code>&nbsp;对象中,&nbsp;<code>Row</code>&nbsp;中记录了每行数据的结构, 包括列名, 类型等</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190627214134.png" alt="20190627214134" width="800" /></div>
</div>
</li>
<li>
<p><code>Dataset</code>&nbsp;中上层可以提供有类型的&nbsp;<code>API</code>, 用以操作数据, 但是在内部, 无论是什么类型的数据对象&nbsp;<code>Dataset</code>&nbsp;都使用一个叫做&nbsp;<code>InternalRow</code>&nbsp;的类型的对象存储数据</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val dataset: Dataset[Person] = spark.read.csv(...).as[Person]</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">优化点 1: 元信息独立</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>RDD</code>&nbsp;不保存数据的元信息, 所以只能使用&nbsp;<code>Java Serializer</code>&nbsp;或者&nbsp;<code>Kyro Serializer</code>&nbsp;保存&nbsp;<strong>整个对象</strong></p>
</li>
<li>
<p><code>DataFrame</code>&nbsp;和&nbsp;<code>Dataset</code>&nbsp;中保存了数据的元信息, 所以可以把元信息独立出来分开保存</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190627233424.png" alt="20190627233424" width="800" /></div>
</div>
</li>
<li>
<p>一个&nbsp;<code>DataFrame</code>&nbsp;或者一个&nbsp;<code>Dataset</code>&nbsp;中, 元信息只需要保存一份, 序列化的时候, 元信息不需要参与</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190627233851.png" alt="20190627233851" width="800" /></div>
</div>
</li>
<li>
<p>在反序列化 (&nbsp;<code>InternalRow &rarr; Object</code>&nbsp;) 时加入&nbsp;<code>Schema</code>&nbsp;信息即可</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190627234337.png" alt="20190627234337" width="800" /></div>
</div>
</li>
</ol></div>
<div class="paragraph">
<p>元信息不再参与序列化, 意味着数据存储量的减少, 和效率的增加</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">优化点 2: 使用堆外内存</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>DataFrame</code>&nbsp;和&nbsp;<code>Dataset</code>&nbsp;不再序列化元信息, 所以内存使用大大减少. 同时新的序列化方式还将数据存入堆外内存中, 从而避免&nbsp;<code>GC</code>&nbsp;的开销.</p>
</li>
<li>
<p>堆外内存又叫做&nbsp;<code>Unsafe</code>, 之所以叫不安全的, 因为不能使用&nbsp;<code>Java</code>&nbsp;的垃圾回收机制, 需要自己负责对象的创建和回收, 性能很好, 但是不建议普通开发者使用, 毕竟不安全</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>当需要将对象缓存下来的时候, 或者在网络中传输的时候, 要把对象转成二进制, 在使用的时候再将二进制转为对象, 这个过程叫做序列化和反序列化</p>
</li>
<li>
<p>在&nbsp;<code>Spark</code>&nbsp;中有很多场景需要存储对象, 或者在网络中传输对象</p>
<div class="olist loweralpha"><ol class="loweralpha" type="a">
<li>
<p><code>Task</code>&nbsp;分发的时候, 需要将任务序列化, 分发到不同的&nbsp;<code>Executor</code>&nbsp;中执行</p>
</li>
<li>
<p>缓存&nbsp;<code>RDD</code>&nbsp;的时候, 需要保存&nbsp;<code>RDD</code>&nbsp;中的数据</p>
</li>
<li>
<p>广播变量的时候, 需要将变量序列化, 在集群中广播</p>
</li>
<li>
<p><code>RDD</code>&nbsp;的&nbsp;<code>Shuffle</code>&nbsp;过程中&nbsp;<code>Map</code>&nbsp;和&nbsp;<code>Reducer</code>&nbsp;之间需要交换数据</p>
</li>
<li>
<p>算子中如果引入了外部的变量, 这个外部的变量也需要被序列化</p>
</li>
</ol></div>
</li>
<li>
<p><code>RDD</code>&nbsp;因为不保留数据的元信息, 所以必须要序列化整个对象, 常见的方式是&nbsp;<code>Java</code>&nbsp;的序列化器, 和&nbsp;<code>Kyro</code>&nbsp;序列化器</p>
</li>
<li>
<p><code>Dataset</code>&nbsp;和&nbsp;<code>DataFrame</code>&nbsp;中保留数据的元信息, 所以可以不再使用&nbsp;<code>Java</code>&nbsp;的序列化器和&nbsp;<code>Kyro</code>&nbsp;序列化器, 使用&nbsp;<code>Spark</code>&nbsp;特有的序列化协议, 生成&nbsp;<code>UnsafeInternalRow</code>&nbsp;用以保存数据, 这样不仅能减少数据量, 也能减少序列化和反序列化的开销, 其速度大概能达到&nbsp;<code>RDD</code>&nbsp;的序列化的&nbsp;<code>20</code>&nbsp;倍左右</p>
</li>
</ol></div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_1_3_spark_streaming_和_structured_streaming">1.3. Spark Streaming 和 Structured Streaming</h3>
<div class="exampleblock">
<div class="title">目标和过程</div>
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>理解&nbsp;<code>Spark Streaming</code>&nbsp;和&nbsp;<code>Structured Streaming</code>&nbsp;之间的区别, 是非常必要的, 从这点上可以理解&nbsp;<code>Structured Streaming</code>&nbsp;的过去和产生契机</p>
</div>
</dd><dt class="hdlist1">过程</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Spark Streaming</code>&nbsp;时代</p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;时代</p>
</li>
<li>
<p><code>Spark Streaming</code>&nbsp;和&nbsp;<code>Structured Streaming</code></p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>Spark Streaming</code>&nbsp;时代</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190628010204.png" alt="20190628010204" width="450" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Spark Streaming</code>&nbsp;其实就是&nbsp;<code>RDD</code>&nbsp;的&nbsp;<code>API</code>&nbsp;的流式工具, 其本质还是&nbsp;<code>RDD</code>, 存储和执行过程依然类似&nbsp;<code>RDD</code></p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Structured Streaming</code>&nbsp;时代</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190628010542.png" alt="20190628010542" width="450" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Structured Streaming</code>&nbsp;其实就是&nbsp;<code>Dataset</code>&nbsp;的&nbsp;<code>API</code>&nbsp;的流式工具,&nbsp;<code>API</code>&nbsp;和&nbsp;<code>Dataset</code>&nbsp;保持高度一致</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Spark Streaming</code>&nbsp;和&nbsp;<code>Structured Streaming</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Structured Streaming</code>&nbsp;相比于&nbsp;<code>Spark Streaming</code>&nbsp;的进步就类似于&nbsp;<code>Dataset</code>&nbsp;相比于&nbsp;<code>RDD</code>&nbsp;的进步</p>
</li>
<li>
<p>另外还有一点,&nbsp;<code>Structured Streaming</code>&nbsp;已经支持了连续流模型, 也就是类似于&nbsp;<code>Flink</code>&nbsp;那样的实时流, 而不是小批量, 但在使用的时候仍然有限制, 大部分情况还是应该采用小批量模式</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>在&nbsp;<code>2.2.0</code>&nbsp;以后&nbsp;<code>Structured Streaming</code>&nbsp;被标注为稳定版本, 意味着以后的&nbsp;<code>Spark</code>&nbsp;流式开发不应该在采用&nbsp;<code>Spark Streaming</code>&nbsp;了</p>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_2_structured_streaming_入门案例">2. Structured Streaming 入门案例</h2>
<div class="sectionbody">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>了解&nbsp;<code>Structured Streaming</code>&nbsp;的编程模型, 为理解&nbsp;<code>Structured Streaming</code>&nbsp;时候是什么, 以及核心体系原理打下基础</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>需求梳理</p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;代码实现</p>
</li>
<li>
<p>运行</p>
</li>
<li>
<p>验证结果</p>
</li>
</ol></div>
</dd></dl></div>
<div class="sect2">
<h3 id="_2_1_需求梳理">2.1. 需求梳理</h3>
<div class="exampleblock">
<div class="title">目标和过程</div>
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>理解接下来要做的案例, 有的放矢</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>需求</p>
</li>
<li>
<p>整体结构</p>
</li>
<li>
<p>开发方式</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">需求</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190628144128.png" alt="20190628144128" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>编写一个流式计算的应用, 不断的接收外部系统的消息</p>
</li>
<li>
<p>对消息中的单词进行词频统计</p>
</li>
<li>
<p>统计全局的结果</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">整体结构</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190628131804.png" alt="20190628131804" width="800" /></div>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Socket Server</code>&nbsp;等待&nbsp;<code>Structured Streaming</code>&nbsp;程序连接</p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;程序启动, 连接&nbsp;<code>Socket Server</code>, 等待&nbsp;<code>Socket Server</code>&nbsp;发送数据</p>
</li>
<li>
<p><code>Socket Server</code>&nbsp;发送数据,&nbsp;<code>Structured Streaming</code>&nbsp;程序接收数据</p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;程序接收到数据后处理数据</p>
</li>
<li>
<p>数据处理后, 生成对应的结果集, 在控制台打印</p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">开发方式和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>Socket server</code>&nbsp;使用&nbsp;<code>Netcat nc</code>&nbsp;来实现</p>
</div>
<div class="paragraph">
<p><code>Structured Streaming</code>&nbsp;程序使用&nbsp;<code>IDEA</code>&nbsp;实现, 在&nbsp;<code>IDEA</code>&nbsp;中本地运行</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>编写代码</p>
</li>
<li>
<p>启动&nbsp;<code>nc</code>&nbsp;发送&nbsp;<code>Socket</code>&nbsp;消息</p>
</li>
<li>
<p>运行代码接收&nbsp;<code>Socket</code>&nbsp;消息统计词频</p>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="ulist">
<ul>
<li>
<p>简单来说, 就是要进行流式的词频统计, 使用&nbsp;<code>Structured Streaming</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_2_2_代码实现">2.2. 代码实现</h3>
<div class="exampleblock">
<div class="title">目标和过程</div>
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>实现&nbsp;<code>Structured Streaming</code>&nbsp;部分的代码编写</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建文件</p>
</li>
<li>
<p>创建&nbsp;<code>SparkSession</code></p>
</li>
<li>
<p>读取&nbsp;<code>Socket</code>&nbsp;数据生成&nbsp;<code>DataFrame</code></p>
</li>
<li>
<p>将&nbsp;<code>DataFrame</code>&nbsp;转为&nbsp;<code>Dataset</code>, 使用有类型的&nbsp;<code>API</code>&nbsp;处理词频统计</p>
</li>
<li>
<p>生成结果集, 并写入控制台</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">object SocketProcessor {

  def main(args: Array[String]): Unit = {

    // 1. 创建 SparkSession
    val spark = SparkSession.builder()
      .master("local[6]")
      .appName("socket_processor")
      .getOrCreate()

    spark.sparkContext.setLogLevel("ERROR")   <span class="conum" data-value="1">

    import spark.implicits._

    // 2. 读取外部数据源, 并转为 Dataset[String]
    val source = spark.readStream
      .format("socket")
      .option("host", "127.0.0.1")
      .option("port", 9999)
      .load()
      .as[String]                             <span class="conum" data-value="2">

    // 3. 统计词频
    val words = source.flatMap(_.split(" "))
      .map((_, 1))
      .groupByKey(_._1)
      .count()

    // 4. 输出结果
    words.writeStream
      .outputMode(OutputMode.Complete())      <span class="conum" data-value="3">
      .format("console")                      <span class="conum" data-value="4">
      .start()                                <span class="conum" data-value="5">
      .awaitTermination()                     <span class="conum" data-value="6">
  }
}</span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>调整&nbsp;<code>Log</code>&nbsp;级别, 避免过多的&nbsp;<code>Log</code>&nbsp;影响视线</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>默认&nbsp;<code>readStream</code>&nbsp;会返回&nbsp;<code>DataFrame</code>, 但是词频统计更适合使用&nbsp;<code>Dataset</code>&nbsp;的有类型&nbsp;<code>API</code></td>
</tr>
<tr>
<td>&nbsp;</td>
<td>统计全局结果, 而不是一个批次</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>将结果输出到控制台</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>开始运行流式应用</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>阻塞主线程, 在子线程中不断获取数据</td>
</tr>
</tbody>
</table>
</div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Structured Streaming</code>&nbsp;中的编程步骤依然是先读, 后处理, 最后落地</p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;中的编程模型依然是&nbsp;<code>DataFrame</code>&nbsp;和&nbsp;<code>Dataset</code></p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;中依然是有外部数据源读写框架的, 叫做&nbsp;<code>readStream</code>&nbsp;和&nbsp;<code>writeStream</code></p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;和&nbsp;<code>SparkSQL</code>&nbsp;几乎没有区别, 唯一的区别是,&nbsp;<code>readStream</code>&nbsp;读出来的是流,&nbsp;<code>writeStream</code>是将流输出, 而&nbsp;<code>SparkSQL</code>&nbsp;中的批处理使用&nbsp;<code>read</code>&nbsp;和&nbsp;<code>write</code></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_2_3_运行和结果验证">2.3. 运行和结果验证</h3>
<div class="exampleblock">
<div class="title">目标和过程</div>
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>代码已经编写完毕, 需要运行, 并查看结果集, 因为从结果集的样式中可以看到&nbsp;<code>Structured Streaming</code>&nbsp;的一些原理</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>开启&nbsp;<code>Socket server</code></p>
</li>
<li>
<p>运行程序</p>
</li>
<li>
<p>查看数据集</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">开启&nbsp;<code>Socket server</code>&nbsp;和运行程序</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>在虚拟机&nbsp;<code>node01</code>&nbsp;中运行&nbsp;<code>nc -lk 9999</code></p>
</li>
<li>
<p>在 IDEA 中运行程序</p>
</li>
<li>
<p>在&nbsp;<code>node01</code>&nbsp;中输入以下内容</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">hello world
hello spark
hello hadoop
hello spark
hello spark</code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">查看结果集</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">-------------------------------------------
Batch: 4
-------------------------------------------
+------+--------+
| value|count(1)|
+------+--------+
| hello|       5|
| spark|       3|
| world|       1|
|hadoop|       1|
+------+--------+</code></pre>
</div>
</div>
<div class="paragraph">
<p>从结果集中可以观察到以下内容</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Structured Streaming</code>&nbsp;依然是小批量的流处理</p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;的输出是类似&nbsp;<code>DataFrame</code>&nbsp;的, 也具有&nbsp;<code>Schema</code>, 所以也是针对结构化数据进行优化的</p>
</li>
<li>
<p>从输出的时间特点上来看, 是一个批次先开始, 然后收集数据, 再进行展示, 这一点和&nbsp;<code>Spark Streaming</code>&nbsp;不太一样</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>运行的时候需要先开启&nbsp;<code>Socket server</code></p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;的 API 和运行也是针对结构化数据进行优化过的</p>
</li>
</ol></div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_3_stuctured_streaming_的体系和结构">3. Stuctured Streaming 的体系和结构</h2>
<div class="sectionbody">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>了解&nbsp;<code>Structured Streaming</code>&nbsp;的体系结构和核心原理, 有两点好处, 一是需要了解原理才好进行性能调优, 二是了解原理后, 才能理解代码执行流程, 从而更好的记忆, 也做到知其然更知其所以然</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>WordCount</code>&nbsp;的执行原理</p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;的体系结构</p>
</li>
</ol></div>
</dd></dl></div>
<div class="sect2">
<h3 id="_3_1_无限扩展的表格">3.1. 无限扩展的表格</h3>
<div class="exampleblock">
<div class="title">目标和过程</div>
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p><code>Structured Streaming</code>&nbsp;是一个复杂的体系, 由很多组件组成, 这些组件之间也会进行交互, 如果无法站在整体视角去观察这些组件之间的关系, 也无法理解&nbsp;<code>Structured Streaming</code>&nbsp;的全局</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>了解&nbsp;<code>Dataset</code>&nbsp;这个计算模型和流式计算的关系</p>
</li>
<li>
<p>如何使用&nbsp;<code>Dataset</code>&nbsp;处理流式数据?</p>
</li>
<li>
<p><code>WordCount</code>&nbsp;案例的执行过程和原理</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>Dataset</code>&nbsp;和流式计算</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>可以理解为&nbsp;<code>Spark</code>&nbsp;中的&nbsp;<code>Dataset</code>&nbsp;有两种, 一种是处理静态批量数据的&nbsp;<code>Dataset</code>, 一种是处理动态实时流的&nbsp;<code>Dataset</code>, 这两种&nbsp;<code>Dataset</code>&nbsp;之间的区别如下</p>
</div>
<div class="ulist">
<ul>
<li>
<p>流式的&nbsp;<code>Dataset</code>&nbsp;使用&nbsp;<code>readStream</code>&nbsp;读取外部数据源创建, 使用&nbsp;<code>writeStream</code>&nbsp;写入外部存储</p>
</li>
<li>
<p>批式的&nbsp;<code>Dataset</code>&nbsp;使用&nbsp;<code>read</code>&nbsp;读取外部数据源创建, 使用&nbsp;<code>write</code>&nbsp;写入外部存储</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">如何使用&nbsp;<code>Dataset</code>&nbsp;这个编程模型表示流式计算?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock text-center">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190628191649.png" alt="20190628191649" width="600" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>可以把流式的数据想象成一个不断增长, 无限无界的表</p>
</li>
<li>
<p>无论是否有界, 全都使用&nbsp;<code>Dataset</code>&nbsp;这一套&nbsp;<code>API</code></p>
</li>
<li>
<p>通过这样的做法, 就能完全保证流和批的处理使用完全相同的代码, 减少这两种处理方式的差异</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>WordCount</code>&nbsp;的原理</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock text-center">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190628232818.png" alt="20190628232818" width="700" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>整个计算过程大致上分为如下三个部分</p>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Source</code>, 读取数据源</p>
</li>
<li>
<p><code>Query</code>, 在流式数据上的查询</p>
</li>
<li>
<p><code>Result</code>, 结果集生成</p>
</li>
</ol></div>
</li>
<li>
<p>整个的过程如下</p>
<div class="olist arabic"><ol class="arabic">
<li>
<p>随着时间段的流动, 对外部数据进行批次的划分</p>
</li>
<li>
<p>在逻辑上, 将缓存所有的数据, 生成一张无限扩展的表, 在这张表上进行查询</p>
</li>
<li>
<p>根据要生成的结果类型, 来选择是否生成基于整个数据集的结果</p>
</li>
</ol></div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="imageblock text-center">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190628235321.png" alt="20190628235321" width="600" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Dataset</code>&nbsp;不仅可以表达流式数据的处理, 也可以表达批量数据的处理</p>
</li>
<li>
<p><code>Dataset</code>&nbsp;之所以可以表达流式数据的处理, 因为&nbsp;<code>Dataset</code>&nbsp;可以模拟一张无限扩展的表, 外部的数据会不断的流入到其中</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_3_2_体系结构">3.2. 体系结构</h3>
<div class="exampleblock">
<div class="title">目标和过程</div>
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p><code>Structured Streaming</code>&nbsp;是一个复杂的体系, 由很多组件组成, 这些组件之间也会进行交互, 如果无法站在整体视角去观察这些组件之间的关系, 也无法理解&nbsp;<code>Structured Streaming</code>&nbsp;的核心原理</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>体系结构</p>
</li>
<li>
<p><code>StreamExecution</code>&nbsp;的执行顺序</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">体系结构</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>在&nbsp;<code>Structured Streaming</code>&nbsp;中负责整体流程和执行的驱动引擎叫做&nbsp;<code>StreamExecution</code></p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190629111018.png" alt="20190629111018" width="700" /></div>
</div>
<div class="paragraph">
<p><code>StreamExecution</code>&nbsp;在流上进行基于&nbsp;<code>Dataset</code>&nbsp;的查询, 也就是说,&nbsp;<code>Dataset</code>&nbsp;之所以能够在流上进行查询, 是因为&nbsp;<code>StreamExecution</code>&nbsp;的调度和管理</p>
</div>
</div>
</div>
</li>
<li>
<p><code>StreamExecution</code>&nbsp;如何工作?</p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190629100439.png" alt="20190629100439" width="700" /></div>
</div>
<div class="paragraph">
<p><code>StreamExecution</code>&nbsp;分为三个重要的部分</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Source</code>, 从外部数据源读取数据</p>
</li>
<li>
<p><code>LogicalPlan</code>, 逻辑计划, 在流上的查询计划</p>
</li>
<li>
<p><code>Sink</code>, 对接外部系统, 写入结果</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>StreamExecution</code>&nbsp;的执行顺序</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock text-center">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190629113627.png" alt="20190629113627" width="800" /></div>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>根据进度标记, 从&nbsp;<code>Source</code>&nbsp;获取到一个由&nbsp;<code>DataFrame</code>&nbsp;表示的批次, 这个&nbsp;<code>DataFrame</code>&nbsp;表示数据的源头</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val source = spark.readStream
  .format("socket")
  .option("host", "127.0.0.1")
  .option("port", 9999)
  .load()
  .as[String]</code></pre>
</div>
</div>
<div class="paragraph">
<p>这一点非常类似&nbsp;<code>val df = spark.read.csv()</code>&nbsp;所生成的&nbsp;<code>DataFrame</code>, 同样都是表示源头</p>
</div>
</div>
</div>
</li>
<li>
<p>根据源头&nbsp;<code>DataFrame</code>&nbsp;生成逻辑计划</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val words = source.flatMap(_.split(" "))
  .map((_, 1))
  .groupByKey(_._1)
  .count()</code></pre>
</div>
</div>
<div class="paragraph">
<p>上述代码表示的就是数据的查询, 这一个步骤将这样的查询步骤生成为逻辑执行计划</p>
</div>
</div>
</div>
</li>
<li>
<p>优化逻辑计划最终生成物理计划</p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/67b14d92b21b191914800c384cbed439.png" alt="67b14d92b21b191914800c384cbed439" width="800" /></div>
</div>
<div class="paragraph">
<p>这一步其实就是使用&nbsp;<code>Catalyst</code>&nbsp;对执行计划进行优化, 经历基于规则的优化和基于成本模型的优化</p>
</div>
</div>
</div>
</li>
<li>
<p>执行物理计划将表示执行结果的&nbsp;<code>DataFrame / Dataset</code>&nbsp;交给&nbsp;<code>Sink</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>整个物理执行计划会针对每一个批次的数据进行处理, 处理后每一个批次都会生成一个表示结果的&nbsp;<code>Dataset</code></p>
</div>
<div class="paragraph">
<p><code>Sink</code>&nbsp;可以将每一个批次的结果&nbsp;<code>Dataset</code>&nbsp;落地到外部数据源</p>
</div>
</div>
</div>
</li>
<li>
<p>执行完毕后, 汇报&nbsp;<code>Source</code>&nbsp;这个批次已经处理结束,&nbsp;<code>Source</code>&nbsp;提交并记录最新的进度</p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">增量查询</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>核心问题</p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190628232818.png" alt="20190628232818" width="500" /></div>
</div>
<div class="paragraph">
<p>上图中清晰的展示了最终的结果生成是全局的结果, 而不是一个批次的结果, 但是从&nbsp;<code>StreamExecution</code>&nbsp;中可以看到, 针对流的处理是按照一个批次一个批次来处理的</p>
</div>
<div class="paragraph">
<p>那么, 最终是如何生成全局的结果集呢?</p>
</div>
</div>
</div>
</li>
<li>
<p>状态记录</p>
<div class="openblock">
<div class="content">
<div class="imageblock text-center">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190629115459.png" alt="20190629115459" width="700" /></div>
</div>
<div class="paragraph">
<p>在&nbsp;<code>Structured Streaming</code>&nbsp;中有一个全局范围的高可用&nbsp;<code>StateStore</code>, 这个时候针对增量的查询变为如下步骤</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>从&nbsp;<code>StateStore</code>&nbsp;中取出上次执行完成后的状态</p>
</li>
<li>
<p>把上次执行的结果加入本批次, 再进行计算, 得出全局结果</p>
</li>
<li>
<p>将当前批次的结果放入&nbsp;<code>StateStore</code>&nbsp;中, 留待下次使用</p>
</li>
</ol></div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190629123847.png" alt="20190629123847" width="800" /></div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>StreamExecution</code>&nbsp;是整个&nbsp;<code>Structured Streaming</code>&nbsp;的核心, 负责在流上的查询</p>
</li>
<li>
<p><code>StreamExecution</code>&nbsp;中三个重要的组成部分, 分别是&nbsp;<code>Source</code>&nbsp;负责读取每个批量的数据,&nbsp;<code>Sink</code>&nbsp;负责将结果写入外部数据源,&nbsp;<code>Logical Plan</code>&nbsp;负责针对每个小批量生成执行计划</p>
</li>
<li>
<p><code>StreamExecution</code>&nbsp;中使用&nbsp;<code>StateStore</code>&nbsp;来进行状态的维护</p>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_4_source">4. Source</h2>
<div class="sectionbody">
<div class="dlist"><dl><dt class="hdlist1">目标和过程</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>流式计算一般就是通过数据源读取数据, 经过一系列处理再落地到某个地方, 所以这一小节先了解一下如何读取数据, 可以整合哪些数据源</p>
</div>
</dd><dt class="hdlist1">过程</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>从&nbsp;<code>HDFS</code>&nbsp;中读取数据</p>
</li>
<li>
<p>从&nbsp;<code>Kafka</code>&nbsp;中读取数据</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
<div class="sect2">
<h3 id="_4_1_从_hdfs_中读取数据">4.1. 从 HDFS 中读取数据</h3>
<div class="dlist"><dl><dt class="hdlist1">目标和过程</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>在数据处理的时候, 经常会遇到这样的场景</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190630160310.png" alt="20190630160310" width="800" /></div>
</div>
</li>
<li>
<p>有时候也会遇到这样的场景</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190630160448.png" alt="20190630160448" width="800" /></div>
</div>
</li>
<li>
<p>以上两种场景有两个共同的特点</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>会产生大量小文件在&nbsp;<code>HDFS</code>&nbsp;上</p>
</li>
<li>
<p>数据需要处理</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>通过本章节的学习, 便能够更深刻的理解这种结构, 具有使用&nbsp;<code>Structured Streaming</code>&nbsp;整合&nbsp;<code>HDFS</code>, 从其中读取数据的能力</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>案例结构</p>
</li>
<li>
<p>产生小文件并推送到&nbsp;<code>HDFS</code></p>
</li>
<li>
<p>流式计算统计&nbsp;<code>HDFS</code>&nbsp;上的小文件</p>
</li>
<li>
<p>运行和总结</p>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
<div class="sect3">
<h4 id="_4_1_1_案例结构">4.1.1. 案例结构</h4>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>通过本章节可以了解案例的过程和步骤, 以及案例的核心意图</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>案例结构</p>
</li>
<li>
<p>实现步骤</p>
</li>
<li>
<p>难点和易错点</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">案例流程</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190715111534.png" alt="20190715111534" width="800" /></div>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>编写&nbsp;<code>Python</code>&nbsp;小程序, 在某个目录生成大量小文件</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Python</code>&nbsp;是解释型语言, 其程序可以直接使用命令运行无需编译, 所以适合编写快速使用的程序, 很多时候也使用&nbsp;<code>Python</code>&nbsp;代替&nbsp;<code>Shell</code></p>
</li>
<li>
<p>使用&nbsp;<code>Python</code>&nbsp;程序创建新的文件, 并且固定的生成一段&nbsp;<code>JSON</code>&nbsp;文本写入文件</p>
</li>
<li>
<p>在真实的环境中, 数据也是一样的不断产生并且被放入&nbsp;<code>HDFS</code>&nbsp;中, 但是在真实场景下, 可能是&nbsp;<code>Flume</code>&nbsp;把小文件不断上传到&nbsp;<code>HDFS</code>&nbsp;中, 也可能是&nbsp;<code>Sqoop</code>&nbsp;增量更新不断在某个目录中上传小文件</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>使用&nbsp;<code>Structured Streaming</code>&nbsp;汇总数据</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>HDFS</code>&nbsp;中的数据是不断的产生的, 所以也是流式的数据</p>
</li>
<li>
<p>数据集是&nbsp;<code>JSON</code>&nbsp;格式, 要有解析&nbsp;<code>JSON</code>&nbsp;的能力</p>
</li>
<li>
<p>因为数据是重复的, 要对全局的流数据进行汇总和去重, 其实真实场景下的数据清洗大部分情况下也是要去重的</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>使用控制台展示数据</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>最终的数据结果以表的形式呈现</p>
</li>
<li>
<p>使用控制台展示数据意味着不需要在修改展示数据的代码, 将&nbsp;<code>Sink</code>&nbsp;部分的内容放在下一个大章节去说明</p>
</li>
<li>
<p>真实的工作中, 可能数据是要落地到&nbsp;<code>MySQL</code>,&nbsp;<code>HBase</code>,&nbsp;<code>HDFS</code>&nbsp;这样的存储系统中</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">实现步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>Step 1: 编写&nbsp;<code>Python</code>&nbsp;脚本不断的产生数据</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>使用&nbsp;<code>Python</code>&nbsp;创建字符串保存文件中要保存的数据</p>
</li>
<li>
<p>创建文件并写入文件内容</p>
</li>
<li>
<p>使用&nbsp;<code>Python</code>&nbsp;调用系统&nbsp;<code>HDFS</code>&nbsp;命令上传文件</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>Step 2: 编写&nbsp;<code>Structured Streaming</code>&nbsp;程序处理数据</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建&nbsp;<code>SparkSession</code></p>
</li>
<li>
<p>使用&nbsp;<code>SparkSession</code>&nbsp;的&nbsp;<code>readStream</code>&nbsp;读取数据源</p>
</li>
<li>
<p>使用&nbsp;<code>Dataset</code>&nbsp;操作数据, 只需要去重</p>
</li>
<li>
<p>使用&nbsp;<code>Dataset</code>&nbsp;的&nbsp;<code>writeStream</code>&nbsp;设置&nbsp;<code>Sink</code>&nbsp;将数据展示在控制台中</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>Step 3: 部署程序, 验证结果</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>上传脚本到服务器中, 使用&nbsp;<code>python</code>&nbsp;命令运行脚本</p>
</li>
<li>
<p>开启流计算应用, 读取 HDFS 中对应目录的数据</p>
</li>
<li>
<p>查看运行结果</p>
</li>
</ol></div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">难点和易错点</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>在读取&nbsp;<code>HDFS</code>&nbsp;的文件时,&nbsp;<code>Source</code>&nbsp;不仅对接数据源, 也负责反序列化数据源中传过来的数据</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Source</code>&nbsp;可以从不同的数据源中读取数据, 如&nbsp;<code>Kafka</code>,&nbsp;<code>HDFS</code></p>
</li>
<li>
<p>数据源可能会传过来不同的数据格式, 如&nbsp;<code>JSON</code>,&nbsp;<code>Parquet</code></p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>读取&nbsp;<code>HDFS</code>&nbsp;文件的这个&nbsp;<code>Source</code>&nbsp;叫做&nbsp;<code>FileStreamSource</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>从命名就可以看出来这个&nbsp;<code>Source</code>&nbsp;不仅支持&nbsp;<code>HDFS</code>, 还支持本地文件读取, 亚马逊云, 阿里云 等文件系统的读取, 例如:&nbsp;<code>file://</code>,&nbsp;<code>s3://</code>,&nbsp;<code>oss://</code></p>
</div>
</div>
</div>
</li>
<li>
<p>基于流的&nbsp;<code>Dataset</code>&nbsp;操作和基于静态数据集的&nbsp;<code>Dataset</code>&nbsp;操作是一致的</p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>整个案例运行的逻辑是</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Python</code>&nbsp;程序产生数据到&nbsp;<code>HDFS</code>&nbsp;中</p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;从&nbsp;<code>HDFS</code>&nbsp;中获取数据</p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;处理数据</p>
</li>
<li>
<p>将数据展示在控制台</p>
</li>
</ol></div>
<div class="paragraph">
<p>整个案例的编写步骤</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Python</code>&nbsp;程序</p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;程序</p>
</li>
<li>
<p>运行</p>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect3">
<h4 id="_4_1_2_产生小文件并推送到_hdfs">4.1.2. 产生小文件并推送到 HDFS</h4>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>通过本章节看到&nbsp;<code>Python</code>&nbsp;的大致语法, 并了解 Python 如何编写脚本完成文件的操作, 其实不同的语言使用起来并没有那么难, 完成一些简单的任务还是很简单的</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建&nbsp;<code>Python</code>&nbsp;代码文件</p>
</li>
<li>
<p>编写代码</p>
</li>
<li>
<p>本地测试, 但是因为本地环境搭建比较浪费大家时间, 所以暂时不再本地测试</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">代码编写</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>随便在任一目录中创建文件&nbsp;<code>gen_files.py</code>, 编写以下内容</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-python hljs" data-lang="python"><span class="hljs-keyword">import os

<span class="hljs-keyword">for index <span class="hljs-keyword">in range(<span class="hljs-number">100):
    content = <span class="hljs-string">"""
    {"name":"Michael"}
    {"name":"Andy", "age":30}
    {"name":"Justin", "age":19}
    """

    file_name = <span class="hljs-string">"/export/dataset/text{0}.json".format(index)

    <span class="hljs-keyword">with open(file_name, <span class="hljs-string">"w") <span class="hljs-keyword">as file:  <span class="conum" data-value="1">
        file.write(content)

    os.system(<span class="hljs-string">"/export/servers/hadoop/bin/hdfs dfs -mkdir -p /dataset/dataset/")
    os.system(<span class="hljs-string">"/export/servers/hadoop/bin/hdfs dfs -put {0} /dataset/dataset/".format(file_name))</span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>创建文件, 使用这样的写法是因为&nbsp;<code>with</code>&nbsp;是一种&nbsp;<code>Python</code>&nbsp;的特殊语法, 如果使用&nbsp;<code>with</code>&nbsp;去创建文件的话, 使用结束后会自动关闭流</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Python</code>&nbsp;的语法灵活而干净, 比较易于编写</p>
</li>
<li>
<p>对于其它的语言可以玩乐性质的去使用, 其实并没有很难</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect3">
<h4 id="_4_1_3_流式计算统计_hdfs_上的小文件">4.1.3. 流式计算统计 HDFS 上的小文件</h4>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>通过本章节的学习, 大家可以了解到如何使用&nbsp;<code>Structured Streaming</code>&nbsp;读取&nbsp;<code>HDFS</code>&nbsp;中的文件, 并以&nbsp;<code>JSON</code>&nbsp;的形式解析</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建文件</p>
</li>
<li>
<p>编写代码</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">代码</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val spark = SparkSession.builder()
  .appName("hdfs_source")
  .master("local[6]")
  .getOrCreate()

spark.sparkContext.setLogLevel("WARN")

val userSchema = new StructType()
  .add("name", "string")
  .add("age", "integer")

val source = spark
  .readStream
  .schema(userSchema)
  .json("hdfs://node01:8020/dataset/dataset")

val result = source.distinct()

result.writeStream
  .outputMode(OutputMode.Update())
  .format("console")
  .start()
  .awaitTermination()</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>以流的形式读取某个 HDFS 目录的代码为</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val source = spark
  .readStream         <span class="conum" data-value="1">
  .schema(userSchema) <span class="conum" data-value="2">
  .json("hdfs://node01:8020/dataset/dataset") </span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>指明读取的是一个流式的&nbsp;<code>Dataset</code></td>
</tr>
<tr>
<td>&nbsp;</td>
<td>指定读取到的数据的&nbsp;<code>Schema</code></td>
</tr>
<tr>
<td>&nbsp;</td>
<td>指定目录位置, 以及数据格式</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect3">
<h4 id="_4_1_4_运行和流程总结">4.1.4. 运行和流程总结</h4>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>通过这个小节对案例的部署以后, 不仅大家可以学到一种常见的部署方式, 同时也能对案例的执行流程和流计算有更深入的了解</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>运行&nbsp;<code>Python</code>&nbsp;程序</p>
</li>
<li>
<p>运行&nbsp;<code>Spark</code>&nbsp;程序</p>
</li>
<li>
<p>总结</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">运行 Python 程序</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>上传&nbsp;<code>Python</code>&nbsp;源码文件到服务器中</p>
</li>
<li>
<p>运行&nbsp;<code>Python</code>&nbsp;脚本</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-shell hljs" data-lang="shell"><span class="hljs-meta">#<span class="bash"> 进入 Python 文件被上传的位置
cd ~
<span class="hljs-meta">
#<span class="bash"> 创建放置生成文件的目录
mkdir -p /export/dataset
<span class="hljs-meta">
#<span class="bash"> 运行程序
python gen_files.py</span></span></span></span></span></span></code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">运行 Spark 程序</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>使用&nbsp;<code>Maven</code>&nbsp;打包</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190716000942.png" alt="20190716000942" width="300" /></div>
</div>
</li>
<li>
<p>上传至服务器</p>
</li>
<li>
<p>运行&nbsp;<code>Spark</code>&nbsp;程序</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"># 进入保存 Jar 包的文件夹
cd ~

# 运行流程序
spark-submit --class cn.itcast.structured.HDFSSource ./original-streaming-0.0.1.jar</code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190715111534.png" alt="20190715111534" width="800" /></div>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Python</code>&nbsp;生成文件到&nbsp;<code>HDFS</code>, 这一步在真实环境下, 可能是由&nbsp;<code>Flume</code>&nbsp;和&nbsp;<code>Sqoop</code>&nbsp;收集并上传至&nbsp;<code>HDFS</code></p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;从&nbsp;<code>HDFS</code>&nbsp;中读取数据并处理</p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;讲结果表展示在控制台</p>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
<div class="sect2">
<h3 id="_4_2_从_kafka_中读取数据">4.2. 从 Kafka 中读取数据</h3>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>通过本章节的学习, 便可以理解流式系统和队列间的关系, 同时能够编写代码从&nbsp;<code>Kafka</code>&nbsp;以流的方式读取数据</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Kafka</code>&nbsp;回顾</p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;整合&nbsp;<code>Kafka</code></p>
</li>
<li>
<p>读取&nbsp;<code>JSON</code>&nbsp;格式的内容</p>
</li>
<li>
<p>读取多个&nbsp;<code>Topic</code>&nbsp;的数据</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
<div class="sect3">
<h4 id="_4_2_1_kafka_的场景和结构">4.2.1 Kafka 的场景和结构</h4>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>通过这一个小节的学习, 大家可以理解&nbsp;<code>Kfaka</code>&nbsp;在整个系统中的作用, 日后工作的话, 也必须要先站在更高层去理解系统的组成, 才能完成功能和代码</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Kafka</code>&nbsp;的应用场景</p>
</li>
<li>
<p><code>Kafka</code>&nbsp;的特点</p>
</li>
<li>
<p><code>Topic</code>&nbsp;和&nbsp;<code>Partitions</code></p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">Kafka 是一个 Pub / Sub 系统</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Pub / Sub</code>&nbsp;是&nbsp;<code>Publisher / Subscriber</code>&nbsp;的简写, 中文称作为发布订阅系统</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190717102628.png" alt="20190717102628" width="800" /></div>
</div>
</li>
<li>
<p>发布订阅系统可以有多个&nbsp;<code>Publisher</code>&nbsp;对应一个&nbsp;<code>Subscriber</code>, 例如多个系统都会产生日志, 通过这样的方式, 一个日志处理器可以简单的获取所有系统产生的日志</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190717103721.png" alt="20190717103721" width="800" /></div>
</div>
</li>
<li>
<p>发布订阅系统也可以一个&nbsp;<code>Publisher</code>&nbsp;对应多个&nbsp;<code>Subscriber</code>, 这样就类似于广播了, 例如通过这样的方式可以非常轻易的将一个订单的请求分发给所有感兴趣的系统, 减少耦合性</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190717104041.png" alt="20190717104041" width="800" /></div>
</div>
</li>
<li>
<p>当然, 在大数据系统中, 这样的消息系统往往可以作为整个数据平台的入口, 左边对接业务系统各个模块, 右边对接数据系统各个计算工具</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190717104853.png" alt="20190717104853" width="800" /></div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">Kafka 的特点</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>Kafka</code>&nbsp;有一个非常重要的应用场景就是对接业务系统和数据系统, 作为一个数据管道, 其需要流通的数据量惊人, 所以&nbsp;<code>Kafka</code>如果要满足这种场景的话, 就一定具有以下两个特点</p>
</div>
<div class="ulist">
<ul>
<li>
<p>高吞吐量</p>
</li>
<li>
<p>高可靠性</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">Topic 和 Partitions</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>消息和事件经常是不同类型的, 例如用户注册是一种消息, 订单创建也是一种消息</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190717110142.png" alt="20190717110142" width="800" /></div>
</div>
</li>
<li>
<p><code>Kafka</code>&nbsp;中使用&nbsp;<code>Topic</code>&nbsp;来组织不同类型的消息</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190717110431.png" alt="20190717110431" width="800" /></div>
</div>
</li>
<li>
<p><code>Kafka</code>&nbsp;中的&nbsp;<code>Topic</code>&nbsp;要承受非常大的吞吐量, 所以&nbsp;<code>Topic</code>&nbsp;应该是可以分片的, 应该是分布式的</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190717122114.png" alt="20190717122114" width="400" /></div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Kafka</code>&nbsp;的应用场景</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>一般的系统中, 业务系统会不止一个, 数据系统也会比较复杂</p>
</li>
<li>
<p>为了减少业务系统和数据系统之间的耦合, 要将其分开, 使用一个中间件来流转数据</p>
</li>
<li>
<p>Kafka 因为其吞吐量超高, 所以适用于这种场景</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p><code>Kafka</code>&nbsp;如何保证高吞吐量</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>因为消息会有很多种类,&nbsp;<code>Kafka</code>&nbsp;中可以创建多个队列, 每一个队列就是一个&nbsp;<code>Topic</code>, 可以理解为是一个主题, 存放相关的消息</p>
</li>
<li>
<p>因为&nbsp;<code>Topic</code>&nbsp;直接存放消息, 所以&nbsp;<code>Topic</code>&nbsp;必须要能够承受非常大的通量, 所以&nbsp;<code>Topic</code>&nbsp;是分布式的, 是可以分片的, 使用分布式的并行处理能力来解决高通量的问题</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect3">
<h4 id="_4_2_2_kafka_和_structured_streaming_整合的结构">4.2.2. Kafka 和 Structured Streaming 整合的结构</h4>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>通过本小节可以理解&nbsp;<code>Kafka</code>&nbsp;和&nbsp;<code>Structured Streaming</code>&nbsp;整合的结构原理, 同时还能理解&nbsp;<code>Spark</code>&nbsp;连接&nbsp;<code>Kafka</code>&nbsp;的时候一个非常重要的参数</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Topic</code>&nbsp;的&nbsp;<code>Offset</code></p>
</li>
<li>
<p><code>Kafka</code>&nbsp;和&nbsp;<code>Structured Streaming</code>&nbsp;的整合结构</p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;读取&nbsp;<code>Kafka</code>&nbsp;消息的三种方式</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">Topic 的 Offset</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Topic</code>&nbsp;是分区的, 每一个&nbsp;<code>Topic</code>&nbsp;的分区分布在不同的&nbsp;<code>Broker</code>&nbsp;上</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190717161413.png" alt="20190717161413" width="800" /></div>
</div>
</li>
<li>
<p>每个分区都对应一系列的&nbsp;<code>Log</code>&nbsp;文件, 消息存在于&nbsp;<code>Log</code>&nbsp;中, 消息的&nbsp;<code>ID</code>&nbsp;就是这条消息在本分区的&nbsp;<code>Offset</code>&nbsp;偏移量</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190717162840.png" alt="20190717162840" width="400" /></div>
</div>
</li>
</ul>
</div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">
<div class="paragraph">
<p><code>Offset</code>&nbsp;又称作为偏移量, 其实就是一个东西距离另外一个东西的距离</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190717165649.png" alt="20190717165649" width="800" /></div>
</div>
<div class="paragraph">
<p><code>Kafka</code>&nbsp;中使用&nbsp;<code>Offset</code>&nbsp;命名消息, 而不是指定&nbsp;<code>ID</code>&nbsp;的原因是想表示永远自增,&nbsp;<code>ID</code>&nbsp;是可以指定的, 但是&nbsp;<code>Offset</code>&nbsp;只能是一个距离值, 它只会越来越大, 所以, 叫做&nbsp;<code>Offset</code>&nbsp;而不叫&nbsp;<code>ID</code>&nbsp;也是这个考虑, 消息只能追加到&nbsp;<code>Log</code>&nbsp;末尾, 只能增长不能减少</p>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</dd><dt class="hdlist1">Kafka 和 Structured Streaming 整合的结构</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190718022525.png" alt="20190718022525" width="800" /></div>
</div>
<div class="dlist"><dl><dt class="hdlist1">分析</dt><dd>
<div class="ulist">
<ul>
<li>
<p><code>Structured Streaming</code>&nbsp;中使用&nbsp;<code>Source</code>&nbsp;对接外部系统, 对接&nbsp;<code>Kafka</code>&nbsp;的&nbsp;<code>Source</code>&nbsp;叫做&nbsp;<code>KafkaSource</code></p>
</li>
<li>
<p><code>KafkaSource</code>&nbsp;中会使用&nbsp;<code>KafkaSourceRDD</code>&nbsp;来映射外部&nbsp;<code>Kafka</code>&nbsp;的&nbsp;<code>Topic</code>, 两者的&nbsp;<code>Partition</code>&nbsp;一一对应</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">结论</dt><dd>
<div class="paragraph">
<p><code>Structured Streaming</code>&nbsp;会并行的从&nbsp;<code>Kafka</code>&nbsp;中获取数据</p>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">Structured Streaming 读取 Kafka 消息的三种方式</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190718023534.png" alt="20190718023534" width="400" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Earliest</code>&nbsp;从每个&nbsp;<code>Kafka</code>&nbsp;分区最开始处开始获取</p>
</li>
<li>
<p><code>Assign</code>&nbsp;手动指定每个&nbsp;<code>Kafka</code>&nbsp;分区中的&nbsp;<code>Offset</code></p>
</li>
<li>
<p><code>Latest</code>&nbsp;不再处理之前的消息, 只获取流计算启动后新产生的数据</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Kafka</code>&nbsp;中的消息存放在某个&nbsp;<code>Topic</code>&nbsp;的某个&nbsp;<code>Partition</code>&nbsp;中, 消息是不可变的, 只会在消息过期的时候从最早的消息开始删除, 消息的&nbsp;<code>ID</code>&nbsp;也叫做&nbsp;<code>Offset</code>, 并且只能正增长</p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;整合&nbsp;<code>Kafka</code>&nbsp;的时候, 会并行的通过&nbsp;<code>Offset</code>&nbsp;从所有&nbsp;<code>Topic</code>&nbsp;的&nbsp;<code>Partition</code>&nbsp;中获取数据</p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;在从&nbsp;<code>Kafka</code>&nbsp;读取数据的时候, 可以选择从最早的地方开始读取, 也可以选择从任意位置读取, 也可以选择只读取最新的</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect3">
<h4 id="_4_2_3_需求介绍">4.2.3. 需求介绍</h4>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>通过本章节的学习, 可以掌握一个常见的需求, 并且了解后面案例的编写步骤</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>需求</p>
</li>
<li>
<p>数据</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">需求</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>模拟一个智能物联网系统的数据统计</p>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190718151808.png" alt="20190718151808" width="500" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>有一个智能家居品牌叫做&nbsp;<code>Nest</code>, 他们主要有两款产品, 一个是恒温器, 一个是摄像头</p>
</li>
<li>
<p>恒温器的主要作用是通过感应器识别家里什么时候有人, 摄像头主要作用是通过学习算法来识别出现在摄像头中的人是否是家里人, 如果不是则报警</p>
</li>
<li>
<p>所以这两个设备都需要统计一个指标, 就是家里什么时候有人, 此需求就是针对这个设备的一部分数据, 来统计家里什么时候有人</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>使用生产者在 Kafka 的 Topic : streaming-test 中输入 JSON 数据</p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">{
  <span class="hljs-attr">"devices": {
    <span class="hljs-attr">"cameras": {
      <span class="hljs-attr">"device_id": <span class="hljs-string">"awJo6rH",
      <span class="hljs-attr">"last_event": {
        <span class="hljs-attr">"has_sound": <span class="hljs-literal">true,
        <span class="hljs-attr">"has_motion": <span class="hljs-literal">true,
        <span class="hljs-attr">"has_person": <span class="hljs-literal">true,
        <span class="hljs-attr">"start_time": <span class="hljs-string">"2016-12-29T00:00:00.000Z",
        <span class="hljs-attr">"end_time": <span class="hljs-string">"2016-12-29T18:42:00.000Z"
      }
    }
  }
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>使用 Structured Streaming 来过滤出来家里有人的数据</p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>把数据转换为&nbsp;<code>时间 &rarr; 是否有人</code>&nbsp;这样类似的形式</p>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">数据转换</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>追踪 JSON 数据的格式</p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>可以在一个在线的工具&nbsp;<code><a class="bare" href="https://jsonformatter.org/">https://jsonformatter.org/</a></code>&nbsp;中格式化&nbsp;<code>JSON</code>, 会发现&nbsp;<code>JSON</code>&nbsp;格式如下</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190720000717.png" alt="20190720000717" width="300" /></div>
</div>
</div>
</div>
</li>
<li>
<p>反序列化</p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p><code>JSON</code>&nbsp;数据本质上就是字符串, 只不过这个字符串是有结构的, 虽然有结构, 但是很难直接从字符串中取出某个值</p>
</div>
<div class="paragraph">
<p>而反序列化, 就是指把&nbsp;<code>JSON</code>&nbsp;数据转为对象, 或者转为&nbsp;<code>DataFrame</code>, 可以直接使用某一个列或者某一个字段获取数据, 更加方便</p>
</div>
<div class="paragraph">
<p>而想要做到这件事, 必须要先根据数据格式, 编写&nbsp;<code>Schema</code>&nbsp;对象, 从而通过一些方式转为&nbsp;<code>DataFrame</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val eventType = new StructType()
  .add("has_sound", BooleanType, nullable = true)
  .add("has_motion", BooleanType, nullable = true)
  .add("has_person", BooleanType, nullable = true)
  .add("start_time", DateType, nullable = true)
  .add("end_time", DateType, nullable = true)

val camerasType = new StructType()
  .add("device_id", StringType, nullable = true)
  .add("last_event", eventType, nullable = true)

val devicesType = new StructType()
  .add("cameras", camerasType, nullable = true)

val schema = new StructType()
  .add("devices", devicesType, nullable = true)</code></pre>
</div>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>业务简单来说, 就是收集智能家居设备的数据, 通过流计算的方式计算其特征规律</p>
</li>
<li>
<p><code>Kafka</code>&nbsp;常见的业务场景就是对接业务系统和数据系统</p>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>业务系统经常会使用 JSON 作为数据传输格式</p>
</li>
<li>
<p>所以使用&nbsp;<code>Structured Streaming</code>&nbsp;来对接&nbsp;<code>Kafka</code>&nbsp;并反序列化&nbsp;<code>Kafka</code>&nbsp;中的&nbsp;<code>JSON</code>&nbsp;格式的消息, 是一个非常重要的技能</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>无论使用什么方式, 如果想反序列化&nbsp;<code>JSON</code>&nbsp;数据, 就必须要先追踪&nbsp;<code>JSON</code>&nbsp;数据的结构</p>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect3">
<h4 id="_4_2_4_使用_spark_流计算连接_kafka_数据源">4.2.4. 使用 Spark 流计算连接 Kafka 数据源</h4>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>通过本章节的数据, 能够掌握如何使用&nbsp;<code>Structured Streaming</code>&nbsp;对接&nbsp;<code>Kafka</code>, 从其中获取数据</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建&nbsp;<code>Topic</code>&nbsp;并输入数据到&nbsp;<code>Topic</code></p>
</li>
<li>
<p><code>Spark</code>&nbsp;整合&nbsp;<code>kafka</code></p>
</li>
<li>
<p>读取到的&nbsp;<code>DataFrame</code>&nbsp;的数据结构</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">创建 Topic 并输入数据到 Topic</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>使用命令创建&nbsp;<code>Topic</code></p>
<div class="listingblock">
<div class="content">
<p class="highlightjs highlight"><code class="language-shell hljs" data-lang="shell">bin/kafka-topics.sh --create --topic shoppingStreaming</code>&nbsp;<code class="language-shell hljs" data-lang="shell">--replication-factor 1 --partitions 3 --zookeeper node01:2181,</code><code class="language-shell hljs" data-lang="shell">node02:2181,</code><code class="language-shell hljs" data-lang="shell">node03:2181/kafka</code></p>
</div>
</div>
</li>
<li>
<p>开启&nbsp;<code>Producer</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-shell hljs" data-lang="shell">bin/kafka-console-producer.sh --broker-list node01:9092,node02:9092,node03:9092 --topic shoppingStreaming<br />测试：开启consumer端： bin/kafka-console-consumer.sh --from-beginning --topic </code><code class="language-shell hljs" data-lang="shell">shoppingStreaming </code><code class="language-shell hljs" data-lang="shell">--zookeeper node01:2181,node02:2181,node03:2181/kafka</code></pre>
</div>
</div>
</li>
<li>
<p>把&nbsp;<code>JSON</code>&nbsp;转为单行输入</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-shell hljs" data-lang="shell">{"devices":{"cameras":{"device_id":"awJo6rH","last_event":{"has_sound":true,"has_motion":true,"has_person":true,"start_time":"2016-12-29T00:00:00.000Z","end_time":"2016-12-29T18:42:00.000Z"}}}}</code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">使用 Spark 读取 Kafka 的 Topic</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>编写&nbsp;<code>Spark</code>&nbsp;代码读取&nbsp;<code>Kafka Topic</code></p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val source = spark.readStream
  .format("kafka")
  .option("kafka.bootstrap.servers", "node01:9092,node01:9092,node03:9092")
  .option("subscribe", "streaming_test")
  .option("startingOffsets", "earliest")
  .load()</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>三个参数</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>kafka.bootstrap.servers</code>&nbsp;: 指定&nbsp;<code>Kafka</code>&nbsp;的&nbsp;<code>Server</code>&nbsp;地址</p>
</li>
<li>
<p><code>subscribe</code>&nbsp;: 要监听的&nbsp;<code>Topic</code>, 可以传入多个, 传入多个 Topic 则监听多个 Topic, 也可以使用&nbsp;<code>topic-*</code>&nbsp;这样的通配符写法</p>
</li>
<li>
<p><code>startingOffsets</code>&nbsp;: 从什么位置开始获取数据, 可选值有&nbsp;<code>earliest</code>,&nbsp;<code>assign</code>,&nbsp;<code>latest</code></p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p><code>format</code>&nbsp;设置为&nbsp;<code>Kafka</code>&nbsp;指定使用&nbsp;<code>KafkaSource</code>&nbsp;读取数据</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>思考: 从&nbsp;<code>Kafka</code>&nbsp;中应该获取到什么?</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>业务系统有很多种类型, 有可能是&nbsp;<code>Web</code>&nbsp;程序, 有可能是物联网</p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190720132133.png" alt="20190720132133" width="800" /></div>
</div>
<div class="paragraph">
<p>前端大多数情况下使用&nbsp;<code>JSON</code>&nbsp;做数据交互</p>
</div>
</div>
</div>
</li>
<li>
<p>问题1: 业务系统如何把数据给&nbsp;<code>Kafka</code>&nbsp;?</p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190720134513.png" alt="20190720134513" width="800" /></div>
</div>
<div class="paragraph">
<p>可以主动或者被动的把数据交给&nbsp;<code>Kafka</code>, 但是无论使用什么方式, 都在使用&nbsp;<code>Kafka</code>&nbsp;的&nbsp;<code>Client</code>&nbsp;类库来完成这件事,&nbsp;<code>Kafka</code>&nbsp;的类库调用方式如下</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Producer&lt;String, String&gt; producer = <span class="hljs-keyword">new KafkaProducer&lt;String, String&gt;(properties);
producer.send(<span class="hljs-keyword">new ProducerRecord&lt;String, String&gt;(<span class="hljs-string">"HelloWorld", msg));</span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>其中发给&nbsp;<code>Kafka</code>&nbsp;的消息是&nbsp;<code>KV</code>&nbsp;类型的</p>
</div>
</div>
</div>
</li>
<li>
<p>问题2: 使用&nbsp;<code>Structured Streaming</code>&nbsp;访问&nbsp;<code>Kafka</code>&nbsp;获取数据的时候, 需要什么东西呢?</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>需求1: 存储当前处理过的&nbsp;<code>Kafka</code>&nbsp;的&nbsp;<code>Offset</code></p>
</li>
<li>
<p>需求2: 对接多个&nbsp;<code>Kafka Topic</code>&nbsp;的时候, 要知道这条数据属于哪个&nbsp;<code>Topic</code></p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>结论</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Kafka</code>&nbsp;中收到的消息是&nbsp;<code>KV</code>&nbsp;类型的, 有&nbsp;<code>Key</code>, 有&nbsp;<code>Value</code></p>
</li>
<li>
<p><code>Structured Streaming</code>&nbsp;对接&nbsp;<code>Kafka</code>&nbsp;的时候, 每一条&nbsp;<code>Kafka</code>&nbsp;消息不能只是&nbsp;<code>KV</code>, 必须要有&nbsp;<code>Topic</code>,&nbsp;<code>Partition</code>&nbsp;之类的信息</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>从&nbsp;<code>Kafka</code>&nbsp;获取的&nbsp;<code>DataFrame</code>&nbsp;格式</p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">source.printSchema()</code></pre>
</div>
</div>
<div class="paragraph">
<p>结果如下</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">root
 |-- key: binary (nullable = true)
 |-- value: binary (nullable = true)
 |-- topic: string (nullable = true)
 |-- partition: integer (nullable = true)
 |-- offset: long (nullable = true)
 |-- timestamp: timestamp (nullable = true)
 |-- timestampType: integer (nullable = true)</code></pre>
</div>
</div>
<div class="paragraph">
<p>从&nbsp;<code>Kafka</code>&nbsp;中读取到的并不是直接是数据, 而是一个包含各种信息的表格, 其中每个字段的含义如下</p>
</div>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">Key</th><th class="tableblock halign-left valign-top">类型</th><th class="tableblock halign-left valign-top">解释</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>key</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>binary</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Kafka</code>&nbsp;消息的&nbsp;<code>Key</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>value</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>binary</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Kafka</code>&nbsp;消息的&nbsp;<code>Value</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>topic</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>string</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">本条消息所在的&nbsp;<code>Topic</code>, 因为整合的时候一个&nbsp;<code>Dataset</code>&nbsp;可以对接多个&nbsp;<code>Topic</code>, 所以有这样一个信息</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>partition</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>integer</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">消息的分区号</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>offset</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>long</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">消息在其分区的偏移量</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>timestamp</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>timestamp</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">消息进入&nbsp;<code>Kafka</code>&nbsp;的时间戳</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>timestampType</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>integer</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">时间戳类型</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>一定要把&nbsp;<code>JSON</code>&nbsp;转为一行, 再使用&nbsp;<code>Producer</code>&nbsp;发送, 不然会出现获取多行的情况</p>
</li>
<li>
<p>使用 Structured Streaming 连接 Kafka 的时候, 需要配置如下三个参数</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>kafka.bootstrap.servers</code>&nbsp;: 指定&nbsp;<code>Kafka</code>&nbsp;的&nbsp;<code>Server</code>&nbsp;地址</p>
</li>
<li>
<p><code>subscribe</code>&nbsp;: 要监听的&nbsp;<code>Topic</code>, 可以传入多个, 传入多个 Topic 则监听多个 Topic, 也可以使用&nbsp;<code>topic-*</code>&nbsp;这样的通配符写法</p>
</li>
<li>
<p><code>startingOffsets</code>&nbsp;: 从什么位置开始获取数据, 可选值有&nbsp;<code>earliest</code>,&nbsp;<code>assign</code>,&nbsp;<code>latest</code></p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>从 Kafka 获取到的 DataFrame 的 Schema 如下</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">root
 |-- key: binary (nullable = true)
 |-- value: binary (nullable = true)
 |-- topic: string (nullable = true)
 |-- partition: integer (nullable = true)
 |-- offset: long (nullable = true)
 |-- timestamp: timestamp (nullable = true)
 |-- timestampType: integer (nullable = true)</code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect3">
<h4 id="_4_2_5_json_解析和数据统计">4.2.5. JSON 解析和数据统计</h4>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>通过本章的学习, 便能够解析&nbsp;<code>Kafka</code>&nbsp;中的&nbsp;<code>JSON</code>&nbsp;数据,&nbsp;<strong>这是一个重点中的重点</strong></p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>JSON</code>&nbsp;解析</p>
</li>
<li>
<p>数据处理</p>
</li>
<li>
<p>运行测试</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">JSON 解析</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>准备好&nbsp;<code>JSON</code>&nbsp;所在的列</p>
<div class="exampleblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">问题</dt><dd>
<div class="paragraph">
<p>由&nbsp;<code>Dataset</code>&nbsp;的结构可以知道&nbsp;<code>key</code>&nbsp;和&nbsp;<code>value</code>&nbsp;列的类型都是&nbsp;<code>binary</code>&nbsp;二进制, 所以要将其转为字符串, 才可进行&nbsp;<code>JSON</code>&nbsp;解析</p>
</div>
</dd><dt class="hdlist1">解决方式</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">source.selectExpr("CAST(key AS STRING) as key", "CAST(value AS STRING) as value")</code></pre>
</div>
</div>
</dd></dl></div>
</div>
</div>
</li>
<li>
<p>编写&nbsp;<code>Schema</code>&nbsp;对照&nbsp;<code>JSON</code>&nbsp;的格式</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Key</code>&nbsp;要对应&nbsp;<code>JSON</code>&nbsp;中的&nbsp;<code>Key</code></p>
</li>
<li>
<p><code>Value</code>&nbsp;的类型也要对应&nbsp;<code>JSON</code>&nbsp;中的&nbsp;<code>Value</code>&nbsp;类型</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val eventType = new StructType()
  .add("has_sound", BooleanType, nullable = true)
  .add("has_motion", BooleanType, nullable = true)
  .add("has_person", BooleanType, nullable = true)
  .add("start_time", DateType, nullable = true)
  .add("end_time", DateType, nullable = true)

val camerasType = new StructType()
  .add("device_id", StringType, nullable = true)
  .add("last_event", eventType, nullable = true)

val devicesType = new StructType()
  .add("cameras", camerasType, nullable = true)

val schema = new StructType()
  .add("devices", devicesType, nullable = true)</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>因为&nbsp;<code>JSON</code>&nbsp;中包含&nbsp;<code>Date</code>&nbsp;类型的数据, 所以要指定时间格式化方式</p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val jsonOptions = Map("timestampFormat" -&gt; "yyyy-MM-dd'T'HH:mm:ss.sss'Z'")</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>使用&nbsp;<code>from_json</code>&nbsp;这个&nbsp;<code>UDF</code>&nbsp;格式化&nbsp;<code>JSON</code></p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">.select(from_json('value, schema, jsonOptions).alias("parsed_value"))</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>选择格式化过后的&nbsp;<code>JSON</code>&nbsp;中的字段</p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>因为&nbsp;<code>JSON</code>&nbsp;被格式化过后, 已经变为了&nbsp;<code>StructType</code>, 所以可以直接获取其中某些字段的值</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">.selectExpr("parsed_value.devices.cameras.last_event.has_person as has_person",
          "parsed_value.devices.cameras.last_event.start_time as start_time")</code></pre>
</div>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">数据处理</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>统计各个时段有人的数据</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">.filter('has_person === true)
.groupBy('has_person, 'start_time)
.count()</code></pre>
</div>
</div>
</li>
<li>
<p>将数据落地到控制台</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">result.writeStream
  .outputMode(OutputMode.Complete())
  .format("console")
  .start()
  .awaitTermination()</code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">全部代码</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">import org.apache.spark.sql.SparkSession

val spark = SparkSession.builder()
  .master("local[6]")
  .appName("kafka integration")
  .getOrCreate()

import org.apache.spark.sql.streaming.OutputMode
import org.apache.spark.sql.types._

val source = spark
  .readStream
  .format("kafka")
  .option("kafka.bootstrap.servers", "node01:9092,node02:9092,node03:9092")
  .option("subscribe", "streaming-test")
  .option("startingOffsets", "earliest")
  .load()

val eventType = new StructType()
  .add("has_sound", BooleanType, nullable = true)
  .add("has_motion", BooleanType, nullable = true)
  .add("has_person", BooleanType, nullable = true)
  .add("start_time", DateType, nullable = true)
  .add("end_time", DateType, nullable = true)

val camerasType = new StructType()
  .add("device_id", StringType, nullable = true)
  .add("last_event", eventType, nullable = true)

val devicesType = new StructType()
  .add("cameras", camerasType, nullable = true)

val schema = new StructType()
  .add("devices", devicesType, nullable = true)

val jsonOptions = Map("timestampFormat" -&gt; "yyyy-MM-dd'T'HH:mm:ss.sss'Z'")

import org.apache.spark.sql.functions._
import spark.implicits._

val result = source.selectExpr("CAST(key AS STRING) as key", "CAST(value AS STRING) as value")
    .select(from_json('value, schema, jsonOptions).alias("parsed_value"))
    .selectExpr("parsed_value.devices.cameras.last_event.has_person as has_person",
      "parsed_value.devices.cameras.last_event.start_time as start_time")
    .filter('has_person === true)
    .groupBy('has_person, 'start_time)
    .count()

result.writeStream
  .outputMode(OutputMode.Complete())
  .format("console")
  .start()
  .awaitTermination()</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">运行测试</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>进入服务器中, 启动&nbsp;<code>Kafka</code></p>
</li>
<li>
<p>启动&nbsp;<code>Kafka</code>&nbsp;的&nbsp;<code>Producer</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-shell hljs" data-lang="shell">bin/kafka-console-producer.sh --broker-list node01:9092,node02:9092,node03:9092 --topic streaming-test</code></pre>
</div>
</div>
</li>
<li>
<p>启动&nbsp;<code>Spark shell</code>&nbsp;并拷贝代码进行测试</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-shell hljs" data-lang="shell">./bin/spark-shell --packages org.apache.spark:spark-sql-kafka-0-10_2.11:2.2.0</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>因为需要和&nbsp;<code>Kafka</code>&nbsp;整合, 所以在启动的时候需要加载和&nbsp;<code>Kafka</code>&nbsp;整合的包&nbsp;<code>spark-sql-kafka-0-10</code></p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_5_sink">5. Sink</h2>
<div class="sectionbody">
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="ulist">
<ul>
<li>
<p>能够串联两端, 理解整个流式应用, 以及其中的一些根本的原理, 比如说容错语义</p>
</li>
<li>
<p>能够知道如何对接外部系统, 写入数据</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>HDFS Sink</code></p>
</li>
<li>
<p><code>Kafka Sink</code></p>
</li>
<li>
<p><code>Foreach Sink</code></p>
</li>
<li>
<p>自定义&nbsp;<code>Sink</code></p>
</li>
<li>
<p><code>Tiggers</code></p>
</li>
<li>
<p><code>Sink</code>&nbsp;原理</p>
</li>
<li>
<p>错误恢复和容错语义</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
<div class="sect2">
<h3 id="_5_1_hdfs_sink">5.1. HDFS Sink</h3>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>能够使用&nbsp;<code>Spark</code>&nbsp;将流式数据的处理结果放入&nbsp;<code>HDFS</code></p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>场景和需求</p>
</li>
<li>
<p>代码实现</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">场景和需求</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">场景</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Kafka</code>&nbsp;往往作为数据系统和业务系统之间的桥梁</p>
</li>
<li>
<p>数据系统一般由批量处理和流式处理两个部分组成</p>
</li>
<li>
<p>在&nbsp;<code>Kafka</code>&nbsp;作为整个数据平台入口的场景下, 需要使用&nbsp;<code>StructuredStreaming</code>&nbsp;接收&nbsp;<code>Kafka</code>&nbsp;的数据并放置于&nbsp;<code>HDFS</code>&nbsp;上, 后续才可以进行批量处理</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190808023517.png" alt="20190808023517" width="800" /></div>
</div>
</div>
</div>
</dd><dt class="hdlist1">案例需求</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>从&nbsp;<code>Kafka</code>&nbsp;接收数据, 从给定的数据集中, 裁剪部分列, 落地于&nbsp;<code>HDFS</code></p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">代码实现</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">步骤说明</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>从&nbsp;<code>Kafka</code>&nbsp;读取数据, 生成源数据集</p>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>连接&nbsp;<code>Kafka</code>&nbsp;生成&nbsp;<code>DataFrame</code></p>
</li>
<li>
<p>从&nbsp;<code>DataFrame</code>&nbsp;中取出表示&nbsp;<code>Kafka</code>&nbsp;消息内容的&nbsp;<code>value</code>&nbsp;列并转为&nbsp;<code>String</code>&nbsp;类型</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>对源数据集选择列</p>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>解析&nbsp;<code>CSV</code>&nbsp;格式的数据</p>
</li>
<li>
<p>生成正确类型的结果集</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>落地&nbsp;<code>HDFS</code></p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">整体代码</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">import org.apache.spark.sql.SparkSession

val spark = SparkSession.builder()
  .master("local[6]")
  .appName("kafka integration")
  .getOrCreate()

import spark.implicits._

val source = spark
  .readStream
  .format("kafka")
  .option("kafka.bootstrap.servers", "node01:9092,node02:9092,node03:9092")
  .option("subscribe", "streaming-bank")
  .option("startingOffsets", "earliest")
  .load()
  .selectExpr("CAST(value AS STRING)")
  .as[String]

val result = source.map {
  item =&gt;
    val arr = item.replace("\"", "").split(";")
    (arr(0).toInt, arr(1).toInt, arr(5).toInt)
}
.as[(Int, Int, Int)]
.toDF("age", "job", "balance")

result.writeStream
  .format("parquet") // 也可以是 "orc", "json", "csv" 等
  .option("path", "/dataset/streaming/result/")
  .start()</code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_5_2_kafka_sink">5.2. Kafka Sink</h3>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>掌握什么时候要将流式数据落地至 Kafka, 以及如何落地至 Kafka</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>场景</p>
</li>
<li>
<p>代码</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">场景</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">场景</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>有很多时候,&nbsp;<code>ETL</code>&nbsp;过后的数据, 需要再次放入&nbsp;<code>Kafka</code></p>
</li>
<li>
<p>在&nbsp;<code>Kafka</code>&nbsp;后, 可能会有流式程序统一将数据落地到&nbsp;<code>HDFS</code>&nbsp;或者&nbsp;<code>HBase</code></p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190809014210.png" alt="20190809014210" width="800" /></div>
</div>
</div>
</div>
</dd><dt class="hdlist1">案例需求</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>从&nbsp;<code>Kafka</code>&nbsp;中获取数据, 简单处理, 再次放入&nbsp;<code>Kafka</code></p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">代码</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">步骤</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>从&nbsp;<code>Kafka</code>&nbsp;读取数据, 生成源数据集</p>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>连接&nbsp;<code>Kafka</code>&nbsp;生成&nbsp;<code>DataFrame</code></p>
</li>
<li>
<p>从&nbsp;<code>DataFrame</code>&nbsp;中取出表示&nbsp;<code>Kafka</code>&nbsp;消息内容的&nbsp;<code>value</code>&nbsp;列并转为&nbsp;<code>String</code>&nbsp;类型</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>对源数据集选择列</p>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>解析&nbsp;<code>CSV</code>&nbsp;格式的数据</p>
</li>
<li>
<p>生成正确类型的结果集</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>再次落地&nbsp;<code>Kafka</code></p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">代码</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">import org.apache.spark.sql.SparkSession

val spark = SparkSession.builder()
  .master("local[6]")
  .appName("kafka integration")
  .getOrCreate()

import spark.implicits._

val source = spark
  .readStream
  .format("kafka")
  .option("kafka.bootstrap.servers", "node01:9092,node02:9092,node03:9092")
  .option("subscribe", "streaming-bank")
  .option("startingOffsets", "earliest")
  .load()
  .selectExpr("CAST(value AS STRING)")
  .as[String]

val result = source.map {
  item =&gt;
    val arr = item.replace("\"", "").split(";")
    (arr(0).toInt, arr(1).toInt, arr(5).toInt)
}
.as[(Int, Int, Int)]
.toDF("age", "job", "balance")

result.writeStream
  .format("kafka")
  .outputMode(OutputMode.Append())
  .option("kafka.bootstrap.servers", "node01:9092,node02:9092,node03:9092")
  .option("topic", "streaming-bank-result")
  .start()
  .awaitTermination()</code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_5_3_foreach_writer">5.3. Foreach Writer</h3>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>掌握&nbsp;<code>Foreach</code>&nbsp;模式理解如何扩展&nbsp;<code>Structured Streaming</code>&nbsp;的&nbsp;<code>Sink</code>, 同时能够将数据落地到&nbsp;<code>MySQL</code></p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>需求</p>
</li>
<li>
<p>代码</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">需求</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>场景</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>大数据有一个常见的应用场景</p>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>收集业务系统数据</p>
</li>
<li>
<p>数据处理</p>
</li>
<li>
<p>放入&nbsp;<code>OLTP</code>&nbsp;数据</p>
</li>
<li>
<p>外部通过&nbsp;<code>ECharts</code>&nbsp;获取并处理数据</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>这个场景下,&nbsp;<code>StructuredStreaming</code>&nbsp;就需要处理数据并放入&nbsp;<code>MySQL</code>&nbsp;或者&nbsp;<code>MongoDB</code>,&nbsp;<code>HBase</code>&nbsp;中以供&nbsp;<code>Web</code>&nbsp;程序可以获取数据, 图表的形式展示在前端</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190809115742.png" alt="20190809115742" width="800" /></div>
</div>
</div>
</div>
</li>
<li>
<p>Foreach 模式::</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>起因</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>在&nbsp;<code>Structured Streaming</code>&nbsp;中, 并未提供完整的&nbsp;<code>MySQL/JDBC</code>&nbsp;整合工具</p>
</li>
<li>
<p>不止&nbsp;<code>MySQL</code>&nbsp;和&nbsp;<code>JDBC</code>, 可能会有其它的目标端需要写入</p>
</li>
<li>
<p>很多时候&nbsp;<code>Structured Streaming</code>&nbsp;需要对接一些第三方的系统, 例如阿里云的云存储, 亚马逊云的云存储等, 但是&nbsp;<code>Spark</code>&nbsp;无法对所有第三方都提供支持, 有时候需要自己编写</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>解决方案</p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190809122425.png" alt="20190809122425" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>既然无法满足所有的整合需求,&nbsp;<code>StructuredStreaming</code>&nbsp;提供了&nbsp;<code>Foreach</code>, 可以拿到每一个批次的数据</p>
</li>
<li>
<p>通过&nbsp;<code>Foreach</code>&nbsp;拿到数据后, 可以通过自定义写入方式, 从而将数据落地到其它的系统</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>案例需求::</p>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190809122804.png" alt="20190809122804" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>从&nbsp;<code>Kafka</code>&nbsp;中获取数据, 处理后放入&nbsp;<code>MySQL</code></p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">代码</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">步骤</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建&nbsp;<code>DataFrame</code>&nbsp;表示&nbsp;<code>Kafka</code>&nbsp;数据源</p>
</li>
<li>
<p>在源&nbsp;<code>DataFrame</code>&nbsp;中选择三列数据</p>
</li>
<li>
<p>创建&nbsp;<code>ForeachWriter</code>&nbsp;接收每一个批次的数据落地&nbsp;<code>MySQL</code></p>
</li>
<li>
<p><code>Foreach</code>&nbsp;落地数据</p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">代码</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">import org.apache.spark.sql.SparkSession

val spark = SparkSession.builder()
  .master("local[6]")
  .appName("kafka integration")
  .getOrCreate()

import spark.implicits._

val source = spark
  .readStream
  .format("kafka")
  .option("kafka.bootstrap.servers", "node01:9092,node02:9092,node03:9092")
  .option("subscribe", "streaming-bank")
  .option("startingOffsets", "earliest")
  .load()
  .selectExpr("CAST(value AS STRING)")
  .as[String]

val result = source.map {
  item =&gt;
    val arr = item.replace("\"", "").split(";")
    (arr(0).toInt, arr(1).toInt, arr(5).toInt)
}
.as[(Int, Int, Int)]
.toDF("age", "job", "balance")

class MySQLWriter extends ForeachWriter[Row] {
  val driver = "com.mysql.jdbc.Driver"
  var statement: Statement = _
  var connection: Connection  = _
  val url: String = "jdbc:mysql://node01:3306/streaming-bank-result"
  val user: String = "root"
  val pwd: String = "root"

  override def open(partitionId: Long, version: Long): Boolean = {
    Class.forName(driver)
    connection = DriverManager.getConnection(url, user, pwd)
    this.statement = connection.createStatement
    true
  }

  override def process(value: Row): Unit = {
    statement.executeUpdate(s"insert into bank values(" +
      s"${value.getAs[Int]("age")}, " +
      s"${value.getAs[Int]("job")}, " +
      s"${value.getAs[Int]("balance")} )")
  }

  override def close(errorOrNull: Throwable): Unit = {
    connection.close()
  }
}

result.writeStream
  .foreach(new MySQLWriter)
  .start()
  .awaitTermination()</code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_5_4_自定义_sink">5.4. 自定义 Sink</h3>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="ulist">
<ul>
<li>
<p><code>Foreach</code>&nbsp;倾向于一次处理一条数据, 如果想拿到&nbsp;<code>DataFrame</code>&nbsp;幂等的插入外部数据源, 则需要自定义&nbsp;<code>Sink</code></p>
</li>
<li>
<p>了解如何自定义&nbsp;<code>Sink</code></p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Spark</code>&nbsp;加载&nbsp;<code>Sink</code>&nbsp;流程分析</p>
</li>
<li>
<p>自定义&nbsp;<code>Sink</code></p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">Spark 加载 Sink 流程分析</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Sink</code>&nbsp;加载流程</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>writeStream</code>&nbsp;方法中会创建一个&nbsp;<code>DataStreamWriter</code>&nbsp;对象</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">def writeStream: DataStreamWriter[T] = {
  if (!isStreaming) {
    logicalPlan.failAnalysis(
      "'writeStream' can be called only on streaming Dataset/DataFrame")
  }
  new DataStreamWriter[T](this)
}</code></pre>
</div>
</div>
</li>
<li>
<p>在&nbsp;<code>DataStreamWriter</code>&nbsp;对象上通过&nbsp;<code>format</code>&nbsp;方法指定&nbsp;<code>Sink</code>&nbsp;的短名并记录下来</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">def format(source: String): DataStreamWriter[T] = {
  this.source = source
  this
}</code></pre>
</div>
</div>
</li>
<li>
<p>最终会通过&nbsp;<code>DataStreamWriter</code>&nbsp;对象上的&nbsp;<code>start</code>&nbsp;方法启动执行, 其中会通过短名创建&nbsp;<code>DataSource</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val dataSource =
    DataSource(
      df.sparkSession,
      className = source, <span class="conum" data-value="1">
      options = extraOptions.toMap,
      partitionColumns = normalizedParCols.getOrElse(Nil))</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>传入的&nbsp;<code>Sink</code>&nbsp;短名</td>
</tr>
</tbody>
</table>
</div>
</li>
<li>
<p>在创建&nbsp;<code>DataSource</code>&nbsp;的时候, 会通过一个复杂的流程创建出对应的&nbsp;<code>Source</code>&nbsp;和&nbsp;<code>Sink</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">lazy val providingClass: Class[_] = DataSource.lookupDataSource(className)</code></pre>
</div>
</div>
</li>
<li>
<p>在这个复杂的创建流程中, 有一行最关键的代码, 就是通过&nbsp;<code>Java</code>&nbsp;的类加载器加载所有的&nbsp;<code>DataSourceRegister</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val serviceLoader = ServiceLoader.load(classOf[DataSourceRegister], loader)</code></pre>
</div>
</div>
</li>
<li>
<p>在&nbsp;<code>DataSourceRegister</code>&nbsp;中会创建对应的&nbsp;<code>Source</code>&nbsp;或者&nbsp;<code>Sink</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">trait DataSourceRegister {

  def shortName(): String      <span class="conum" data-value="1">
}

trait StreamSourceProvider {
  def createSource(            <span class="conum" data-value="2">
      sqlContext: SQLContext,
      metadataPath: String,
      schema: Option[StructType],
      providerName: String,
      parameters: Map[String, String]): Source
}

trait StreamSinkProvider {
  def createSink(              <span class="conum" data-value="3">
      sqlContext: SQLContext,
      parameters: Map[String, String],
      partitionColumns: Seq[String],
      outputMode: OutputMode): Sink
}</span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>提供短名</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>创建&nbsp;<code>Source</code></td>
</tr>
<tr>
<td>&nbsp;</td>
<td>创建&nbsp;<code>Sink</code></td>
</tr>
</tbody>
</table>
</div>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>自定义&nbsp;<code>Sink</code>&nbsp;的方式</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>根据前面的流程说明, 有两点非常重要</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Spark</code>&nbsp;会自动加载所有&nbsp;<code>DataSourceRegister</code>&nbsp;的子类, 所以需要通过&nbsp;<code>DataSourceRegister</code>&nbsp;加载&nbsp;<code>Source</code>&nbsp;和&nbsp;<code>Sink</code></p>
</li>
<li>
<p>Spark 提供了&nbsp;<code>StreamSinkProvider</code>&nbsp;用以创建&nbsp;<code>Sink</code>, 提供必要的依赖</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>所以如果要创建自定义的&nbsp;<code>Sink</code>, 需要做两件事</p>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建一个注册器, 继承&nbsp;<code>DataSourceRegister</code>&nbsp;提供注册功能, 继承&nbsp;<code>StreamSinkProvider</code>&nbsp;获取创建&nbsp;<code>Sink</code>的必备依赖</p>
</li>
<li>
<p>创建一个&nbsp;<code>Sink</code>&nbsp;子类</p>
</li>
</ol></div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">自定义 Sink</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">步骤</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>读取&nbsp;<code>Kafka</code>&nbsp;数据</p>
</li>
<li>
<p>简单处理数据</p>
</li>
<li>
<p>创建&nbsp;<code>Sink</code></p>
</li>
<li>
<p>创建&nbsp;<code>Sink</code>&nbsp;注册器</p>
</li>
<li>
<p>使用自定义&nbsp;<code>Sink</code></p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">代码</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">import org.apache.spark.sql.SparkSession

val spark = SparkSession.builder()
  .master("local[6]")
  .appName("kafka integration")
  .getOrCreate()

import spark.implicits._

val source = spark
  .readStream
  .format("kafka")
  .option("kafka.bootstrap.servers", "node01:9092,node02:9092,node03:9092")
  .option("subscribe", "streaming-bank")
  .option("startingOffsets", "earliest")
  .load()
  .selectExpr("CAST(value AS STRING)")
  .as[String]

val result = source.map {
  item =&gt;
    val arr = item.replace("\"", "").split(";")
    (arr(0).toInt, arr(1).toInt, arr(5).toInt)
}
  .as[(Int, Int, Int)]
  .toDF("age", "job", "balance")

class MySQLSink(options: Map[String, String], outputMode: OutputMode) extends Sink {

  override def addBatch(batchId: Long, data: DataFrame): Unit = {
    val userName = options.get("userName").orNull
    val password = options.get("password").orNull
    val table = options.get("table").orNull
    val jdbcUrl = options.get("jdbcUrl").orNull

    val properties = new Properties
    properties.setProperty("user", userName)
    properties.setProperty("password", password)

    data.write.mode(outputMode.toString).jdbc(jdbcUrl, table, properties)
  }
}

class MySQLStreamSinkProvider extends StreamSinkProvider with DataSourceRegister {

  override def createSink(sqlContext: SQLContext,
                          parameters: Map[String, String],
                          partitionColumns: Seq[String],
                          outputMode: OutputMode): Sink = {
    new MySQLSink(parameters, outputMode)
  }

  override def shortName(): String = "mysql"
}

result.writeStream
  .format("mysql")
  .option("username", "root")
  .option("password", "root")
  .option("table", "streaming-bank-result")
  .option("jdbcUrl", "jdbc:mysql://node01:3306/test")
  .start()
  .awaitTermination()</code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_5_5_tigger">5.5. Tigger</h3>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>掌握如何控制&nbsp;<code>StructuredStreaming</code>&nbsp;的处理时间</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>微批次处理</p>
</li>
<li>
<p>连续流处理</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">微批次处理</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>什么是微批次</p>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190628144128.png" alt="20190628144128" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>并不是真正的流, 而是缓存一个批次周期的数据, 后处理这一批次的数据</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>通用流程</p>
<div class="exampleblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">步骤</dt><dd>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>根据&nbsp;<code>Spark</code>&nbsp;提供的调试用的数据源&nbsp;<code>Rate</code>&nbsp;创建流式&nbsp;<code>DataFrame</code></p>
<div class="ulist">
<ul>
<li>
<p><code>Rate</code>&nbsp;数据源会定期提供一个由两列&nbsp;<code>timestamp, value</code>&nbsp;组成的数据,&nbsp;<code>value</code>&nbsp;是一个随机数</p>
</li>
</ul>
</div>
</li>
<li>
<p>处理和聚合数据, 计算每个个位数和十位数各有多少条数据</p>
<div class="ulist">
<ul>
<li>
<p>对&nbsp;<code>value</code>&nbsp;求&nbsp;<code>log10</code>&nbsp;即可得出其位数</p>
</li>
<li>
<p>后按照位数进行分组, 最终就可以看到每个位数的数据有多少个</p>
</li>
</ul>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">代码</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val spark = SparkSession.builder()
  .master("local[6]")
  .appName("socket_processor")
  .getOrCreate()

import org.apache.spark.sql.functions._
import spark.implicits._

spark.sparkContext.setLogLevel("ERROR")

val source = spark.readStream
  .format("rate")
  .load()

val result = source.select(log10('value) cast IntegerType as 'key, 'value)
    .groupBy('key)
    .agg(count('key) as 'count)
    .select('key, 'count)
    .where('key.isNotNull)
    .sort('key.asc)</code></pre>
</div>
</div>
</dd></dl></div>
</div>
</div>
</li>
<li>
<p>默认方式划分批次</p>
<div class="exampleblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">介绍</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>默认情况下的&nbsp;<code>Structured Streaming</code>&nbsp;程序会运行在微批次的模式下, 当一个批次结束后, 下一个批次会立即开始处理</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>指定落地到&nbsp;<code>Console</code>&nbsp;中, 不指定&nbsp;<code>Trigger</code></p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">代码</dt><dd>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">result.writeStream
  .outputMode(OutputMode.Complete())
  .format("console")
  .start()
  .awaitTermination()</code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</li>
<li>
<p>按照固定时间间隔划分批次</p>
<div class="exampleblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">介绍</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>使用微批次处理数据, 使用用户指定的时间间隔启动批次, 如果间隔指定为&nbsp;<code>0</code>, 则尽可能快的去处理, 一个批次紧接着一个批次</p>
</div>
<div class="ulist">
<ul>
<li>
<p>如果前一批数据提前完成, 待到批次间隔达成的时候再启动下一个批次</p>
</li>
<li>
<p>如果前一批数据延后完成, 下一个批次会在前面批次结束后立即启动</p>
</li>
<li>
<p>如果没有数据可用, 则不启动处理</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>通过&nbsp;<code>Trigger.ProcessingTime()</code>&nbsp;指定处理间隔</p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">代码</dt><dd>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">result.writeStream
  .outputMode(OutputMode.Complete())
  .format("console")
  .trigger(Trigger.ProcessingTime("2 seconds"))
  .start()
  .awaitTermination()</code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</li>
<li>
<p>一次性划分批次</p>
<div class="exampleblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">介绍</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>只划分一个批次, 处理完成以后就停止&nbsp;<code>Spark</code>&nbsp;工作, 当需要启动一下&nbsp;<code>Spark</code>&nbsp;处理遗留任务的时候, 处理完就关闭集群的情况下, 这个划分方式非常实用</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>使用&nbsp;<code>Trigger.Once</code>&nbsp;一次性划分批次</p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">代码</dt><dd>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">result.writeStream
  .outputMode(OutputMode.Complete())
  .format("console")
  .trigger(Trigger.Once())
  .start()
  .awaitTermination()</code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">连续流处理</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>介绍</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>微批次会将收到的数据按照批次划分为不同的&nbsp;<code>DataFrame</code>, 后执行&nbsp;<code>DataFrame</code>, 所以其数据的处理延迟取决于每个&nbsp;<code>DataFrame</code>&nbsp;的处理速度, 最快也只能在一个&nbsp;<code>DataFrame</code>&nbsp;结束后立刻执行下一个, 最快可以达到&nbsp;<code>100ms</code>&nbsp;左右的端到端延迟</p>
</li>
<li>
<p>而连续流处理可以做到大约&nbsp;<code>1ms</code>&nbsp;的端到端数据处理延迟</p>
</li>
<li>
<p>连续流处理可以达到&nbsp;<code>at-least-once</code>&nbsp;的容错语义</p>
</li>
<li>
<p>从&nbsp;<code>Spark 2.3</code>&nbsp;版本开始支持连续流处理, 我们所采用的&nbsp;<code>2.2</code>&nbsp;版本还没有这个特性, 并且这个特性截止到&nbsp;<code>2.4</code>&nbsp;依然是实验性质, 不建议在生产环境中使用</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>操作</p>
<div class="exampleblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">步骤</dt><dd>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>使用特殊的&nbsp;<code>Trigger</code>&nbsp;完成功能</p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">代码</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">result.writeStream
  .outputMode(OutputMode.Complete())
  .format("console")
  .trigger(Trigger.Continuous("1 second"))
  .start()
  .awaitTermination()</code></pre>
</div>
</div>
</dd></dl></div>
</div>
</div>
</li>
<li>
<p>限制</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>只支持&nbsp;<code>Map</code>&nbsp;类的有类型操作</p>
</li>
<li>
<p>只支持普通的的&nbsp;<code>SQL</code>&nbsp;类操作, 不支持聚合</p>
</li>
<li>
<p><code>Source</code>&nbsp;只支持&nbsp;<code>Kafka</code></p>
</li>
<li>
<p><code>Sink</code>&nbsp;只支持&nbsp;<code>Kafka</code>,&nbsp;<code>Console</code>,&nbsp;<code>Memory</code></p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_5_6_从_source_到_sink_的流程">5.6. 从 Source 到 Sink 的流程</h3>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>理解&nbsp;<code>Source</code>&nbsp;到&nbsp;<code>Sink</code>&nbsp;的整体原理</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>从&nbsp;<code>Source</code>&nbsp;到&nbsp;<code>Sink</code>&nbsp;的流程</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">从 Source 到 Sink 的流程</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190809184239.png" alt="20190809184239" width="800" /></div>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>在每个&nbsp;<code>StreamExecution</code>&nbsp;的批次最开始,&nbsp;<code>StreamExecution</code>&nbsp;会向&nbsp;<code>Source</code>&nbsp;询问当前&nbsp;<code>Source</code>&nbsp;的最新进度, 即最新的&nbsp;<code>offset</code></p>
</li>
<li>
<p><code>StreamExecution</code>&nbsp;将&nbsp;<code>Offset</code>&nbsp;放到&nbsp;<code>WAL</code>&nbsp;里</p>
</li>
<li>
<p><code>StreamExecution</code>&nbsp;从&nbsp;<code>Source</code>&nbsp;获取&nbsp;<code>start offset</code>,&nbsp;<code>end offset</code>&nbsp;区间内的数据</p>
</li>
<li>
<p><code>StreamExecution</code>&nbsp;触发计算逻辑&nbsp;<code>logicalPlan</code>&nbsp;的优化与编译</p>
</li>
<li>
<p>计算结果写出给&nbsp;<code>Sink</code></p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>调用&nbsp;<code>Sink.addBatch(batchId: Long, data: DataFrame)</code>&nbsp;完成</p>
</li>
<li>
<p>此时才会由&nbsp;<code>Sink</code>&nbsp;的写入操作开始触发实际的数据获取和计算过程</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>在数据完整写出到&nbsp;<code>Sink</code>&nbsp;后,&nbsp;<code>StreamExecution</code>&nbsp;通知&nbsp;<code>Source</code>&nbsp;批次&nbsp;<code>id</code>&nbsp;写入到&nbsp;<code>batchCommitLog</code>, 当前批次结束</p>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_5_7_错误恢复和容错语义">5.7. 错误恢复和容错语义</h3>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>理解&nbsp;<code>Structured Streaming</code>&nbsp;中提供的系统级别容错手段</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>端到端</p>
</li>
<li>
<p>三种容错语义</p>
</li>
<li>
<p><code>Sink</code>&nbsp;的容错</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">端到端</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190809190803.png" alt="20190809190803" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Source</code>&nbsp;可能是&nbsp;<code>Kafka</code>,&nbsp;<code>HDFS</code></p>
</li>
<li>
<p><code>Sink</code>&nbsp;也可能是&nbsp;<code>Kafka</code>,&nbsp;<code>HDFS</code>,&nbsp;<code>MySQL</code>&nbsp;等存储服务</p>
</li>
<li>
<p>消息从&nbsp;<code>Source</code>&nbsp;取出, 经过&nbsp;<code>Structured Streaming</code>&nbsp;处理, 最后落地到&nbsp;<code>Sink</code>&nbsp;的过程, 叫做端到端</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">三种容错语义</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>at-most-once</code></p>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190809192258.png" alt="20190809192258" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>在数据从&nbsp;<code>Source</code>&nbsp;到&nbsp;<code>Sink</code>&nbsp;的过程中, 出错了,&nbsp;<code>Sink</code>&nbsp;可能没收到数据, 但是不会收到两次, 叫做&nbsp;<code>at-most-once</code></p>
</li>
<li>
<p>一般错误恢复的时候, 不重复计算, 则是&nbsp;<code>at-most-once</code></p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p><code>at-least-once</code></p>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190809192258.png" alt="20190809192258" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>在数据从&nbsp;<code>Source</code>&nbsp;到&nbsp;<code>Sink</code>&nbsp;的过程中, 出错了,&nbsp;<code>Sink</code>&nbsp;一定会收到数据, 但是可能收到两次, 叫做&nbsp;<code>at-least-once</code></p>
</li>
<li>
<p>一般错误恢复的时候, 重复计算可能完成也可能未完成的计算, 则是&nbsp;<code>at-least-once</code></p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p><code>exactly-once</code></p>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190809192258.png" alt="20190809192258" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>在数据从&nbsp;<code>Source</code>&nbsp;到&nbsp;<code>Sink</code>&nbsp;的过程中, 虽然出错了,&nbsp;<code>Sink</code>&nbsp;一定恰好收到应该收到的数据, 一条不重复也一条都不少, 即是&nbsp;<code>exactly-once</code></p>
</li>
<li>
<p>想做到&nbsp;<code>exactly-once</code>&nbsp;是非常困难的</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">Sink 的容错</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190809192644.png" alt="20190809192644" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>故障恢复一般分为&nbsp;<code>Driver</code>&nbsp;的容错和&nbsp;<code>Task</code>&nbsp;的容错</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Driver</code>&nbsp;的容错指的是整个系统都挂掉了</p>
</li>
<li>
<p><code>Task</code>&nbsp;的容错指的是一个任务没运行明白, 重新运行一次</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>因为&nbsp;<code>Spark</code>&nbsp;的&nbsp;<code>Executor</code>&nbsp;能够非常好的处理&nbsp;<code>Task</code>&nbsp;的容错, 所以我们主要讨论&nbsp;<code>Driver</code>&nbsp;的容错, 如果出错的时候</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>读取&nbsp;<code>WAL offsetlog</code>&nbsp;恢复出最新的&nbsp;<code>offsets</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>当&nbsp;<code>StreamExecution</code>&nbsp;找到&nbsp;<code>Source</code>&nbsp;获取数据的时候, 会将数据的起始放在&nbsp;<code>WAL offsetlog</code>&nbsp;中, 当出错要恢复的时候, 就可以从中获取当前处理批次的数据起始, 例如&nbsp;<code>Kafka</code>&nbsp;的&nbsp;<code>Offset</code></p>
</div>
</div>
</div>
</li>
<li>
<p>读取&nbsp;<code>batchCommitLog</code>&nbsp;决定是否需要重做最近一个批次</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>当&nbsp;<code>Sink</code>&nbsp;处理完批次的数据写入时, 会将当前的批次&nbsp;<code>ID</code>&nbsp;存入&nbsp;<code>batchCommitLog</code>, 当出错的时候就可以从中取出进行到哪一个批次了, 和&nbsp;<code>WAL</code>&nbsp;对比即可得知当前批次是否处理完</p>
</div>
</div>
</div>
</li>
<li>
<p>如果有必要的话, 当前批次数据重做</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>如果上次执行在&nbsp;<code>(5)</code>&nbsp;结束前即失效, 那么本次执行里&nbsp;<code>Sink</code>&nbsp;应该完整写出计算结果</p>
</li>
<li>
<p>如果上次执行在&nbsp;<code>(5)</code>&nbsp;结束后才失效, 那么本次执行里&nbsp;<code>Sink</code>&nbsp;可以重新写出计算结果 (覆盖上次结果), 也可以跳过写出计算结果(因为上次执行已经完整写出过计算结果了)</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>这样即可保证每次执行的计算结果, 在 Sink 这个层面, 是&nbsp;<strong>不重不丢</strong>&nbsp;的, 即使中间发生过失效和恢复, 所以&nbsp;<code>Structured Streaming</code>&nbsp;可以做到&nbsp;<code>exactly-once</code></p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">容错所需要的存储</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>存储</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>offsetlog</code>&nbsp;和&nbsp;<code>batchCommitLog</code>&nbsp;关乎于错误恢复</p>
</li>
<li>
<p><code>offsetlog</code>&nbsp;和&nbsp;<code>batchCommitLog</code>&nbsp;需要存储在可靠的空间里</p>
</li>
<li>
<p><code>offsetlog</code>&nbsp;和&nbsp;<code>batchCommitLog</code>&nbsp;存储在&nbsp;<code>Checkpoint</code>&nbsp;中</p>
</li>
<li>
<p><code>WAL</code>&nbsp;其实也存在于&nbsp;<code>Checkpoint</code>&nbsp;中</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>指定&nbsp;<code>Checkpoint</code></p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>只有指定了&nbsp;<code>Checkpoint</code>&nbsp;路径的时候, 对应的容错功能才可以开启</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">aggDF
  .writeStream
  .outputMode("complete")
  .option("checkpointLocation", "path/to/HDFS/dir") <span class="conum" data-value="1">
  .format("memory")
  .start()</span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>指定&nbsp;<code>Checkpoint</code>&nbsp;的路径, 这个路径对应的目录必须是&nbsp;<code>HDFS</code>&nbsp;兼容的文件系统</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">需要的外部支持</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>如果要做到&nbsp;<code>exactly-once</code>, 只是&nbsp;<code>Structured Streaming</code>&nbsp;能做到还不行, 还需要&nbsp;<code>Source</code>&nbsp;和&nbsp;<code>Sink</code>&nbsp;系统的支持</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Source</code>&nbsp;需要支持数据重放</p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>当有必要的时候,&nbsp;<code>Structured Streaming</code>&nbsp;需要根据&nbsp;<code>start</code>&nbsp;和&nbsp;<code>end offset</code>&nbsp;从&nbsp;<code>Source</code>&nbsp;系统中再次获取数据, 这叫做重放</p>
</div>
</div>
</div>
</li>
<li>
<p><code>Sink</code>&nbsp;需要支持幂等写入</p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>如果需要重做整个批次的时候,&nbsp;<code>Sink</code>&nbsp;要支持给定的&nbsp;<code>ID</code>&nbsp;写入数据, 这叫幂等写入, 一个&nbsp;<code>ID</code>&nbsp;对应一条数据进行写入, 如果前面已经写入, 则替换或者丢弃, 不能重复</p>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>所以&nbsp;<code>Structured Streaming</code>&nbsp;想要做到&nbsp;<code>exactly-once</code>, 则也需要外部系统的支持, 如下</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">Source</dt><dd>
<div class="exampleblock">
<div class="content">
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /><col /><col /></colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Sources</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">是否可重放</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">原生内置支持</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">注解</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>HDFS</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">可以</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">已支持</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">包括但不限于&nbsp;<code>Text</code>,&nbsp;<code>JSON</code>,&nbsp;<code>CSV</code>,&nbsp;<code>Parquet</code>,&nbsp;<code>ORC</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Kafka</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">可以</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">已支持</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Kafka 0.10.0+</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>RateStream</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">可以</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">已支持</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">以一定速率产生数据</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock">RDBMS</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">可以</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">待支持</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">预计后续很快会支持</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Socket</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">不可以</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">已支持</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">主要用途是在技术会议和讲座上做&nbsp;<code>Demo</code></p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd><dt class="hdlist1">Sink</dt><dd>
<div class="exampleblock">
<div class="content">
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /><col /><col /></colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Sinks</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">是否幂等写入</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">原生内置支持</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">注解</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>HDFS</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">可以</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">支持</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">包括但不限于&nbsp;<code>Text</code>,&nbsp;<code>JSON</code>,&nbsp;<code>CSV</code>,&nbsp;<code>Parquet</code>,&nbsp;<code>ORC</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>ForeachSink</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">可以</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">支持</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">可定制度非常高的&nbsp;<code>Sink</code>, 是否可以幂等取决于具体的实现</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>RDBMS</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">可以</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">待支持</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">预计后续很快会支持</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Kafka</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">不可以</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">支持</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Kafka</code>&nbsp;目前不支持幂等写入, 所以可能会有重复写入</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_6_有状态算子">6. 有状态算子</h2>
<div class="sectionbody">
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>了解常见的&nbsp;<code>Structured Streaming</code>&nbsp;算子, 能够完成常见的流式计算需求</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>常规算子</p>
</li>
<li>
<p>分组算子</p>
</li>
<li>
<p>输出模式</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">状态</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>无状态算子</p>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190814171907.png" alt="20190814171907" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>无状态</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>有状态算子</p>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190814194604.png" alt="20190814194604" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>有中间状态需要保存</p>
</li>
<li>
<p>增量查询</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="sidebarblock">&nbsp;</div>
</dd></dl></div>
<div class="sect2">
<h3 id="_6_1_常规算子">6.1. 常规算子</h3>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>了解&nbsp;<code>Structured Streaming</code>&nbsp;的常规数据处理方式</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>案例</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">案例</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>需求</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>给定电影评分数据集&nbsp;<code>ratings.dat</code>, 位置在&nbsp;<code>Spark/Files/Dataset/Ratings/ratings.dat</code></p>
</li>
<li>
<p>筛选评分超过三分的电影</p>
</li>
<li>
<p>以追加模式展示数据, 以流的方式来一批数据处理一批数据, 最终每一批次展示为如下效果</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">+------+-------+
|Rating|MovieID|
+------+-------+
|     5|   1193|
|     4|   3408|
+------+-------+</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>步骤</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建 SparkSession</p>
</li>
<li>
<p>读取并处理数据结构</p>
</li>
<li>
<p>处理数据</p>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>选择要展示的列</p>
</li>
<li>
<p>筛选超过三分的数据</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>追加模式展示数据到控制台</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>代码</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>读取文件的时候只能读取一个文件夹, 因为是流的操作, 流的场景是源源不断有新的文件读取</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val source = spark.readStream
  .textFile("dataset/ratings")
  .map(line =&gt; {
    val columns = line.split("::")
    (columns(0).toInt, columns(1).toInt, columns(2).toInt, columns(3).toLong)
  })
  .toDF("UserID", "MovieID", "Rating", "Timestamp")

val result = source.select('Rating, 'MovieID)
    .where('Rating &gt; 3)</code></pre>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>针对静态数据集的很多转换算子, 都可以应用在流式的&nbsp;<code>Dataset</code>&nbsp;上, 例如&nbsp;<code>Map</code>,&nbsp;<code>FlatMap</code>,&nbsp;<code>Where</code>,&nbsp;<code>Select</code>&nbsp;等</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_6_2_分组算子">6.2. 分组算子</h3>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>能够使用分组完成常见需求, 并了解如何扩展行</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>案例</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">案例</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>需求</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>给定电影数据集&nbsp;<code>movies.dat</code>, 其中三列&nbsp;<code>MovieID</code>,&nbsp;<code>Title</code>,&nbsp;<code>Genres</code></p>
</li>
<li>
<p>统计每个分类下的电影数量</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>步骤</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建&nbsp;<code>SparkSession</code></p>
</li>
<li>
<p>读取数据集, 并组织结构</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>注意&nbsp;<code>Genres</code>&nbsp;是&nbsp;<code>genres1|genres2</code>&nbsp;形式, 需要分解为数组</p>
</div>
</div>
</div>
</li>
<li>
<p>使用&nbsp;<code>explode</code>&nbsp;函数将数组形式的分类变为单值多条形式</p>
</li>
<li>
<p>分组聚合&nbsp;<code>Genres</code></p>
</li>
<li>
<p>输出结果</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>代码</p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val source = spark.readStream
  .textFile("dataset/movies")
  .map(line =&gt; {
    val columns = line.split("::")
    (columns(0).toInt, columns(1).toString, columns(2).toString.split("\\|"))
  })
  .toDF("MovieID", "Title", "Genres")

val result = source.select(explode('Genres) as 'Genres)
    .groupBy('Genres)
    .agg(count('Genres) as 'Count)

result.writeStream
  .outputMode(OutputMode.Complete())
  .format("console")
  .queryName("genres_count")
  .start()
  .awaitTermination()</code></pre>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Structured Streaming</code>&nbsp;不仅支持&nbsp;<code>groupBy</code>, 还支持&nbsp;<code>groupByKey</code></p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</div>
<p>&nbsp;</p>]]></description></item><item><title>Update(Stage4)：Spark Streaming原理_运行过程_高级特性</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/13/11666184.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 13 Oct 2019 05:29:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/13/11666184.html</guid><description><![CDATA[<h1>Spark Streaming</h1>
<div id="preamble">
<div class="sectionbody">
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>介绍</p>
</li>
<li>
<p>入门</p>
</li>
<li>
<p>原理</p>
</li>
<li>
<p>操作</p>
</li>
</ol></div>
</div>
</div>
</div>
<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="file:///E:/Study/BigData/heimaNew/stage4%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E5%86%85%E5%AD%98%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/6SparkStreaming%E5%8E%9F%E7%90%86_%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B_%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/Day10/5_SparkStreaming.adoc.html#_1_spark_streaming_介绍">1. Spark Streaming 介绍</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage4%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E5%86%85%E5%AD%98%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/6SparkStreaming%E5%8E%9F%E7%90%86_%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B_%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/Day10/5_SparkStreaming.adoc.html#_2_spark_streaming_入门">2. Spark Streaming 入门</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage4%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E5%86%85%E5%AD%98%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/6SparkStreaming%E5%8E%9F%E7%90%86_%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B_%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/Day10/5_SparkStreaming.adoc.html#_2_原理">2. 原理</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage4%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E5%86%85%E5%AD%98%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/6SparkStreaming%E5%8E%9F%E7%90%86_%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B_%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/Day10/5_SparkStreaming.adoc.html#_3_操作">3. 操作</a></li>
</ul>
</div>
</div>
<div class="sect1">
<h2 id="_1_spark_streaming_介绍">1. Spark Streaming 介绍</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>流式计算的场景</p>
</li>
<li>
<p>流式计算框架</p>
</li>
<li>
<p><code>Spark Streaming</code>&nbsp;的特点</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">新的场景</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>通过对现阶段一些常见的需求进行整理, 我们要问自己一个问题, 这些需求如何解决?</p>
</div>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">场景</th><th class="tableblock halign-left valign-top">解释</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock">商品推荐</p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190618163602.png" alt="20190618163602" width="600" /></div>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190618163731.png" alt="20190618163731" width="600" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>京东和淘宝这样的商城在购物车, 商品详情等地方都有商品推荐的模块</p>
</li>
<li>
<p>商品推荐的要求</p>
<div class="ulist">
<ul>
<li>
<p>快速的处理, 加入购物车以后就需要迅速的进行推荐</p>
</li>
<li>
<p>数据量大</p>
</li>
<li>
<p>需要使用一些推荐算法</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock">工业大数据</p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190618164233.png" alt="20190618164233" width="600" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>现在的工场中, 设备是可以联网的, 汇报自己的运行状态, 在应用层可以针对这些数据来分析运行状况和稳健程度, 展示工件完成情况, 运行情况等</p>
</li>
<li>
<p>工业大数据的需求</p>
<div class="ulist">
<ul>
<li>
<p>快速响应, 及时预测问题</p>
</li>
<li>
<p>数据是以事件的形式动态的产品和汇报</p>
</li>
<li>
<p>因为是运行状态信息, 而且一般都是几十上百台机器, 所以汇报的数据量很大</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock">监控</p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190618164654.png" alt="20190618164654" width="600" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>一般的大型集群和平台, 都需要对其进行监控</p>
</li>
<li>
<p>监控的需求</p>
<div class="ulist">
<ul>
<li>
<p>要针对各种数据库, 包括&nbsp;<code>MySQL</code>,&nbsp;<code>HBase</code>&nbsp;等进行监控</p>
</li>
<li>
<p>要针对应用进行监控, 例如&nbsp;<code>Tomcat</code>,&nbsp;<code>Nginx</code>,&nbsp;<code>Node.js</code>&nbsp;等</p>
</li>
<li>
<p>要针对硬件的一些指标进行监控, 例如&nbsp;<code>CPU</code>, 内存, 磁盘 等</p>
</li>
<li>
<p>这些工具的日志输出是非常多的, 往往一个用户的访问行为会带来几百条日志, 这些都要汇报, 所以数据量比较大</p>
</li>
<li>
<p>要从这些日志中, 聚合系统运行状况</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</td>
</tr>
</tbody>
</table>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">这样的需求, 可以通过传统的批处理来完成吗?</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</dd><dt class="hdlist1">流计算</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>批量计算</p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619190216.png" alt="20190619190216" width="800" /></div>
</div>
<div class="paragraph">
<p>数据已经存在, 一次性读取所有的数据进行批量处理</p>
</div>
</div>
</div>
</li>
<li>
<p>流计算</p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619190515.png" alt="20190619190515" width="800" /></div>
</div>
<div class="paragraph">
<p>数据源源不断的进来, 经过处理后落地</p>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">流和批的架构组合</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>流和批都是有意义的, 有自己的应用场景, 那么如何结合流和批呢? 如何在同一个系统中使用这两种不同的解决方案呢?</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">混合架构</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190618165326.png" alt="20190618165326" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>混合架构说明</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>混合架构的名字叫做&nbsp;<code>Lambda 架构</code>, 混合架构最大的特点就是将流式计算和批处理结合起来</p>
</div>
<div class="paragraph">
<p>后在进行查询的时候分别查询流系统和批系统, 最后将结果合并在一起</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190618171909.png" alt="20190618171909" width="500" /></div>
</div>
<div class="paragraph">
<p>一般情况下 Lambda 架构分三层</p>
</div>
<div class="ulist">
<ul>
<li>
<p>批处理层: 批量写入, 批量读取</p>
</li>
<li>
<p>服务层: 分为两个部分, 一部分对应批处理层, 一部分对应速度层</p>
</li>
<li>
<p>速度层: 随机读取, 随即写入, 增量计算</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>优点</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>兼顾优点, 在批处理层可以全量查询和分析, 在速度层可以查询最新的数据</p>
</li>
<li>
<p>速度很快, 在大数据系统中, 想要快速的获取结果是非常困难的, 因为高吞吐量和快速返回结果往往很难兼得, 例如&nbsp;<code>Impala</code>&nbsp;和&nbsp;<code>Hive</code>,&nbsp;<code>Hive</code>&nbsp;能进行非常大规模的数据量的处理,&nbsp;<code>Impala</code>&nbsp;能够快速的查询返回结果, 但是很少有一个系统能够兼得两点,&nbsp;<code>Lambda</code>&nbsp;使用多种融合的手段从而实现</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>缺点</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p><code>Lambda</code>&nbsp;是一个非常反人类的设计, 因为我们需要在系统中不仅维护多套数据层, 还需要维护批处理和流式处理两套框架, 这非常困难, 一套都很难搞定, 两套带来的运维问题是是指数级提升的</p>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">流式架构</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190618165455.png" alt="20190618165455" width="600" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>流式架构说明</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>流式架构常见的叫做&nbsp;<code>Kappa 结构</code>, 是&nbsp;<code>Lambda 架构</code>&nbsp;的一个变种, 其实本质上就是删掉了批处理</p>
</div>
</div>
</div>
</li>
<li>
<p>优点</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>非常简单</p>
</li>
<li>
<p>效率很高, 在存储系统的发展下, 很多存储系统已经即能快速查询又能批量查询了, 所以&nbsp;<code>Kappa 架构</code>&nbsp;在新时代还是非常够用的</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>问题</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>丧失了一些&nbsp;<code>Lambda</code>&nbsp;的优秀特点</p>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
<div class="paragraph">
<p>关于架构的问题, 很多时候往往是无解的, 在合适的地方使用合适的架构, 在项目课程中, 还会进行更细致的讨论</p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Spark Streaming</code>&nbsp;的特点</dt><dd>
<div class="sidebarblock">
<div class="content">
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">特点</th><th class="tableblock halign-left valign-top">说明</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Spark Streaming</code>&nbsp;是&nbsp;<code>Spark Core API</code>&nbsp;的扩展</p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Spark Streaming</code>&nbsp;具有类似&nbsp;<code>RDD</code>&nbsp;的&nbsp;<code>API</code>, 易于使用, 并可和现有系统共用相似代码</p>
</li>
<li>
<p>一个非常重要的特点是,&nbsp;<code>Spark Streaming</code>&nbsp;可以在流上使用基于&nbsp;<code>Spark</code>&nbsp;的机器学习和流计算, 是一个一站式的平台</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Spark Streaming</code>&nbsp;具有很好的整合性</p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Spark Streaming</code>&nbsp;可以从&nbsp;<code>Kafka</code>,&nbsp;<code>Flume</code>,&nbsp;<code>TCP</code>&nbsp;等流和队列中获取数据</p>
</li>
<li>
<p><code>Spark Streaming</code>&nbsp;可以将处理过的数据写入文件系统, 常见数据库中</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>Spark Streaming</code>&nbsp;是微批次处理模型</p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>微批次处理的方式不会有长时间运行的&nbsp;<code>Operator</code>, 所以更易于容错设计</p>
</li>
<li>
<p>微批次模型能够避免运行过慢的服务, 实行推测执行</p>
</li>
</ul>
</div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd></dl></div>
</div>
</div>
<div class="sect1">
<h2 id="_2_spark_streaming_入门">2. Spark Streaming 入门</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>环境准备</p>
</li>
<li>
<p>工程搭建</p>
</li>
<li>
<p>代码编写</p>
</li>
<li>
<p>总结</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>Netcat</code>&nbsp;的使用</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1"><code>Step 1</code>:&nbsp;<code>Socket</code>&nbsp;回顾</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190618232336.png" alt="20190618232336" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Socket</code>&nbsp;是&nbsp;<code>Java</code>&nbsp;中为了支持基于&nbsp;<code>TCP / UDP</code>&nbsp;协议的通信所提供的编程模型</p>
</li>
<li>
<p><code>Socket</code>&nbsp;分为&nbsp;<code>Socket server</code>&nbsp;和&nbsp;<code>Socket client</code></p>
<div class="openblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1"><code>Socket server</code></dt><dd>
<p>监听某个端口, 接收&nbsp;<code>Socket client</code>&nbsp;发过来的连接请求建立连接, 连接建立后可以向&nbsp;<code>Socket client</code>&nbsp;发送&nbsp;<code>TCP packet</code>&nbsp;交互 (被动)</p>
</dd><dt class="hdlist1"><code>Socket client</code></dt><dd>
<p>向某个端口发起连接, 并在连接建立后, 向&nbsp;<code>Socket server</code>&nbsp;发送&nbsp;<code>TCP packet</code>&nbsp;实现交互 (主动)</p>
</dd></dl></div>
</div>
</div>
</li>
<li>
<p><code>TCP</code>&nbsp;三次握手建立连接</p>
<div class="openblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1"><code>Step 1</code></dt><dd>
<p><code>Client</code>&nbsp;向&nbsp;<code>Server</code>&nbsp;发送&nbsp;<code>SYN(j)</code>, 进入&nbsp;<code>SYN_SEND</code>&nbsp;状态等待&nbsp;<code>Server</code>&nbsp;响应</p>
</dd><dt class="hdlist1"><code>Step 2</code></dt><dd>
<p><code>Server</code>&nbsp;收到&nbsp;<code>Client</code>&nbsp;的&nbsp;<code>SYN(j)</code>&nbsp;并发送确认包&nbsp;<code>ACK(j + 1)</code>, 同时自己也发送一个请求连接的&nbsp;<code>SYN(k)</code>&nbsp;给&nbsp;<code>Client</code>, 进入&nbsp;<code>SYN_RECV</code>&nbsp;状态等待&nbsp;<code>Client</code>&nbsp;确认</p>
</dd><dt class="hdlist1"><code>Step 3</code></dt><dd>
<p><code>Client</code>&nbsp;收到&nbsp;<code>Server</code>&nbsp;的&nbsp;<code>ACK + SYN</code>, 向&nbsp;<code>Server</code>&nbsp;发送连接确认&nbsp;<code>ACK(k + 1)</code>, 此时,&nbsp;<code>Client</code>&nbsp;和&nbsp;<code>Server</code>&nbsp;都进入&nbsp;<code>ESTABLISHED</code>&nbsp;状态, 准备数据发送</p>
</dd></dl></div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 2:</code>&nbsp;<code>Netcat</code></dt><dd>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619003144.png" alt="20190619003144" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Netcat</code>&nbsp;简写&nbsp;<code>nc</code>, 命令行中使用&nbsp;<code>nc</code>&nbsp;命令调用</p>
</li>
<li>
<p><code>Netcat</code>&nbsp;是一个非常常见的&nbsp;<code>Socket</code>&nbsp;工具, 可以使用&nbsp;<code>nc</code>&nbsp;建立&nbsp;<code>Socket server</code>&nbsp;也可以建立&nbsp;<code>Socket client</code></p>
<div class="ulist">
<ul>
<li>
<p><code>nc -l</code>&nbsp;建立&nbsp;<code>Socket server</code>,&nbsp;<code>l</code>&nbsp;是&nbsp;<code>listen</code>&nbsp;监听的意思</p>
</li>
<li>
<p><code>nc host port</code>&nbsp;建立&nbsp;<code>Socket client</code>, 并连接到某个&nbsp;<code>Socket server</code></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">创建工程</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>使用&nbsp;<code>Spark Streaming</code>&nbsp;程序和&nbsp;<code>Socket server</code>&nbsp;进行交互, 从&nbsp;<code>Server</code>&nbsp;处获取实时传输过来的字符串, 拆开单词并统计单词数量, 最后打印出来每一个小批次的单词数量</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619184222.png" alt="20190619184222" width="800" /></div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 1:</code>&nbsp;创建工程</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建&nbsp;<code>IDEA Maven</code>&nbsp;工程, 步骤省略, 参考&nbsp;<code>Spark</code>&nbsp;第一天工程建立方式</p>
</li>
<li>
<p>导入&nbsp;<code>Maven</code>&nbsp;依赖, 省略, 参考&nbsp;<code>Step 2</code></p>
</li>
<li>
<p>创建&nbsp;<code>main/scala</code>&nbsp;文件夹和&nbsp;<code>test/scala</code>&nbsp;文件夹</p>
</li>
<li>
<p>创建包&nbsp;<code>cn.itcast.streaming</code></p>
</li>
<li>
<p>创建对象&nbsp;<code>StreamingWordCount</code></p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 2:</code>&nbsp;<code>Maven</code>&nbsp;依赖</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>如果使用&nbsp;<code>Spark Streaming</code>, 需要使用如下&nbsp;<code>Spark</code>&nbsp;的依赖</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Spark Core</code>:&nbsp;<code>Spark</code>&nbsp;的核心包, 因为&nbsp;<code>Spark Streaming</code>&nbsp;要用到</p>
</li>
<li>
<p><code>Spark Streaming</code></p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 3:</code>&nbsp;编码</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-class"><span class="hljs-keyword">object <span class="hljs-title">StreamingWordCount {

  <span class="hljs-function"><span class="hljs-keyword">def <span class="hljs-title">main(args: <span class="hljs-type">Array[<span class="hljs-type">String]): <span class="hljs-type">Unit = {
    <span class="hljs-keyword">if (args.length &lt; <span class="hljs-number">2) {
      <span class="hljs-type">System.err.println(<span class="hljs-string">"Usage: NetworkWordCount &lt;hostname&gt; &lt;port&gt;")
      <span class="hljs-type">System.exit(<span class="hljs-number">1)
    }

    <span class="hljs-keyword">val sparkConf = <span class="hljs-keyword">new <span class="hljs-type">SparkConf().setAppName(<span class="hljs-string">"NetworkWordCount")
    <span class="hljs-keyword">val ssc = <span class="hljs-keyword">new <span class="hljs-type">StreamingContext(sparkConf, <span class="hljs-type">Seconds(<span class="hljs-number">1))              <span class="conum" data-value="1">

    <span class="hljs-keyword">val lines = ssc.socketTextStream(                                  <span class="conum" data-value="2">
      hostname = args(<span class="hljs-number">0),
      port = args(<span class="hljs-number">1).toInt,
      storageLevel = <span class="hljs-type">StorageLevel.<span class="hljs-type">MEMORY_AND_DISK_SER)                 <span class="conum" data-value="3">

    <span class="hljs-keyword">val words = lines.flatMap(_.split(<span class="hljs-string">" "))
    <span class="hljs-keyword">val wordCounts = words.map(x =&gt; (x, <span class="hljs-number">1)).reduceByKey(_ + _)

    wordCounts.print()                                                 <span class="conum" data-value="4">

    ssc.start()                                                        <span class="conum" data-value="5">
    ssc.awaitTermination()                                             <span class="conum" data-value="6">
  }
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>在&nbsp;<code>Spark</code>&nbsp;中, 一般使用&nbsp;<code>XXContext</code>&nbsp;来作为入口,&nbsp;<code>Streaming</code>&nbsp;也不例外, 所以创建&nbsp;<code>StreamingContext</code>&nbsp;就是创建入口</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>开启&nbsp;<code>Socket</code>&nbsp;的&nbsp;<code>Receiver</code>, 连接到某个&nbsp;<code>TCP</code>&nbsp;端口, 作为&nbsp;<code>Socket client</code>, 去获取数据</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>选择&nbsp;<code>Receiver</code>&nbsp;获取到数据后的保存方式, 此处是内存和磁盘都有, 并且序列化后保存</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>类似&nbsp;<code>RDD</code>&nbsp;中的&nbsp;<code>Action</code>, 执行最后的数据输出和收集</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>启动流和&nbsp;<code>JobGenerator</code>, 开始流式处理数据</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>阻塞主线程, 后台线程开始不断获取数据并处理</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 4:</code>&nbsp;部署和上线</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>使用 Maven 命令 package 打包</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619182630.png" alt="20190619182630" width="400" /></div>
</div>
</li>
<li>
<p>将打好的包上传到&nbsp;<code>node01</code></p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619183133.png" alt="20190619183133" width="300" /></div>
</div>
</li>
<li>
<p>在&nbsp;<code>node02</code>&nbsp;上使用&nbsp;<code>nc</code>&nbsp;开启一个&nbsp;<code>Socket server</code>, 接受&nbsp;<code>Streaming</code>&nbsp;程序的连接请求, 从而建立连接发送消息给&nbsp;<code>Streaming</code>&nbsp;程序实时处理</p>
<div class="listingblock">
<div class="content">
<pre>nc -lk 9999</pre>
</div>
</div>
</li>
<li>
<p>在&nbsp;<code>node01</code>&nbsp;执行如下命令运行程序</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">spark-submit --class cn.itcast.streaming.StreamingWordCount  --master local[6] original-streaming-0.0.1.jar node02 9999</code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 5:</code>&nbsp;总结和知识落地</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">注意点</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Spark Streaming</code>&nbsp;并不是真正的来一条数据处理一条</p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190620005146.png" alt="20190620005146" width="600" /></div>
</div>
<div class="paragraph">
<p><code>Spark Streaming</code>&nbsp;的处理机制叫做小批量, 英文叫做&nbsp;<code>mini-batch</code>, 是收集了一定时间的数据后生成&nbsp;<code>RDD</code>, 后针对&nbsp;<code>RDD</code>&nbsp;进行各种转换操作, 这个原理提现在如下两个地方</p>
</div>
<div class="ulist">
<ul>
<li>
<p>控制台中打印的结果是一个批次一个批次的, 统计单词数量也是按照一个批次一个批次的统计</p>
</li>
<li>
<p>多长时间生成一个&nbsp;<code>RDD</code>&nbsp;去统计呢? 由&nbsp;<code>new StreamingContext(sparkConf, Seconds(1))</code>&nbsp;这段代码中的第二个参数指定批次生成的时间</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p><code>Spark Streaming</code>&nbsp;中至少要有两个线程</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>在使用&nbsp;<code>spark-submit</code>&nbsp;启动程序的时候, 不能指定一个线程</p>
</div>
<div class="ulist">
<ul>
<li>
<p>主线程被阻塞了, 等待程序运行</p>
</li>
<li>
<p>需要开启后台线程获取数据</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">创建&nbsp;<code>StreamingContext</code></dt><dd>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val conf = <span class="hljs-keyword">new <span class="hljs-type">SparkConf().setAppName(appName).setMaster(master)
<span class="hljs-keyword">val ssc = <span class="hljs-keyword">new <span class="hljs-type">StreamingContext(conf, <span class="hljs-type">Seconds(<span class="hljs-number">1))</span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>StreamingContext</code>&nbsp;是&nbsp;<code>Spark Streaming</code>&nbsp;程序的入口</p>
</li>
<li>
<p>在创建&nbsp;<code>StreamingContext</code>&nbsp;的时候, 必须要指定两个参数, 一个是&nbsp;<code>SparkConf</code>, 一个是流中生成&nbsp;<code>RDD</code>&nbsp;的时间间隔</p>
</li>
<li>
<p><code>StreamingContext</code>&nbsp;提供了如下功能</p>
<div class="ulist">
<ul>
<li>
<p>创建&nbsp;<code>DStream</code>, 可以通过读取&nbsp;<code>Kafka</code>, 读取&nbsp;<code>Socket</code>&nbsp;消息, 读取本地文件等创建一个流, 并且作为整个&nbsp;<code>DAG</code>&nbsp;中的&nbsp;<code>InputDStream</code></p>
</li>
<li>
<p><code>RDD</code>&nbsp;遇到&nbsp;<code>Action</code>&nbsp;才会执行, 但是&nbsp;<code>DStream</code>&nbsp;不是,&nbsp;<code>DStream</code>&nbsp;只有在&nbsp;<code>StreamingContext.start()</code>&nbsp;后才会开始接收数据并处理数据</p>
</li>
<li>
<p>使用&nbsp;<code>StreamingContext.awaitTermination()</code>&nbsp;等待处理被终止</p>
</li>
<li>
<p>使用&nbsp;<code>StreamingContext.stop()</code>&nbsp;来手动的停止处理</p>
</li>
</ul>
</div>
</li>
<li>
<p>在使用的时候有如下注意点</p>
<div class="ulist">
<ul>
<li>
<p>同一个&nbsp;<code>Streaming</code>&nbsp;程序中, 只能有一个&nbsp;<code>StreamingContext</code></p>
</li>
<li>
<p>一旦一个&nbsp;<code>Context</code>&nbsp;已经启动 (<code>start</code>), 则不能添加新的数据源 **</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">各种算子</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190620005229.png" alt="20190620005229" width="600" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>这些算子类似&nbsp;<code>RDD</code>, 也会生成新的&nbsp;<code>DStream</code></p>
</li>
<li>
<p>这些算子操作最终会落到每一个&nbsp;<code>DStream</code>&nbsp;生成的&nbsp;<code>RDD</code>&nbsp;中</p>
</li>
</ul>
</div>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">算子</th><th class="tableblock halign-left valign-top">释义</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>flatMap</code></p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">lines.flatMap(_.split(<span class="hljs-string">" "))</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>将一个数据一对多的转换为另外的形式, 规则通过传入函数指定</p>
</div>
</div>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>map</code></p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">words.map(x =&gt; (x, <span class="hljs-number">1))</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>一对一的转换数据</p>
</div>
</div>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>reduceByKey</code></p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">words.reduceByKey(_ + _)</code></pre>
</div>
</div>
<div class="paragraph">
<p>这个算子需要特别注意, 这个聚合并不是针对于整个流, 而是针对于某个批次的数据</p>
</div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
<div class="sect1">
<h2 id="_2_原理">2. 原理</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>总章</p>
</li>
<li>
<p>静态&nbsp;<code>DAG</code></p>
</li>
<li>
<p>动态切分</p>
</li>
<li>
<p>数据流入</p>
</li>
<li>
<p>容错机制</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">总章</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1"><code>Spark Streaming</code>&nbsp;的特点</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>Spark Streaming</code>&nbsp;会源源不断的处理数据, 称之为流计算</p>
</li>
<li>
<p><code>Spark Streaming</code>&nbsp;并不是实时流, 而是按照时间切分小批量, 一个一个的小批量处理</p>
</li>
<li>
<p><code>Spark Streaming</code>&nbsp;是流计算, 所以可以理解为数据会源源不断的来, 需要长时间运行</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Spark Streaming</code>&nbsp;是按照时间切分小批量</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>如何小批量?</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p><code>Spark Streaming</code>&nbsp;中的编程模型叫做&nbsp;<code>DStream</code>, 所有的&nbsp;<code>API</code>&nbsp;都从&nbsp;<code>DStream</code>&nbsp;开始, 其作用就类似于&nbsp;<code>RDD</code>&nbsp;之于&nbsp;<code>Spark Core</code></p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619201930.png" alt="20190619201930" width="800" /></div>
</div>
<div class="paragraph">
<p>可以理解为&nbsp;<code>DStream</code>&nbsp;是一个管道, 数据源源不断的从这个管道进去, 被处理, 再出去</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619202422.png" alt="20190619202422" width="800" /></div>
</div>
<div class="paragraph">
<p>但是需要注意的是,&nbsp;<code>DStream</code>&nbsp;并不是严格意义上的实时流, 事实上,&nbsp;<code>DStream</code>&nbsp;并不处理数据, 而是处理&nbsp;<code>RDD</code></p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619202628.png" alt="20190619202628" width="800" /></div>
</div>
<div class="paragraph">
<p>以上, 可以整理出如下道理</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Spark Streaming</code>&nbsp;是小批量处理数据, 并不是实时流</p>
</li>
<li>
<p><code>Spark Streaming</code>&nbsp;对数据的处理是按照时间切分为一个又一个小的&nbsp;<code>RDD</code>, 然后针对&nbsp;<code>RDD</code>&nbsp;进行处理</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>所以针对以上的解读, 可能会产生一种疑惑</p>
</div>
<div class="ulist">
<ul>
<li>
<p>如何切分&nbsp;<code>RDD</code>?</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>如何处理数据?</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>如下代码</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val lines: <span class="hljs-type">DStream[<span class="hljs-type">String] = ssc.socketTextStream(
  hostname = args(<span class="hljs-number">0),
  port = args(<span class="hljs-number">1).toInt,
  storageLevel = <span class="hljs-type">StorageLevel.<span class="hljs-type">MEMORY_AND_DISK_SER)

<span class="hljs-keyword">val words: <span class="hljs-type">DStream[<span class="hljs-type">String] = lines
  .flatMap(_.split(<span class="hljs-string">" "))
  .map(x =&gt; (x, <span class="hljs-number">1))
  .reduceByKey(_ + _)</span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>可以看到</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>RDD</code>&nbsp;中针对数据的处理是使用算子, 在&nbsp;<code>DStream</code>&nbsp;中针对数据的操作也是算子</p>
</li>
<li>
<p><code>DStream</code>&nbsp;的算子似乎和&nbsp;<code>RDD</code>&nbsp;没什么区别</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>有一个疑惑</p>
</div>
<div class="ulist">
<ul>
<li>
<p>难道&nbsp;<code>DStream</code>&nbsp;会把算子的操作交给&nbsp;<code>RDD</code>&nbsp;去处理? 如何交?</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Spark Streaming</code>&nbsp;是流计算, 流计算的数据是无限的</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>什么系统可以产生无限的数据?</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619190515.png" alt="20190619190515" width="800" /></div>
</div>
<div class="paragraph">
<p>无限的数据一般指的是数据不断的产生, 比如说运行中的系统, 无法判定什么时候公司会倒闭, 所以也无法断定数据什么时候会不再产生数据</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">那就会产生一个问题</dt><dd>
<p>如何不简单的读取数据, 如何应对数据量时大时小?</p>
</dd></dl></div>
<div class="paragraph">
<p>如何数据是无限的, 意味着可能要一直运行下去</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">那就会又产生一个问题</dt><dd>
<p><code>Spark Streaming</code>&nbsp;不会出错吗? 数据出错了怎么办?</p>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>总结下来, 有四个问题</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>DStream</code>&nbsp;如何对应&nbsp;<code>RDD</code>?</p>
</li>
<li>
<p>如何切分&nbsp;<code>RDD</code>?</p>
</li>
<li>
<p>如何读取数据?</p>
</li>
<li>
<p>如何容错?</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1"><code>DAG</code>&nbsp;的定义</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1"><code>RDD</code>&nbsp;和&nbsp;<code>DStream</code>&nbsp;的&nbsp;<code>DAG</code></dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>如果是&nbsp;<code>RDD</code>&nbsp;的&nbsp;<code>WordCount</code>, 代码大致如下</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val textRDD = sc.textFile(...)
<span class="hljs-keyword">val splitRDD = textRDD.flatMap(_.split(<span class="hljs-string">" "))
<span class="hljs-keyword">val tupleRDD = splitRDD.map((_, <span class="hljs-number">1))
<span class="hljs-keyword">val reduceRDD = tupleRDD.reduceByKey(_ + _)</span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>用图形表示如下</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619205906.png" alt="20190619205906" width="800" /></div>
</div>
<div class="paragraph">
<p>同样,&nbsp;<code>DStream</code>&nbsp;的代码大致如下</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val lines: <span class="hljs-type">DStream[<span class="hljs-type">String] = ssc.socketTextStream(...)
<span class="hljs-keyword">val words: <span class="hljs-type">DStream[<span class="hljs-type">String] = lines.flatMap(_.split(<span class="hljs-string">" "))
<span class="hljs-keyword">val wordCounts: <span class="hljs-type">DStream[(<span class="hljs-type">String, <span class="hljs-type">Int)] = words.map(x =&gt; (x, <span class="hljs-number">1)).reduceByKey(_ + _)</span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>同理,&nbsp;<code>DStream</code>&nbsp;也可以形成&nbsp;<code>DAG</code>&nbsp;如下</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619210315.png" alt="20190619210315" width="800" /></div>
</div>
<div class="paragraph">
<p>看起来&nbsp;<code>DStream</code>&nbsp;和&nbsp;<code>RDD</code>&nbsp;好像哟, 确实如此</p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>RDD</code>&nbsp;和&nbsp;<code>DStream</code>&nbsp;的区别</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619212508.png" alt="20190619212508" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>DStream</code>&nbsp;的数据是不断进入的,&nbsp;<code>RDD</code>&nbsp;是针对一个数据的操作</p>
</li>
<li>
<p>像&nbsp;<code>RDD</code>&nbsp;一样,&nbsp;<code>DStream</code>&nbsp;也有不同的子类, 通过不同的算子生成</p>
</li>
<li>
<p>一个&nbsp;<code>DStream</code>&nbsp;代表一个数据集, 其中包含了针对于上一个数据的操作</p>
</li>
<li>
<p><code>DStream</code>&nbsp;根据时间切片, 划分为多个&nbsp;<code>RDD</code>, 针对&nbsp;<code>DStream</code>&nbsp;的计算函数, 会作用于每一个&nbsp;<code>DStream</code>&nbsp;中的&nbsp;<code>RDD</code></p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>DStream</code>&nbsp;如何形式&nbsp;<code>DAG</code></dt><dd>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619212508.png" alt="20190619212508" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>每个&nbsp;<code>DStream</code>&nbsp;都有一个关联的&nbsp;<code>DStreamGraph</code>&nbsp;对象</p>
</li>
<li>
<p><code>DStreamGraph</code>&nbsp;负责表示&nbsp;<code>DStream</code>&nbsp;之间的的依赖关系和运行步骤</p>
</li>
<li>
<p><code>DStreamGraph</code>&nbsp;中会单独记录&nbsp;<code>InputDStream</code>&nbsp;和&nbsp;<code>OutputDStream</code></p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">切分流, 生成小批量</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">静态和动态</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>根据前面的学习, 可以总结一下规律</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>DStream</code>&nbsp;对应&nbsp;<code>RDD</code></p>
</li>
<li>
<p><code>DStreamGraph</code>&nbsp;表示&nbsp;<code>DStream</code>&nbsp;之间的依赖关系和运行流程, 相当于&nbsp;<code>RDD</code>&nbsp;通过&nbsp;<code>DAGScheduler</code>&nbsp;所生成的&nbsp;<code>RDD DAG</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>但是回顾前面的内容,&nbsp;<code>RDD</code>&nbsp;的运行分为逻辑计划和物理计划</p>
</div>
<div class="ulist">
<ul>
<li>
<p>逻辑计划就是&nbsp;<code>RDD</code>&nbsp;之间依赖关系所构成的一张有向无环图</p>
</li>
<li>
<p>后根据这张&nbsp;<code>DAG</code>&nbsp;生成对应的&nbsp;<code>TaskSet</code>&nbsp;调度到集群中运行, 如下</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619215422.png" alt="20190619215422" width="600" /></div>
</div>
<div class="paragraph">
<p>但是在&nbsp;<code>DStream</code>&nbsp;中则不能这么简单的划分, 因为&nbsp;<code>DStream</code>&nbsp;中有一个非常重要的逻辑, 需要按照时间片划分小批量</p>
</div>
<div class="ulist">
<ul>
<li>
<p>在&nbsp;<code>Streaming</code>&nbsp;中,&nbsp;<code>DStream</code>&nbsp;类似&nbsp;<code>RDD</code>, 生成的是静态的数据处理过程, 例如一个&nbsp;<code>DStream</code>&nbsp;中的数据经过&nbsp;<code>map</code>&nbsp;转为其它模样</p>
</li>
<li>
<p>在&nbsp;<code>Streaming</code>&nbsp;中,&nbsp;<code>DStreamGraph</code>&nbsp;类似&nbsp;<code>DAG</code>, 保存了这种数据处理的过程</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>上述两点, 其实描述的是静态的一张&nbsp;<code>DAG</code>, 数据处理过程, 但是&nbsp;<code>Streaming</code>&nbsp;是动态的, 数据是源源不断的来的</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619202422.png" alt="20190619202422" width="800" /></div>
</div>
<div class="paragraph">
<p>所以, 在&nbsp;<code>DStream</code>&nbsp;中, 静态和动态是两个概念, 有不同的流程</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619212508.png" alt="20190619212508" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>DStreamGraph</code>&nbsp;将&nbsp;<code>DStream</code>&nbsp;联合起来, 生成&nbsp;<code>DStream</code>&nbsp;之间的&nbsp;<code>DAG</code>, 这些&nbsp;<code>DStream</code>&nbsp;之间的关系是相互依赖的关系, 例如一个&nbsp;<code>DStream</code>&nbsp;经过&nbsp;<code>map</code>&nbsp;转为另外一个&nbsp;<code>DStream</code></p>
</li>
<li>
<p>但是把视角移动到&nbsp;<code>DStream</code>&nbsp;中来看,&nbsp;<code>DStream</code>&nbsp;代表了源源不断的&nbsp;<code>RDD</code>&nbsp;的生成和处理, 按照时间切片, 所以一个&nbsp;<code>DStream DAG</code>&nbsp;又对应了随着时间的推进所产生的无限个&nbsp;<code>RDD DAG</code></p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">动态生成&nbsp;<code>RDD DAG</code>&nbsp;的过程</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p><code>RDD DAG</code>&nbsp;的生成是按照时间来切片的,&nbsp;<code>Streaming</code>&nbsp;会维护一个&nbsp;<code>Timer</code>, 固定的时间到达后通过如下五个步骤生成一个&nbsp;<code>RDD DAG</code>&nbsp;后调度执行</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>通知&nbsp;<code>Receiver</code>&nbsp;将收到的数据暂存, 并汇报存储的元信息, 例如存在哪, 存了什么</p>
</li>
<li>
<p>通过&nbsp;<code>DStreamGraph</code>&nbsp;复制出一套新的&nbsp;<code>RDD DAG</code></p>
</li>
<li>
<p>将数据暂存的元信息和&nbsp;<code>RDD DAG</code>&nbsp;一同交由&nbsp;<code>JobScheduler</code>&nbsp;去调度执行</p>
</li>
<li>
<p>提交结束后, 对系统当前的状态&nbsp;<code>Checkpoint</code></p>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">数据的产生和导入</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1"><code>Receiver</code></dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>在&nbsp;<code>Spark Streaming</code>&nbsp;中一个非常大的挑战是, 很多外部的队列和存储系统都是分块的,&nbsp;<code>RDD</code>&nbsp;是分区的, 在读取外部数据源的时候, 会用不同的分区对照外部系统的分片, 例如</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/f738dbe3df690bc0ba8f580a3e2d1112.png" alt="f738dbe3df690bc0ba8f580a3e2d1112" width="800" /></div>
</div>
<div class="paragraph">
<p>不仅&nbsp;<code>RDD</code>,&nbsp;<code>DStream</code>&nbsp;中也面临这种挑战</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619223634.png" alt="20190619223634" width="800" /></div>
</div>
<div class="paragraph">
<p>那么此处就有一个小问题</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>DStream</code>&nbsp;中是&nbsp;<code>RDD</code>&nbsp;流, 只是&nbsp;<code>RDD</code>&nbsp;的分区对应了&nbsp;<code>Kafka</code>&nbsp;的分区就可以了吗?</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>答案是不行, 因为需要一套单独的机制来保证并行的读取外部数据源, 这套机制叫做&nbsp;<code>Receiver</code></p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Receiver</code>&nbsp;的结构</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619224138.png" alt="20190619224138" width="800" /></div>
</div>
<div class="paragraph">
<p>为了保证并行获取数据, 对应每一个外部数据源的分区, 所以&nbsp;<code>Receiver</code>&nbsp;也要是分布式的, 主要分为三个部分</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Receiver</code>&nbsp;是一个对象, 是可以有用户自定义的获取逻辑对象, 表示了如何获取数据</p>
</li>
<li>
<p><code>Receiver Tracker</code>&nbsp;是&nbsp;<code>Receiver</code>&nbsp;的协调和调度者, 其运行在&nbsp;<code>Driver</code>&nbsp;上</p>
</li>
<li>
<p><code>Receiver Supervisor</code>&nbsp;被&nbsp;<code>Receiver Tracker</code>&nbsp;调度到不同的几点上分布式运行, 其会拿到用户自定义的&nbsp;<code>Receiver</code>&nbsp;对象, 使用这个对象来获取外部数据</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Receiver</code>&nbsp;的执行过程</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619224025.png" alt="20190619224025" width="800" /></div>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>在&nbsp;<code>Spark Streaming</code>&nbsp;程序开启时候,&nbsp;<code>Receiver Tracker</code>&nbsp;使用&nbsp;<code>JobScheduler</code>&nbsp;分发&nbsp;<code>Job</code>&nbsp;到不同的节点, 每个&nbsp;<code>Job</code>&nbsp;包含一个&nbsp;<code>Task</code>&nbsp;, 这个&nbsp;<code>Task</code>&nbsp;就是&nbsp;<code>Receiver Supervisor</code>, 这个部分的源码还挺精彩的, 其实是复用了通用的调度逻辑</p>
</li>
<li>
<p><code>ReceiverSupervisor</code>&nbsp;启动后运行&nbsp;<code>Receiver</code>&nbsp;实例</p>
</li>
<li>
<p><code>Receiver</code>&nbsp;启动后, 就将持续不断地接收外界数据, 并持续交给&nbsp;<code>ReceiverSupervisor</code>&nbsp;进行数据存储</p>
</li>
<li>
<p><code>ReceiverSupervisor</code>&nbsp;持续不断地接收到&nbsp;<code>Receiver</code>&nbsp;转来的数据, 并通过&nbsp;<code>BlockManager</code>&nbsp;来存储数据</p>
</li>
<li>
<p>获取的数据存储完成后发送元数据给&nbsp;<code>Driver</code>&nbsp;端的&nbsp;<code>ReceiverTracker</code>, 包含数据块的&nbsp;<code>id</code>, 位置, 数量, 大小 等信息</p>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">容错</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>因为要非常长时间的运行, 对于任何一个流计算系统来说, 容错都是非常致命也非常重要的一环, 在&nbsp;<code>Spark Streaming</code>&nbsp;中, 大致提供了如下的容错手段</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">热备</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>还记得这行代码吗</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619225306.png" alt="20190619225306" width="600" /></div>
</div>
<div class="paragraph">
<p>这行代码中的&nbsp;<code>StorageLevel.MEMORY_AND_DISK_SER</code>&nbsp;的作用是什么? 其实就是热备份</p>
</div>
<div class="ulist">
<ul>
<li>
<p>当 Receiver 获取到数据要存储的时候, 是交给 BlockManager 存储的</p>
</li>
<li>
<p>如果设置了&nbsp;<code>StorageLevel.MEMORY_AND_DISK_SER</code>, 则意味着&nbsp;<code>BlockManager</code>&nbsp;不仅会在本机存储, 也会发往其它的主机进行存储, 本质就是冗余备份</p>
</li>
<li>
<p>如果某一个计算失败了, 通过冗余的备份, 再次进行计算即可</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190619225830.png" alt="20190619225830" width="800" /></div>
</div>
<div class="paragraph">
<p>这是默认的容错手段</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">冷备</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>冷备在&nbsp;<code>Spark Streaming</code>&nbsp;中的手段叫做&nbsp;<code>WAL</code>&nbsp;(预写日志)</p>
</div>
<div class="ulist">
<ul>
<li>
<p>当&nbsp;<code>Receiver</code>&nbsp;获取到数据后, 会交给&nbsp;<code>BlockManager</code>&nbsp;存储</p>
</li>
<li>
<p>在存储之前先写到&nbsp;<code>WAL</code>&nbsp;中,&nbsp;<code>WAL</code>&nbsp;中保存了&nbsp;<code>Redo Log</code>, 其实就是记录了数据怎么产生的, 以便于恢复的时候通过&nbsp;<code>Log</code>恢复</p>
</li>
<li>
<p>当出错的时候, 通过&nbsp;<code>Redo Log</code>&nbsp;去重放数据</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">重放</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>有一些上游的外部系统是支持重放的, 比如说&nbsp;<code>Kafka</code></p>
</li>
<li>
<p><code>Kafka</code>&nbsp;可以根据&nbsp;<code>Offset</code>&nbsp;来获取数据</p>
</li>
<li>
<p>当&nbsp;<code>SparkStreaming</code>&nbsp;处理过程中出错了, 只需要通过&nbsp;<code>Kafka</code>&nbsp;再次读取即可</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
<div class="sect1">
<h2 id="_3_操作">3. 操作</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="paragraph">
<p>这一小节主要目的是为了了解&nbsp;<code>Spark Streaming</code>&nbsp;一些特别特殊和重要的操作, 一些基本操作基本类似&nbsp;<code>RDD</code></p>
</div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>updateStateByKey</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">需求: 统计整个流中, 所有出现的单词数量, 而不是一个批中的数量</td>
</tr>
</tbody>
</table>
</div>
<div class="dlist"><dl><dt class="hdlist1">状态</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>统计总数</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>入门案例中, 只能统计某个时间段内的单词数量, 因为&nbsp;<code>reduceByKey</code>&nbsp;只能作用于某一个&nbsp;<code>RDD</code>, 不能作用于整个流</p>
</div>
<div class="paragraph">
<p>如果想要求单词总数该怎么办?</p>
</div>
</div>
</div>
</li>
<li>
<p>状态</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>可以使用状态来记录中间结果, 从而每次来一批数据, 计算后和中间状态求和, 于是就完成了总数的统计</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190620014145.png" alt="20190620014145" width="800" /></div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">实现</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>使用&nbsp;<code>updateStateByKey</code>&nbsp;可以做到这件事</p>
</li>
<li>
<p><code>updateStateByKey</code>&nbsp;会将中间状态存入&nbsp;<code>CheckPoint</code>&nbsp;中</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val sparkConf = <span class="hljs-keyword">new <span class="hljs-type">SparkConf().setAppName(<span class="hljs-string">"NetworkWordCount").setMaster(<span class="hljs-string">"local[6]")
<span class="hljs-keyword">val sc = <span class="hljs-keyword">new <span class="hljs-type">SparkContext(sparkConf)
sc.setLogLevel(<span class="hljs-string">"ERROR")
<span class="hljs-keyword">val ssc = <span class="hljs-keyword">new <span class="hljs-type">StreamingContext(sc, <span class="hljs-type">Seconds(<span class="hljs-number">1))

<span class="hljs-keyword">val lines: <span class="hljs-type">DStream[<span class="hljs-type">String] = ssc.socketTextStream(
  hostname = <span class="hljs-string">"localhost",
  port = <span class="hljs-string">"9999".toInt,
  storageLevel = <span class="hljs-type">StorageLevel.<span class="hljs-type">MEMORY_AND_DISK_SER)

<span class="hljs-keyword">val words = lines.flatMap(_.split(<span class="hljs-string">" ")).map(x =&gt; (x, <span class="hljs-number">1))

<span class="hljs-comment">// 使用 updateStateByKey 必须设置 Checkpoint 目录
ssc.checkpoint(<span class="hljs-string">"checkpoint")

<span class="hljs-comment">// updateStateByKey 的函数
<span class="hljs-function"><span class="hljs-keyword">def <span class="hljs-title">updateFunc(newValue: <span class="hljs-type">Seq[<span class="hljs-type">Int], runningValue: <span class="hljs-type">Option[<span class="hljs-type">Int]) = {
  <span class="hljs-comment">// newValue 之所以是一个 Seq, 是因为它是某一个 Batch 的某个 Key 的全部 Value
  <span class="hljs-keyword">val currentBatchSum = newValue.sum
  <span class="hljs-keyword">val state = runningValue.getOrElse(<span class="hljs-number">0)
  <span class="hljs-comment">// 返回的这个 Some(count) 会再次进入 Checkpoint 中当作状态存储
  <span class="hljs-type">Some(currentBatchSum + state)
}

<span class="hljs-comment">// 调用
<span class="hljs-keyword">val wordCounts = words.updateStateByKey[<span class="hljs-type">Int](updateFunc)

wordCounts.print()

ssc.start()
ssc.awaitTermination()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1"><code>window</code>&nbsp;操作</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">需求: 计算过&nbsp;<code>30s</code>&nbsp;的单词总数, 每&nbsp;<code>10s</code>&nbsp;更新一次</td>
</tr>
</tbody>
</table>
</div>
<div class="dlist"><dl><dt class="hdlist1">实现</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>使用&nbsp;<code>window</code>&nbsp;即可实现按照窗口组织 RDD</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val sparkConf = <span class="hljs-keyword">new <span class="hljs-type">SparkConf().setAppName(<span class="hljs-string">"NetworkWordCount").setMaster(<span class="hljs-string">"local[6]")
<span class="hljs-keyword">val sc = <span class="hljs-keyword">new <span class="hljs-type">SparkContext(sparkConf)
sc.setLogLevel(<span class="hljs-string">"ERROR")
<span class="hljs-keyword">val ssc = <span class="hljs-keyword">new <span class="hljs-type">StreamingContext(sc, <span class="hljs-type">Seconds(<span class="hljs-number">1))

<span class="hljs-keyword">val lines: <span class="hljs-type">DStream[<span class="hljs-type">String] = ssc.socketTextStream(
  hostname = <span class="hljs-string">"localhost",
  port = <span class="hljs-number">9999,
  storageLevel = <span class="hljs-type">StorageLevel.<span class="hljs-type">MEMORY_AND_DISK_SER)

<span class="hljs-keyword">val words = lines.flatMap(_.split(<span class="hljs-string">" ")).map(x =&gt; (x, <span class="hljs-number">1))

<span class="hljs-comment">// 通过 window 操作, 会将流分为多个窗口
<span class="hljs-keyword">val wordsWindow = words.window(<span class="hljs-type">Seconds(<span class="hljs-number">30), <span class="hljs-type">Seconds(<span class="hljs-number">10))
<span class="hljs-comment">// 此时是针对于窗口求聚合
<span class="hljs-keyword">val wordCounts = wordsWindow.reduceByKey((newValue, runningValue) =&gt; newValue + runningValue)

wordCounts.print()

ssc.start()
ssc.awaitTermination()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>既然&nbsp;<code>window</code>&nbsp;操作经常配合&nbsp;<code>reduce</code>&nbsp;这种聚合, 所以&nbsp;<code>Spark Streaming</code>&nbsp;提供了较为方便的方法</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val sparkConf = <span class="hljs-keyword">new <span class="hljs-type">SparkConf().setAppName(<span class="hljs-string">"NetworkWordCount").setMaster(<span class="hljs-string">"local[6]")
<span class="hljs-keyword">val sc = <span class="hljs-keyword">new <span class="hljs-type">SparkContext(sparkConf)
sc.setLogLevel(<span class="hljs-string">"ERROR")
<span class="hljs-keyword">val ssc = <span class="hljs-keyword">new <span class="hljs-type">StreamingContext(sc, <span class="hljs-type">Seconds(<span class="hljs-number">1))

<span class="hljs-keyword">val lines: <span class="hljs-type">DStream[<span class="hljs-type">String] = ssc.socketTextStream(
  hostname = <span class="hljs-string">"localhost",
  port = <span class="hljs-number">9999,
  storageLevel = <span class="hljs-type">StorageLevel.<span class="hljs-type">MEMORY_AND_DISK_SER)

<span class="hljs-keyword">val words = lines.flatMap(_.split(<span class="hljs-string">" ")).map(x =&gt; (x, <span class="hljs-number">1))

<span class="hljs-comment">// 开启窗口并自动进行 reduceByKey 的聚合
<span class="hljs-keyword">val wordCounts = words.reduceByKeyAndWindow(
  reduceFunc = (n, r) =&gt; n + r,
  windowDuration = <span class="hljs-type">Seconds(<span class="hljs-number">30),
  slideDuration = <span class="hljs-type">Seconds(<span class="hljs-number">10))

wordCounts.print()

ssc.start()
ssc.awaitTermination()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">窗口时间</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190620021454.png" alt="20190620021454" width="600" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>在&nbsp;<code>window</code>&nbsp;函数中, 接收两个参数</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>windowDuration</code>&nbsp;窗口长度,&nbsp;<code>window</code>&nbsp;函数会将多个&nbsp;<code>DStream</code>&nbsp;中的&nbsp;<code>RDD</code>&nbsp;按照时间合并为一个, 那么窗口长度配置的就是将多长时间内的&nbsp;<code>RDD</code>&nbsp;合并为一个</p>
</li>
<li>
<p><code>slideDuration</code>&nbsp;滑动间隔, 比较好理解的情况是直接按照某个时间来均匀的划分为多个&nbsp;<code>window</code>, 但是往往需求可能是统计最近&nbsp;<code>xx分</code>&nbsp;内的所有数据, 一秒刷新一次, 那么就需要设置滑动窗口的时间间隔了, 每隔多久生成一个&nbsp;<code>window</code></p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>滑动时间的问题</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>如果&nbsp;<code>windowDuration &gt; slideDuration</code>, 则在每一个不同的窗口中, 可能计算了重复的数据</p>
</li>
<li>
<p>如果&nbsp;<code>windowDuration &lt; slideDuration</code>, 则在每一个不同的窗口之间, 有一些数据为能计算进去</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>但是其实无论谁比谁大, 都不能算错, 例如, 我的需求有可能就是统计一小时内的数据, 一天刷新两次</p>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
</div>
</div>]]></description></item><item><title>Update(Stage4)：sparksql：第5节 SparkSQL_出租车利用率分析案例</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/09/11644741.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 09 Oct 2019 14:08:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/09/11644741.html</guid><description><![CDATA[<div id="header">
<div id="toc" class="toc2">
<p>目录：</p>
<p>1. 业务<br />2. 流程分析<br />3. 数据读取<br />5. 数据清洗<br />6. 行政区信息<br />　　6.1. 需求介绍<br />　　6.2. 工具介绍<br />　　6.3. 具体实现<br />7. 会话统计</p>
<p>&nbsp;</p>
<p>导读</p>




</div>




</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>本项目是 SparkSQL 阶段的练习项目, 主要目的是夯实同学们对于 SparkSQL 的理解和使用</p>




</div>
<div class="dlist"><dl><dt class="hdlist1">数据集</dt><dd>
<div class="paragraph">
<p>2013年纽约市出租车乘车记录</p>




</div>




</dd><dt class="hdlist1">需求</dt><dd>
<div class="paragraph">
<p>统计出租车利用率, 到某个目的地后, 出租车等待下一个客人的间隔</p>




</div>




</dd></dl></div>




</div>




</div>




</div>




</div>
<div class="sect1">
<h2 id="_1_业务">1. 业务</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>数据集介绍</p>




</li>
<li>
<p>业务场景介绍</p>




</li>
<li>
<p>和其它业务的关联</p>




</li>
<li>
<p>通过项目能学到什么</p>




</li>




</ol></div>




</div>




</div>
<div class="dlist"><dl><dt class="hdlist1">数据集结构</dt><dd>
<div class="sidebarblock">
<div class="content">
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">字段</th><th class="tableblock halign-left valign-top">示例</th><th class="tableblock halign-left valign-top">示意</th></tr>




</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>hack_license</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>BA96DE419E711691B9445D6A6307C170</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">执照号, 可以唯一标识一辆出租车</p>




</td>




</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>pickup_datetime</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>2013-01-01 15:11:48</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">上车时间</p>




</td>




</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>dropoff_datetime</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>2013-01-01 15:18:10</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">下车时间</p>




</td>




</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>pickup_longitude</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>-73.978165</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">上车点</p>




</td>




</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>pickup_latitude</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>40.757977</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">上车点</p>




</td>




</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>dropoff_longitude</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>-73.989838</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">下车点</p>




</td>




</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>dropoff_latitude</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>40.751171</code></p>




</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">下车点</p>




</td>




</tr>




</tbody>




</table>
<div class="paragraph">
<p>其中有三个点需要注意</p>




</div>
<div class="ulist">
<ul>
<li>
<p><code>hack_license</code>&nbsp;是出租车执照, 可以唯一标识一辆出租车</p>




</li>
<li>
<p><code>pickup_datetime</code>&nbsp;和&nbsp;<code>dropoff_datetime</code>&nbsp;分别是上车时间和下车时间, 通过这个时间, 可以获知行车时间</p>




</li>
<li>
<p><code>pickup_longitude</code>&nbsp;和&nbsp;<code>dropoff_longitude</code>&nbsp;是经度, 经度所代表的是横轴, 也就是 X 轴</p>




</li>
<li>
<p><code>pickup_latitude</code>&nbsp;和&nbsp;<code>dropoff_latitude</code>&nbsp;是纬度, 纬度所代表的是纵轴, 也就是 Y 轴</p>




</li>




</ul>




</div>




</div>




</div>




</dd><dt class="hdlist1">业务场景</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>在网约车出现之前, 出行很大一部分要靠出租车和公共交通, 所以经常会见到一些情况, 比如说从东直门打车, 告诉师傅要去昌平, 师傅可能拒载. 这种情况所凸显的是一个出租车调度的难题, 所以需要先通过数据来看到问题, 后解决问题.</p>




</div>
<div class="paragraph">
<p>所以要统计出租车利用率, 也就是有乘客乘坐的时间, 和无乘客空跑的时间比例. 这是一个理解出租车的重要指标, 影响利用率的一个因素就是目的地, 比如说, 去昌平, 可能出租车师傅不确定自己是否要空放回来, 而去国贸, 下车几分钟内, 一定能有新的顾客上车.</p>




</div>
<div class="paragraph">
<p>而统计利用率的时候, 需要用到时间数据和空间数据来进行计算, 对于时间计算来说, SparkSQL 提供了很多工具和函数可以使用, 而空间计算仍然是一个比较专业的场景, 需要使用到第三方库.</p>




</div>
<div class="paragraph">
<p>我们的需求是, 在上述的数据集中, 根据时间算出等待时间, 根据地点落地到某个区, 算出某个区的平均等待时间, 也就是这个下车地点对于出租车利用率的影响.</p>




</div>




</div>




</div>




</dd><dt class="hdlist1">技术点和其它技术的关系</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>数据清洗</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>数据清洗在几乎所有类型的项目中都会遇到, 处理数据的类型, 处理空值等问题</p>




</div>




</div>




</div>




</li>
<li>
<p>JSON 解析</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p><code>JSON</code>&nbsp;解析在大部分业务系统的数据分析中都会用到, 如何读取 JSON 数据, 如何把 JSON 数据变为可以使用的对象数据</p>




</div>




</div>




</div>




</li>
<li>
<p>地理位置信息处理</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>地理位置信息的处理是一个比较专业的场景, 在一些租车网站, 或者像滴滴,&nbsp;<code>Uber</code>&nbsp;之类的出行服务上, 也经常会处理地理位置信息</p>




</div>




</div>




</div>




</li>
<li>
<p>探索性数据分析</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>从拿到一个数据集, 明确需求以后, 如何逐步了解数据集, 如何从数据集中探索对应的内容等, 是一个数据工程师的基本素质</p>




</div>




</div>




</div>




</li>
<li>
<p>会话分析</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>会话分析用于识别同一个用户的多个操作之间的关联, 是分析系统常见的分析模式, 在电商和搜索引擎中非常常见</p>




</div>




</div>




</div>




</li>




</ol></div>




</div>




</div>




</dd><dt class="hdlist1">在这个小节中希望大家掌握的知识</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>SparkSQL</code>&nbsp;中对于类型的处理</p>




</li>
<li>
<p><code>Scala</code>&nbsp;中常见的&nbsp;<code>JSON</code>&nbsp;解析工具</p>




</li>
<li>
<p><code>GeoJson</code>&nbsp;的使用</p>




</li>




</ol></div>




</div>




</div>




</dd></dl></div>




</div>




</div>
<div class="sect1">
<h2 id="_2_流程分析">2. 流程分析</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>分析的步骤和角度</p>




</li>
<li>
<p>流程</p>




</li>




</ol></div>




</div>




</div>
<div class="dlist"><dl><dt class="hdlist1">分析的视角</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>理解数据集</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>首先要理解数据集, 要回答自己一些问题</p>




</div>
<div class="ulist">
<ul>
<li>
<p>这个数据集是否以行作为单位, 是否是&nbsp;<code>DataFrame</code>&nbsp;可以处理的, 大部分情况下都是</p>




</li>
<li>
<p>这个数据集每行记录所代表的实体对象是什么, 例如: 出租车的载客记录</p>




</li>
<li>
<p>表达这个实体对象的最核心字段是什么, 例如: 上下车地点和时间, 唯一标识一辆车的&nbsp;<code>License</code></p>




</li>




</ul>




</div>




</div>




</div>




</li>
<li>
<p>理解需求和结果集</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>小学的时候, 有一次考试考的比较差, 老师在帮我分析的时候, 告诉我, 你下次要读懂题意, 再去大题, 这样不会浪费时间, 于是这个信念贯穿了我这些年的工作.</p>




</li>
<li>
<p>按照我对开发工作的理解, 在一开始的阶段进行一个大概的思考和面向对象的设计, 并不会浪费时间, 即使这些设计可能会占用一些时间.</p>




</li>
<li>
<p>对代码的追求也不会浪费时间, 把代码写好, 会减少阅读成本, 沟通成本.</p>




</li>
<li>
<p>对测试的追求也不会浪费时间, 因为在进行回归测试的时候, 可以尽可能的减少修改对已有代码的冲击.</p>




</li>




</ul>




</div>
<div class="paragraph">
<p>所以第一点, 理解需求再动手, 绝对不会浪费时间. 第二点, 在数据分析的任务中, 如何无法理解需求, 可能根本无从动手.</p>




</div>
<div class="ulist">
<ul>
<li>
<p>我们的需求是:&nbsp;<strong>出租车在某个地点的平均等待客人时间</strong></p>




</li>
<li>
<p>简单来说, 结果集中应该有的列:&nbsp;<strong>地点, 平均等待时间</strong></p>




</li>




</ul>




</div>




</div>




</div>




</li>
<li>
<p>反推每一个步骤</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>结果集中, 应该有的字段有两个, 一个是地点, 一个是等待时间</p>




</div>
<div class="paragraph">
<p>地点如何获知? 其实就是乘客的下车点, 但是是一个坐标, 如何得到其在哪个区? 等待时间如何获知? 其实就是上一个乘客下车, 到下一个乘客上车之间的时间, 通过这两个时间的差值便可获知</p>




</div>




</div>




</div>




</li>




</ol></div>




</div>




</div>




</dd><dt class="hdlist1">步骤分析</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>读取数据集</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>数据集很大, 所以我截取了一小部分, 大概百分之一左右, 如果大家感兴趣的话, 可以将完整数据集放在集群中, 使用集群来计算 "大数据"</p>




</div>




</div>




</div>




</li>
<li>
<p>清洗</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>数据集当中的某些列名可能使用起来不方便, 或者数据集当中某些列的值类型可能不对, 或者数据集中有可能存在缺失值, 这些都是要清洗的动机, 和理由</p>




</div>




</div>




</div>




</li>
<li>
<p>增加区域列</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>由于最终要统计的结果是按照区域作为单位, 而不是一个具体的目的地点, 所以要在数据集中增加列中放置区域信息</p>




</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>既然是放置行政区名字, 应该现有行政区以及其边界的信息</p>




</li>
<li>
<p>通过上下车的坐标点, 可以判断是否存在于某个行政区中</p>




</li>




</ol></div>
<div class="paragraph">
<p>这些判断坐标点是否属于某个区域, 这些信息, 就是专业的领域了</p>




</div>




</div>




</div>




</li>
<li>
<p>按照区域, 统计司机两次营运记录之间的时间差</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>数据集中存在很多出租车师傅的数据, 所以如何将某个师傅的记录发往一个分区, 在这个分区上完成会话分析呢? 这也是一个需要理解的点</p>




</div>




</div>




</div>




</li>




</ol></div>




</div>




</div>




</dd></dl></div>




</div>




</div>
<div class="sect1">
<h2 id="_3_数据读取">3. 数据读取</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>工程搭建</p>




</li>
<li>
<p>数据读取</p>




</li>




</ol></div>




</div>




</div>
<div class="dlist"><dl><dt class="hdlist1">工程搭建</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建 Maven 工程</p>




</li>
<li>
<p>导入 Maven 配置</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
<span class="hljs-tag">&lt;<span class="hljs-name">project <span class="hljs-attr">xmlns=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"
         <span class="hljs-attr">xmlns:xsi=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"
         <span class="hljs-attr">xsi:schemaLocation=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion&gt;4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion&gt;

    <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;cn.itcast<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;taxi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;0.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;

    <span class="hljs-tag">&lt;<span class="hljs-name">properties&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">scala.version&gt;2.11.8<span class="hljs-tag">&lt;/<span class="hljs-name">scala.version&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">spark.version&gt;2.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">spark.version&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">hadoop.version&gt;2.7.5<span class="hljs-tag">&lt;/<span class="hljs-name">hadoop.version&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">slf4j.version&gt;1.7.16<span class="hljs-tag">&lt;/<span class="hljs-name">slf4j.version&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">log4j.version&gt;1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">log4j.version&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">mysql.version&gt;5.1.35<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">esri.version&gt;2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">esri.version&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">json4s.version&gt;3.6.6<span class="hljs-tag">&lt;/<span class="hljs-name">json4s.version&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-name">properties&gt;

    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies&gt;
        <span class="hljs-comment">&lt;!-- Scala 库 --&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;org.scala-lang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;scala-library<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;${scala.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;org.scala-lang.modules<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;scala-xml_2.11<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;1.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;

        <span class="hljs-comment">&lt;!-- Spark 系列包 --&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;org.apache.spark<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;spark-core_2.11<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;${spark.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;org.apache.spark<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;spark-sql_2.11<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;${spark.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;org.apache.hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;hadoop-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;${hadoop.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;

        <span class="hljs-comment">&lt;!-- 地理位置处理库 --&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;com.esri.geometry<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;esri-geometry-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;${esri.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;

        <span class="hljs-comment">&lt;!-- JSON 解析库 --&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;org.json4s<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;json4s-native_2.11<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;${json4s.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;org.json4s<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;json4s-jackson_2.11<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;${json4s.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;

        <span class="hljs-comment">&lt;!-- 日志相关 --&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;jcl-over-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;${slf4j.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;${slf4j.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;${slf4j.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;${log4j.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies&gt;

    <span class="hljs-tag">&lt;<span class="hljs-name">build&gt;
        <span class="hljs-tag">&lt;<span class="hljs-name">sourceDirectory&gt;src/main/scala<span class="hljs-tag">&lt;/<span class="hljs-name">sourceDirectory&gt;

        <span class="hljs-tag">&lt;<span class="hljs-name">plugins&gt;
            <span class="hljs-tag">&lt;<span class="hljs-name">plugin&gt;
                <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
                <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
                <span class="hljs-tag">&lt;<span class="hljs-name">configuration&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-name">source&gt;1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-name">target&gt;1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-name">encoding&gt;UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding&gt;
                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration&gt;
            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin&gt;

            <span class="hljs-tag">&lt;<span class="hljs-name">plugin&gt;
                <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;net.alchim31.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;scala-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
                <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
                <span class="hljs-tag">&lt;<span class="hljs-name">executions&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-name">execution&gt;
                        <span class="hljs-tag">&lt;<span class="hljs-name">goals&gt;
                            <span class="hljs-tag">&lt;<span class="hljs-name">goal&gt;compile<span class="hljs-tag">&lt;/<span class="hljs-name">goal&gt;
                            <span class="hljs-tag">&lt;<span class="hljs-name">goal&gt;testCompile<span class="hljs-tag">&lt;/<span class="hljs-name">goal&gt;
                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals&gt;
                        <span class="hljs-tag">&lt;<span class="hljs-name">configuration&gt;
                            <span class="hljs-tag">&lt;<span class="hljs-name">args&gt;
                                <span class="hljs-tag">&lt;<span class="hljs-name">arg&gt;-dependencyfile<span class="hljs-tag">&lt;/<span class="hljs-name">arg&gt;
                                <span class="hljs-tag">&lt;<span class="hljs-name">arg&gt;${project.build.directory}/.scala_dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">arg&gt;
                            <span class="hljs-tag">&lt;/<span class="hljs-name">args&gt;
                        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration&gt;
                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution&gt;
                <span class="hljs-tag">&lt;/<span class="hljs-name">executions&gt;
            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins&gt;

    <span class="hljs-tag">&lt;/<span class="hljs-name">build&gt;
<span class="hljs-tag">&lt;/<span class="hljs-name">project&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</li>
<li>
<p>创建 Scala 源码目录&nbsp;<code>src/main/scala</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>并且设置这个目录为&nbsp;<code>Source Root</code></p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190602150555.png" alt="20190602150555" width="500" /></div>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">创建文件, 数据读取</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1"><code>Step 1</code>: 创建文件</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>创建 Spark Application 主类&nbsp;<code>cn.itcast.taxi.TaxiAnalysisRunner</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">package cn.itcast.taxi

object TaxiAnalysisRunner {

  def main(args: Array[String]): Unit = {

  }
}</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 2</code>: 数据读取</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">数据读取之前要做两件事</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>初始化环境, 导入必备的一些包</p>
</li>
<li>
<p>在工程根目录中创建&nbsp;<code>dataset</code>&nbsp;文件夹, 并拷贝数据集进去</p>
</li>
</ol></div>
</dd><dt class="hdlist1">代码如下</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">object TaxiAnalysisRunner {

  def main(args: Array[String]): Unit = {
    // 1. 创建 SparkSession
    val spark = SparkSession.builder()
      .master("local[6]")
      .appName("taxi")
      .getOrCreate()

    // 2. 导入函数和隐式转换
    import spark.implicits._
    import org.apache.spark.sql.functions._

    // 3. 读取文件
    val taxiRaw = spark.read
      .option("header", value = true)
      .csv("dataset/half_trip.csv")

    taxiRaw.show()
    taxiRaw.printSchema()
  }
}</code></pre>
</div>
</div>
</dd><dt class="hdlist1">运行结果如下</dt><dd>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">root
 |-- medallion: string (nullable = true)
 |-- hack_license: string (nullable = true)
 |-- vendor_id: string (nullable = true)
 |-- rate_code: string (nullable = true)
 |-- store_and_fwd_flag: string (nullable = true)
 |-- pickup_datetime: string (nullable = true)
 |-- dropoff_datetime: string (nullable = true)
 |-- passenger_count: string (nullable = true)
 |-- trip_time_in_secs: string (nullable = true)
 |-- trip_distance: string (nullable = true)
 |-- pickup_longitude: string (nullable = true)
 |-- pickup_latitude: string (nullable = true)
 |-- dropoff_longitude: string (nullable = true)
 |-- dropoff_latitude: string (nullable = true)</code></pre>
</div>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190602153339.png" alt="20190602153339" width="900" /></div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">下一步</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>剪去多余列</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>现在数据集中包含了一些多余的列, 在后续的计算中并不会使用到, 如果让这些列参与计算的话, 会影响整体性能, 浪费集群资源</p>
</div>
</div>
</div>
</li>
<li>
<p>类型转换</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>可以看到, 现在的数据集中, 所有列类型都是&nbsp;<code>String</code>, 而在一些统计和运算中, 不能使用&nbsp;<code>String</code>&nbsp;来进行, 所以要将这些数据转为对应的类型</p>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
<div class="sect1">
<h2 id="_5_数据清洗">5. 数据清洗</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>将&nbsp;<code>Row</code>&nbsp;对象转为&nbsp;<code>Trip</code></p>
</li>
<li>
<p>处理转换过程中的报错</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">数据转换</dt></dl></div>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>通过&nbsp;<code>DataFrameReader</code>&nbsp;读取出来的数据集是&nbsp;<code>DataFrame</code>, 而&nbsp;<code>DataFrame</code>&nbsp;中保存的是&nbsp;<code>Row</code>&nbsp;对象, 但是后续我们在进行处理的时候可能要使用到一些有类型的转换, 也需要每一列数据对应自己的数据类型, 所以, 需要将&nbsp;<code>Row</code>&nbsp;所代表的弱类型对象转为&nbsp;<code>Trip</code>这样的强类型对象, 而&nbsp;<code>Trip</code>&nbsp;对象则是一个样例类, 用于代表一个出租车的行程</p>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>Step 1</code>: 创建&nbsp;<code>Trip</code>&nbsp;样例类</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p><code>Trip</code>&nbsp;是一个强类型的样例类, 一个&nbsp;<code>Trip</code>&nbsp;对象代表一个出租车行程, 使用&nbsp;<code>Trip</code>&nbsp;可以对应数据集中的一条记录</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">object TaxiAnalysisRunner {

  def main(args: Array[String]): Unit = {
    // 此处省略 Main 方法中内容
  }

}

/**
  * 代表一个行程, 是集合中的一条记录
  * @param license 出租车执照号
  * @param pickUpTime 上车时间
  * @param dropOffTime 下车时间
  * @param pickUpX 上车地点的经度
  * @param pickUpY 上车地点的纬度
  * @param dropOffX 下车地点的经度
  * @param dropOffY 下车地点的纬度
  */
case class Trip(
  license: String,
  pickUpTime: Long,
  dropOffTime: Long,
  pickUpX: Double,
  pickUpY: Double,
  dropOffX: Double,
  dropOffY: Double
)</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 2</code>: 将&nbsp;<code>Row</code>&nbsp;对象转为&nbsp;<code>Trip</code>&nbsp;对象, 从而将&nbsp;<code>DataFrame</code>&nbsp;转为&nbsp;<code>Dataset[Trip]</code></dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>首先应该创建一个新方法来进行这种转换, 毕竟是一个比较复杂的转换操作, 不能怠慢</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">object TaxiAnalysisRunner {

  def main(args: Array[String]): Unit = {
    // ... 省略数据读取

    // 4. 数据转换和清洗
    val taxiParsed = taxiRaw.rdd.map(parse)
  }

  /**
    * 将 Row 对象转为 Trip 对象, 从而将 DataFrame 转为 Dataset[Trip] 方便后续操作
    * @param row DataFrame 中的 Row 对象
    * @return 代表数据集中一条记录的 Trip 对象
    */
  def parse(row: Row): Trip = {

  }
}

case class Trip(...)</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 3</code>: 创建&nbsp;<code>Row</code>&nbsp;对象的包装类型</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>因为在针对&nbsp;<code>Row</code>&nbsp;类型对象进行数据转换时, 需要对一列是否为空进行判断和处理, 在&nbsp;<code>Scala</code>&nbsp;中为空的处理进行一些支持和封装, 叫做&nbsp;<code>Option</code>, 所以在读取&nbsp;<code>Row</code>&nbsp;类型对象的时候, 要返回&nbsp;<code>Option</code>&nbsp;对象, 通过一个包装类, 可以轻松做到这件事</p>
</div>
<div class="paragraph">
<p>创建一个类&nbsp;<code>RichRow</code>&nbsp;用以包装&nbsp;<code>Row</code>&nbsp;类型对象, 从而实现&nbsp;<code>getAs</code>&nbsp;的时候返回&nbsp;<code>Option</code>&nbsp;对象</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">object TaxiAnalysisRunner {

  def main(args: Array[String]): Unit = {
    // ...

    // 4. 数据转换和清洗
    val taxiParsed = taxiRaw.rdd.map(parse)
  }

  def parse(row: Row): Trip = {...}

}

case class Trip(...)


class RichRow(row: Row) {

  def getAs[T](field: String): Option[T] = {
    if (row.isNullAt(row.fieldIndex(field)) || StringUtils.isBlank(row.getAs[String](field))) {
      None
    } else {
      Some(row.getAs[T](field))
    }
  }
}</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 4</code>: 转换</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>流程已经存在, 并且也已经为空值处理做了支持, 现在就可以进行转换了</p>
</div>
<div class="paragraph">
<p>首先根据数据集的情况会发现, 有如下几种类型的信息需要处理</p>
</div>
<div class="ulist">
<ul>
<li>
<p>字符串类型</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>执照号就是字符串类型, 对于字符串类型, 只需要判断空, 不需要处理, 如果是空字符串, 加入数据集的应该是一个&nbsp;<code>null</code></p>
</div>
</div>
</div>
</li>
<li>
<p>时间类型</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>上下车时间就是时间类型, 对于时间类型需要做两个处理</p>
</div>
<div class="ulist">
<ul>
<li>
<p>转为时间戳, 比较容易处理</p>
</li>
<li>
<p>如果时间非法或者为空, 则返回&nbsp;<code>0L</code></p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p><code>Double</code>&nbsp;类型</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>上下车的位置信息就是&nbsp;<code>Double</code>&nbsp;类型,&nbsp;<code>Double</code>&nbsp;类型的数据在数据集中以&nbsp;<code>String</code>&nbsp;的形式存在, 所以需要将&nbsp;<code>String</code>类型转为&nbsp;<code>Double</code>&nbsp;类型</p>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>总结来看, 有两类数据需要特殊处理, 一类是时间类型, 一类是&nbsp;<code>Double</code>&nbsp;类型, 所以需要编写两个处理数据的帮助方法, 后在&nbsp;<code>parse</code>&nbsp;方法中收集为&nbsp;<code>Trip</code>&nbsp;类型对象</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">object TaxiAnalysisRunner {

  def main(args: Array[String]): Unit = {
    // ...

    // 4. 数据转换和清洗
    val taxiParsed = taxiRaw.rdd.map(parse)
  }

  def parse(row: Row): Trip = {
    // 通过使用转换方法依次转换各个字段数据
    val row = new RichRow(row)
    val license = row.getAs[String]("hack_license").orNull
    val pickUpTime = parseTime(row, "pickup_datetime")
    val dropOffTime = parseTime(row, "dropoff_datetime")
    val pickUpX = parseLocation(row, "pickup_longitude")
    val pickUpY = parseLocation(row, "pickup_latitude")
    val dropOffX = parseLocation(row, "dropoff_longitude")
    val dropOffY = parseLocation(row, "dropoff_latitude")

    // 创建 Trip 对象返回
    Trip(license, pickUpTime, dropOffTime, pickUpX, pickUpY, dropOffX, dropOffY)
  }

  /**
    * 将时间类型数据转为时间戳, 方便后续的处理
    * @param row 行数据, 类型为 RichRow, 以便于处理空值
    * @param field 要处理的时间字段所在的位置
    * @return 返回 Long 型的时间戳
    */
  def parseTime(row: RichRow, field: String): Long = {
    val pattern = "yyyy-MM-dd HH:mm:ss"
    val formatter = new SimpleDateFormat(pattern, Locale.ENGLISH)

    val timeOption = row.getAs[String](field)
    timeOption.map( time =&gt; formatter.parse(time).getTime )
      .getOrElse(0L)
  }

  /**
    * 将字符串标识的 Double 数据转为 Double 类型对象
    * @param row 行数据, 类型为 RichRow, 以便于处理空值
    * @param field 要处理的 Double 字段所在的位置
    * @return 返回 Double 型的时间戳
    */
  def parseLocation(row: RichRow, field: String): Double = {
    row.getAs[String](field).map( loc =&gt; loc.toDouble ).getOrElse(0.0D)
  }
}

case class Trip(..)

class RichRow(row: Row) {...}</code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">异常处理</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>在进行类型转换的时候, 是一个非常容易错误的点, 需要进行单独的处理</p>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>Step 1</code>: 思路</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190603015655.png" alt="20190603015655" /></div>
</div>
<div class="paragraph">
<p><code>parse</code>&nbsp;方法应该做的事情应该有两件</p>
</div>
<div class="ulist">
<ul>
<li>
<p>捕获异常</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>异常一定是要捕获的, 无论是否要抛给&nbsp;<code>DataFrame</code>, 都要先捕获一下, 获知异常信息</p>
</div>
<div class="paragraph">
<p>捕获要使用&nbsp;<code>try &hellip;​ catch &hellip;​</code>&nbsp;代码块</p>
</div>
</div>
</div>
</li>
<li>
<p>返回结果</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>返回结果应该分为两部分来进行说明</p>
</div>
<div class="ulist">
<ul>
<li>
<p>正确, 正确则返回数据</p>
</li>
<li>
<p>错误, 则应该返回两类信息, 一 告知外面哪个数据出了错, 二 告知错误是什么</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>对于这种情况, 可以使用&nbsp;<code>Scala</code>&nbsp;中提供的一个类似于其它语言中多返回值的&nbsp;<code>Either</code>.&nbsp;<code>Either</code>&nbsp;分为两个情况, 一个是&nbsp;<code>Left</code>, 一个是&nbsp;<code>Right</code>, 左右两个结果所代表的意思可有由用户来指定</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val process = (b: Double) =&gt; {       <span class="conum" data-value="1">
  val a = 10.0
  a / b
}

def safe(function: Double =&gt; Double, b: Double): Either[Double, (Double, Exception)] = {  <span class="conum" data-value="2">
  try {
    val result = function(b)         <span class="conum" data-value="3">
    Left(result)
  } catch {
    case e: Exception =&gt; Right(b, e) <span class="conum" data-value="4">
  }
}

val result = safe(process, 0)        <span class="conum" data-value="5">

result match {                       <span class="conum" data-value="6">
  case Left(r) =&gt; println(r)
  case Right((b, e)) =&gt; println(b, e)
}</span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>一个函数, 接收一个参数, 根据参数进行除法运算</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>一个方法, 作用是让&nbsp;<code>process</code>&nbsp;函数调用起来更安全, 在其中&nbsp;<code>catch</code>&nbsp;错误, 报错后返回足够的信息 (报错时的参数和报错信息)</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>正常时返回&nbsp;<code>Left</code>, 放入正确结果</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>异常时返回&nbsp;<code>Right</code>, 放入报错时的参数, 和报错信息</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>外部调用</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>处理调用结果, 如果是 Right 的话, 则可以进行响应的异常处理和弥补</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">
<p><code>Either</code>&nbsp;和&nbsp;<code>Option</code>&nbsp;比较像, 都是返回不同的情况, 但是&nbsp;<code>Either</code>&nbsp;的&nbsp;<code>Right</code>&nbsp;可以返回多个值, 而&nbsp;<code>None</code>&nbsp;不行</p>
</div>
<div class="paragraph">
<p>如果一个&nbsp;<code>Either</code>&nbsp;有两个结果的可能性, 一个是&nbsp;<code>Left[L]</code>, 一个是&nbsp;<code>Right[R]</code>, 则&nbsp;<code>Either</code>&nbsp;的范型是&nbsp;<code>Either[L, R]</code></p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 2</code>: 完成代码逻辑</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>加入一个 Safe 方法, 更安全</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">object TaxiAnalysisRunner {

  def main(args: Array[String]): Unit = {
    // ...

    // 4. 数据转换和清洗
    val taxiParsed = taxiRaw.rdd.map(safe(parse))
  }

  /**
    * 包裹转换逻辑, 并返回 Either
    */
  def safe[P, R](f: P =&gt; R): P =&gt; Either[R, (P, Exception)] = {
    new Function[P, Either[R, (P, Exception)]] with Serializable {
      override def apply(param: P): Either[R, (P, Exception)] = {
        try {
          Left(f(param))
        } catch {
          case e: Exception =&gt; Right((param, e))
        }
      }
    }
  }

  def parse(row: Row): Trip = {...}

  def parseTime(row: RichRow, field: String): Long = {...}

  def parseLocation(row: RichRow, field: String): Double = {...}
}

case class Trip(..)

class RichRow(row: Row) {...}</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 3</code>: 针对转换异常进行处理</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>对于&nbsp;<code>Either</code>&nbsp;来说, 可以获取&nbsp;<code>Left</code>&nbsp;中的数据, 也可以获取&nbsp;<code>Right</code>&nbsp;中的数据, 只不过如果当&nbsp;<code>Either</code>&nbsp;是一个 Right 实例时候, 获取&nbsp;<code>Left</code>&nbsp;的值会报错</p>
</div>
<div class="paragraph">
<p>所以, 针对于&nbsp;<code>Dataset[Either]</code>&nbsp;可以有如下步骤</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>试运行, 观察是否报错</p>
</li>
<li>
<p>如果报错, 则打印信息解决报错</p>
</li>
<li>
<p>如果解决不了, 则通过&nbsp;<code>filter</code>&nbsp;过滤掉&nbsp;<code>Right</code></p>
</li>
<li>
<p>如果没有报错, 则继续向下运行</p>
</li>
</ol></div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">object TaxiAnalysisRunner {

  def main(args: Array[String]): Unit = {
    ...

    // 4. 数据转换和清洗
    val taxiParsed = taxiRaw.rdd.map(safe(parse))
    val taxiGood = taxiParsed.map( either =&gt; either.left.get ).toDS()
  }

  ...
}

...</code></pre>
</div>
</div>
<div class="paragraph">
<p>很幸运, 在运行上面的代码时, 没有报错, 如果报错的话, 可以使用如下代码进行过滤</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">object TaxiAnalysisRunner {

  def main(args: Array[String]): Unit = {
    ...

    // 4. 数据转换和清洗
    val taxiParsed = taxiRaw.rdd.map(safe(parse))
    val taxiGood = taxiParsed.filter( either =&gt; either.isLeft )
      .map( either =&gt; either.left.get )
      .toDS()
  }

  ...
}

...</code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">观察数据集的时间分布</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>观察数据分布常用手段是直方图, 直方图反应的是数据的&nbsp;<code>"数量"</code>&nbsp;分布</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190603113500.png" alt="20190603113500" width="500" /></div>
</div>
<div class="paragraph">
<p>通过这个图可以看到其实就是乘客年龄的分布, 横轴是乘客的年龄, 纵轴是乘客年龄的频数分布</p>
</div>
<div class="paragraph">
<p>因为我们这个项目中要对出租车利用率进行统计, 所以需要先看一看单次行程的时间分布情况, 从而去掉一些异常数据, 保证数据是准确的</p>
</div>
<div class="paragraph">
<p>绘制直方图的 "图" 留在后续的&nbsp;<code>DMP</code>&nbsp;项目中再次介绍, 现在先准备好直方图所需要的数据集, 通过数据集来观察即可, 直方图需要的是两个部分的内容, 一个是数据本身, 另外一个是数据的分布, 也就是频数的分布, 步骤如下</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>计算每条数据的时长, 但是单位要有变化, 按照分钟, 或者小时来作为时长单位</p>
</li>
<li>
<p>统计每个时长的数据量, 例如有&nbsp;<code>500</code>&nbsp;个行程是一小时内完成的, 有&nbsp;<code>300</code>&nbsp;个行程是&nbsp;<code>1 - 2</code>&nbsp;小时内完成</p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">统计时间分布直方图</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">使用&nbsp;<code>UDF</code>&nbsp;的优点和代价</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p><code>UDF</code>&nbsp;是一个很好用的东西, 特别好用, 对整体的逻辑实现会变得更加简单可控, 但是有两个非常明显的缺点, 所以在使用的时候要注意, 虽然有这两个缺点, 但是只在必要的地方使用就没什么问题, 对于逻辑的实现依然是有很大帮助的</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>UDF</code>&nbsp;中, 对于空值的处理比较麻烦</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>例如一个&nbsp;<code>UDF</code>&nbsp;接收两个参数, 是&nbsp;<code>Scala</code>&nbsp;中的&nbsp;<code>Int</code>&nbsp;类型和&nbsp;<code>Double</code>&nbsp;类型, 那么, 在传入&nbsp;<code>UDF</code>&nbsp;参数的时候, 如果有数据为&nbsp;<code>null</code>, 就会出现转换异常</p>
</div>
</div>
</div>
</li>
<li>
<p>使用&nbsp;<code>UDF</code>&nbsp;的时候, 优化器可能无法对其进行优化</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p><code>UDF</code>&nbsp;对于&nbsp;<code>Catalyst</code>&nbsp;是不透明的,&nbsp;<code>Catalyst</code>&nbsp;不可获知&nbsp;<code>UDF</code>&nbsp;中的逻辑, 但是普通的&nbsp;<code>Function</code>&nbsp;对于&nbsp;<code>Catalyst</code>&nbsp;是透明的,&nbsp;<code>Catalyst</code>&nbsp;可以对其进行优化</p>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 1</code>: 编写&nbsp;<code>UDF</code>, 将行程时长由毫秒单位改为小时单位</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>定义&nbsp;<code>UDF</code>, 在&nbsp;<code>UDF</code>&nbsp;中做两件事</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>计算行程时长</p>
</li>
<li>
<p>将时长由毫秒转为分钟</p>
</li>
</ol></div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">object TaxiAnalysisRunner {

  def main(args: Array[String]): Unit = {
    ...

    // 5. 过滤行程无效的数据
    val hours = (pickUp: Long, dropOff: Long) =&gt; {
      val duration = dropOff - pickUp 
      TimeUnit.HOURS.convert(, TimeUnit.MILLISECONDS)
    }
    val hoursUDF = udf(hours)
  }

  ...
}</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 2:</code>&nbsp;统计时长分布</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>第一步应该按照行程时长进行分组</p>
</li>
<li>
<p>求得每个分组的个数</p>
</li>
<li>
<p>最后按照时长排序并输出结果</p>
</li>
</ol></div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">object TaxiAnalysisRunner {

  def main(args: Array[String]): Unit = {
    ...

    // 5. 过滤行程无效的数据
    val hours = (pickUp: Long, dropOff: Long) =&gt; {
      val duration = dropOff - pickUp 
      TimeUnit.MINUTES.convert(, TimeUnit.MILLISECONDS)
    }
    val hoursUDF = udf(hours)

    taxiGood.groupBy(hoursUDF($"pickUpTime", $"dropOffTime").as("duration"))
      .count()
      .sort("duration")
      .show()
  }

  ...
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>会发现, 大部分时长都集中在&nbsp;<code>1 - 19</code>&nbsp;分钟内</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">+--------+-----+
|duration|count|
+--------+-----+
|       0|   86|
|       1|  140|
|       2|  383|
|       3|  636|
|       4|  759|
|       5|  838|
|       6|  791|
|       7|  761|
|       8|  688|
|       9|  625|
|      10|  537|
|      11|  499|
|      12|  395|
|      13|  357|
|      14|  353|
|      15|  264|
|      16|  252|
|      17|  197|
|      18|  181|
|      19|  136|
+--------+-----+</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 3:</code>&nbsp;注册函数, 在 SQL 表达式中过滤数据</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>大部分时长都集中在&nbsp;<code>1 - 19</code>&nbsp;分钟内, 所以这个范围外的数据就可以去掉了, 如果同学使用完整的数据集, 会发现还有一些负的时长, 好像是回到未来的场景一样, 对于这种非法的数据, 也要过滤掉, 并且还要分析原因</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">object TaxiAnalysisRunner {

  def main(args: Array[String]): Unit = {
    ...

    // 5. 过滤行程无效的数据
    val hours = (pickUp: Long, dropOff: Long) =&gt; {
      val duration = dropOff - pickUp 
      TimeUnit.MINUTES.convert(, TimeUnit.MILLISECONDS)
    }
    val hoursUDF = udf(hours)

    taxiGood.groupBy(hoursUDF($"pickUpTime", $"dropOffTime").as("duration"))
      .count()
      .sort("duration")
      .show()

    spark.udf.register("hours", hours)
    val taxiClean = taxiGood.where("hours(pickUpTime, dropOffTime) BETWEEN 0 AND 3")
    taxiClean.show()
  }

  ...
}</code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
<div class="sect1">
<h2 id="_6_行政区信息">6. 行政区信息</h2>
<div class="sectionbody">
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>能够通过&nbsp;<code>GeoJSON</code>&nbsp;判断一个点是否在一个区域内, 能够使用&nbsp;<code>JSON4S</code>&nbsp;解析&nbsp;<code>JSON</code>&nbsp;数据</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>需求介绍</p>
</li>
<li>
<p>工具介绍</p>
</li>
<li>
<p>解析&nbsp;<code>JSON</code></p>
</li>
<li>
<p>读取&nbsp;<code>Geometry</code></p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>整体流程</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>JSON4S 介绍</p>
</li>
<li>
<p>ESRI 介绍</p>
</li>
<li>
<p>编写函数实现&nbsp;<code>经纬度 &rarr; Geometry</code>&nbsp;转换</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>后续可以使用函数来进行转换, 并且求得时间差</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
<div class="sect2">
<h3 id="_6_1_需求介绍">6.1. 需求介绍</h3>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>理解表示地理位置常用的 GeoJSON</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>思路整理</p>
</li>
<li>
<p><code>GeoJSON</code>&nbsp;是什么</p>
</li>
<li>
<p><code>GeoJSON</code>&nbsp;的使用</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">思路整理</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>需求</p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>项目的任务是统计出租车在不同行政区的平均等待时间, 所以源数据集和经过计算希望得到的新数据集大致如下</p>
</div>
<div class="ulist">
<ul>
<li>
<p>源数据集</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190812104021.png" alt="20190812104021" width="600" /></div>
</div>
</li>
<li>
<p>目标数据集</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190812104113.png" alt="20190812104113" width="600" /></div>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>目标数据集分析</p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>目标数据集中有三列,&nbsp;<code>borough</code>,&nbsp;<code>avg(seconds)</code>,&nbsp;<code>stddev_samp(seconds)</code></p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>borough</code>&nbsp;表示目的地行政区的名称</p>
</li>
<li>
<p><code>avg(seconds)</code>&nbsp;和&nbsp;<code>stddev_samp(seconds)</code>&nbsp;是&nbsp;<code>seconds</code>&nbsp;的聚合,&nbsp;<code>seconds</code>&nbsp;是下车时间和下一次上车时间之间的差值, 代表等待时间</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>所以有两列数据是现在数据集中没有</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>borough</code>&nbsp;要根据数据集中的经纬度, 求出其行政区的名字</p>
</li>
<li>
<p><code>seconds</code>&nbsp;要根据数据集中上下车时间, 求出差值</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>步骤</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>求出&nbsp;<code>borough</code></p>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>读取行政区位置信息</p>
</li>
<li>
<p>搜索每一条数据的下车经纬度所在的行政区</p>
</li>
<li>
<p>在数据集中添加行政区列</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>求出&nbsp;<code>seconds</code></p>
</li>
<li>
<p>根据&nbsp;<code>borough</code>&nbsp;计算平均等待时间, 是一个聚合操作</p>
</li>
</ol></div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">GeoJSON 是什么</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>定义</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>GeoJSON</code>&nbsp;是一种基于&nbsp;<code>JSON</code>&nbsp;的开源标准格式, 用来表示地理位置信息</p>
</li>
<li>
<p>其中定了很多对象, 表示不同的地址位置单位</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>如何表示地理位置</p>
<div class="exampleblock">
<div class="content">
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-center valign-middle">类型</th><th class="tableblock halign-center valign-middle" colspan="2">例子</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-center valign-middle">
<p class="tableblock">点</p>
</td>
<td class="tableblock halign-center valign-middle">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c2/SFA_Point.svg/51px-SFA_Point.svg.png" alt="51px SFA Point.svg" /></div>
</div>
</div>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">{
    <span class="hljs-attr">"type": <span class="hljs-string">"Point",
    <span class="hljs-attr">"coordinates": [<span class="hljs-number">30, <span class="hljs-number">10]
}</span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr>
<td class="tableblock halign-center valign-middle">
<p class="tableblock">线段</p>
</td>
<td class="tableblock halign-center valign-middle">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/SFA_LineString.svg/51px-SFA_LineString.svg.png" alt="51px SFA LineString.svg" /></div>
</div>
</div>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">{
    <span class="hljs-attr">"type": <span class="hljs-string">"Point",
    <span class="hljs-attr">"coordinates": [<span class="hljs-number">30, <span class="hljs-number">10]
}</span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr>
<td class="tableblock halign-center valign-middle" rowspan="2">
<p class="tableblock">多边形</p>
</td>
<td class="tableblock halign-center valign-middle">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/SFA_LineString.svg/51px-SFA_LineString.svg.png" alt="51px SFA LineString.svg" /></div>
</div>
</div>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">{
    <span class="hljs-attr">"type": <span class="hljs-string">"Point",
    <span class="hljs-attr">"coordinates": [<span class="hljs-number">30, <span class="hljs-number">10]
}</span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr>
<td class="tableblock halign-center valign-middle">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/55/SFA_Polygon_with_hole.svg/51px-SFA_Polygon_with_hole.svg.png" alt="51px SFA Polygon with hole.svg" /></div>
</div>
</div>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">{
    <span class="hljs-attr">"type": <span class="hljs-string">"Polygon",
    <span class="hljs-attr">"coordinates": [
        [[<span class="hljs-number">35, <span class="hljs-number">10], [<span class="hljs-number">45, <span class="hljs-number">45], [<span class="hljs-number">15, <span class="hljs-number">40], [<span class="hljs-number">10, <span class="hljs-number">20], [<span class="hljs-number">35, <span class="hljs-number">10]],
        [[<span class="hljs-number">20, <span class="hljs-number">30], [<span class="hljs-number">35, <span class="hljs-number">35], [<span class="hljs-number">30, <span class="hljs-number">20], [<span class="hljs-number">20, <span class="hljs-number">30]]
    ]
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</li>
<li>
<p>数据集</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>行政区范围可以使用&nbsp;<code>GeoJSON</code>&nbsp;中的多边形来表示</p>
</li>
<li>
<p>课程中为大家提供了一份表示了纽约的各个行政区范围的数据集, 叫做&nbsp;<code>nyc-borough-boundaries-polygon.geojson</code></p>
<div class="paragraph">
<p><span class="image"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190603155616.png" alt="20190603155616" width="500" /></span></p>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>使用步骤</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建一个类型&nbsp;<code>Feature</code>, 对应&nbsp;<code>JSON</code>&nbsp;文件中的格式</p>
</li>
<li>
<p>通过解析&nbsp;<code>JSON</code>, 创建&nbsp;<code>Feature</code>&nbsp;对象</p>
</li>
<li>
<p>通过&nbsp;<code>Feature</code>&nbsp;对象创建&nbsp;<code>GeoJSON</code>&nbsp;表示一个地理位置的&nbsp;<code>Geometry</code>&nbsp;对象</p>
</li>
<li>
<p>通过&nbsp;<code>Geometry</code>&nbsp;对象判断一个经纬度是否在其范围内</p>
</li>
</ol></div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>思路</p>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>从需求出发, 设计结果集</p>
</li>
<li>
<p>推导结果集所欠缺的字段</p>
</li>
<li>
<p>补齐欠缺的字段, 生成结果集, 需求完成</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>后续整体上要做的事情</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>需求是查看出租车在不同行政区的等待客人的时间</p>
</li>
<li>
<p>需要补充两个点, 一是出租车下客点的行政区名称, 二是等待时间</p>
</li>
<li>
<p>本章节聚焦于行政区的信息补充</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>学习步骤</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>介绍&nbsp;<code>JSON</code>&nbsp;解析的工具</p>
</li>
<li>
<p>介绍读取&nbsp;<code>GeoJSON</code>&nbsp;的工具</p>
</li>
<li>
<p><code>JSON</code>&nbsp;解析</p>
</li>
<li>
<p>读取&nbsp;<code>GeoJSON</code></p>
</li>
</ol></div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_6_2_工具介绍">6.2. 工具介绍</h3>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>理解&nbsp;<code>JSON</code>&nbsp;解析和&nbsp;<code>Geometry</code>&nbsp;解析所需要的工具, 后续使用这些工具补充行政区信息</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>JSON4S</code></p>
</li>
<li>
<p><code>ESRI Geometry</code></p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">JSON4S 介绍</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>介绍</p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>一般在&nbsp;<code>Java</code>&nbsp;中, 常使用如下三个工具解析&nbsp;<code>JSON</code></p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Gson</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p><code>Google</code>&nbsp;开源的&nbsp;<code>JSON</code>&nbsp;解析工具, 比较人性化, 易于使用, 但是性能不如&nbsp;<code>Jackson</code>, 也不如&nbsp;<code>Jackson</code>&nbsp;有积淀</p>
</div>
</div>
</div>
</li>
<li>
<p><code>Jackson</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p><code>Jackson</code>&nbsp;是功能最完整的&nbsp;<code>JSON</code>&nbsp;解析工具, 也是最老牌的&nbsp;<code>JSON</code>&nbsp;解析工具, 性能也足够好, 但是&nbsp;<code>API</code>&nbsp;在一开始支持的比较少, 用起来稍微有点繁琐</p>
</div>
</div>
</div>
</li>
<li>
<p><code>FastJson</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>阿里巴巴的&nbsp;<code>JSON</code>&nbsp;开源解析工具, 以快著称, 但是某些方面用起来稍微有点反直觉</p>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>什么是&nbsp;<code>JSON</code>&nbsp;解析</p>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190603161629.png" alt="20190603161629" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>读取&nbsp;<code>JSON</code>&nbsp;数据的时候, 读出来的是一个有格式的字符串, 将这个字符串转换为对象的过程就叫做解析</p>
</li>
<li>
<p>可以使用&nbsp;<code>JSON4S</code>&nbsp;来解析&nbsp;<code>JSON</code>,&nbsp;<code>JSON4S</code>&nbsp;是一个其它解析工具的&nbsp;<code>Scala</code>&nbsp;封装以适应&nbsp;<code>Scala</code>&nbsp;的对象转换</p>
</li>
<li>
<p><code>JSON4S</code>&nbsp;支持&nbsp;<code>Jackson</code>&nbsp;作为底层的解析工具</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>Step 1: 导入&nbsp;<code>Maven</code>&nbsp;依赖</p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml"><span class="hljs-comment">&lt;!-- JSON4S --&gt;
<span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;org.json4s<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;json4s-native_2.11<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;${json4s.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;
<span class="hljs-comment">&lt;!-- JSON4S 的 Jackson 集成库 --&gt;
<span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;org.json4s<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;json4s-jackson_2.11<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;${json4s.version}<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Step 2: 解析&nbsp;<code>JSON</code></p>
<div class="exampleblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">步骤</dt><dd>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>解析&nbsp;<code>JSON</code>&nbsp;对象</p>
</li>
<li>
<p>序列化&nbsp;<code>JSON</code>&nbsp;对象</p>
</li>
<li>
<p>使用&nbsp;<code>Jackson</code>&nbsp;反序列化&nbsp;<code>Scala</code>&nbsp;对象</p>
</li>
<li>
<p>使用&nbsp;<code>Jackson</code>&nbsp;序列化&nbsp;<code>Scala</code>&nbsp;对象</p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">代码</dt><dd>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">import org.json4s._
import org.json4s.jackson.JsonMethods._
import org.json4s.jackson.Serialization.{read, write}

case class Product(name: String, price: Double)

val product =
  """
    |{"name":"Toy","price":35.35}
  """.stripMargin

// 可以解析 JSON 为对象
val obj: Product = parse(product).extra[Product]

// 可以将对象序列化为 JSON
val str: String = compact(render(Product("电视", 10.5)))

// 使用序列化 API 之前, 要先导入代表转换规则的 formats 对象隐式转换
implicit val formats = Serialization.formats(NoTypeHints)

// 可以使用序列化的方式来将 JSON 字符串反序列化为对象
val obj1 = read[Person](product)

// 可以使用序列化的方式将对象序列化为 JSON 字符串
val str1 = write(Product("电视", 10.5))</code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">GeoJSON 读取工具的介绍</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>介绍</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>读取&nbsp;<code>GeoJSON</code>&nbsp;的工具有很多, 但是大部分都过于复杂, 有一些只能&nbsp;<code>Java</code>&nbsp;中用</p>
</li>
<li>
<p>有一个较为简单, 也没有使用底层&nbsp;<code>C</code>&nbsp;语言开发的解析&nbsp;<code>GeoJSON</code>&nbsp;的类库叫做&nbsp;<code>ESRI Geometry</code>,&nbsp;<code>Scala</code>&nbsp;中也可以支持</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>使用</p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p><code>ESRI Geometry</code>&nbsp;的使用比较的简单, 大致就如下这样调用即可</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val mg = GeometryEngine.geometryFromGeoJson(jsonStr, 0, Geometry.Type.Unknown) <span class="conum" data-value="1">
val geometry = mg.getGeometry <span class="conum" data-value="2">

GeometryEngine.contains(geometry, other, csr) </span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>读取&nbsp;<code>JSON</code>&nbsp;生成&nbsp;<code>Geometry</code>&nbsp;对象</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>重点: 一个&nbsp;<code>Geometry</code>&nbsp;对象就表示一个&nbsp;<code>GeoJSON</code>&nbsp;支持的对象, 可能是一个点, 也可能是一个多边形</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>判断一个&nbsp;<code>Geometry</code>&nbsp;中是否包含另外一个&nbsp;<code>Geometry</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>JSON</code>&nbsp;解析</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>FastJSON</code>&nbsp;和&nbsp;<code>Gson</code>&nbsp;直接在&nbsp;<code>Scala</code>&nbsp;中使用会出现问题, 因为&nbsp;<code>Scala</code>&nbsp;的对象体系和&nbsp;<code>Java</code>&nbsp;略有不同</p>
</li>
<li>
<p>最为适合&nbsp;<code>Scala</code>&nbsp;的方式是使用&nbsp;<code>JSON4S</code>&nbsp;作为上层&nbsp;<code>API</code>,&nbsp;<code>Jackson</code>&nbsp;作为底层提供&nbsp;<code>JSON</code>&nbsp;解析能力, 共同实现&nbsp;<code>JSON</code>&nbsp;解析</p>
</li>
<li>
<p>其使用方式非常简单, 两行即可解析</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">implicit val formats = Serialization.formats(NoTypeHints)
val obj = read[Person](product)</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p><code>GeoJSON</code>&nbsp;的解析</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>有一个很适合 Scala 的 GeoJSON 解析工具, 叫做&nbsp;<code>ESRI Geometry</code>, 其可以将 GeoJSON 字符串转为 Geometry 对象, 易于使用</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">GeometryEngine.geometryFromGeoJson(jsonStr, 0, Geometry.Type.Unknown)</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>后续工作</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>读取行政区的数据集, 解析&nbsp;<code>JSON</code>&nbsp;格式, 将&nbsp;<code>JSON</code>&nbsp;格式的字符串转为对象</p>
</li>
<li>
<p>使用&nbsp;<code>ESRI</code>&nbsp;的&nbsp;<code>GeometryEngine</code>&nbsp;读取行政区的&nbsp;<code>Geometry</code>&nbsp;对象的&nbsp;<code>JSON</code>&nbsp;字符串, 生成&nbsp;<code>Geometry</code>&nbsp;对象</p>
</li>
<li>
<p>使用上车点和下车点的坐标创建&nbsp;<code>Point</code>&nbsp;对象 (&nbsp;<code>Geometry</code>&nbsp;的子类)</p>
</li>
<li>
<p>判断&nbsp;<code>Point</code>&nbsp;是否在行政区的&nbsp;<code>Geometry</code>&nbsp;的范围内 (行政区的&nbsp;<code>Geometry</code>&nbsp;其实本质上是子类&nbsp;<code>Polygon</code>&nbsp;的对象)</p>
</li>
</ol></div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_6_3_具体实现">6.3. 具体实现</h3>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>通过&nbsp;<code>JSON4S</code>&nbsp;和&nbsp;<code>ESRI</code>&nbsp;配合解析提供的&nbsp;<code>GeoJSON</code>&nbsp;数据集, 获取纽约的每个行政区的范围</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>解析&nbsp;<code>JSON</code></p>
</li>
<li>
<p>使用&nbsp;<code>ESRI</code>&nbsp;生成表示行政区的一组&nbsp;<code>Geometry</code>&nbsp;对象</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">解析 JSON</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>步骤</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>对照&nbsp;<code>JSON</code>&nbsp;中的格式, 创建解析的目标类</p>
</li>
<li>
<p>解析&nbsp;<code>JSON</code>&nbsp;数据转为目标类的对象</p>
</li>
<li>
<p>读取数据集, 执行解析</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>Step 1: 创建目标类</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>GeoJSON</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">{
	<span class="hljs-attr">"type": <span class="hljs-string">"FeatureCollection",
	<span class="hljs-attr">"features": [ <span class="conum" data-value="1">
    {
      <span class="hljs-attr">"type": <span class="hljs-string">"Feature",
      <span class="hljs-attr">"id": <span class="hljs-number">0,
      <span class="hljs-attr">"properties": {
        <span class="hljs-attr">"boroughCode": <span class="hljs-number">5,
        <span class="hljs-attr">"borough": <span class="hljs-string">"Staten Island",
        <span class="hljs-attr">"@id": <span class="hljs-string">"http:\/\/nyc.pediacities.com\/Resource\/Borough\/Staten_Island"
      },
      <span class="hljs-attr">"geometry": {
        <span class="hljs-attr">"type": <span class="hljs-string">"Polygon",
        <span class="hljs-attr">"coordinates": [
          [
            [<span class="hljs-number">-74.050508064032471, <span class="hljs-number">40.566422034160816],
            [<span class="hljs-number">-74.049983525625748, <span class="hljs-number">40.566395924928273]
          ]
        ]
      }
    }
  ]
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td><code>features</code>&nbsp;是一个数组, 其中每一个&nbsp;<code>Feature</code>&nbsp;代表一个行政区</td>
</tr>
</tbody>
</table>
</div>
</li>
<li>
<p>目标类</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">case class FeatureCollection(
  features: List[Feature]
)

case class Feature(
  id: Int,
  properties: Map[String, String],
  geometry: JObject
)

case class FeatureProperties(boroughCode: Int, borough: String)</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>Step 2: 将&nbsp;<code>JSON</code>&nbsp;字符串解析为目标类对象</p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>创建工具类实现功能</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">object FeatureExtraction {

  def parseJson(json: String): FeatureCollection = {
    implicit val format: AnyRef with Formats = Serialization.formats(NoTypeHints)
    val featureCollection = read[FeatureCollection](json)
    featureCollection
  }
}</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Step 3: 读取数据集, 转换数据</p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val geoJson = Source.fromFile("dataset/nyc-borough-boundaries-polygon.geojson").mkString
val features = FeatureExtraction.parseJson(geoJson)</code></pre>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">解析 GeoJSON</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>步骤</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>转换&nbsp;<code>JSON</code>&nbsp;为&nbsp;<code>Geometry</code>&nbsp;对象</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>表示行政区的 JSON 段在哪</p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">{
	<span class="hljs-attr">"type": <span class="hljs-string">"FeatureCollection",
	<span class="hljs-attr">"features": [
    {
      <span class="hljs-attr">"type": <span class="hljs-string">"Feature",
      <span class="hljs-attr">"id": <span class="hljs-number">0,
      <span class="hljs-attr">"properties": {
        <span class="hljs-attr">"boroughCode": <span class="hljs-number">5,
        <span class="hljs-attr">"borough": <span class="hljs-string">"Staten Island",
        <span class="hljs-attr">"@id": <span class="hljs-string">"http:\/\/nyc.pediacities.com\/Resource\/Borough\/Staten_Island"
      },
      <span class="hljs-attr">"geometry": { <span class="conum" data-value="1">
        <span class="hljs-attr">"type": <span class="hljs-string">"Polygon",
        <span class="hljs-attr">"coordinates": [
          [
            [<span class="hljs-number">-74.050508064032471, <span class="hljs-number">40.566422034160816],
            [<span class="hljs-number">-74.049983525625748, <span class="hljs-number">40.566395924928273]
          ]
        ]
      }
    }
  ]
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td><code>geometry</code>&nbsp;段即是&nbsp;<code>Geometry</code>&nbsp;对象的&nbsp;<code>JSON</code>&nbsp;表示</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</li>
<li>
<p>通过&nbsp;<code>ESRI</code>&nbsp;解析此段</p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">case class Feature(
  id: Int,
  properties: Map[String, String],
  geometry: JObject             <span class="conum" data-value="1">
) {

  def getGeometry: Geometry = { <span class="conum" data-value="2">
    GeometryEngine.geoJsonToGeometry(compact(render(geometry)), 0, Geometry.Type.Unknown).getGeometry
  }
}</span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td><code>geometry</code>&nbsp;对象需要使用&nbsp;<code>ESRI</code>&nbsp;解析并生成, 所以此处并没有使用具体的对象类型, 而是使用&nbsp;<code>JObject</code>&nbsp;表示一个&nbsp;<code>JsonObject</code>, 并没有具体的解析为某个对象, 节省资源</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>将&nbsp;<code>JSON</code>&nbsp;转为&nbsp;<code>Geometry</code>&nbsp;对象</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">在出租车 DataFrame 中增加行政区信息</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>步骤</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>将&nbsp;<code>Geometry</code>&nbsp;数据集按照区域大小排序</p>
</li>
<li>
<p>广播&nbsp;<code>Geometry</code>&nbsp;信息, 发给每一个&nbsp;<code>Executor</code></p>
</li>
<li>
<p>创建&nbsp;<code>UDF</code>, 通过经纬度获取行政区信息</p>
</li>
<li>
<p>统计行政区信息</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>Step 1: 排序&nbsp;<code>Geometry</code></p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>动机: 后续需要逐个遍历&nbsp;<code>Geometry</code>&nbsp;对象, 取得每条出租车数据所在的行政区, 大的行政区排在前面效率更好一些</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val areaSortedFeatures = features.features.sortBy(feature =&gt; {
    (feature.properties("boroughCode"), - feature.getGeometry.calculateArea2D())
  })</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Step 2: 发送广播</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>动机:&nbsp;<code>Geometry</code>&nbsp;对象数组相对来说是一个小数据集, 后续需要使用&nbsp;<code>Spark</code>&nbsp;来进行计算, 将&nbsp;<code>Geometry</code>&nbsp;分发给每一个&nbsp;<code>Executor</code>&nbsp;会显著减少&nbsp;<code>IO</code>&nbsp;通量</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val featuresBc = spark.sparkContext.broadcast(areaSortedFeatures)</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Step 3: 创建&nbsp;<code>UDF</code></p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>动机: 创建 UDF, 接收每个出租车数据的下车经纬度, 转为行政区信息, 以便后续实现功能</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val boroughLookUp = (x: Double, y: Double) =&gt; {
  val features: Option[Feature] = featuresBc.value.find(feature =&gt; {
    GeometryEngine.contains(feature.getGeometry, new Point(x, y), SpatialReference.create(4326))
  })
  features.map(feature =&gt; {
    feature.properties("borough")
  }).getOrElse("NA")
}

val boroughUDF = udf(boroughLookUp)</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Step 4: 测试转换结果, 统计每个行政区的出租车数据数量</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>动机: 写完功能最好先看看, 运行一下</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">taxiClean.groupBy(boroughUDF('dropOffX, 'dropOffY))
  .count()
  .show()</code></pre>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>具体的实现分为两个大步骤</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>解析&nbsp;<code>JSON</code>&nbsp;生成&nbsp;<code>Geometry</code>&nbsp;数据</p>
</li>
<li>
<p>通过&nbsp;<code>Geometry</code>&nbsp;数据, 取得每一条出租车数据的行政区信息</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p><code>Geometry</code>&nbsp;数据的生成又有如下步骤</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>使用&nbsp;<code>JSON4S</code>&nbsp;解析行政区区域信息的数据集</p>
</li>
<li>
<p>取得其中每一个行政区信息的&nbsp;<code>Geometry</code>&nbsp;区域信息, 转为&nbsp;<code>ESRI</code>&nbsp;的&nbsp;<code>Geometry</code>&nbsp;对象</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>查询经纬度信息, 获取其所在的区域, 有如下步骤</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>遍历&nbsp;<code>Geometry</code>&nbsp;数组, 搜索经纬度所表示的&nbsp;<code>Point</code>&nbsp;对象在哪个区域内</p>
</li>
<li>
<p>返回区域的名称</p>
<div class="ulist">
<ul>
<li>
<p>使用&nbsp;<code>UDF</code>&nbsp;的目的是为了统计数据集, 后续会通过函数直接完成功能</p>
</li>
</ul>
</div>
</li>
</ol></div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_7_会话统计">7. 会话统计</h2>
<div class="sectionbody">
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="ulist">
<ul>
<li>
<p>统计每个行政区的所有行程, 查看每个行政区平均等候客人的时间</p>
</li>
<li>
<p>掌握会话统计的方式方法</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>会话统计的概念</p>
</li>
<li>
<p>功能实现</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">会话统计的概念</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>需求分析</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>需求</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>统计每个行政区的平均等客时间</p>
</div>
</div>
</div>
</li>
<li>
<p>需求可以拆分为如下几个步骤</p>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>按照行政区分组</p>
</li>
<li>
<p>在每一个行政区中, 找到同一个出租车司机的先后两次订单, 本质就是再次针对司机的证件号再次分组</p>
</li>
<li>
<p>求出这两次订单的下车时间和上车时间只差, 便是等待客人的时间</p>
</li>
<li>
<p>针对一个行政区, 求得这个时间的平均数</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>问题: 分组效率太低</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>分组的效率相对较低</p>
</div>
<div class="ulist">
<ul>
<li>
<p>分组是&nbsp;<code>Shuffle</code></p>
</li>
<li>
<p>两次分组, 包括后续的计算, 相对比较复杂</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>解决方案: 分区后在分区中排序</p>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>按照&nbsp;<code>License</code>&nbsp;重新分区, 如此一来, 所有相同的司机的数据就会在同一个分区中</p>
</li>
<li>
<p>计算分区中连续两条数据的时间差</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190813003239.png" alt="20190813003239" width="800" /></div>
</div>
</li>
</ol></div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">上述的计算存在一个问题, 一个分组会有多个司机的数据, 如何划分每个司机的数据边界? 其实可以先过滤一下, 计算时只保留同一个司机的数据</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</li>
<li>
<p>无论是刚才的多次分组, 还是后续的分区, 都是要找到每个司机的会话, 通过会话来完成功能, 也叫做会话分析</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">功能实现</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>步骤</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>过滤掉没有经纬度的数据</p>
</li>
<li>
<p>按照&nbsp;<code>License</code>&nbsp;重新分区并按照&nbsp;<code>License</code>&nbsp;和&nbsp;<code>pickUpTime</code>&nbsp;排序</p>
</li>
<li>
<p>求得每个司机的下车和下次上车的时间差</p>
</li>
<li>
<p>求得每个行政区得统计数据</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>Step 1: 过滤没有经纬度的数据</p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val taxiDone = taxiClean.where("dropOffX != 0 and dropOffY != 0 and pickUpX != 0 and pickUpY != 0")</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Step 2: 划分会话</p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val sessions = taxiDone.repartition('license)
  .sortWithinPartitions('license, 'pickUpTime)</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Step 3: 求得时间差</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>处理每个分区, 通过&nbsp;<code>Scala</code>&nbsp;的&nbsp;<code>API</code>&nbsp;找到相邻的数据</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">sessions.mapPartitions(trips =&gt; {
  val viter = trips.sliding(2)
})</code></pre>
</div>
</div>
</li>
<li>
<p>过滤司机不同的相邻数据</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">sessions.mapPartitions(trips =&gt; {
  val viter = trips.sliding(2)
    .filter(_.size == 2)
    .filter(p =&gt; p.head.license == p.last.license)
})</code></pre>
</div>
</div>
</li>
<li>
<p>求得时间差</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">def boroughDuration(t1: Trip, t2: Trip): (String, Long) = {
  val borough = boroughLookUp(t1.dropOffX, t1.dropOffY)
  val duration = (t2.pickUpTime - t1.dropOffTime) / 1000
  (borough, duration)
}

val boroughDurations = sessions.mapPartitions(trips =&gt; {
  val viter = trips.sliding(2)
    .filter(_.size == 2)
    .filter(p =&gt; p.head.license == p.last.license)
  viter.map(p =&gt; boroughDuration(p.head, p.last))
}).toDF("borough", "seconds")</code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>Step 4: 统计数据</p>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">boroughDurations.where("seconds &gt; 0")
  .groupBy("borough")
  .agg(avg("seconds"), stddev("seconds"))
  .show()</code></pre>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>其实会话分析的难点就是理解需求</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>需求是找到每个行政区的待客时间, 就是按照行政区分组</p>
</li>
<li>
<p>需求是找到待客时间, 就是按照司机进行分组, 并且还要按照时间进行排序, 才可找到一个司机相邻的两条数据</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>但是分组和统计的效率较低</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>可以把相同司机的所有形成发往一个分区</p>
</li>
<li>
<p>然后按照司机的&nbsp;<code>License</code>&nbsp;和上车时间综合排序</p>
</li>
<li>
<p>这样就可以找到同一个司机的两次行程之间的差值</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</div>]]></description></item><item><title>Update(Stage4)：sparksql：第3节 Dataset (DataFrame) 的基础操作 &amp; 第4节 SparkSQL_聚合操作_连接操作</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/05/11626168.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 05 Oct 2019 15:39:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/05/11626168.html</guid><description><![CDATA[<ul class="sectlevel1">
<li><a href="file:///E:/Study/BigData/heimaNew/stage4%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E5%86%85%E5%AD%98%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/5sparksql/Day07/SparkSQL.html#_8_dataset_dataframe_的基础操作">8. Dataset (DataFrame) 的基础操作</a>
<ul class="sectlevel2">
<li><a href="file:///E:/Study/BigData/heimaNew/stage4%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E5%86%85%E5%AD%98%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/5sparksql/Day07/SparkSQL.html#_8_1_有类型操作">8.1. 有类型操作</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage4%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E5%86%85%E5%AD%98%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/5sparksql/Day07/SparkSQL.html#_8_2_无类型转换">8.2. 无类型转换</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage4%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E5%86%85%E5%AD%98%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/5sparksql/Day07/SparkSQL.html#_8_5_column_对象">8.5. Column 对象</a></li>
</ul>
</li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage4%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E5%86%85%E5%AD%98%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/5sparksql/Day07/SparkSQL.html#_9_缺失值处理">9. 缺失值处理</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage4%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E5%86%85%E5%AD%98%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/5sparksql/Day07/SparkSQL.html#_10_聚合">10. 聚合</a></li>
<li><a href="file:///E:/Study/BigData/heimaNew/stage4%E5%A4%A7%E6%95%B0%E6%8D%AESpark%E5%86%85%E5%AD%98%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F/5sparksql/Day07/SparkSQL.html#_11_连接">11. 连接</a></li>
</ul>
<div class="sect1">
<h2 id="_8_dataset_dataframe_的基础操作">8. Dataset (DataFrame) 的基础操作</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="paragraph">
<p>这一章节主要目的是介绍&nbsp;<code>Dataset</code>&nbsp;的基础操作, 当然,&nbsp;<code>DataFrame</code>&nbsp;就是&nbsp;<code>Dataset</code>, 所以这些操作大部分也适用于&nbsp;<code>DataFrame</code></p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>有类型的转换操作</p>
</li>
<li>
<p>无类型的转换操作</p>
</li>
<li>
<p>基础&nbsp;<code>Action</code></p>
</li>
<li>
<p>空值如何处理</p>
</li>
<li>
<p>统计操作</p>
</li>
</ol></div>
</div>
</div>
<div class="sect2">
<h3 id="_8_1_有类型操作">8.1. 有类型操作</h3>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">分类</th><th class="tableblock halign-left valign-top">算子</th><th class="tableblock halign-left valign-top">解释</th></tr>
</thead>
<tbody>
<tr><th class="tableblock halign-left valign-top" rowspan="5">
<p class="tableblock">转换</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>flatMap</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>通过&nbsp;<code>flatMap</code>&nbsp;可以将一条数据转为一个数组, 后再展开这个数组放入&nbsp;<code>Dataset</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">val ds = <span class="hljs-type">Seq(<span class="hljs-string">"hello world", <span class="hljs-string">"hello pc").toDS()
ds.flatMap( _.split(<span class="hljs-string">" ") ).show()</span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>map</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p><code>map</code>&nbsp;可以将数据集中每条数据转为另一种形式</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">val ds = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">15), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()
ds.map( person =&gt; <span class="hljs-type">Person(person.name, person.age * <span class="hljs-number">2) ).show()</span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>mapPartitions</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p><code>mapPartitions</code>&nbsp;和&nbsp;<code>map</code>&nbsp;一样, 但是&nbsp;<code>map</code>&nbsp;的处理单位是每条数据,&nbsp;<code>mapPartitions</code>的处理单位是每个分区</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">val ds = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">15), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()
ds.mapPartitions( iter =&gt; {
    <span class="hljs-keyword">val returnValue = iter.map(
      item =&gt; <span class="hljs-type">Person(item.name, item.age * <span class="hljs-number">2)
    )
    returnValue
  } )
  .show()</span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>transform</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p><code>map</code>&nbsp;和&nbsp;<code>mapPartitions</code>&nbsp;以及&nbsp;<code>transform</code>&nbsp;都是转换,&nbsp;<code>map</code>&nbsp;和&nbsp;<code>mapPartitions</code>&nbsp;是针对数据, 而&nbsp;<code>transform</code>&nbsp;是针对整个数据集, 这种方式最大的区别就是&nbsp;<code>transform</code>&nbsp;可以直接拿到&nbsp;<code>Dataset</code>&nbsp;进行操作</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190526111401.png" alt="20190526111401" width="600" /></div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">val ds = spark.range(<span class="hljs-number">5)
ds.transform( dataset =&gt; dataset.withColumn(<span class="hljs-string">"doubled", <span class="hljs-symbol">'id * <span class="hljs-number">2) )</span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>as</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p><code>as[Type]</code>&nbsp;算子的主要作用是将弱类型的&nbsp;<code>Dataset</code>&nbsp;转为强类型的&nbsp;<code>Dataset</code>, 它有很多适用场景, 但是最常见的还是在读取数据的时候, 因为&nbsp;<code>DataFrameReader</code>&nbsp;体系大部分情况下是将读出来的数据转换为&nbsp;<code>DataFrame</code>&nbsp;的形式, 如果后续需要使用&nbsp;<code>Dataset</code>的强类型&nbsp;<code>API</code>, 则需要将&nbsp;<code>DataFrame</code>&nbsp;转为&nbsp;<code>Dataset</code>. 可以使用&nbsp;<code>as[Type]</code>&nbsp;算子完成这种操作</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import spark.implicits._

<span class="hljs-keyword">val structType = <span class="hljs-type">StructType(
  <span class="hljs-type">Seq(
    <span class="hljs-type">StructField(<span class="hljs-string">"name", <span class="hljs-type">StringType),
    <span class="hljs-type">StructField(<span class="hljs-string">"age", <span class="hljs-type">IntegerType),
    <span class="hljs-type">StructField(<span class="hljs-string">"gpa", <span class="hljs-type">FloatType)
  )
)

<span class="hljs-keyword">val sourceDF = spark.read
  .schema(structType)
  .option(<span class="hljs-string">"delimiter", <span class="hljs-string">"\t")
  .csv(<span class="hljs-string">"dataset/studenttab10k")

<span class="hljs-keyword">val dataset = sourceDF.as[<span class="hljs-type">Student]
dataset.show()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock">过滤</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>filter</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p><code>filter</code>&nbsp;用来按照条件过滤数据集</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">val ds = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">15), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()
ds.filter( person =&gt; person.name == <span class="hljs-string">"lisi" ).show()</span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock">聚合</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>groupByKey</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p><code>grouByKey</code>&nbsp;算子的返回结果是&nbsp;<code>KeyValueGroupedDataset</code>, 而不是一个&nbsp;<code>Dataset</code>, 所以必须要先经过&nbsp;<code>KeyValueGroupedDataset</code>&nbsp;中的方法进行聚合, 再转回&nbsp;<code>Dataset</code>, 才能使用&nbsp;<code>Action</code>&nbsp;得出结果</p>
</div>
<div class="paragraph">
<p>其实这也印证了分组后必须聚合的道理</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">val ds = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">15), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">15), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()
ds.groupByKey( person =&gt; person.name ).count().show()</span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top" rowspan="2">
<p class="tableblock">切分</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>randomSplit</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p><code>randomSplit</code>&nbsp;会按照传入的权重随机将一个&nbsp;<code>Dataset</code>&nbsp;分为多个&nbsp;<code>Dataset</code>, 传入&nbsp;<code>randomSplit</code>&nbsp;的数组有多少个权重, 最终就会生成多少个&nbsp;<code>Dataset</code>, 这些权重的加倍和应该为 1, 否则将被标准化</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val ds = spark.range(<span class="hljs-number">15)
<span class="hljs-keyword">val datasets: <span class="hljs-type">Array[<span class="hljs-type">Dataset[lang.<span class="hljs-type">Long]] = ds.randomSplit(<span class="hljs-type">Array[<span class="hljs-type">Double](<span class="hljs-number">2, <span class="hljs-number">3))
datasets.foreach(dataset =&gt; dataset.show())</span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>sample</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p><code>sample</code>&nbsp;会随机在&nbsp;<code>Dataset</code>&nbsp;中抽样</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val ds = spark.range(<span class="hljs-number">15)
ds.sample(withReplacement = <span class="hljs-literal">false, fraction = <span class="hljs-number">0.4).show()</span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top" rowspan="2">
<p class="tableblock">排序</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>orderBy</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p><code>orderBy</code>&nbsp;配合&nbsp;<code>Column</code>&nbsp;的&nbsp;<code>API</code>, 可以实现正反序排列</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">val ds = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">12), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">8), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()
ds.orderBy(<span class="hljs-string">"age").show()
ds.orderBy(<span class="hljs-symbol">'age.desc).show()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>sort</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>其实&nbsp;<code>orderBy</code>&nbsp;是&nbsp;<code>sort</code>&nbsp;的别名, 所以它们所实现的功能是一样的</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">val ds = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">12), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">8), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()
ds.sort(<span class="hljs-symbol">'age.desc).show()</span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top" rowspan="2">
<p class="tableblock">分区</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>coalesce</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>减少分区, 此算子和&nbsp;<code>RDD</code>&nbsp;中的&nbsp;<code>coalesce</code>&nbsp;不同,&nbsp;<code>Dataset</code>&nbsp;中的&nbsp;<code>coalesce</code>&nbsp;只能减少分区数,&nbsp;<code>coalesce</code>&nbsp;会直接创建一个逻辑操作, 并且设置&nbsp;<code>Shuffle</code>&nbsp;为&nbsp;<code>false</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val ds = spark.range(<span class="hljs-number">15)
ds.coalesce(<span class="hljs-number">1).explain(<span class="hljs-literal">true)</span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>repartitions</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p><code>repartitions</code>&nbsp;有两个作用, 一个是重分区到特定的分区数, 另一个是按照某一列来分区, 类似于&nbsp;<code>SQL</code>&nbsp;中的&nbsp;<code>DISTRIBUTE BY</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val ds = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">12), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">8), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()
ds.repartition(<span class="hljs-number">4)
ds.repartition(<span class="hljs-symbol">'name)</span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top" rowspan="2">
<p class="tableblock">去重</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>dropDuplicates</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>使用&nbsp;<code>dropDuplicates</code>&nbsp;可以去掉某一些列中重复的行</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">val ds = spark.createDataset(<span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">15), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">15), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)))
ds.dropDuplicates(<span class="hljs-string">"age").show()</span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>distinct</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>当&nbsp;<code>dropDuplicates</code>&nbsp;中没有传入列名的时候, 其含义是根据所有列去重,&nbsp;<code>dropDuplicates()</code>&nbsp;方法还有一个别名, 叫做&nbsp;<code>distinct</code></p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190525182912.png" alt="20190525182912" width="800" /></div>
</div>
<div class="paragraph">
<p>所以, 使用&nbsp;<code>distinct</code>&nbsp;也可以去重, 并且只能根据所有的列来去重</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">val ds = spark.createDataset(<span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">15), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">15), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)))
ds.distinct().show()</span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top" rowspan="4">
<p class="tableblock">集合操作</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>except</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p><code>except</code>&nbsp;和&nbsp;<code>SQL</code>&nbsp;语句中的&nbsp;<code>except</code>&nbsp;一个意思, 是求得&nbsp;<code>ds1</code>&nbsp;中不存在于&nbsp;<code>ds2</code>&nbsp;中的数据, 其实就是差集</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val ds1 = spark.range(<span class="hljs-number">1, <span class="hljs-number">10)
<span class="hljs-keyword">val ds2 = spark.range(<span class="hljs-number">5, <span class="hljs-number">15)

ds1.except(ds2).show()</span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>intersect</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>求得两个集合的交集</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val ds1 = spark.range(<span class="hljs-number">1, <span class="hljs-number">10)
<span class="hljs-keyword">val ds2 = spark.range(<span class="hljs-number">5, <span class="hljs-number">15)

ds1.intersect(ds2).show()</span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>union</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>求得两个集合的并集</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val ds1 = spark.range(<span class="hljs-number">1, <span class="hljs-number">10)
<span class="hljs-keyword">val ds2 = spark.range(<span class="hljs-number">5, <span class="hljs-number">15)

ds1.union(ds2).show()</span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>limit</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>限制结果集数量</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val ds = spark.range(<span class="hljs-number">1, <span class="hljs-number">10)
ds.limit(<span class="hljs-number">3).show()</span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="sect2">
<h3 id="_8_2_无类型转换">8.2. 无类型转换</h3>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">分类</th><th class="tableblock halign-left valign-top">算子</th><th class="tableblock halign-left valign-top">解释</th></tr>
</thead>
<tbody>
<tr><th class="tableblock halign-left valign-top" rowspan="4">
<p class="tableblock">选择</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>select</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p><code>select</code>&nbsp;用来选择某些列出现在结果集中</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">val ds = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">12), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">8), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()
ds.select($<span class="hljs-string">"name").show()</span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>selectExpr</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>在&nbsp;<code>SQL</code>&nbsp;语句中, 经常可以在&nbsp;<code>select</code>&nbsp;子句中使用&nbsp;<code>count(age)</code>,&nbsp;<code>rand()</code>&nbsp;等函数, 在&nbsp;<code>selectExpr</code>&nbsp;中就可以使用这样的&nbsp;<code>SQL</code>&nbsp;表达式, 同时使用&nbsp;<code>select</code>&nbsp;配合&nbsp;<code>expr</code>函数也可以做到类似的效果</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">import org.apache.spark.sql.functions._
<span class="hljs-keyword">val ds = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">12), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">8), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()
ds.selectExpr(<span class="hljs-string">"count(age) as count").show()
ds.selectExpr(<span class="hljs-string">"rand() as random").show()
ds.select(expr(<span class="hljs-string">"count(age) as count")).show()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>withColumn</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>通过&nbsp;<code>Column</code>&nbsp;对象在&nbsp;<code>Dataset</code>&nbsp;中创建一个新的列或者修改原来的列</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">import org.apache.spark.sql.functions._
<span class="hljs-keyword">val ds = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">12), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">8), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()
ds.withColumn(<span class="hljs-string">"random", expr(<span class="hljs-string">"rand()")).show()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>withColumnRenamed</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>修改列名</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">val ds = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">12), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">8), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()
ds.withColumnRenamed(<span class="hljs-string">"name", <span class="hljs-string">"new_name").show()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock">剪除</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock">drop</p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>剪掉某个列</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">val ds = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">12), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">8), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()
ds.drop(<span class="hljs-symbol">'age).show()</span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock">聚合</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock">groupBy</p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>按照给定的行进行分组</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">val ds = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">12), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">8), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()
ds.groupBy(<span class="hljs-symbol">'name).count().show()</span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="sect2">
<h3 id="_8_5_column_对象">8.5. Column 对象</h3>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="paragraph">
<p>Column 表示了 Dataset 中的一个列, 并且可以持有一个表达式, 这个表达式作用于每一条数据, 对每条数据都生成一个值, 之所以有单独这样的一个章节是因为列的操作属于细节, 但是又比较常见, 会在很多算子中配合出现</p>
</div>
</div>
</div>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">分类</th><th class="tableblock halign-left valign-top">操作</th><th class="tableblock halign-left valign-top">解释</th></tr>
</thead>
<tbody>
<tr><th class="tableblock halign-left valign-top" rowspan="6">
<p class="tableblock">创建</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>'</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>单引号&nbsp;<code>'</code>&nbsp;在 Scala 中是一个特殊的符号, 通过&nbsp;<code>'</code>&nbsp;会生成一个&nbsp;<code>Symbol</code>&nbsp;对象,&nbsp;<code>Symbol</code>&nbsp;对象可以理解为是一个字符串的变种, 但是比字符串的效率高很多, 在&nbsp;<code>Spark</code>&nbsp;中, 对&nbsp;<code>Scala</code>&nbsp;中的&nbsp;<code>Symbol</code>&nbsp;对象做了隐式转换, 转换为一个&nbsp;<code>ColumnName</code>&nbsp;对象,&nbsp;<code>ColumnName</code>&nbsp;是&nbsp;<code>Column</code>&nbsp;的子类, 所以在&nbsp;<code>Spark</code>中可以如下去选中一个列</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark = <span class="hljs-type">SparkSession.builder().appName(<span class="hljs-string">"column").master(<span class="hljs-string">"local[6]").getOrCreate()
<span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">val personDF = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">12), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">8), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()

<span class="hljs-keyword">val c1: <span class="hljs-type">Symbol = <span class="hljs-symbol">'name</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>$</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>同理,&nbsp;<code>$</code>&nbsp;符号也是一个隐式转换, 同样通过&nbsp;<code>spark.implicits</code>&nbsp;导入, 通过&nbsp;<code>$</code>&nbsp;可以生成一个&nbsp;<code>Column</code>&nbsp;对象</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark = <span class="hljs-type">SparkSession.builder().appName(<span class="hljs-string">"column").master(<span class="hljs-string">"local[6]").getOrCreate()
<span class="hljs-keyword">import spark.implicits._
<span class="hljs-keyword">val personDF = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">12), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">8), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()

<span class="hljs-keyword">val c2: <span class="hljs-type">ColumnName = $<span class="hljs-string">"name"</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>col</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p><code>SparkSQL</code>&nbsp;提供了一系列的函数, 可以通过函数实现很多功能, 在后面课程中会进行详细介绍, 这些函数中有两个可以帮助我们创建&nbsp;<code>Column</code>&nbsp;对象, 一个是&nbsp;<code>col</code>, 另外一个是&nbsp;<code>column</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark = <span class="hljs-type">SparkSession.builder().appName(<span class="hljs-string">"column").master(<span class="hljs-string">"local[6]").getOrCreate()
<span class="hljs-keyword">import org.apache.spark.sql.functions._
<span class="hljs-keyword">val personDF = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">12), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">8), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()

<span class="hljs-keyword">val c3: sql.<span class="hljs-type">Column = col(<span class="hljs-string">"name")</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>column</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark = <span class="hljs-type">SparkSession.builder().appName(<span class="hljs-string">"column").master(<span class="hljs-string">"local[6]").getOrCreate()
<span class="hljs-keyword">import org.apache.spark.sql.functions._
<span class="hljs-keyword">val personDF = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">12), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">8), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()

<span class="hljs-keyword">val c4: sql.<span class="hljs-type">Column = column(<span class="hljs-string">"name")</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>Dataset.col</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>前面的&nbsp;<code>Column</code>&nbsp;对象创建方式所创建的&nbsp;<code>Column</code>&nbsp;对象都是&nbsp;<code>Free</code>&nbsp;的, 也就是没有绑定任何&nbsp;<code>Dataset</code>, 所以可以作用于任何&nbsp;<code>Dataset</code>, 同时, 也可以通过&nbsp;<code>Dataset</code>&nbsp;的&nbsp;<code>col</code>&nbsp;方法选择一个列, 但是这个&nbsp;<code>Column</code>&nbsp;是绑定了这个&nbsp;<code>Dataset</code>&nbsp;的, 所以只能用于创建其的&nbsp;<code>Dataset</code>&nbsp;上</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark = <span class="hljs-type">SparkSession.builder().appName(<span class="hljs-string">"column").master(<span class="hljs-string">"local[6]").getOrCreate()
<span class="hljs-keyword">val personDF = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">12), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">8), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()

<span class="hljs-keyword">val c5: sql.<span class="hljs-type">Column = personDF.col(<span class="hljs-string">"name")</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>Dataset.apply</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>可以通过&nbsp;<code>Dataset</code>&nbsp;对象的&nbsp;<code>apply</code>&nbsp;方法来获取一个关联此&nbsp;<code>Dataset</code>&nbsp;的&nbsp;<code>Column</code>&nbsp;对象</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark = <span class="hljs-type">SparkSession.builder().appName(<span class="hljs-string">"column").master(<span class="hljs-string">"local[6]").getOrCreate()
<span class="hljs-keyword">val personDF = <span class="hljs-type">Seq(<span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">12), <span class="hljs-type">Person(<span class="hljs-string">"zhangsan", <span class="hljs-number">8), <span class="hljs-type">Person(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()

<span class="hljs-keyword">val c6: sql.<span class="hljs-type">Column = personDF.apply(<span class="hljs-string">"name")</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p><code>apply</code>&nbsp;的调用有一个简写形式</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val c7: sql.<span class="hljs-type">Column = personDF(<span class="hljs-string">"name")</span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top" rowspan="2">
<p class="tableblock">别名和转换</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>as[Type]</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p><code>as</code>&nbsp;方法有两个用法, 通过&nbsp;<code>as[Type]</code>&nbsp;的形式可以将一个列中数据的类型转为&nbsp;<code>Type</code>&nbsp;类型</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">personDF.select(col(<span class="hljs-string">"age").as[<span class="hljs-type">Long]).show()</span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>as(name)</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>通过&nbsp;<code>as(name)</code>&nbsp;的形式使用&nbsp;<code>as</code>&nbsp;方法可以为列创建别名</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">personDF.select(col(<span class="hljs-string">"age").as(<span class="hljs-string">"age_new")).show()</span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock">添加列</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>withColumn</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>通过&nbsp;<code>Column</code>&nbsp;在添加一个新的列时候修改&nbsp;<code>Column</code>&nbsp;所代表的列的数据</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">personDF.withColumn(<span class="hljs-string">"double_age", <span class="hljs-symbol">'age * <span class="hljs-number">2).show()</span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top" rowspan="3">
<p class="tableblock">操作</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>like</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>通过&nbsp;<code>Column</code>&nbsp;的&nbsp;<code>API</code>, 可以轻松实现&nbsp;<code>SQL</code>&nbsp;语句中&nbsp;<code>LIKE</code>&nbsp;的功能</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">personDF.filter(<span class="hljs-symbol">'name like <span class="hljs-string">"%zhang%").show()</span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>isin</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>通过&nbsp;<code>Column</code>&nbsp;的&nbsp;<code>API</code>, 可以轻松实现&nbsp;<code>SQL</code>&nbsp;语句中&nbsp;<code>ISIN</code>&nbsp;的功能</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">personDF.filter(<span class="hljs-symbol">'name isin (<span class="hljs-string">"hello", <span class="hljs-string">"zhangsan")).show()</span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>sort</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>在排序的时候, 可以通过&nbsp;<code>Column</code>&nbsp;的&nbsp;<code>API</code>&nbsp;实现正反序</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">personDF.sort(<span class="hljs-symbol">'age.asc).show()
personDF.sort(<span class="hljs-symbol">'age.desc).show()</span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_9_缺失值处理">9. 缺失值处理</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>DataFrame</code>&nbsp;中什么时候会有无效值</p>
</li>
<li>
<p><code>DataFrame</code>&nbsp;如何处理无效的值</p>
</li>
<li>
<p><code>DataFrame</code>&nbsp;如何处理&nbsp;<code>null</code></p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">缺失值的处理思路</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>如果想探究如何处理无效值, 首先要知道无效值从哪来, 从而分析可能产生的无效值有哪些类型, 在分别去看如何处理无效值</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">什么是缺失值</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>一个值本身的含义是这个值不存在则称之为缺失值, 也就是说这个值本身代表着缺失, 或者这个值本身无意义, 比如说&nbsp;<code>null</code>, 比如说空字符串</p>
</div>
<div class="paragraph">
<p><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191009215835531-812943050.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>关于数据的分析其实就是统计分析的概念, 如果这样的话, 当数据集中存在缺失值, 则无法进行统计和分析, 对很多操作都有影响</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">缺失值如何产生的</dt><dt class="hdlist1"><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191009215917825-1490635013.png" alt="" /></dt></dl><dl><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>Spark 大多时候处理的数据来自于业务系统中, 业务系统中可能会因为各种原因, 产生一些异常的数据</p>
</div>
<div class="paragraph">
<p>例如说因为前后端的判断失误, 提交了一些非法参数. 再例如说因为业务系统修改&nbsp;<code>MySQL</code>&nbsp;表结构产生的一些空值数据等. 总之在业务系统中出现缺失值其实是非常常见的一件事, 所以大数据系统就一定要考虑这件事.</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">缺失值的类型</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>常见的缺失值有两种</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>null</code>,&nbsp;<code>NaN</code>&nbsp;等特殊类型的值, 某些语言中&nbsp;<code>null</code>&nbsp;可以理解是一个对象, 但是代表没有对象,&nbsp;<code>NaN</code>&nbsp;是一个数字, 可以代表不是数字</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>针对这一类的缺失值,&nbsp;<code>Spark</code>&nbsp;提供了一个名为&nbsp;<code>DataFrameNaFunctions</code>&nbsp;特殊类型来操作和处理</p>
</div>
</div>
</div>
</li>
<li>
<p><code>"Null"</code>,&nbsp;<code>"NA"</code>,&nbsp;<code>" "</code>&nbsp;等解析为字符串的类型, 但是其实并不是常规字符串数据</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>针对这类字符串, 需要对数据集进行采样, 观察异常数据, 总结经验, 各个击破</p>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1"><code>DataFrameNaFunctions</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>DataFrameNaFunctions</code>&nbsp;使用&nbsp;<code>Dataset</code>&nbsp;的&nbsp;<code>na</code>&nbsp;函数来获取</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val df = ...
<span class="hljs-keyword">val naFunc: <span class="hljs-type">DataFrameNaFunctions = df.na</span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>当数据集中出现缺失值的时候, 大致有两种处理方式, 一个是丢弃, 一个是替换为某值,&nbsp;<code>DataFrameNaFunctions</code>&nbsp;中包含一系列针对空值数据的方案</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>DataFrameNaFunctions.drop</code>&nbsp;可以在当某行中包含&nbsp;<code>null</code>&nbsp;或&nbsp;<code>NaN</code>&nbsp;的时候丢弃此行</p>
</li>
<li>
<p><code>DataFrameNaFunctions.fill</code>&nbsp;可以在将&nbsp;<code>null</code>&nbsp;和&nbsp;<code>NaN</code>&nbsp;充为其它值</p>
</li>
<li>
<p><code>DataFrameNaFunctions.replace</code>&nbsp;可以把&nbsp;<code>null</code>&nbsp;或&nbsp;<code>NaN</code>&nbsp;替换为其它值, 但是和&nbsp;<code>fill</code>&nbsp;略有一些不同, 这个方法针对值来进行替换</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">如何使用&nbsp;<code>SparkSQL</code>&nbsp;处理&nbsp;<code>null</code>&nbsp;和&nbsp;<code>NaN</code>&nbsp;?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>首先要将数据读取出来, 此次使用的数据集直接存在&nbsp;<code>NaN</code>, 在指定&nbsp;<code>Schema</code>&nbsp;后, 可直接被转为&nbsp;<code>Double.NaN</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val schema = <span class="hljs-type">StructType(
  <span class="hljs-type">List(
    <span class="hljs-type">StructField(<span class="hljs-string">"id", <span class="hljs-type">IntegerType),
    <span class="hljs-type">StructField(<span class="hljs-string">"year", <span class="hljs-type">IntegerType),
    <span class="hljs-type">StructField(<span class="hljs-string">"month", <span class="hljs-type">IntegerType),
    <span class="hljs-type">StructField(<span class="hljs-string">"day", <span class="hljs-type">IntegerType),
    <span class="hljs-type">StructField(<span class="hljs-string">"hour", <span class="hljs-type">IntegerType),
    <span class="hljs-type">StructField(<span class="hljs-string">"season", <span class="hljs-type">IntegerType),
    <span class="hljs-type">StructField(<span class="hljs-string">"pm", <span class="hljs-type">DoubleType)
  )
)

<span class="hljs-keyword">val df = spark.read
  .option(<span class="hljs-string">"header", value = <span class="hljs-literal">true)
  .schema(schema)
  .csv(<span class="hljs-string">"dataset/beijingpm_with_nan.csv")</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>对于缺失值的处理一般就是丢弃和填充</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">丢弃包含&nbsp;<code>null</code>&nbsp;和&nbsp;<code>NaN</code>&nbsp;的行</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>当某行数据所有值都是&nbsp;<code>null</code>&nbsp;或者&nbsp;<code>NaN</code>&nbsp;的时候丢弃此行</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">df.na.drop(<span class="hljs-string">"all").show()</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>当某行中特定列所有值都是&nbsp;<code>null</code>&nbsp;或者&nbsp;<code>NaN</code>&nbsp;的时候丢弃此行</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">df.na.drop(<span class="hljs-string">"all", <span class="hljs-type">List(<span class="hljs-string">"pm", <span class="hljs-string">"id")).show()</span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>当某行数据任意一个字段为&nbsp;<code>null</code>&nbsp;或者&nbsp;<code>NaN</code>&nbsp;的时候丢弃此行</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">df.na.drop().show()
df.na.drop(<span class="hljs-string">"any").show()</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>当某行中特定列任意一个字段为&nbsp;<code>null</code>&nbsp;或者&nbsp;<code>NaN</code>&nbsp;的时候丢弃此行</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">df.na.drop(<span class="hljs-type">List(<span class="hljs-string">"pm", <span class="hljs-string">"id")).show()
df.na.drop(<span class="hljs-string">"any", <span class="hljs-type">List(<span class="hljs-string">"pm", <span class="hljs-string">"id")).show()</span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">填充包含&nbsp;<code>null</code>&nbsp;和&nbsp;<code>NaN</code>&nbsp;的列</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>填充所有包含&nbsp;<code>null</code>&nbsp;和&nbsp;<code>NaN</code>&nbsp;的列</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">df.na.fill(<span class="hljs-number">0).show()</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>填充特定包含&nbsp;<code>null</code>&nbsp;和&nbsp;<code>NaN</code>&nbsp;的列</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">df.na.fill(<span class="hljs-number">0, <span class="hljs-type">List(<span class="hljs-string">"pm")).show()</span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>根据包含&nbsp;<code>null</code>&nbsp;和&nbsp;<code>NaN</code>&nbsp;的列的不同来填充</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import scala.collection.<span class="hljs-type">JavaConverters._

df.na.fill(<span class="hljs-type">Map[<span class="hljs-type">String, <span class="hljs-type">Any](<span class="hljs-string">"pm" -&gt; <span class="hljs-number">0).asJava).show</span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">如何使用&nbsp;<code>SparkSQL</code>&nbsp;处理异常字符串 ?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>读取数据集, 这次读取的是最原始的那个&nbsp;<code>PM</code>&nbsp;数据集</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val df = spark.read
  .option(<span class="hljs-string">"header", value = <span class="hljs-literal">true)
  .csv(<span class="hljs-string">"dataset/BeijingPM20100101_20151231.csv")</span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>使用函数直接转换非法的字符串</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">df.select(<span class="hljs-symbol">'No as <span class="hljs-string">"id", <span class="hljs-symbol">'year, <span class="hljs-symbol">'month, <span class="hljs-symbol">'day, <span class="hljs-symbol">'hour, <span class="hljs-symbol">'season,
    when(<span class="hljs-symbol">'PM_Dongsi === <span class="hljs-string">"NA", <span class="hljs-number">0)
    .otherwise(<span class="hljs-symbol">'PM_Dongsi cast <span class="hljs-type">DoubleType)
    .as(<span class="hljs-string">"pm"))
  .show()</span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>使用&nbsp;<code>where</code>&nbsp;直接过滤</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">df.select(<span class="hljs-symbol">'No as <span class="hljs-string">"id", <span class="hljs-symbol">'year, <span class="hljs-symbol">'month, <span class="hljs-symbol">'day, <span class="hljs-symbol">'hour, <span class="hljs-symbol">'season, <span class="hljs-symbol">'PM_Dongsi)
  .where(<span class="hljs-symbol">'PM_Dongsi =!= <span class="hljs-string">"NA")
  .show()</span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>使用&nbsp;<code>DataFrameNaFunctions</code>&nbsp;替换, 但是这种方式被替换的值和新值必须是同类型</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">df.select(<span class="hljs-symbol">'No as <span class="hljs-string">"id", <span class="hljs-symbol">'year, <span class="hljs-symbol">'month, <span class="hljs-symbol">'day, <span class="hljs-symbol">'hour, <span class="hljs-symbol">'season, <span class="hljs-symbol">'PM_Dongsi)
  .na.replace(<span class="hljs-string">"PM_Dongsi", <span class="hljs-type">Map(<span class="hljs-string">"NA" -&gt; <span class="hljs-string">"NaN"))
  .show()</span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
<div class="sect1">
<h2 id="_10_聚合">10. 聚合</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">导读 （详见代码）</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>groupBy</code></p>
</li>
<li>
<p><code>rollup</code></p>
</li>
<li>
<p><code>cube</code></p>
</li>
<li>
<p><code>pivot</code></p>
</li>
<li>
<p><code>RelationalGroupedDataset</code>&nbsp;上的聚合操作</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>groupBy</code></dt><dt class="hdlist1"><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191006232157371-1300677771.png" alt="" /></dt></dl><dl><dt class="hdlist1"></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>groupBy</code>&nbsp;算子会按照列将&nbsp;<code>Dataset</code>&nbsp;分组, 并返回一个&nbsp;<code>RelationalGroupedDataset</code>&nbsp;对象, 通过&nbsp;<code>RelationalGroupedDataset</code>&nbsp;可以对分组进行聚合</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">Step 1: 加载实验数据</dt><dt class="hdlist1">Step 2: 使用&nbsp;<code>functions</code>&nbsp;函数进行聚合</dt><dt class="hdlist1">Step 3: 除了使用&nbsp;<code>functions</code>&nbsp;进行聚合, 还可以直接使用&nbsp;<code>RelationalGroupedDataset</code>&nbsp;的&nbsp;<code>API</code>&nbsp;进行聚合</dt></dl></div>
</div>
</div>
</dd><dt class="hdlist1">多维聚合</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>我们可能经常需要针对数据进行多维的聚合, 也就是一次性统计小计, 总计等, 一般的思路如下</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">Step 1: 准备数据</dt><dt class="hdlist1">Step 2: 进行多维度聚合</dt></dl></div>
<div class="paragraph">
<p>大家其实也能看出来, 在一个数据集中又小计又总计, 可能需要多个操作符, 如何简化呢? 请看下面</p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>rollup</code>&nbsp;操作符</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>rollup</code>&nbsp;操作符其实就是&nbsp;<code>groupBy</code>&nbsp;的一个扩展,&nbsp;<code>rollup</code>&nbsp;会对传入的列进行滚动&nbsp;<code>groupBy</code>,&nbsp;<code>groupBy</code>&nbsp;的次数为列数量&nbsp;<code>+ 1</code>, 最后一次是对整个数据集进行聚合</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">Step 1: 创建数据集</dt><dt class="hdlist1">Step 2: 如果使用基础的 groupBy 如何实现效果?</dt></dl></div>
<div class="paragraph">
<p>很明显可以看到, 在上述案例中,&nbsp;<code>rollup</code>&nbsp;就相当于先按照&nbsp;<code>city</code>,&nbsp;<code>year</code>&nbsp;进行聚合, 后按照&nbsp;<code>city</code>&nbsp;进行聚合, 最后对整个数据集进行聚合, 在按照&nbsp;<code>city</code>&nbsp;聚合时,&nbsp;<code>year</code>&nbsp;列值为&nbsp;<code>null</code>, 聚合整个数据集的时候, 除了聚合列, 其它列值都为&nbsp;<code>null</code></p>
</div>
</div>
</div>
</dd><dt class="hdlist1">使用&nbsp;<code>rollup</code>&nbsp;完成&nbsp;<code>pm</code>&nbsp;值的统计</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>上面的案例使用&nbsp;<code>rollup</code>&nbsp;来实现会非常的简单</p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>cube</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>cube</code>&nbsp;的功能和&nbsp;<code>rollup</code>&nbsp;是一样的, 但也有区别, 区别如下</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>rollup(A, B).sum&copy;</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>其结果集中会有三种数据形式:&nbsp;<code>A B C</code>,&nbsp;<code>A null C</code>,&nbsp;<code>null null C</code></p>
</div>
<div class="paragraph">
<p>不知道大家发现没, 结果集中没有对&nbsp;<code>B</code>&nbsp;列的聚合结果</p>
</div>
</div>
</div>
</li>
<li>
<p><code>cube(A, B).sum&copy;</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>其结果集中会有四种数据形式:&nbsp;<code>A B C</code>,&nbsp;<code>A null C</code>,&nbsp;<code>null null C</code>,&nbsp;<code>null B C</code></p>
</div>
<div class="paragraph">
<p>不知道大家发现没, 比&nbsp;<code>rollup</code>&nbsp;的结果集中多了一个&nbsp;<code>null B C</code>, 也就是说,&nbsp;<code>rollup</code>&nbsp;只会按照第一个列来进行组合聚合, 但是&nbsp;<code>cube</code>&nbsp;会将全部列组合聚合</p>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>SparkSQL</code>&nbsp;中支持的&nbsp;<code>SQL</code>&nbsp;语句实现&nbsp;<code>cube</code>&nbsp;功能</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>SparkSQL</code>&nbsp;支持&nbsp;<code>GROUPING SETS</code>&nbsp;语句, 可以随意排列组合空值分组聚合的顺序和组成, 既可以实现&nbsp;<code>cube</code>&nbsp;也可以实现&nbsp;<code>rollup</code>的功能</p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>RelationalGroupedDataset</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>常见的&nbsp;<code>RelationalGroupedDataset</code>&nbsp;获取方式有三种</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>groupBy</code></p>
</li>
<li>
<p><code>rollup</code></p>
</li>
<li>
<p><code>cube</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>无论通过任何一种方式获取了&nbsp;<code>RelationalGroupedDataset</code>&nbsp;对象, 其所表示的都是是一个被分组的&nbsp;<code>DataFrame</code>, 通过这个对象, 可以对数据集的分组结果进行聚合</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val groupedDF: <span class="hljs-type">RelationalGroupedDataset = pmDF.groupBy(<span class="hljs-symbol">'year)</span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>需要注意的是,&nbsp;<code>RelationalGroupedDataset</code>&nbsp;并不是&nbsp;<code>DataFrame</code>, 所以其中并没有&nbsp;<code>DataFrame</code>&nbsp;的方法, 只有如下一些聚合相关的方法, 如下这些方法在调用过后会生成&nbsp;<code>DataFrame</code>&nbsp;对象, 然后就可以再次使用&nbsp;<code>DataFrame</code>&nbsp;的算子进行操作了</p>
</div>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">操作符</th><th class="tableblock halign-left valign-top">解释</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>avg</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">求平均数</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>count</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">求总数</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>max</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">求极大值</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>min</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">求极小值</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>mean</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">求均数</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>sum</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">求和</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>agg</code></p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="paragraph">
<p>聚合, 可以使用&nbsp;<code>sql.functions</code>&nbsp;中的函数来配合进行操作</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">pmDF.groupBy(<span class="hljs-symbol">'year)
    .agg(avg(<span class="hljs-symbol">'pm) as <span class="hljs-string">"pm_avg")</span></span></span></code></pre>
</div>
</div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd></dl></div>
</div>
</div>
<div class="sect1">
<h2 id="_11_连接">11. 连接</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">导读（详见代码）</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>无类型连接&nbsp;<code>join</code></p>
</li>
<li>
<p>连接类型&nbsp;<code>Join Types</code></p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">无类型连接算子&nbsp;<code>join</code>&nbsp;的&nbsp;<code>API</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">Step 1: 什么是连接</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>按照 PostgreSQL 的文档中所说, 只要能在一个查询中, 同一时间并发的访问多条数据, 就叫做连接.</p>
</div>
<div class="paragraph">
<p>做到这件事有两种方式</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>一种是把两张表在逻辑上连接起来, 一条语句中同时访问两张表</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql"><span class="hljs-keyword">select * <span class="hljs-keyword">from <span class="hljs-keyword">user <span class="hljs-keyword">join address <span class="hljs-keyword">on user.address_id = address.id</span></span></span></span></span></code></pre>
</div>
</div>
</li>
<li>
<p>还有一种方式就是表连接自己, 一条语句也能访问自己中的多条数据</p>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql"><span class="hljs-keyword">select * <span class="hljs-keyword">from <span class="hljs-keyword">user u1 <span class="hljs-keyword">join (<span class="hljs-keyword">select * <span class="hljs-keyword">from <span class="hljs-keyword">user) u2 <span class="hljs-keyword">on u1.id = u2.id</span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">Step 2:&nbsp;<code>join</code>&nbsp;算子的使用非常简单, 大致的调用方式如下</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">join(right: <span class="hljs-type">Dataset[_], joinExprs: <span class="hljs-type">Column, joinType: <span class="hljs-type">String): <span class="hljs-type">DataFrame</span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">Step 3: 简单连接案例</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>表结构如下</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">+---+------+------+            +---+---------+
| id|  name|cityId|            | id|     name|
+---+------+------+            +---+---------+
|  0|  Lucy|     0|            |  0|  Beijing|
|  1|  Lily|     0|            |  1| Shanghai|
|  2|   Tim|     2|            |  2|Guangzhou|
|  3|Danial|     0|            +---+---------+
+---+------+------+</code></pre>
</div>
</div>
<div class="paragraph">
<p>如果希望对这两张表进行连接, 首先应该注意的是可以连接的字段, 比如说此处的左侧表&nbsp;<code>cityId</code>&nbsp;和右侧表&nbsp;<code>id</code>&nbsp;就是可以连接的字段, 使用&nbsp;<code>join</code>&nbsp;算子就可以将两个表连接起来, 进行统一的查询</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">Step 4: 什么是连接?</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>现在两个表连接得到了如下的表</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">+---+------+---------+
| id|  name|     city|
+---+------+---------+
|  0|  Lucy|  Beijing|
|  1|  Lily|  Beijing|
|  2|   Tim|Guangzhou|
|  3|Danial|  Beijing|
+---+------+---------+</code></pre>
</div>
</div>
<div class="paragraph">
<p>通过对这张表的查询, 这个查询是作用于两张表的, 所以是同一时间访问了多条数据</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">spark.sql(<span class="hljs-string">"select name from user_city where city = 'Beijing'").show()

<span class="hljs-comment">/**
  * 执行结果
  *
  * +------+
  * |  name|
  * +------+
  * |  Lucy|
  * |  Lily|
  * |Danial|
  * +------+
  */</span></span></code></pre>
</div>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190529095232.png" alt="20190529095232" /></div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">连接类型</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>如果要运行如下代码, 需要先进行数据准备</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">private <span class="hljs-keyword">val spark = <span class="hljs-type">SparkSession.builder()
  .master(<span class="hljs-string">"local[6]")
  .appName(<span class="hljs-string">"aggregation")
  .getOrCreate()

<span class="hljs-keyword">import spark.implicits._

<span class="hljs-keyword">val person = <span class="hljs-type">Seq((<span class="hljs-number">0, <span class="hljs-string">"Lucy", <span class="hljs-number">0), (<span class="hljs-number">1, <span class="hljs-string">"Lily", <span class="hljs-number">0), (<span class="hljs-number">2, <span class="hljs-string">"Tim", <span class="hljs-number">2), (<span class="hljs-number">3, <span class="hljs-string">"Danial", <span class="hljs-number">3))
  .toDF(<span class="hljs-string">"id", <span class="hljs-string">"name", <span class="hljs-string">"cityId")
person.createOrReplaceTempView(<span class="hljs-string">"person")

<span class="hljs-keyword">val cities = <span class="hljs-type">Seq((<span class="hljs-number">0, <span class="hljs-string">"Beijing"), (<span class="hljs-number">1, <span class="hljs-string">"Shanghai"), (<span class="hljs-number">2, <span class="hljs-string">"Guangzhou"))
  .toDF(<span class="hljs-string">"id", <span class="hljs-string">"name")
cities.createOrReplaceTempView(<span class="hljs-string">"cities")</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">连接类型</th><th class="tableblock halign-left valign-top">类型字段</th><th class="tableblock halign-left valign-top">解释</th></tr>
</thead>
<tbody>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock">交叉连接</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>cross</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">解释</dt><dd>
<div class="paragraph">
<p>交叉连接就是笛卡尔积, 就是两个表中所有的数据两两结对</p>
</div>
<div class="paragraph">
<p>交叉连接是一个非常重的操作, 在生产中, 尽量不要将两个大数据集交叉连接, 如果一定要交叉连接, 也需要在交叉连接后进行过滤, 优化器会进行优化</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190529120732.png" alt="20190529120732" width="800" /></div>
</div>
</dd><dt class="hdlist1"><code>SQL</code>&nbsp;语句</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql"><span class="hljs-keyword">select * <span class="hljs-keyword">from person <span class="hljs-keyword">cross <span class="hljs-keyword">join cities</span></span></span></span></code></pre>
</div>
</div>
</dd><dt class="hdlist1"><code>Dataset</code>&nbsp;操作</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">person.crossJoin(cities)
  .where(person.col(<span class="hljs-string">"cityId") === cities.col(<span class="hljs-string">"id"))
  .show()</span></span></code></pre>
</div>
</div>
</dd></dl></div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock">内连接</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>inner</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">解释</dt><dd>
<div class="paragraph">
<p>内连接就是按照条件找到两个数据集关联的数据, 并且在生成的结果集中只存在能关联到的数据</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190529115831.png" alt="20190529115831" width="800" /></div>
</div>
</dd><dt class="hdlist1"><code>SQL</code>&nbsp;语句</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql"><span class="hljs-keyword">select * <span class="hljs-keyword">from person <span class="hljs-keyword">inner <span class="hljs-keyword">join cities <span class="hljs-keyword">on person.cityId = cities.id</span></span></span></span></span></code></pre>
</div>
</div>
</dd><dt class="hdlist1"><code>Dataset</code>&nbsp;操作</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">person.join(right = cities,
  joinExprs = person(<span class="hljs-string">"cityId") === cities(<span class="hljs-string">"id"),
  joinType = <span class="hljs-string">"inner")
  .show()</span></span></span></code></pre>
</div>
</div>
</dd></dl></div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock">全外连接</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>outer</code>,&nbsp;<code>full</code>,&nbsp;<code>fullouter</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">解释</dt><dd>
<div class="paragraph">
<p>内连接和外连接的最大区别, 就是内连接的结果集中只有可以连接上的数据, 而外连接可以包含没有连接上的数据, 根据情况的不同, 外连接又可以分为很多种, 比如所有的没连接上的数据都放入结果集, 就叫做全外连接</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190529120033.png" alt="20190529120033" width="800" /></div>
</div>
</dd><dt class="hdlist1"><code>SQL</code>&nbsp;语句</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql"><span class="hljs-keyword">select * <span class="hljs-keyword">from person <span class="hljs-keyword">full <span class="hljs-keyword">outer <span class="hljs-keyword">join cities <span class="hljs-keyword">on person.cityId = cities.id</span></span></span></span></span></span></code></pre>
</div>
</div>
</dd><dt class="hdlist1"><code>Dataset</code>&nbsp;操作</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">person.join(right = cities,
  joinExprs = person(<span class="hljs-string">"cityId") === cities(<span class="hljs-string">"id"),
  joinType = <span class="hljs-string">"full") <span class="hljs-comment">// "outer", "full", "full_outer"
  .show()</span></span></span></span></code></pre>
</div>
</div>
</dd></dl></div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock">左外连接</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>leftouter</code>,&nbsp;<code>left</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">解释</dt><dd>
<div class="paragraph">
<p>左外连接是全外连接的一个子集, 全外连接中包含左右两边数据集没有连接上的数据, 而左外连接只包含左边数据集中没有连接上的数据</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190529120139.png" alt="20190529120139" width="500" /></div>
</div>
</dd><dt class="hdlist1"><code>SQL</code>&nbsp;语句</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql"><span class="hljs-keyword">select * <span class="hljs-keyword">from person <span class="hljs-keyword">left <span class="hljs-keyword">join cities <span class="hljs-keyword">on person.cityId = cities.id</span></span></span></span></span></code></pre>
</div>
</div>
</dd><dt class="hdlist1"><code>Dataset</code>&nbsp;操作</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">person.join(right = cities,
  joinExprs = person(<span class="hljs-string">"cityId") === cities(<span class="hljs-string">"id"),
  joinType = <span class="hljs-string">"left") <span class="hljs-comment">// leftouter, left
  .show()</span></span></span></span></code></pre>
</div>
</div>
</dd></dl></div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>LeftAnti</code></p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>leftanti</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">解释</dt><dd>
<div class="paragraph">
<p><code>LeftAnti</code>&nbsp;是一种特殊的连接形式, 和左外连接类似, 但是其结果集中没有右侧的数据, 只包含左边集合中没连接上的数据</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190529120454.png" alt="20190529120454" width="800" /></div>
</div>
</dd><dt class="hdlist1"><code>SQL</code>&nbsp;语句</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql"><span class="hljs-keyword">select * <span class="hljs-keyword">from person <span class="hljs-keyword">left anti <span class="hljs-keyword">join cities <span class="hljs-keyword">on person.cityId = cities.id</span></span></span></span></span></code></pre>
</div>
</div>
</dd><dt class="hdlist1"><code>Dataset</code>&nbsp;操作</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">person.join(right = cities,
  joinExprs = person(<span class="hljs-string">"cityId") === cities(<span class="hljs-string">"id"),
  joinType = <span class="hljs-string">"left_anti")
  .show()</span></span></span></code></pre>
</div>
</div>
</dd></dl></div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>LeftSemi</code></p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>leftsemi</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">解释</dt><dd>
<div class="paragraph">
<p>和&nbsp;<code>LeftAnti</code>&nbsp;恰好相反,&nbsp;<code>LeftSemi</code>&nbsp;的结果集也没有右侧集合的数据, 但是只包含左侧集合中连接上的数据</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190529120406.png" alt="20190529120406" width="800" /></div>
</div>
</dd><dt class="hdlist1"><code>SQL</code>&nbsp;语句</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql"><span class="hljs-keyword">select * <span class="hljs-keyword">from person <span class="hljs-keyword">left semi <span class="hljs-keyword">join cities <span class="hljs-keyword">on person.cityId = cities.id</span></span></span></span></span></code></pre>
</div>
</div>
</dd><dt class="hdlist1"><code>Dataset</code>&nbsp;操作</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">person.join(right = cities,
  joinExprs = person(<span class="hljs-string">"cityId") === cities(<span class="hljs-string">"id"),
  joinType = <span class="hljs-string">"left_semi")
  .show()</span></span></span></code></pre>
</div>
</div>
</dd></dl></div>
</div>
</td>
</tr>
<tr><th class="tableblock halign-left valign-top">
<p class="tableblock">右外连接</p>
</th><th class="tableblock halign-left valign-top">
<p class="tableblock"><code>rightouter</code>,&nbsp;<code>right</code></p>
</th>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">解释</dt><dd>
<div class="paragraph">
<p>右外连接和左外连接刚好相反, 左外是包含左侧未连接的数据, 和两个数据集中连接上的数据, 而右外是包含右侧未连接的数据, 和两个数据集中连接上的数据</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190529120222.png" alt="20190529120222" width="800" /></div>
</div>
</dd><dt class="hdlist1"><code>SQL</code>&nbsp;语句</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql"><span class="hljs-keyword">select * <span class="hljs-keyword">from person <span class="hljs-keyword">right <span class="hljs-keyword">join cities <span class="hljs-keyword">on person.cityId = cities.id</span></span></span></span></span></code></pre>
</div>
</div>
</dd><dt class="hdlist1"><code>Dataset</code>&nbsp;操作</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">person.join(right = cities,
  joinExprs = person(<span class="hljs-string">"cityId") === cities(<span class="hljs-string">"id"),
  joinType = <span class="hljs-string">"right") <span class="hljs-comment">// rightouter, right
  .show()</span></span></span></span></code></pre>
</div>
</div>
</dd></dl></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd><dt class="hdlist1">[扩展] 广播连接</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">Step 1: 正常情况下的&nbsp;<code>Join</code>&nbsp;过程</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190529151419.png" alt="20190529151419" /></div>
</div>
<div class="paragraph">
<p><code>Join</code>&nbsp;会在集群中分发两个数据集, 两个数据集都要复制到&nbsp;<code>Reducer</code>&nbsp;端, 是一个非常复杂和标准的&nbsp;<code>ShuffleDependency</code>, 有什么可以优化效率吗?</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">Step 2:&nbsp;<code>Map</code>&nbsp;端&nbsp;<code>Join</code></dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>前面图中看的过程, 之所以说它效率很低, 原因是需要在集群中进行数据拷贝, 如果能减少数据拷贝, 就能减少开销</p>
</div>
<div class="paragraph">
<p>如果能够只分发一个较小的数据集呢?</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190529152206.png" alt="20190529152206" /></div>
</div>
<div class="paragraph">
<p>可以将小数据集收集起来, 分发给每一个&nbsp;<code>Executor</code>, 然后在需要&nbsp;<code>Join</code>&nbsp;的时候, 让较大的数据集在&nbsp;<code>Map</code>&nbsp;端直接获取小数据集, 从而进行&nbsp;<code>Join</code>, 这种方式是不需要进行&nbsp;<code>Shuffle</code>&nbsp;的, 所以称之为&nbsp;<code>Map</code>&nbsp;端&nbsp;<code>Join</code></p>
</div>
</div>
</div>
</dd><dt class="hdlist1">Step 3:&nbsp;<code>Map</code>&nbsp;端&nbsp;<code>Join</code>&nbsp;的常规实现</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>如果使用&nbsp;<code>RDD</code>&nbsp;的话, 该如何实现&nbsp;<code>Map</code>&nbsp;端&nbsp;<code>Join</code>&nbsp;呢?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val personRDD = spark.sparkContext.parallelize(<span class="hljs-type">Seq((<span class="hljs-number">0, <span class="hljs-string">"Lucy", <span class="hljs-number">0),
  (<span class="hljs-number">1, <span class="hljs-string">"Lily", <span class="hljs-number">0), (<span class="hljs-number">2, <span class="hljs-string">"Tim", <span class="hljs-number">2), (<span class="hljs-number">3, <span class="hljs-string">"Danial", <span class="hljs-number">3)))

<span class="hljs-keyword">val citiesRDD = spark.sparkContext.parallelize(<span class="hljs-type">Seq((<span class="hljs-number">0, <span class="hljs-string">"Beijing"),
  (<span class="hljs-number">1, <span class="hljs-string">"Shanghai"), (<span class="hljs-number">2, <span class="hljs-string">"Guangzhou")))

<span class="hljs-keyword">val citiesBroadcast = spark.sparkContext.broadcast(citiesRDD.collectAsMap())

<span class="hljs-keyword">val result = personRDD.mapPartitions(
  iter =&gt; {
    <span class="hljs-keyword">val citiesMap = citiesBroadcast.value
    <span class="hljs-comment">// 使用列表生成式 yield 生成列表
    <span class="hljs-keyword">val result = <span class="hljs-keyword">for (person &lt;- iter <span class="hljs-keyword">if citiesMap.contains(person._3))
      <span class="hljs-keyword">yield (person._1, person._2, citiesMap(person._3))
    result
  }
).collect()

result.foreach(println(_))</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">Step 4: 使用&nbsp;<code>Dataset</code>&nbsp;实现&nbsp;<code>Join</code>&nbsp;的时候会自动进行&nbsp;<code>Map</code>&nbsp;端&nbsp;<code>Join</code></dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>自动进行&nbsp;<code>Map</code>&nbsp;端&nbsp;<code>Join</code>&nbsp;需要依赖一个系统参数&nbsp;<code>spark.sql.autoBroadcastJoinThreshold</code>, 当数据集小于这个参数的大小时, 会自动进行&nbsp;<code>Map</code>&nbsp;端&nbsp;<code>Join</code></p>
</div>
<div class="paragraph">
<p>如下, 开启自动&nbsp;<code>Join</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">println(spark.conf.get(<span class="hljs-string">"spark.sql.autoBroadcastJoinThreshold").toInt / <span class="hljs-number">1024 / <span class="hljs-number">1024)

println(person.crossJoin(cities).queryExecution.sparkPlan.numberedTreeString)</span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>当关闭这个参数的时候, 则不会自动 Map 端 Join 了</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">spark.conf.set(<span class="hljs-string">"spark.sql.autoBroadcastJoinThreshold", <span class="hljs-number">-1)
println(person.crossJoin(cities).queryExecution.sparkPlan.numberedTreeString)</span></span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">Step 5: 也可以使用函数强制开启 Map 端 Join</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>在使用 Dataset 的 join 时, 可以使用 broadcast 函数来实现 Map 端 Join</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import org.apache.spark.sql.functions._
spark.conf.set(<span class="hljs-string">"spark.sql.autoBroadcastJoinThreshold", <span class="hljs-number">-1)
println(person.crossJoin(broadcast(cities)).queryExecution.sparkPlan.numberedTreeString)</span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>即使是使用 SQL 也可以使用特殊的语法开启</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">spark.conf.set(<span class="hljs-string">"spark.sql.autoBroadcastJoinThreshold", <span class="hljs-number">-1)
<span class="hljs-keyword">val resultDF = spark.sql(
  <span class="hljs-string">""<span class="hljs-string">"
    |select /*+ MAPJOIN (rt) */ * from person cross join cities rt
  "<span class="hljs-string">"".stripMargin)
println(resultDF.queryExecution.sparkPlan.numberedTreeString)</span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
<p>&nbsp;</p>
<h2 id="_12_窗口函数">12. 窗口函数</h2>
<div class="sectionbody">
<div class="dlist"><dl><dt class="hdlist1">目标和步骤（详见代码）</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>理解窗口操作的语义, 掌握窗口函数的使用</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>案例1, 第一名和第二名</p>
</li>
<li>
<p>窗口函数介绍</p>
</li>
<li>
<p>案例2, 最优差值</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
<div class="sect2">
<h3 id="_12_1_第一名和第二名案例">12.1. 第一名和第二名案例</h3>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>掌握如何使用&nbsp;<code>SQL</code>&nbsp;和&nbsp;<code>DataFrame</code>&nbsp;完成名次统计, 并且对窗口函数有一个模糊的认识, 方便后面的启发</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>需求介绍</p>
</li>
<li>
<p>代码编写</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">需求介绍</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>数据集</p>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190722161207.png" alt="20190722161207" width="270" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>product</code>&nbsp;: 商品名称</p>
</li>
<li>
<p><code>categroy</code>&nbsp;: 类别</p>
</li>
<li>
<p><code>revenue</code>&nbsp;: 收入</p>
</li>
</ul>
</div>
</div>
</div>
</li>
<li>
<p>需求分析</p>
<div class="exampleblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">需求</dt><dd>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>从数据集中得到每个类别收入第一的商品和收入第二的商品</p>
<div class="paragraph">
<p>关键点是, 每个类别, 收入前两名</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190722161827.png" alt="20190722161827" width="270" /></div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">方案1: 使用常见语法子查询</dt><dd>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>问题1:&nbsp;<code>Spark</code>&nbsp;和&nbsp;<code>Hive</code>&nbsp;这样的系统中, 有自增主键吗? 没有</p>
</li>
<li>
<p>问题2: 为什么分布式系统中很少见自增主键? 因为分布式环境下数据在不同的节点中, 很难保证顺序</p>
</li>
<li>
<p>解决方案: 按照某一列去排序, 取前两条数据</p>
</li>
<li>
<p>遗留问题: 不容易在分组中取每一组的前两个</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql"><span class="hljs-keyword">SELECT * <span class="hljs-keyword">FROM productRevenue <span class="hljs-keyword">ORDER <span class="hljs-keyword">BY revenue <span class="hljs-keyword">LIMIT <span class="hljs-number">2</span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">方案2: 计算每一个类别的按照收入排序的序号, 取每个类别中的前两个</dt><dd>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190722161207.png" alt="20190722161207" width="270" /></div>
</div>
<div class="dlist"><dl><dt class="hdlist1">思路步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>按照类别分组</p>
</li>
<li>
<p>每个类别中的数据按照收入排序</p>
</li>
<li>
<p>为排序过的数据增加编号</p>
</li>
<li>
<p>取得每个类别中的前两个数据作为最终结果</p>
</li>
</ol></div>
</dd></dl></div>
<div class="paragraph">
<p>使用&nbsp;<code>SQL</code>&nbsp;就不太容易做到, 需要一个语法, 叫做窗口函数</p>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">代码编写</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建初始环境</p>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建新的类&nbsp;<code>WindowFunction</code></p>
</li>
<li>
<p>编写测试方法</p>
</li>
<li>
<p>初始化&nbsp;<code>SparkSession</code></p>
</li>
<li>
<p>创建数据集</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>方式一:&nbsp;<code>SQL</code>&nbsp;语句::</p>
</li>
<li>
<p>方式二: 使用&nbsp;<code>DataFrame</code>&nbsp;的命令式&nbsp;<code>API</code>::</p>
<div class="exampleblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>WindowSpec</code>&nbsp;: 窗口的描述符, 描述窗口应该是怎么样的</p>
</li>
<li>
<p><code>dense_rank() over window</code>&nbsp;: 表示一个叫做&nbsp;<code>dense_rank()</code>&nbsp;的函数作用于每一个窗口</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>在&nbsp;<code>Spark</code>&nbsp;中, 使用&nbsp;<code>SQL</code>&nbsp;或者&nbsp;<code>DataFrame</code>&nbsp;都可以操作窗口</p>
</li>
<li>
<p>窗口的使用有两个步骤</p>
<div class="openblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>定义窗口规则</p>
</li>
<li>
<p>定义窗口函数</p>
</li>
</ol></div>
</div>
</div>
</li>
<li>
<p>在不同的范围内统计名次时, 窗口函数非常得力</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_12_2_窗口函数">12.2. 窗口函数</h3>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>了解窗口函数的使用方式, 能够使用窗口函数完成统计</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>窗口函数的逻辑</p>
</li>
<li>
<p>窗口定义部分</p>
</li>
<li>
<p>统计函数部分</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">窗口函数的逻辑</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">从&nbsp;<strong>逻辑</strong>&nbsp;上来讲, 窗口函数执行步骤大致可以分为如下几步</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql">dense_rank() OVER (PARTITION BY category ORDER BY revenue DESC) as rank</code></pre>
</div>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>根据&nbsp;<code>PARTITION BY category</code>, 对数据进行分组</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190723010445.png" alt="20190723010445" width="800" /></div>
</div>
</li>
<li>
<p>分组后, 根据&nbsp;<code>ORDER BY revenue DESC</code>&nbsp;对每一组数据进行排序</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190723010853.png" alt="20190723010853" width="800" /></div>
</div>
</li>
<li>
<p>在&nbsp;<strong>每一条数据</strong>&nbsp;到达窗口函数时, 套入窗口内进行计算</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190723011244.png" alt="20190723011244" width="800" /></div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">从语法的角度上讲, 窗口函数大致分为两个部分</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql">dense_rank() OVER (PARTITION BY category ORDER BY revenue DESC) as rank</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>函数部分&nbsp;<code>dense_rank()</code></p>
</li>
<li>
<p>窗口定义部分&nbsp;<code>PARTITION BY category ORDER BY revenue DESC</code></p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">
<div class="paragraph">
<p>窗口函数和&nbsp;<code>GroupBy</code>&nbsp;最大的区别, 就是&nbsp;<code>GroupBy</code>&nbsp;的聚合对每一个组只有一个结果, 而窗口函数可以对每一条数据都有一个结果</p>
</div>
<div class="paragraph">
<p>说白了, 窗口函数其实就是根据当前数据, 计算其在所在的组中的统计数据</p>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</dd><dt class="hdlist1">窗口定义部分</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql">dense_rank() OVER (PARTITION BY category ORDER BY revenue DESC) as rank</code></pre>
</div>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Partition</code>&nbsp;定义</p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>控制哪些行会被放在一起, 同时这个定义也类似于&nbsp;<code>Shuffle</code>, 会将同一个分组的数据放在同一台机器中处理</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190723010445.png" alt="20190723010445" width="800" /></div>
</div>
</div>
</div>
</li>
<li>
<p><code>Order</code>&nbsp;定义</p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>在一个分组内进行排序, 因为很多操作, 如&nbsp;<code>rank</code>, 需要进行排序</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190723010853.png" alt="20190723010853" width="800" /></div>
</div>
</div>
</div>
</li>
<li>
<p><code>Frame</code>&nbsp;定义</p>
<div class="exampleblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">释义</dt><dd>
<div class="ulist">
<ul>
<li>
<p>窗口函数会针对&nbsp;<strong>每一个组中的每一条数据</strong>&nbsp;进行统计聚合或者&nbsp;<code>rank</code>, 一个组又称为一个&nbsp;<code>Frame</code></p>
</li>
<li>
<p>分组由两个字段控制,&nbsp;<code>Partition</code>&nbsp;在整体上进行分组和分区</p>
</li>
<li>
<p>而通过&nbsp;<code>Frame</code>&nbsp;可以通过&nbsp;<strong>当前行</strong>&nbsp;来更细粒度的分组控制</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>举个栗子, 例如公司每月销售额的数据, 统计其同比增长率, 那就需要把这条数据和前面一条数据进行结合计算了</p>
</div>
</div>
</div>
</li>
</ul>
</div>
</dd><dt class="hdlist1">有哪些控制方式?</dt><dd>
<div class="ulist">
<ul>
<li>
<p><code>Row Frame</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>通过&nbsp;<code>"行号"</code>&nbsp;来表示</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190723014837.png" alt="20190723014837" width="600" /></div>
</div>
</div>
</div>
</li>
<li>
<p><code>Range Frame</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>通过某一个列的差值来表示</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190723014943.png" alt="20190723014943" width="600" /></div>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190723015024.png" alt="20190723015024" width="600" /></div>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190723015124.png" alt="20190723015124" width="600" /></div>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190723015150.png" alt="20190723015150" width="600" /></div>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190723015216.png" alt="20190723015216" width="600" /></div>
</div>
</div>
</div>
</li>
</ul>
</div>
</dd></dl></div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">函数部分</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql">dense_rank() OVER (PARTITION BY category ORDER BY revenue DESC) as rank</code></pre>
</div>
</div>
<div class="paragraph">
<p>如下是支持的窗口函数</p>
</div>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">类型</th><th class="tableblock halign-left valign-top">函数</th><th class="tableblock halign-left valign-top">解释</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top" rowspan="3">
<p class="tableblock">排名函数</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>rank</code></p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>排名函数, 计算当前数据在其&nbsp;<code>Frame</code>&nbsp;中的位置</p>
</li>
<li>
<p>如果有重复, 则重复项后面的行号会有空挡</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190723020427.png" alt="20190723020427" width="200" /></div>
</div>
</div>
</div>
</div>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>dense_rank</code></p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>和 rank 一样, 但是结果中没有空挡</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190723020716.png" alt="20190723020716" width="200" /></div>
</div>
</div>
</div>
</div>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>row_number</code></p>
</td>
<td class="tableblock halign-left valign-top">
<div class="content">
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>和 rank 一样, 也是排名, 但是不同点是即使有重复想, 排名依然增长</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190723020857.png" alt="20190723020857" width="200" /></div>
</div>
</div>
</div>
</div>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" rowspan="4">
<p class="tableblock">分析函数</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>first_value</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">获取这个组第一条数据</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>last_value</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">获取这个组最后一条数据</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>lag</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>lag(field, n)</code>&nbsp;获取当前数据的&nbsp;<code>field</code>&nbsp;列向前&nbsp;<code>n</code>&nbsp;条数据</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>lead</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>lead(field, n)</code>&nbsp;获取当前数据的&nbsp;<code>field</code>&nbsp;列向后&nbsp;<code>n</code>&nbsp;条数据</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock">聚合函数</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>*</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">所有的&nbsp;<code>functions</code>&nbsp;中的聚合函数都支持</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>窗口操作分为两个部分</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>窗口定义, 定义时可以指定&nbsp;<code>Partition</code>,&nbsp;<code>Order</code>,&nbsp;<code>Frame</code></p>
</li>
<li>
<p>函数操作, 可以使用三大类函数, 排名函数, 分析函数, 聚合函数</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_12_3_最优差值案例">12.3. 最优差值案例</h3>
<div class="dlist"><dl><dt class="hdlist1">目标和步骤</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">目标</dt><dd>
<div class="paragraph">
<p>能够针对每个分类进行计算, 求得常见指标, 并且理解实践上面的一些理论</p>
</div>
</dd><dt class="hdlist1">步骤</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>需求介绍</p>
</li>
<li>
<p>代码实现</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">需求介绍</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>源数据集</p>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190722161207.png" alt="20190722161207" width="270" /></div>
</div>
</div>
</div>
</li>
<li>
<p>需求</p>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>统计每个商品和此品类最贵商品之间的差值</p>
</div>
</div>
</div>
</li>
<li>
<p>目标数据集</p>
<div class="exampleblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190810173257.png" alt="20190810173257" width="440" /></div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">代码实现</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">步骤</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>创建数据集</p>
</li>
<li>
<p>创建窗口, 按照&nbsp;<code>revenue</code>&nbsp;分组, 并倒叙排列</p>
</li>
<li>
<p>应用窗口</p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">（详见代码）</dt></dl></div>
</div>
</div>
</dd></dl></div>
</div>
</div>]]></description></item><item><title>spark脑图</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/05/11625168.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 05 Oct 2019 09:16:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/05/11625168.html</guid><description><![CDATA[<p>spark脑图：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191005170508548-240671864.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191005171228853-2070200490.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191005171500112-1207161411.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201910/1325651-20191005171505334-131044986.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>hive启动报错（整合spark）</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/10/03/11621090.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 03 Oct 2019 15:12:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/10/03/11621090.html</guid><description><![CDATA[<p>spark整合hive后，hive启动报错：</p>
<p><span style="color: #ff0000;">ls: cannot access /export/servers/spark/lib/spark-assembly-*.jar: No such file or directory</span></p>
<p>原因：spark版本升级到2.x以后,原有lib目录下的大JAR包被分散成多个小JAR包，原来的spark-assembly-*.jar已经不存在，所以hive没有办法找到这个JAR包。</p>
<p>解决方法：打开hive下面的bin目录,找到hive文件,编辑hive文件,找到如下一行：</p>
<p>&nbsp;sparkAssemblyPath=`ls ${SPARK_HOME}/lib/spark-assembly-*.jar`</p>
<p>修改为如下一行：</p>
<p>&nbsp;sparkAssemblyPath=`ls ${SPARK_HOME}/jars/*.jar`</p>
<p>&nbsp;</p>
<p>发现还是报相同的错误，于是执行which hive，发现在/usr/bin/下，还有一个hive命令，vim&nbsp;/usr/bin/hive，发现里面是执行/usr/lib/hive/bin/hive的shell文件，</p>
<p>于是， vim&nbsp;/usr/lib/hive/bin/hive，将里面的sparkAssemblyPath也改掉，错误解决。</p>
<p>&nbsp;注：以上步骤不用重启hive。</p>
<p>&nbsp;</p>
<p>然后和hive交互时，执行bin/hive 命令时：报错：</p>
<p class="title-article"><span style="color: #ff0000;">SemanticException org.apache.hadoop.hive.ql.metadata.HiveException</span></p>
<p>解决方法：重装hive</p>]]></description></item><item><title>Update(Stage4)：sparksql：第1节 SparkSQL_使用场景_优化器_Dataset &amp; 第2节 SparkSQL读写_hive_mysql_案例</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/30/11614461.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 30 Sep 2019 15:11:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/30/11614461.html</guid><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>SparkSQL</code>&nbsp;是什么</p>
</li>
<li>
<p><code>SparkSQL</code>&nbsp;如何使用</p>
</li>
</ol></div>
</div>
</div>
</div>
<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_1_sparksql_是什么">1. SparkSQL 是什么</a>
<ul class="sectlevel2">
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_1_1_sparksql_的出现契机">1.1. SparkSQL 的出现契机</a></li>
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_1_2_sparksql_的适用场景">1.2. SparkSQL 的适用场景</a></li>
</ul>
</li>
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_2_sparksql_初体验">2. SparkSQL 初体验</a>
<ul class="sectlevel2">
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_2_3_rdd_版本的_wordcount">2.3. RDD 版本的 WordCount</a></li>
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_2_2_命令式_api_的入门案例">2.2. 命令式 API 的入门案例</a></li>
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_2_2_sql_版本_wordcount">2.2. SQL 版本 WordCount</a></li>
</ul>
</li>
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_3_扩展_catalyst_优化器">3. [扩展] Catalyst 优化器</a>
<ul class="sectlevel2">
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_3_1_rdd_和_sparksql_运行时的区别">3.1. RDD 和 SparkSQL 运行时的区别</a></li>
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_3_2_catalyst">3.2. Catalyst</a></li>
</ul>
</li>
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_4_dataset_的特点">4. Dataset 的特点</a></li>
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_5_dataframe_的作用和常见操作">5. DataFrame 的作用和常见操作</a></li>
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_6_dataset_和_dataframe_的异同">6. Dataset 和 DataFrame 的异同</a></li>
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_7_数据读写">7. 数据读写</a>
<ul class="sectlevel2">
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_7_1_初识_dataframereader">7.1. 初识 DataFrameReader</a></li>
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_7_2_初识_dataframewriter">7.2. 初识 DataFrameWriter</a></li>
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_7_3_读写_parquet_格式文件">7.3. 读写 Parquet 格式文件</a></li>
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_7_4_读写_json_格式文件">7.4. 读写 JSON 格式文件</a></li>
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_7_5_访问_hive">7.5. 访问 Hive</a></li>
<li><a href="file:///E:/Study/BigData/heima/stage5/Update/5sparksql/Day05/SparkSQL.html#_7_6_jdbc">7.6. JDBC</a></li>
</ul>
</li>
</ul>
</div>
</div>
<div class="sect1">
<h2 id="_1_sparksql_是什么">1. SparkSQL 是什么</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="paragraph">
<p>对于一件事的理解, 应该分为两个大部分, 第一, 它是什么, 第二, 它解决了什么问题</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>理解为什么会有&nbsp;<code>SparkSQL</code></p>
</li>
<li>
<p>理解&nbsp;<code>SparkSQL</code>&nbsp;所解决的问题, 以及它的使命</p>
</li>
</ol></div>
</div>
</div>
<div class="sect2">
<h3 id="_1_1_sparksql_的出现契机">1.1. SparkSQL 的出现契机</h3>
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="paragraph">
<p>理解&nbsp;<code>SparkSQL</code>&nbsp;是什么</p>
</div>
</div>
</div>
<div class="exampleblock">
<div class="title">主线</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>历史前提</p>
</li>
<li>
<p>发展过程</p>
</li>
<li>
<p>重要性</p>
</li>
</ol></div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">数据分析的方式</div>
<div class="paragraph">
<p>数据分析的方式大致上可以划分为&nbsp;<code>SQL</code>&nbsp;和 命令式两种</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">命令式</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>在前面的&nbsp;<code>RDD</code>&nbsp;部分, 非常明显可以感觉的到是命令式的, 主要特征是通过一个算子, 可以得到一个结果, 通过结果再进行后续计算.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">sc.textFile(<span class="hljs-string">"...")
  .flatMap(_.split(<span class="hljs-string">" "))
  .map((_, <span class="hljs-number">1))
  .reduceByKey(_ + _)
  .collect()</span></span></span></code></pre>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">命令式的优点</dt><dd>
<div class="ulist">
<ul>
<li>
<p>操作粒度更细, 能够控制数据的每一个处理环节</p>
</li>
<li>
<p>操作更明确, 步骤更清晰, 容易维护</p>
</li>
<li>
<p>支持非结构化数据的操作</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">命令式的缺点</dt><dd>
<div class="ulist">
<ul>
<li>
<p>需要一定的代码功底</p>
</li>
<li>
<p>写起来比较麻烦</p>
</li>
</ul>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">SQL</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>对于一些数据科学家, 要求他们为了做一个非常简单的查询, 写一大堆代码, 明显是一件非常残忍的事情, 所以&nbsp;<code>SQL on Hadoop</code>&nbsp;是一个非常重要的方向.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql"><span class="hljs-keyword">SELECT
	<span class="hljs-keyword">name,
	age,
	school
<span class="hljs-keyword">FROM students
<span class="hljs-keyword">WHERE age &gt; <span class="hljs-number">10</span></span></span></span></span></code></pre>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">SQL 的优点</dt><dd>
<div class="ulist">
<ul>
<li>
<p>表达非常清晰, 比如说这段&nbsp;<code>SQL</code>&nbsp;明显就是为了查询三个字段, 又比如说这段&nbsp;<code>SQL</code>&nbsp;明显能看到是想查询年龄大于 10 岁的条目</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">SQL 的缺点</dt><dd>
<div class="ulist">
<ul>
<li>
<p>想想一下 3 层嵌套的&nbsp;<code>SQL</code>, 维护起来应该挺力不从心的吧</p>
</li>
<li>
<p>试想一下, 如果使用&nbsp;<code>SQL</code>&nbsp;来实现机器学习算法, 也挺为难的吧</p>
</li>
</ul>
</div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
<div class="paragraph">
<p><code>SQL</code>&nbsp;擅长数据分析和通过简单的语法表示查询, 命令式操作适合过程式处理和算法性的处理. 在&nbsp;<code>Spark</code>&nbsp;出现之前, 对于结构化数据的查询和处理, 一个工具一向只能支持&nbsp;<code>SQL</code>&nbsp;或者命令式, 使用者被迫要使用多个工具来适应两种场景, 并且多个工具配合起来比较费劲.</p>
</div>
<div class="paragraph">
<p>而&nbsp;<code>Spark</code>&nbsp;出现了以后, 统一了两种数据处理范式, 是一种革新性的进步.</p>
</div>
</div>
</div>
<div class="paragraph">
<p>因为&nbsp;<code>SQL</code>&nbsp;是数据分析领域一个非常重要的范式, 所以&nbsp;<code>Spark</code>&nbsp;一直想要支持这种范式, 而伴随着一些决策失误, 这个过程其实还是非常曲折的</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/7a1cdf107b8636713c2502a99d058061.png" alt="7a1cdf107b8636713c2502a99d058061" /></span></p>
</div>
<div class="dlist"><dl><dt class="hdlist1">Hive</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">解决的问题</dt><dd>
<div class="ulist">
<ul>
<li>
<p><code>Hive</code>&nbsp;实现了&nbsp;<code>SQL on Hadoop</code>, 使用&nbsp;<code>MapReduce</code>&nbsp;执行任务</p>
</li>
<li>
<p>简化了&nbsp;<code>MapReduce</code>&nbsp;任务</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">新的问题</dt><dd>
<div class="ulist">
<ul>
<li>
<p><code>Hive</code>&nbsp;的查询延迟比较高, 原因是<strong>使用&nbsp;<code>MapReduce</code>&nbsp;做调度</strong></p>
</li>
</ul>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">Shark</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">解决的问题</dt><dd>
<div class="ulist">
<ul>
<li>
<p><code>Shark</code>&nbsp;改写&nbsp;<code>Hive</code>&nbsp;的物理执行计划, 使<strong>用&nbsp;<code>Spark</code>&nbsp;作业代替&nbsp;<code>MapReduce</code>&nbsp;执行物理计划</strong></p>
</li>
<li>
<p>使用列式内存存储</p>
</li>
<li>
<p>以上两点使得&nbsp;<code>Shark</code>&nbsp;的查询效率很高</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">新的问题</dt><dd>
<div class="ulist">
<ul>
<li>
<p><code>Shark</code>&nbsp;重用了&nbsp;<code>Hive</code>&nbsp;的&nbsp;<code>SQL</code>&nbsp;解析, 逻辑计划生成以及优化, 所以其实可以认为&nbsp;<code>Shark</code>&nbsp;只是把&nbsp;<code>Hive</code>&nbsp;的物理执行替换为了&nbsp;<code>Spark</code>&nbsp;作业</p>
</li>
<li>
<p>执行计划的生成严重依赖&nbsp;<code>Hive</code>, 想要增加新的优化非常困难</p>
</li>
<li>
<p><code>Hive</code>&nbsp;使用&nbsp;<code>MapReduce</code>&nbsp;执行作业,&nbsp;<strong>所以&nbsp;<code>Hive</code>&nbsp;是进程级别的并行</strong>, 而&nbsp;<code>Spark</code>&nbsp;是线程级别的并行, 所以&nbsp;<code>Hive</code>&nbsp;中很多线程不安全的代码不适用于&nbsp;<code>Spark</code></p>
</li>
</ul>
</div>
</dd></dl></div>
<div class="paragraph">
<p>由于以上问题,&nbsp;<code>Shark</code>&nbsp;维护了&nbsp;<code>Hive</code>&nbsp;的一个分支, 并且无法合并进主线, 难以为继</p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>SparkSQL</code></dt><dd>
<div class="exampleblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">解决的问题</dt><dd>
<div class="ulist">
<ul>
<li>
<p><code>Spark SQL</code>&nbsp;使用&nbsp;<code>Hive</code>&nbsp;解析&nbsp;<code>SQL</code>&nbsp;生成&nbsp;<code>AST</code>&nbsp;语法树, 将其后的逻辑计划生成, 优化, 物理计划都自己完成, 而不依赖&nbsp;<code>Hive</code></p>
</li>
<li>
<p>执行计划和优化交给优化器&nbsp;<code>Catalyst</code></p>
</li>
<li>
<p>内建了一套简单的&nbsp;<code>SQL</code>&nbsp;解析器, 可以不使用&nbsp;<code>HQL</code>, 此外, 还引入和&nbsp;<code>DataFrame</code>&nbsp;这样的&nbsp;<code>DSL API</code>, 完全可以不依赖任何&nbsp;<code>Hive</code>&nbsp;的组件</p>
</li>
<li>
<p><code>Shark</code>&nbsp;只能查询文件,&nbsp;<code>Spark SQL</code>&nbsp;可以直接降查询作用于&nbsp;<code>RDD</code>, 这一点是一个大进步</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">新的问题</dt><dd>
<p>对于初期版本的&nbsp;<code>SparkSQL</code>, 依然有挺多问题, 例如只能支持&nbsp;<code>SQL</code>&nbsp;的使用, 不能很好的兼容命令式, 入口不够统一等</p>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1"><code>Dataset</code></dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p><code>SparkSQL</code>&nbsp;在 2.0 时代, 增加了一个新的&nbsp;<code>API</code>, 叫做&nbsp;<code>Dataset</code>,&nbsp;<code>Dataset</code>&nbsp;统一和结合了&nbsp;<code>SQL</code>&nbsp;的访问和命令式&nbsp;<code>API</code>&nbsp;的使用, 这是一个划时代的进步</p>
</div>
<div class="paragraph">
<p>在&nbsp;<code>Dataset</code>&nbsp;中可以轻易的做到使用&nbsp;<code>SQL</code>&nbsp;查询并且筛选数据, 然后使用命令式&nbsp;<code>API</code>&nbsp;进行探索式分析</p>
</div>
</div>
</div>
</dd></dl></div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">
<div class="title">重要性</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/9b1db9d54c796e0eb6769cafd2ef19ac.png" alt="9b1db9d54c796e0eb6769cafd2ef19ac" /></div>
</div>
<div class="paragraph">
<p><code>SparkSQL</code>&nbsp;不只是一个&nbsp;<code>SQL</code>&nbsp;引擎,&nbsp;<code>SparkSQL</code>&nbsp;也包含了一套对&nbsp;<strong>结构化数据的命令式&nbsp;<code>API</code></strong>, 事实上, 所有&nbsp;<code>Spark</code>中常见的工具, 都是依赖和依照于&nbsp;<code>SparkSQL</code>&nbsp;的&nbsp;<code>API</code>&nbsp;设计的</p>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="exampleblock">
<div class="title">总结:&nbsp;<code>SparkSQL</code>&nbsp;是什么</div>
<div class="content">
<div class="paragraph">
<p><code>SparkSQL</code>&nbsp;是一个为了支持&nbsp;<code>SQL</code>&nbsp;而设计的工具, 但同时也支持命令式的&nbsp;<code>API</code></p>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_1_2_sparksql_的适用场景">1.2. SparkSQL 的适用场景</h3>
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="paragraph">
<p>理解&nbsp;<code>SparkSQL</code>&nbsp;的适用场景</p>
</div>
</div>
</div>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">&nbsp;</th><th class="tableblock halign-left valign-top">定义</th><th class="tableblock halign-left valign-top">特点</th><th class="tableblock halign-left valign-top">举例</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><strong>结构化数据</strong></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">有固定的&nbsp;<code>Schema</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">有预定义的&nbsp;<code>Schema</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">关系型数据库的表</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><strong>半结构化数据</strong></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">没有固定的&nbsp;<code>Schema</code>, 但是有结构</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">没有固定的&nbsp;<code>Schema</code>, 有结构信息, 数据一般是自描述的</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">指一些有结构的文件格式, 例如&nbsp;<code>JSON</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><strong>非结构化数据</strong></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">没有固定&nbsp;<code>Schema</code>, 也没有结构</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">没有固定&nbsp;<code>Schema</code>, 也没有结构</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">指文档图片之类的格式</p>
</td>
</tr>
</tbody>
</table>
<div class="dlist"><dl><dt class="hdlist1">结构化数据</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>一般指数据有固定的&nbsp;<code>Schema</code>, 例如在用户表中,&nbsp;<code>name</code>&nbsp;字段是&nbsp;<code>String</code>&nbsp;型, 那么每一条数据的&nbsp;<code>name</code>&nbsp;字段值都可以当作&nbsp;<code>String</code>&nbsp;来使用</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="hljs asciidoc"><span class="hljs-code">+----+--------------<span class="hljs-code">+---------------------------+-------<span class="hljs-code">+---------+
<span class="hljs-section">| id | name         | url                       | alexa | country |
+----+--------------+---------------------------+-------+---------+
| 1  | Google       | https://www.google.cm/    | 1     | USA     |
| 2  | 淘宝          | https://www.taobao.com/   | 13    | CN      |
| 3  | 菜鸟教程      | http://www.runoob.com/    | 4689  | CN      |
| 4  | 微博          | http://weibo.com/         | 20    | CN      |
<span class="hljs-section">| 5  | Facebook     | https://www.facebook.com/ | 3     | USA     |
+----+--------------+---------------------------+-------+---------+</span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">半结构化数据</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>一般指的是数据没有固定的&nbsp;<code>Schema</code>, 但是数据本身是有结构的</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">{
     <span class="hljs-attr">"firstName": <span class="hljs-string">"John",
     <span class="hljs-attr">"lastName": <span class="hljs-string">"Smith",
     <span class="hljs-attr">"age": <span class="hljs-number">25,
     <span class="hljs-attr">"phoneNumber":
     [
         {
           <span class="hljs-attr">"type": <span class="hljs-string">"home",
           <span class="hljs-attr">"number": <span class="hljs-string">"212 555-1234"
         },
         {
           <span class="hljs-attr">"type": <span class="hljs-string">"fax",
           <span class="hljs-attr">"number": <span class="hljs-string">"646 555-4567"
         }
     ]
 }</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">没有固定&nbsp;<code>Schema</code></dt><dd>
<p>指的是半结构化数据是没有固定的&nbsp;<code>Schema</code>&nbsp;的, 可以理解为没有显式指定&nbsp;<code>Schema</code><br />比如说一个用户信息的&nbsp;<code>JSON</code>&nbsp;文件, 第一条数据的&nbsp;<code>phone_num</code>&nbsp;有可能是&nbsp;<code>String</code>, 第二条数据虽说应该也是&nbsp;<code>String</code>, 但是如果硬要指定为&nbsp;<code>BigInt</code>, 也是有可能的<br />因为没有指定&nbsp;<code>Schema</code>, 没有显式的强制的约束</p>






</dd><dt class="hdlist1">有结构</dt><dd>
<p>虽说半结构化数据是没有显式指定&nbsp;<code>Schema</code>&nbsp;的, 也没有约束, 但是半结构化数据本身是有有隐式的结构的, 也就是数据自身可以描述自身<br />例如&nbsp;<code>JSON</code>&nbsp;文件, 其中的某一条数据是有字段这个概念的, 每个字段也有类型的概念, 所以说&nbsp;<code>JSON</code>&nbsp;是可以描述自身的, 也就是数据本身携带有元信息</p>






</dd></dl></div>






</div>






</div>






</dd><dt class="hdlist1"><code>SparkSQL</code>&nbsp;处理什么数据的问题?</dt><dd>
<div class="ulist">
<ul>
<li>
<p><code>Spark</code>&nbsp;的&nbsp;<code>RDD</code>&nbsp;主要用于处理&nbsp;<strong>非结构化数据</strong>&nbsp;和&nbsp;<strong>半结构化数据</strong></p>






</li>
<li>
<p><code>SparkSQL</code>&nbsp;主要用于处理&nbsp;<strong>结构化数据</strong></p>






</li>






</ul>






</div>






</dd><dt class="hdlist1"><code>SparkSQL</code>&nbsp;相较于&nbsp;<code>RDD</code>&nbsp;的优势在哪?</dt><dd>
<div class="ulist">
<ul>
<li>
<p><code>SparkSQL</code>&nbsp;提供了更好的外部数据源读写支持</p>
<div class="ulist">
<ul>
<li>
<p>因为大部分外部数据源是有结构化的, 需要在&nbsp;<code>RDD</code>&nbsp;之外有一个新的解决方案, 来整合这些结构化数据源</p>






</li>






</ul>






</div>






</li>
<li>
<p><code>SparkSQL</code>&nbsp;提供了直接访问列的能力</p>
<div class="ulist">
<ul>
<li>
<p>因为&nbsp;<code>SparkSQL</code>&nbsp;主要用做于处理结构化数据, 所以其提供的&nbsp;<code>API</code>&nbsp;具有一些普通数据库的能力</p>






</li>






</ul>






</div>






</li>






</ul>






</div>






</dd></dl></div>
<div class="exampleblock">
<div class="title">总结:&nbsp;<code>SparkSQL</code>&nbsp;适用于什么场景?</div>
<div class="content">
<div class="paragraph">
<p><code>SparkSQL</code>&nbsp;适用于处理结构化数据的场景</p>






</div>






</div>






</div>
<div class="exampleblock">
<div class="title">本章总结</div>
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>SparkSQL</code>&nbsp;是一个即支持&nbsp;<code>SQL</code>&nbsp;又支持命令式数据处理的工具</p>






</li>
<li>
<p><code>SparkSQL</code>&nbsp;的主要适用场景是处理结构化数据</p>






</li>






</ul>






</div>






</div>






</div>






</div>






</div>






</div>
<div class="sect1">
<h2 id="_2_sparksql_初体验">2. SparkSQL 初体验</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>了解&nbsp;<code>SparkSQL</code>&nbsp;的&nbsp;<code>API</code>&nbsp;由哪些部分组成</p>






</li>






</ol></div>






</div>






</div>
<div class="sect2">
<h3 id="_2_3_rdd_版本的_wordcount">2.3. RDD 版本的 WordCount</h3>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">val config = <span class="hljs-keyword">new SparkConf().setAppName(<span class="hljs-string">"ip_ana").setMaster(<span class="hljs-string">"local[6]")
val sc = <span class="hljs-keyword">new SparkContext(config)

sc.textFile(<span class="hljs-string">"hdfs://node01:8020/dataset/wordcount.txt")
  .flatMap(_.split(<span class="hljs-string">" "))
  .map((_, <span class="hljs-number">1))
  .reduceByKey(_ + _)
  .collect</span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>RDD</code>&nbsp;版本的代码有一个非常明显的特点, 就是它所处理的数据是基本类型的, 在算子中对整个数据进行处理</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_2_2_命令式_api_的入门案例">2.2. 命令式 API 的入门案例</h3>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="hljs asciidoc">case class People(name: String, age: Int)

val spark: SparkSession = new sql.SparkSession.Builder()       <span class="conum" data-value="1">
<span class="hljs-code">  .appName("hello")
<span class="hljs-code">  .master("local[6]")
<span class="hljs-code">  .getOrCreate()

import spark.implicits._

val peopleRDD: RDD[People] = spark.sparkContext.parallelize(Seq(People("zhangsan", 9), People("lisi", 15)))
val peopleDS: Dataset[People] = peopleRDD.toDS()               <span class="conum" data-value="2">
val teenagers: Dataset[String] = peopleDS.where(<span class="hljs-emphasis">'age &gt; 10)     <span class="conum" data-value="3"><span class="hljs-emphasis">
  .where('age &lt; 20)
<span class="hljs-code">  .select('name)
<span class="hljs-code">  .as[String]

<span class="hljs-section">/*
+----+
<span class="hljs-section">|name|
+----+
<span class="hljs-section">|lisi|
+----+
<span class="hljs-strong">*/
teenagers.show()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>SparkSQL 中有一个新的入口点, 叫做 SparkSession</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>SparkSQL 中有一个新的类型叫做 Dataset</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>SparkSQL 有能力直接通过字段名访问数据集, 说明 SparkSQL 的 API 中是携带 Schema 信息的</td>
</tr>
</tbody>
</table>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">SparkSession</div>
<div class="dlist"><dl><dt class="hdlist1"><code>SparkContext</code>&nbsp;作为&nbsp;<code>RDD</code>&nbsp;的创建者和入口, 其主要作用有如下两点</dt><dd>
<div class="ulist">
<ul>
<li>
<p>创建&nbsp;<code>RDD</code>, 主要是通过读取文件创建&nbsp;<code>RDD</code></p>
</li>
<li>
<p>监控和调度任务, 包含了一系列组件, 例如&nbsp;<code>DAGScheduler</code>,&nbsp;<code>TaskSheduler</code></p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">为什么无法使用&nbsp;<code>SparkContext</code>&nbsp;作为&nbsp;<code>SparkSQL</code>&nbsp;的入口?</dt><dd>
<div class="ulist">
<ul>
<li>
<p><code>SparkContext</code>&nbsp;在读取文件的时候, 是不包含&nbsp;<code>Schema</code>&nbsp;信息的, 因为读取出来的是&nbsp;<code>RDD</code></p>
</li>
<li>
<p><code>SparkContext</code>&nbsp;在整合数据源如&nbsp;<code>Cassandra</code>,&nbsp;<code>JSON</code>,&nbsp;<code>Parquet</code>&nbsp;等的时候是不灵活的, 而&nbsp;<code>DataFrame</code>&nbsp;和&nbsp;<code>Dataset</code>&nbsp;一开始的设计目标就是要支持更多的数据源</p>
</li>
<li>
<p><code>SparkContext</code>&nbsp;的调度方式是直接调度&nbsp;<code>RDD</code>, 但是一般情况下针对结构化数据的访问, 会先通过优化器优化一下</p>
</li>
</ul>
</div>
</dd></dl></div>
<div class="paragraph">
<p>所以&nbsp;<code>SparkContext</code>&nbsp;确实已经不适合作为&nbsp;<code>SparkSQL</code>&nbsp;的入口, 所以刚开始的时候&nbsp;<code>Spark</code>&nbsp;团队为&nbsp;<code>SparkSQL</code>&nbsp;设计了两个入口点, 一个是&nbsp;<code>SQLContext</code>&nbsp;对应&nbsp;<code>Spark</code>&nbsp;标准的&nbsp;<code>SQL</code>&nbsp;执行, 另外一个是&nbsp;<code>HiveContext</code>&nbsp;对应&nbsp;<code>HiveSQL</code>&nbsp;的执行和&nbsp;<code>Hive</code>&nbsp;的支持.</p>
</div>
<div class="paragraph">
<p>在&nbsp;<code>Spark 2.0</code>&nbsp;的时候, 为了解决入口点不统一的问题, 创建了一个新的入口点&nbsp;<code>SparkSession</code>, 作为整个&nbsp;<code>Spark</code>&nbsp;生态工具的统一入口点, 包括了&nbsp;<code>SQLContext</code>,&nbsp;<code>HiveContext</code>,&nbsp;<code>SparkContext</code>&nbsp;等组件的功能</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">新的入口应该有什么特性?</dt><dd>
<div class="ulist">
<ul>
<li>
<p>能够整合&nbsp;<code>SQLContext</code>,&nbsp;<code>HiveContext</code>,&nbsp;<code>SparkContext</code>,&nbsp;<code>StreamingContext</code>&nbsp;等不同的入口点</p>
</li>
<li>
<p>为了支持更多的数据源, 应该完善读取和写入体系</p>
</li>
<li>
<p>同时对于原来的入口点也不能放弃, 要向下兼容</p>
</li>
</ul>
</div>
</dd></dl></div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">DataFrame &amp; Dataset</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/eca0d2e1e2b5ce678161438d87707b61.png" alt="eca0d2e1e2b5ce678161438d87707b61" /></div>
</div>
<div class="paragraph">
<p><code>SparkSQL</code>&nbsp;最大的特点就是它针对于结构化数据设计, 所以&nbsp;<code>SparkSQL</code>&nbsp;应该是能支持针对某一个字段的访问的, 而这种访问方式有一个前提, 就是&nbsp;<code>SparkSQL</code>&nbsp;的数据集中, 要&nbsp;<strong>包含结构化信息</strong>, 也就是俗称的&nbsp;<code>Schema</code></p>
</div>
<div class="paragraph">
<p>而&nbsp;<code>SparkSQL</code>&nbsp;对外提供的&nbsp;<code>API</code>&nbsp;有两类, 一类是直接执行&nbsp;<code>SQL</code>, 另外一类就是命令式.&nbsp;<code>SparkSQL</code>&nbsp;提供的命令式&nbsp;<code>API</code>&nbsp;就是&nbsp;<code>DataFrame</code>&nbsp;和&nbsp;<code>Dataset</code>, 暂时也可以认为&nbsp;<code>DataFrame</code>&nbsp;就是&nbsp;<code>Dataset</code>, 只是在不同的&nbsp;<code>API</code>&nbsp;中返回的是&nbsp;<code>Dataset</code>&nbsp;的不同表现形式</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-comment">// RDD
rdd.map { <span class="hljs-keyword">case <span class="hljs-type">Person(id, name, age) =&gt; (age, <span class="hljs-number">1) }
  .reduceByKey {<span class="hljs-keyword">case ((age, count), (totalAge, totalCount)) =&gt; (age, count + totalCount)}

<span class="hljs-comment">// DataFrame
df.groupBy(<span class="hljs-string">"age").count(<span class="hljs-string">"age")</span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>通过上面的代码, 可以清晰的看到,&nbsp;<code>SparkSQL</code>&nbsp;的命令式操作相比于&nbsp;<code>RDD</code>&nbsp;来说, 可以直接通过&nbsp;<code>Schema</code>&nbsp;信息来访问其中某个字段, 非常的方便</p>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_2_2_sql_版本_wordcount">2.2. SQL 版本 WordCount</h3>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = <span class="hljs-keyword">new sql.<span class="hljs-type">SparkSession.<span class="hljs-type">Builder()
  .appName(<span class="hljs-string">"hello")
  .master(<span class="hljs-string">"local[6]")
  .getOrCreate()

<span class="hljs-keyword">import spark.implicits._

<span class="hljs-keyword">val peopleRDD: <span class="hljs-type">RDD[<span class="hljs-type">People] = spark.sparkContext.parallelize(<span class="hljs-type">Seq(<span class="hljs-type">People(<span class="hljs-string">"zhangsan", <span class="hljs-number">9), <span class="hljs-type">People(<span class="hljs-string">"lisi", <span class="hljs-number">15)))
<span class="hljs-keyword">val peopleDS: <span class="hljs-type">Dataset[<span class="hljs-type">People] = peopleRDD.toDS()
peopleDS.createOrReplaceTempView(<span class="hljs-string">"people")

<span class="hljs-keyword">val teenagers: <span class="hljs-type">DataFrame = spark.sql(<span class="hljs-string">"select name from people where age &gt; 10 and age &lt; 20")

<span class="hljs-comment">/*
+----+
|name|
+----+
|lisi|
+----+
 */
teenagers.show()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>以往使用&nbsp;<code>SQL</code>&nbsp;肯定是要有一个表的, 在&nbsp;<code>Spark</code>&nbsp;中, 并不存在表的概念, 但是有一个近似的概念, 叫做&nbsp;<code>DataFrame</code>, 所以一般情况下要先通过&nbsp;<code>DataFrame</code>&nbsp;或者&nbsp;<code>Dataset</code>&nbsp;注册一张临时表, 然后使用&nbsp;<code>SQL</code>&nbsp;操作这张临时表</p>
</div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="paragraph">
<p><code>SparkSQL</code>&nbsp;提供了&nbsp;<code>SQL</code>&nbsp;和 命令式&nbsp;<code>API</code>&nbsp;两种不同的访问结构化数据的形式, 并且它们之间可以无缝的衔接</p>
</div>
<div class="paragraph">
<p>命令式&nbsp;<code>API</code>&nbsp;由一个叫做&nbsp;<code>Dataset</code>&nbsp;的组件提供, 其还有一个变形, 叫做&nbsp;<code>DataFrame</code></p>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_3_扩展_catalyst_优化器">3. [扩展] Catalyst 优化器</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>理解&nbsp;<code>SparkSQL</code>&nbsp;和以&nbsp;<code>RDD</code>&nbsp;为代表的&nbsp;<code>SparkCore</code>&nbsp;最大的区别</p>
</li>
<li>
<p>理解优化器的运行原理和作用</p>
</li>
</ol></div>
</div>
</div>
<div class="sect2">
<h3 id="_3_1_rdd_和_sparksql_运行时的区别">3.1. RDD 和 SparkSQL 运行时的区别</h3>
<div class="dlist"><dl><dt class="hdlist1"><code>RDD</code>&nbsp;的运行流程</dt><dd>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/1e627dcc1dc31f721933d3e925fa318b.png" alt="1e627dcc1dc31f721933d3e925fa318b" /></div>
</div>
<div class="dlist"><dl><dt class="hdlist1">大致运行步骤</dt><dd>
<p>先将&nbsp;<code>RDD</code>&nbsp;解析为由&nbsp;<code>Stage</code>&nbsp;组成的&nbsp;<code>DAG</code>, 后将&nbsp;<code>Stage</code>&nbsp;转为&nbsp;<code>Task</code>&nbsp;直接运行</p>
</dd><dt class="hdlist1">问题</dt><dd>
<p>任务会按照代码所示运行, 依赖开发者的优化, 开发者的会在很大程度上影响运行效率</p>
</dd><dt class="hdlist1">解决办法</dt><dd>
<p>创建一个组件, 帮助开发者修改和优化代码, 但是这在&nbsp;<code>RDD</code>&nbsp;上是无法实现的</p>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">为什么&nbsp;<code>RDD</code>&nbsp;无法自我优化?</dt><dd>
<div class="ulist">
<ul>
<li>
<p><code>RDD</code>&nbsp;没有&nbsp;<code>Schema</code>&nbsp;信息</p>
</li>
<li>
<p><code>RDD</code>&nbsp;可以同时处理结构化和非结构化的数据</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1"><code>SparkSQL</code>&nbsp;提供了什么?</dt><dd>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/72e4d163c029f86fafcfa083e6cf6eda.png" alt="72e4d163c029f86fafcfa083e6cf6eda" /></div>
</div>
<div class="paragraph">
<p>和&nbsp;<code>RDD</code>&nbsp;不同,&nbsp;<code>SparkSQL</code>&nbsp;的&nbsp;<code>Dataset</code>&nbsp;和&nbsp;<code>SQL</code>&nbsp;并不是直接生成计划交给集群执行, 而是经过了一个叫做&nbsp;<code>Catalyst</code>&nbsp;的优化器, 这个优化器能够自动帮助开发者优化代码</p>
</div>
<div class="paragraph">
<p>也就是说, 在&nbsp;<code>SparkSQL</code>&nbsp;中, 开发者的代码即使不够优化, 也会被优化为相对较好的形式去执行</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">为什么&nbsp;<code>SparkSQL</code>&nbsp;提供了这种能力?</dt><dd>
<p>首先,&nbsp;<code>SparkSQL</code>&nbsp;大部分情况用于处理结构化数据和半结构化数据, 所以&nbsp;<code>SparkSQL</code>&nbsp;可以获知数据的&nbsp;<code>Schema</code>, 从而根据其&nbsp;<code>Schema</code>&nbsp;来进行优化</p>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_3_2_catalyst">3.2. Catalyst</h3>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">
<div class="paragraph">
<p>为了解决过多依赖&nbsp;<code>Hive</code>&nbsp;的问题,&nbsp;<code>SparkSQL</code>&nbsp;使用了一个新的&nbsp;<code>SQL</code>&nbsp;优化器替代&nbsp;<code>Hive</code>&nbsp;中的优化器, 这个优化器就是&nbsp;<code>Catalyst</code>, 整个&nbsp;<code>SparkSQL</code>&nbsp;的架构大致如下</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/4d025ea8579395f704702eb94572b8de.png" alt="4d025ea8579395f704702eb94572b8de" /></div>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>API</code>&nbsp;层简单的说就是&nbsp;<code>Spark</code>&nbsp;会通过一些&nbsp;<code>API</code>&nbsp;接受&nbsp;<code>SQL</code>&nbsp;语句</p>
</li>
<li>
<p>收到&nbsp;<code>SQL</code>&nbsp;语句以后, 将其交给&nbsp;<code>Catalyst</code>,&nbsp;<code>Catalyst</code>&nbsp;负责解析&nbsp;<code>SQL</code>, 生成执行计划等</p>
</li>
<li>
<p><code>Catalyst</code>&nbsp;的输出应该是&nbsp;<code>RDD</code>&nbsp;的执行计划</p>
</li>
<li>
<p>最终交由集群运行</p>
</li>
</ol></div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/67b14d92b21b191914800c384cbed439.png" alt="67b14d92b21b191914800c384cbed439" /></div>
</div>
<div class="dlist"><dl><dt class="hdlist1">Step 1 : 解析&nbsp;<code>SQL</code>, 并且生成&nbsp;<code>AST</code>&nbsp;(抽象语法树)</dt><dd>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/5c0e91faae9043400c11bf68c20031a2.png" alt="5c0e91faae9043400c11bf68c20031a2" /></div>
</div>
</dd><dt class="hdlist1">Step 2 : 在&nbsp;<code>AST</code>&nbsp;中加入元数据信息, 做这一步主要是为了一些优化, 例如&nbsp;<code>col = col</code>&nbsp;这样的条件, 下图是一个简略图, 便于理解</dt><dd>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/02afbb7533249cc6024c2dfc2ee4891e.png" alt="02afbb7533249cc6024c2dfc2ee4891e" /></div>
</div>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><code>score.id &rarr; id#1#L</code>&nbsp;为&nbsp;<code>score.id</code>&nbsp;生成&nbsp;<code>id</code>&nbsp;为 1, 类型是&nbsp;<code>Long</code></p>
</li>
<li>
<p><code>score.math_score &rarr; math_score#2#L</code>&nbsp;为&nbsp;<code>score.math_score</code>&nbsp;生成&nbsp;<code>id</code>&nbsp;为 2, 类型为&nbsp;<code>Long</code></p>
</li>
<li>
<p><code>people.id &rarr; id#3#L</code>&nbsp;为&nbsp;<code>people.id</code>&nbsp;生成&nbsp;<code>id</code>&nbsp;为 3, 类型为&nbsp;<code>Long</code></p>
</li>
<li>
<p><code>people.age &rarr; age#4#L</code>&nbsp;为&nbsp;<code>people.age</code>&nbsp;生成&nbsp;<code>id</code>&nbsp;为 4, 类型为&nbsp;<code>Long</code></p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">Step 3 : 对已经加入元数据的&nbsp;<code>AST</code>, 输入优化器, 进行优化, 从两种常见的优化开始, 简单介绍</dt><dd>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/07142425c65dc6d921451a8bdec8a29d.png" alt="07142425c65dc6d921451a8bdec8a29d" /></div>
</div>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>谓词下推&nbsp;<code>Predicate Pushdown</code>, 将&nbsp;<code>Filter</code>&nbsp;这种可以减小数据集的操作下推, 放在&nbsp;<code>Scan</code>&nbsp;的位置, 这样可以减少操作时候的数据量</p>
</li>
</ul>
</div>
</div>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/7b58443ef6ace60d269d704c1f4eae21.png" alt="7b58443ef6ace60d269d704c1f4eae21" /></div>
</div>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>列值裁剪&nbsp;<code>Column Pruning</code>, 在谓词下推后,&nbsp;<code>people</code>&nbsp;表之上的操作只用到了&nbsp;<code>id</code>&nbsp;列, 所以可以把其它列裁剪掉, 这样可以减少处理的数据量, 从而优化处理速度</p>
</li>
</ul>
</div>
</div>
</div>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>还有其余很多优化点, 大概一共有一二百种, 随着&nbsp;<code>SparkSQL</code>&nbsp;的发展, 还会越来越多, 感兴趣的同学可以继续通过源码了解, 源码在&nbsp;<code>org.apache.spark.sql.catalyst.optimizer.Optimizer</code></p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">Step 4 : 上面的过程生成的&nbsp;<code>AST</code>&nbsp;其实最终还没办法直接运行, 这个&nbsp;<code>AST</code>&nbsp;叫做&nbsp;<code>逻辑计划</code>, 结束后, 需要生成&nbsp;<code>物理计划</code>, 从而生成&nbsp;<code>RDD</code>&nbsp;来运行</dt><dd>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>在生成`物理计划`的时候, 会经过`成本模型`对整棵树再次执行优化, 选择一个更好的计划</p>
</li>
<li>
<p>在生成`物理计划`以后, 因为考虑到性能, 所以会使用代码生成, 在机器中运行</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">
<div class="dlist"><dl><dt class="hdlist1">可以使用&nbsp;<code>queryExecution</code>&nbsp;方法查看逻辑执行计划, 使用&nbsp;<code>explain</code>&nbsp;方法查看物理执行计划</dt><dd>
<div class="imageblock">
<div class="content"><img src="http://nos.netease.com/knowledge/6dd59b15-d810-4f1e-ab52-c1ecfe0bddcd" alt="6dd59b15 d810 4f1e ab52 c1ecfe0bddcd" width="700" /></div>
</div>
<div class="imageblock">
<div class="content"><img src="http://nos.netease.com/knowledge/6281b141-af94-41e7-8953-d33b0a6d04d0" alt="6281b141 af94 41e7 8953 d33b0a6d04d0" width="700" /></div>
</div>
</dd><dt class="hdlist1">也可以使用&nbsp;<code>Spark WebUI</code>&nbsp;进行查看</dt><dd>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/7884408908284ba4ebc57b0f1360bc03.png" alt="7884408908284ba4ebc57b0f1360bc03" width="700" /></div>
</div>
</dd></dl></div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="paragraph">
<p><code>SparkSQL</code>&nbsp;和&nbsp;<code>RDD</code>&nbsp;不同的主要点是在于其所操作的数据是结构化的, 提供了对数据更强的感知和分析能力, 能够对代码进行更深层的优化, 而这种能力是由一个叫做&nbsp;<code>Catalyst</code>&nbsp;的优化器所提供的</p>
</div>
<div class="paragraph">
<p><code>Catalyst</code>&nbsp;的主要运作原理是分为三步, 先对&nbsp;<code>SQL</code>&nbsp;或者&nbsp;<code>Dataset</code>&nbsp;的代码解析, 生成逻辑计划, 后对逻辑计划进行优化, 再生成物理计划, 最后生成代码到集群中以&nbsp;<code>RDD</code>&nbsp;的形式运行</p>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_4_dataset_的特点">4. Dataset 的特点</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>理解&nbsp;<code>Dataset</code>&nbsp;是什么</p>
</li>
<li>
<p>理解&nbsp;<code>Dataset</code>&nbsp;的特性</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>Dataset</code>&nbsp;是什么?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = <span class="hljs-keyword">new sql.<span class="hljs-type">SparkSession.<span class="hljs-type">Builder()
  .appName(<span class="hljs-string">"hello")
  .master(<span class="hljs-string">"local[6]")
  .getOrCreate()

<span class="hljs-keyword">import spark.implicits._

<span class="hljs-keyword">val dataset: <span class="hljs-type">Dataset[<span class="hljs-type">People] = spark.createDataset(<span class="hljs-type">Seq(<span class="hljs-type">People(<span class="hljs-string">"zhangsan", <span class="hljs-number">9), <span class="hljs-type">People(<span class="hljs-string">"lisi", <span class="hljs-number">15)))
<span class="hljs-comment">// 方式1: 通过对象来处理
dataset.filter(item =&gt; item.age &gt; <span class="hljs-number">10).show()
<span class="hljs-comment">// 方式2: 通过字段来处理
dataset.filter(<span class="hljs-symbol">'age &gt; <span class="hljs-number">10).show()
<span class="hljs-comment">// 方式3: 通过类似SQL的表达式来处理
dataset.filter(<span class="hljs-string">"age &gt; 10").show()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">问题1:&nbsp;<code>People</code>&nbsp;是什么?</dt><dd>
<p><code>People</code>&nbsp;是一个强类型的类</p>
</dd><dt class="hdlist1">问题2: 这个&nbsp;<code>Dataset</code>&nbsp;中是结构化的数据吗?</dt><dd>
<p>非常明显是的, 因为&nbsp;<code>People</code>&nbsp;对象中有结构信息, 例如字段名和字段类型</p>
</dd><dt class="hdlist1">问题3: 这个&nbsp;<code>Dataset</code>&nbsp;能够使用类似&nbsp;<code>SQL</code>&nbsp;这样声明式结构化查询语句的形式来查询吗?</dt><dd>
<p>当然可以, 已经演示过了</p>
</dd><dt class="hdlist1">问题4:&nbsp;<code>Dataset</code>&nbsp;是什么?</dt><dd>
<p><code>Dataset</code>&nbsp;是一个强类型, 并且类型安全的数据容器, 并且提供了结构化查询&nbsp;<code>API</code>&nbsp;和类似&nbsp;<code>RDD</code>&nbsp;一样的命令式&nbsp;<code>API</code></p>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">即使使用&nbsp;<code>Dataset</code>&nbsp;的命令式&nbsp;<code>API</code>, 执行计划也依然会被优化</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>Dataset</code>&nbsp;具有&nbsp;<code>RDD</code>&nbsp;的方便, 同时也具有&nbsp;<code>DataFrame</code>&nbsp;的性能优势, 并且&nbsp;<code>Dataset</code>&nbsp;还是强类型的, 能做到类型安全.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">scala&gt; spark.range(1).filter('id === 0).explain(true)

== Parsed Logical Plan ==
'Filter ('id = 0)
+- Range (0, 1, splits=8)

== Analyzed Logical Plan ==
id: bigint
Filter (id#51L = cast(0 as bigint))
+- Range (0, 1, splits=8)

== Optimized Logical Plan ==
Filter (id#51L = 0)
+- Range (0, 1, splits=8)

== Physical Plan ==
*Filter (id#51L = 0)
+- *Range (0, 1, splits=8)</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Dataset</code>&nbsp;的底层是什么?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>Dataset</code>&nbsp;最底层处理的是对象的序列化形式, 通过查看&nbsp;<code>Dataset</code>&nbsp;生成的物理执行计划, 也就是最终所处理的&nbsp;<code>RDD</code>, 就可以判定&nbsp;<code>Dataset</code>&nbsp;底层处理的是什么形式的数据</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val dataset: <span class="hljs-type">Dataset[<span class="hljs-type">People] = spark.createDataset(<span class="hljs-type">Seq(<span class="hljs-type">People(<span class="hljs-string">"zhangsan", <span class="hljs-number">9), <span class="hljs-type">People(<span class="hljs-string">"lisi", <span class="hljs-number">15)))
<span class="hljs-keyword">val internalRDD: <span class="hljs-type">RDD[<span class="hljs-type">InternalRow] = dataset.queryExecution.toRdd</span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p><code>dataset.queryExecution.toRdd</code>&nbsp;这个&nbsp;<code>API</code>&nbsp;可以看到&nbsp;<code>Dataset</code>&nbsp;底层执行的&nbsp;<code>RDD</code>, 这个&nbsp;<code>RDD</code>&nbsp;中的范型是&nbsp;<code>InternalRow</code>,&nbsp;<code>InternalRow</code>&nbsp;又称之为&nbsp;<code>Catalyst Row</code>, 是&nbsp;<code>Dataset</code>&nbsp;底层的数据结构, 也就是说, 无论&nbsp;<code>Dataset</code>&nbsp;的范型是什么, 无论是&nbsp;<code>Dataset[Person]</code>&nbsp;还是其它的, 其最底层进行处理的数据结构都是&nbsp;<code>InternalRow</code></p>
</div>
<div class="paragraph">
<p>所以,&nbsp;<code>Dataset</code>&nbsp;的范型对象在执行之前, 需要通过&nbsp;<code>Encoder</code>&nbsp;转换为&nbsp;<code>InternalRow</code>, 在输入之前, 需要把&nbsp;<code>InternalRow</code>&nbsp;通过&nbsp;<code>Decoder</code>&nbsp;转换为范型对象</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/cc610157b92466cac52248a8bf72b76e.png" alt="cc610157b92466cac52248a8bf72b76e" /></div>
</div>
</div>
</div>
</dd><dt class="hdlist1">可以获取&nbsp;<code>Dataset</code>&nbsp;对应的&nbsp;<code>RDD</code>&nbsp;表示</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>在&nbsp;<code>Dataset</code>&nbsp;中, 可以使用一个属性&nbsp;<code>rdd</code>&nbsp;来得到它的&nbsp;<code>RDD</code>&nbsp;表示, 例如&nbsp;<code>Dataset[T] &rarr; RDD[T]</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val dataset: <span class="hljs-type">Dataset[<span class="hljs-type">People] = spark.createDataset(<span class="hljs-type">Seq(<span class="hljs-type">People(<span class="hljs-string">"zhangsan", <span class="hljs-number">9), <span class="hljs-type">People(<span class="hljs-string">"lisi", <span class="hljs-number">15)))

<span class="hljs-comment">/*
(2) MapPartitionsRDD[3] at rdd at Testing.scala:159 []
 |  MapPartitionsRDD[2] at rdd at Testing.scala:159 []
 |  MapPartitionsRDD[1] at rdd at Testing.scala:159 []
 |  ParallelCollectionRDD[0] at rdd at Testing.scala:159 []
 */
<span class="conum" data-value="1">
println(dataset.rdd.toDebugString) <span class="hljs-comment">// 这段代码的执行计划为什么多了两个步骤?

<span class="hljs-comment">/*
(2) MapPartitionsRDD[5] at toRdd at Testing.scala:160 []
 |  ParallelCollectionRDD[4] at toRdd at Testing.scala:160 []
 */
<span class="conum" data-value="2">
println(dataset.queryExecution.toRdd.toDebugString)</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>使用&nbsp;<code>Dataset.rdd</code>&nbsp;将&nbsp;<code>Dataset</code>&nbsp;转为&nbsp;<code>RDD</code>&nbsp;的形式</td>
</tr>
<tr>
<td>&nbsp;</td>
<td><code>Dataset</code>&nbsp;的执行计划底层的&nbsp;<code>RDD</code></td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">
<p>可以看到&nbsp;<code>(1)</code>&nbsp;对比&nbsp;<code>(2)</code>&nbsp;对了两个步骤, 这两个步骤的本质就是将&nbsp;<code>Dataset</code>&nbsp;底层的&nbsp;<code>InternalRow</code>&nbsp;转为&nbsp;<code>RDD</code>&nbsp;中的对象形式, 这个操作还是会有点重的, 所以慎重使用&nbsp;<code>rdd</code>&nbsp;属性来转换&nbsp;<code>Dataset</code>&nbsp;为&nbsp;<code>RDD</code></p>
</div>
</div>
</div>
</dd></dl></div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Dataset</code>&nbsp;是一个新的&nbsp;<code>Spark</code>&nbsp;组件, 其底层还是&nbsp;<code>RDD</code></p>
</li>
<li>
<p><code>Dataset</code>&nbsp;提供了访问对象中某个特定字段的能力, 不用像&nbsp;<code>RDD</code>&nbsp;一样每次都要针对整个对象做操作</p>
</li>
<li>
<p><code>Dataset</code>&nbsp;和&nbsp;<code>RDD</code>&nbsp;不同, 如果想把&nbsp;<code>Dataset[T]</code>&nbsp;转为&nbsp;<code>RDD[T]</code>, 则需要对&nbsp;<code>Dataset</code>&nbsp;底层的&nbsp;<code>InternalRow</code>&nbsp;做转换, 是一个比价重量级的操作</p>
</li>
</ol></div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_5_dataframe_的作用和常见操作">5. DataFrame 的作用和常见操作</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>理解&nbsp;<code>DataFrame</code>&nbsp;是什么</p>
</li>
<li>
<p>理解&nbsp;<code>DataFrame</code>&nbsp;的常见操作</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>DataFrame</code>&nbsp;是什么?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>DataFrame</code>&nbsp;是&nbsp;<code>SparkSQL</code>&nbsp;中一个表示关系型数据库中&nbsp;<code>表</code>&nbsp;的函数式抽象, 其作用是让&nbsp;<code>Spark</code>&nbsp;处理大规模结构化数据的时候更加容易. 一般&nbsp;<code>DataFrame</code>&nbsp;可以处理结构化的数据, 或者是半结构化的数据, 因为这两类数据中都可以获取到&nbsp;<code>Schema</code>&nbsp;信息. 也就是说&nbsp;<code>DataFrame</code>&nbsp;中有&nbsp;<code>Schema</code>&nbsp;信息, 可以像操作表一样操作&nbsp;<code>DataFrame</code>.</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/eca0d2e1e2b5ce678161438d87707b61.png" alt="eca0d2e1e2b5ce678161438d87707b61" /></div>
</div>
<div class="paragraph">
<p><code>DataFrame</code>&nbsp;由两部分构成, 一是&nbsp;<code>row</code>&nbsp;的集合, 每个&nbsp;<code>row</code>&nbsp;对象表示一个行, 二是描述&nbsp;<code>DataFrame</code>&nbsp;结构的&nbsp;<code>Schema</code>.</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/238c241593cd5b0fd06d4d74294680e2.png" alt="238c241593cd5b0fd06d4d74294680e2" /></div>
</div>
<div class="paragraph">
<p><code>DataFrame</code>&nbsp;支持&nbsp;<code>SQL</code>&nbsp;中常见的操作, 例如:&nbsp;<code>select</code>,&nbsp;<code>filter</code>,&nbsp;<code>join</code>,&nbsp;<code>group</code>,&nbsp;<code>sort</code>,&nbsp;<code>join</code>&nbsp;等</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = <span class="hljs-keyword">new sql.<span class="hljs-type">SparkSession.<span class="hljs-type">Builder()
  .appName(<span class="hljs-string">"hello")
  .master(<span class="hljs-string">"local[6]")
  .getOrCreate()

<span class="hljs-keyword">import spark.implicits._

<span class="hljs-keyword">val peopleDF: <span class="hljs-type">DataFrame = <span class="hljs-type">Seq(<span class="hljs-type">People(<span class="hljs-string">"zhangsan", <span class="hljs-number">15), <span class="hljs-type">People(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDF()

<span class="hljs-comment">/*
+---+-----+
|age|count|
+---+-----+
| 15|    2|
+---+-----+
 */
peopleDF.groupBy(<span class="hljs-symbol">'age)
  .count()
  .show()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">通过隐式转换创建&nbsp;<code>DataFrame</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>这种方式本质上是使用&nbsp;<code>SparkSession</code>&nbsp;中的隐式转换来进行的</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = <span class="hljs-keyword">new sql.<span class="hljs-type">SparkSession.<span class="hljs-type">Builder()
  .appName(<span class="hljs-string">"hello")
  .master(<span class="hljs-string">"local[6]")
  .getOrCreate()

<span class="hljs-comment">// 必须要导入隐式转换
<span class="hljs-comment">// 注意: spark 在此处不是包, 而是 SparkSession 对象
<span class="hljs-keyword">import spark.implicits._

<span class="hljs-keyword">val peopleDF: <span class="hljs-type">DataFrame = <span class="hljs-type">Seq(<span class="hljs-type">People(<span class="hljs-string">"zhangsan", <span class="hljs-number">15), <span class="hljs-type">People(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDF()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/841503b4240e7a8ecac62d92203e9943.png" alt="841503b4240e7a8ecac62d92203e9943" width="600" /></div>
</div>
<div class="paragraph">
<p>根据源码可以知道,&nbsp;<code>toDF</code>&nbsp;方法可以在&nbsp;<code>RDD</code>&nbsp;和&nbsp;<code>Seq</code>&nbsp;中使用</p>
</div>
<div class="paragraph">
<p>通过集合创建&nbsp;<code>DataFrame</code>&nbsp;的时候, 集合中不仅可以包含样例类, 也可以只有普通数据类型, 后通过指定列名来创建</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = <span class="hljs-keyword">new sql.<span class="hljs-type">SparkSession.<span class="hljs-type">Builder()
  .appName(<span class="hljs-string">"hello")
  .master(<span class="hljs-string">"local[6]")
  .getOrCreate()

<span class="hljs-keyword">import spark.implicits._

<span class="hljs-keyword">val df1: <span class="hljs-type">DataFrame = <span class="hljs-type">Seq(<span class="hljs-string">"nihao", <span class="hljs-string">"hello").toDF(<span class="hljs-string">"text")

<span class="hljs-comment">/*
+-----+
| text|
+-----+
|nihao|
|hello|
+-----+
 */
df1.show()

<span class="hljs-keyword">val df2: <span class="hljs-type">DataFrame = <span class="hljs-type">Seq((<span class="hljs-string">"a", <span class="hljs-number">1), (<span class="hljs-string">"b", <span class="hljs-number">1)).toDF(<span class="hljs-string">"word", <span class="hljs-string">"count")

<span class="hljs-comment">/*
+----+-----+
|word|count|
+----+-----+
|   a|    1|
|   b|    1|
+----+-----+
 */
df2.show()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">通过外部集合创建&nbsp;<code>DataFrame</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = <span class="hljs-keyword">new sql.<span class="hljs-type">SparkSession.<span class="hljs-type">Builder()
  .appName(<span class="hljs-string">"hello")
  .master(<span class="hljs-string">"local[6]")
  .getOrCreate()

<span class="hljs-keyword">val df = spark.read
  .option(<span class="hljs-string">"header", <span class="hljs-literal">true)
  .csv(<span class="hljs-string">"dataset/BeijingPM20100101_20151231.csv")
df.show(<span class="hljs-number">10)
df.printSchema()</span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>不仅可以从&nbsp;<code>csv</code>&nbsp;文件创建&nbsp;<code>DataFrame</code>, 还可以从&nbsp;<code>Table</code>,&nbsp;<code>JSON</code>,&nbsp;<code>Parquet</code>&nbsp;等中创建&nbsp;<code>DataFrame</code>, 后续会有单独的章节来介绍</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">在&nbsp;<code>DataFrame</code>&nbsp;上可以使用的常规操作</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>需求: 查看每个月的统计数量</p>
</div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">Step 1: 首先可以打印&nbsp;<code>DataFrame</code>&nbsp;的&nbsp;<code>Schema</code>, 查看其中所包含的列, 以及列的类型</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = <span class="hljs-keyword">new sql.<span class="hljs-type">SparkSession.<span class="hljs-type">Builder()
  .appName(<span class="hljs-string">"hello")
  .master(<span class="hljs-string">"local[6]")
  .getOrCreate()

<span class="hljs-keyword">val df = spark.read
  .option(<span class="hljs-string">"header", <span class="hljs-literal">true)
  .csv(<span class="hljs-string">"dataset/BeijingPM20100101_20151231.csv")

df.printSchema()</span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</dd><dt class="hdlist1">Step 2: 对于大部分计算来说, 可能不会使用所有的列, 所以可以选择其中某些重要的列</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">...

df.select(<span class="hljs-symbol">'year, <span class="hljs-symbol">'month, <span class="hljs-symbol">'PM_Dongsi)</span></span></span></code></pre>
</div>
</div>
</dd><dt class="hdlist1">Step 3: 可以针对某些列进行分组, 后对每组数据通过函数做聚合</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">...

df.select(<span class="hljs-symbol">'year, <span class="hljs-symbol">'month, <span class="hljs-symbol">'PM_Dongsi)
  .where(<span class="hljs-symbol">'PM_Dongsi =!= <span class="hljs-string">"Na")
  .groupBy(<span class="hljs-symbol">'year, <span class="hljs-symbol">'month)
  .count()
  .show()</span></span></span></span></span></span></span></code></pre>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">使用&nbsp;<code>SQL</code>&nbsp;操作&nbsp;<code>DataFrame</code></dt></dl></div>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>使用&nbsp;<code>SQL</code>&nbsp;来操作某个&nbsp;<code>DataFrame</code>&nbsp;的话,&nbsp;<code>SQL</code>&nbsp;中必须要有一个&nbsp;<code>from</code>&nbsp;子句, 所以需要先将&nbsp;<code>DataFrame</code>&nbsp;注册为一张临时表</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = <span class="hljs-keyword">new sql.<span class="hljs-type">SparkSession.<span class="hljs-type">Builder()
  .appName(<span class="hljs-string">"hello")
  .master(<span class="hljs-string">"local[6]")
  .getOrCreate()

<span class="hljs-keyword">val df = spark.read
  .option(<span class="hljs-string">"header", <span class="hljs-literal">true)
  .csv(<span class="hljs-string">"dataset/BeijingPM20100101_20151231.csv")

df.createOrReplaceTempView(<span class="hljs-string">"temp_table")

spark.sql(<span class="hljs-string">"select year, month, count(*) from temp_table where PM_Dongsi != 'NA' group by year, month")
  .show()</span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>DataFrame</code>&nbsp;是一个类似于关系型数据库表的函数式组件</p>
</li>
<li>
<p><code>DataFrame</code>&nbsp;一般处理结构化数据和半结构化数据</p>
</li>
<li>
<p><code>DataFrame</code>&nbsp;具有数据对象的 Schema 信息</p>
</li>
<li>
<p>可以使用命令式的&nbsp;<code>API</code>&nbsp;操作&nbsp;<code>DataFrame</code>, 同时也可以使用&nbsp;<code>SQL</code>&nbsp;操作&nbsp;<code>DataFrame</code></p>
</li>
<li>
<p><code>DataFrame</code>&nbsp;可以由一个已经存在的集合直接创建, 也可以读取外部的数据源来创建</p>
</li>
</ol></div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_6_dataset_和_dataframe_的异同">6. Dataset 和 DataFrame 的异同</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>理解&nbsp;<code>Dataset</code>&nbsp;和&nbsp;<code>DataFrame</code>&nbsp;之间的关系</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>DataFrame</code>&nbsp;就是&nbsp;<code>Dataset</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>根据前面的内容, 可以得到如下信息</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Dataset</code>&nbsp;中可以使用列来访问数据,&nbsp;<code>DataFrame</code>&nbsp;也可以</p>
</li>
<li>
<p><code>Dataset</code>&nbsp;的执行是优化的,&nbsp;<code>DataFrame</code>&nbsp;也是</p>
</li>
<li>
<p><code>Dataset</code>&nbsp;具有命令式&nbsp;<code>API</code>, 同时也可以使用&nbsp;<code>SQL</code>&nbsp;来访问,&nbsp;<code>DataFrame</code>&nbsp;也可以使用这两种不同的方式访问</p>
</li>
</ol></div>
<div class="paragraph">
<p>所以这件事就比较蹊跷了, 两个这么相近的东西为什么会同时出现在&nbsp;<code>SparkSQL</code>&nbsp;中呢?</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/44fb917304a91eab99d131010448331b.png" alt="44fb917304a91eab99d131010448331b" width="600" /></div>
</div>
<div class="paragraph">
<p>确实, 这两个组件是同一个东西,&nbsp;<code>DataFrame</code>&nbsp;是&nbsp;<code>Dataset</code>&nbsp;的一种特殊情况, 也就是说&nbsp;<code>DataFrame</code>&nbsp;是&nbsp;<code>Dataset[Row]</code>&nbsp;的别名</p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>DataFrame</code>&nbsp;和&nbsp;<code>Dataset</code>&nbsp;所表达的语义不同</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><strong>第一点:&nbsp;<code>DataFrame</code>&nbsp;表达的含义是一个支持函数式操作的&nbsp;<code>表</code>, 而&nbsp;<code>Dataset</code>&nbsp;表达是是一个类似&nbsp;<code>RDD</code>&nbsp;的东西,&nbsp;<code>Dataset</code>&nbsp;可以处理任何对象</strong></p>
</div>
<div class="dlist"><dl><dt class="hdlist1">第二点:&nbsp;<code>DataFrame</code>&nbsp;中所存放的是&nbsp;<code>Row</code>&nbsp;对象, 而&nbsp;<code>Dataset</code>&nbsp;中可以存放任何类型的对象</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = <span class="hljs-keyword">new sql.<span class="hljs-type">SparkSession.<span class="hljs-type">Builder()
  .appName(<span class="hljs-string">"hello")
  .master(<span class="hljs-string">"local[6]")
  .getOrCreate()

<span class="hljs-keyword">import spark.implicits._

<span class="hljs-keyword">val df: <span class="hljs-type">DataFrame = <span class="hljs-type">Seq(<span class="hljs-type">People(<span class="hljs-string">"zhangsan", <span class="hljs-number">15), <span class="hljs-type">People(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDF()       <span class="conum" data-value="1">

<span class="hljs-keyword">val ds: <span class="hljs-type">Dataset[<span class="hljs-type">People] = <span class="hljs-type">Seq(<span class="hljs-type">People(<span class="hljs-string">"zhangsan", <span class="hljs-number">15), <span class="hljs-type">People(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS() </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>DataFrame 就是 Dataset[Row]</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>Dataset 的范型可以是任意类型</td>
</tr>
</tbody>
</table>
</div>
</dd><dt class="hdlist1">第三点:&nbsp;<code>DataFrame</code>&nbsp;的操作方式和&nbsp;<code>Dataset</code>&nbsp;是一样的, 但是对于强类型操作而言, 它们处理的类型不同</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p><code>DataFrame</code>&nbsp;在进行强类型操作时候, 例如&nbsp;<code>map</code>&nbsp;算子, 其所处理的数据类型永远是&nbsp;<code>Row</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">df.map( (row: <span class="hljs-type">Row) =&gt; <span class="hljs-type">Row(row.get(<span class="hljs-number">0), row.getAs[<span class="hljs-type">Int](<span class="hljs-number">1) * <span class="hljs-number">10) )(<span class="hljs-type">RowEncoder.apply(df.schema)).show()</span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>但是对于&nbsp;<code>Dataset</code>&nbsp;来讲, 其中是什么类型, 它就处理什么类型</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">ds.map( (item: <span class="hljs-type">People) =&gt; <span class="hljs-type">People(item.name, item.age * <span class="hljs-number">10) ).show()</span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">第三点:&nbsp;<code>DataFrame</code>&nbsp;只能做到运行时类型检查,&nbsp;<code>Dataset</code>&nbsp;能做到编译和运行时都有类型检查</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>DataFrame</code>&nbsp;中存放的数据以&nbsp;<code>Row</code>&nbsp;表示, 一个&nbsp;<code>Row</code>&nbsp;代表一行数据, 这和关系型数据库类似</p>
</li>
<li>
<p><code>DataFrame</code>&nbsp;在进行&nbsp;<code>map</code>&nbsp;等操作的时候,&nbsp;<code>DataFrame</code>&nbsp;不能直接使用&nbsp;<code>Person</code>&nbsp;这样的&nbsp;<code>Scala</code>&nbsp;对象, 所以无法做到编译时检查</p>
</li>
<li>
<p><code>Dataset</code>&nbsp;表示的具体的某一类对象, 例如&nbsp;<code>Person</code>, 所以再进行&nbsp;<code>map</code>&nbsp;等操作的时候, 传入的是具体的某个&nbsp;<code>Scala</code>&nbsp;对象, 如果调用错了方法, 编译时就会被检查出来</p>
</li>
</ol></div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val ds: <span class="hljs-type">Dataset[<span class="hljs-type">People] = <span class="hljs-type">Seq(<span class="hljs-type">People(<span class="hljs-string">"zhangsan", <span class="hljs-number">15), <span class="hljs-type">People(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()
ds.map(person =&gt; person.hello) </span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>这行代码明显报错, 无法通过编译</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1"><code>Row</code>&nbsp;是什么?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>Row</code>&nbsp;对象表示的是一个&nbsp;<code>行</code></p>
</div>
<div class="paragraph">
<p><code>Row</code>&nbsp;的操作类似于&nbsp;<code>Scala</code>&nbsp;中的&nbsp;<code>Map</code>&nbsp;数据类型</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-comment">// 一个对象就是一个对象
<span class="hljs-keyword">val p = <span class="hljs-type">People(name = <span class="hljs-string">"zhangsan", age = <span class="hljs-number">10)

<span class="hljs-comment">// 同样一个对象, 还可以通过一个 Row 对象来表示
<span class="hljs-keyword">val row = <span class="hljs-type">Row(<span class="hljs-string">"zhangsan", <span class="hljs-number">10)

<span class="hljs-comment">// 获取 Row 中的内容
println(row.get(<span class="hljs-number">1))
println(row(<span class="hljs-number">1))

<span class="hljs-comment">// 获取时可以指定类型
println(row.getAs[<span class="hljs-type">Int](<span class="hljs-number">1))

<span class="hljs-comment">// 同时 Row 也是一个样例类, 可以进行 match
row <span class="hljs-keyword">match {
  <span class="hljs-keyword">case <span class="hljs-type">Row(name, age) =&gt; println(name, age)
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>DataFrame</code>&nbsp;和&nbsp;<code>Dataset</code>&nbsp;之间可以非常简单的相互转换</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = <span class="hljs-keyword">new sql.<span class="hljs-type">SparkSession.<span class="hljs-type">Builder()
  .appName(<span class="hljs-string">"hello")
  .master(<span class="hljs-string">"local[6]")
  .getOrCreate()

<span class="hljs-keyword">import spark.implicits._

<span class="hljs-keyword">val df: <span class="hljs-type">DataFrame = <span class="hljs-type">Seq(<span class="hljs-type">People(<span class="hljs-string">"zhangsan", <span class="hljs-number">15), <span class="hljs-type">People(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDF()
<span class="hljs-keyword">val ds_fdf: <span class="hljs-type">Dataset[<span class="hljs-type">People] = df.as[<span class="hljs-type">People]

<span class="hljs-keyword">val ds: <span class="hljs-type">Dataset[<span class="hljs-type">People] = <span class="hljs-type">Seq(<span class="hljs-type">People(<span class="hljs-string">"zhangsan", <span class="hljs-number">15), <span class="hljs-type">People(<span class="hljs-string">"lisi", <span class="hljs-number">15)).toDS()
<span class="hljs-keyword">val df_fds: <span class="hljs-type">DataFrame = ds.toDF()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</dd></dl></div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>DataFrame</code>&nbsp;就是&nbsp;<code>Dataset</code>, 他们的方式是一样的, 也都支持&nbsp;<code>API</code>&nbsp;和&nbsp;<code>SQL</code>&nbsp;两种操作方式</p>
</li>
<li>
<p><code>DataFrame</code>&nbsp;只能通过表达式的形式, 或者列的形式来访问数据, 只有&nbsp;<code>Dataset</code>&nbsp;支持针对于整个对象的操作</p>
</li>
<li>
<p><code>DataFrame</code>&nbsp;中的数据表示为&nbsp;<code>Row</code>, 是一个行的概念</p>
</li>
</ol></div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_7_数据读写">7. 数据读写</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>理解外部数据源的访问框架</p>
</li>
<li>
<p>掌握常见的数据源读写方式</p>
</li>
</ol></div>
</div>
</div>
<div class="sect2">
<h3 id="_7_1_初识_dataframereader">7.1. 初识 DataFrameReader</h3>
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="ulist">
<ul>
<li>
<p>理解&nbsp;<code>DataFrameReader</code>&nbsp;的整体结构和组成</p>
</li>
</ul>
</div>
</div>
</div>
<div class="paragraph">
<p><code>SparkSQL</code>&nbsp;的一个非常重要的目标就是完善数据读取, 所以&nbsp;<code>SparkSQL</code>&nbsp;中增加了一个新的框架, 专门用于读取外部数据源, 叫做&nbsp;<code>DataFrameReader</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import org.apache.spark.sql.<span class="hljs-type">SparkSession
<span class="hljs-keyword">import org.apache.spark.sql.<span class="hljs-type">DataFrameReader

<span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = ...

<span class="hljs-keyword">val reader: <span class="hljs-type">DataFrameReader = spark.read</span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p><code>DataFrameReader</code>&nbsp;由如下几个组件组成</p>
</div>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">组件</th><th class="tableblock halign-left valign-top">解释</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>schema</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">结构信息, 因为&nbsp;<code>Dataset</code>&nbsp;是有结构的, 所以在读取数据的时候, 就需要有&nbsp;<code>Schema</code>&nbsp;信息, 有可能是从外部数据源获取的, 也有可能是指定的</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>option</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">连接外部数据源的参数, 例如&nbsp;<code>JDBC</code>&nbsp;的&nbsp;<code>URL</code>, 或者读取&nbsp;<code>CSV</code>&nbsp;文件是否引入&nbsp;<code>Header</code>&nbsp;等</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>format</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">外部数据源的格式, 例如&nbsp;<code>csv</code>,&nbsp;<code>jdbc</code>,&nbsp;<code>json</code>&nbsp;等</p>
</td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p><code>DataFrameReader</code>&nbsp;有两种访问方式, 一种是使用&nbsp;<code>load</code>&nbsp;方法加载, 使用&nbsp;<code>format</code>&nbsp;指定加载格式, 还有一种是使用封装方法, 类似&nbsp;<code>csv</code>,&nbsp;<code>json</code>,&nbsp;<code>jdbc</code>&nbsp;等</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">import org.apache.spark.sql.<span class="hljs-type">SparkSession
<span class="hljs-keyword">import org.apache.spark.sql.<span class="hljs-type">DataFrame

<span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = ...

<span class="hljs-comment">// 使用 load 方法
<span class="hljs-keyword">val fromLoad: <span class="hljs-type">DataFrame = spark
  .read
  .format(<span class="hljs-string">"csv")
  .option(<span class="hljs-string">"header", <span class="hljs-literal">true)
  .option(<span class="hljs-string">"inferSchema", <span class="hljs-literal">true)
  .load(<span class="hljs-string">"dataset/BeijingPM20100101_20151231.csv")

<span class="hljs-comment">// Using format-specific load operator
<span class="hljs-keyword">val fromCSV: <span class="hljs-type">DataFrame = spark
  .read
  .option(<span class="hljs-string">"header", <span class="hljs-literal">true)
  .option(<span class="hljs-string">"inferSchema", <span class="hljs-literal">true)
  .csv(<span class="hljs-string">"dataset/BeijingPM20100101_20151231.csv")</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>但是其实这两种方式本质上一样, 因为类似&nbsp;<code>csv</code>&nbsp;这样的方式只是&nbsp;<code>load</code>&nbsp;的封装</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/e8af7d7e5ec256de27b2e40c8449a906.png" alt="e8af7d7e5ec256de27b2e40c8449a906" /></div>
</div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">
<div class="paragraph">
<p>如果使用&nbsp;<code>load</code>&nbsp;方法加载数据, 但是没有指定&nbsp;<code>format</code>&nbsp;的话, 默认是按照&nbsp;<code>Parquet</code>&nbsp;文件格式读取</p>
</div>
<div class="paragraph">
<p>也就是说,&nbsp;<code>SparkSQL</code>&nbsp;默认的读取格式是&nbsp;<code>Parquet</code></p>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>使用&nbsp;<code>spark.read</code>&nbsp;可以获取 SparkSQL 中的外部数据源访问框架&nbsp;<code>DataFrameReader</code></p>
</li>
<li>
<p><code>DataFrameReader</code>&nbsp;有三个组件&nbsp;<code>format</code>,&nbsp;<code>schema</code>,&nbsp;<code>option</code></p>
</li>
<li>
<p><code>DataFrameReader</code>&nbsp;有两种使用方式, 一种是使用&nbsp;<code>load</code>&nbsp;加&nbsp;<code>format</code>&nbsp;指定格式, 还有一种是使用封装方法&nbsp;<code>csv</code>,&nbsp;<code>json</code>等</p>
</li>
</ol></div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_7_2_初识_dataframewriter">7.2. 初识 DataFrameWriter</h3>
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>理解&nbsp;<code>DataFrameWriter</code>&nbsp;的结构</p>
</li>
</ol></div>
</div>
</div>
<div class="paragraph">
<p>对于&nbsp;<code>ETL</code>&nbsp;来说, 数据保存和数据读取一样重要, 所以&nbsp;<code>SparkSQL</code>&nbsp;中增加了一个新的数据写入框架, 叫做&nbsp;<code>DataFrameWriter</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = ...

<span class="hljs-keyword">val df = spark.read
      .option(<span class="hljs-string">"header", <span class="hljs-literal">true)
      .csv(<span class="hljs-string">"dataset/BeijingPM20100101_20151231.csv")

<span class="hljs-keyword">val writer: <span class="hljs-type">DataFrameWriter[<span class="hljs-type">Row] = df.write</span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p><code>DataFrameWriter</code>&nbsp;中由如下几个部分组成</p>
</div>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">组件</th><th class="tableblock halign-left valign-top">解释</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>source</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">写入目标, 文件格式等, 通过&nbsp;<code>format</code>&nbsp;方法设定</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>mode</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">写入模式, 例如一张表已经存在, 如果通过&nbsp;<code>DataFrameWriter</code>&nbsp;向这张表中写入数据, 是覆盖表呢, 还是向表中追加呢? 通过&nbsp;<code>mode</code>方法设定</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>extraOptions</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">外部参数, 例如&nbsp;<code>JDBC</code>&nbsp;的&nbsp;<code>URL</code>, 通过&nbsp;<code>options</code>,&nbsp;<code>option</code>&nbsp;设定</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>partitioningColumns</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">类似&nbsp;<code>Hive</code>&nbsp;的分区, 保存表的时候使用, 这个地方的分区不是&nbsp;<code>RDD</code>的分区, 而是文件的分区, 或者表的分区, 通过&nbsp;<code>partitionBy</code>&nbsp;设定</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>bucketColumnNames</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">类似&nbsp;<code>Hive</code>&nbsp;的分桶, 保存表的时候使用, 通过&nbsp;<code>bucketBy</code>&nbsp;设定</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>sortColumnNames</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">用于排序的列, 通过&nbsp;<code>sortBy</code>&nbsp;设定</p>
</td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p><code>mode</code>&nbsp;指定了写入模式, 例如覆盖原数据集, 或者向原数据集合中尾部添加等</p>
</div>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top"><code>Scala</code>&nbsp;对象表示</th><th class="tableblock halign-left valign-top">字符串表示</th><th class="tableblock halign-left valign-top">解释</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>SaveMode.ErrorIfExists</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>"error"</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">将&nbsp;<code>DataFrame</code>&nbsp;保存到&nbsp;<code>source</code>&nbsp;时, 如果目标已经存在, 则报错</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>SaveMode.Append</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>"append"</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">将&nbsp;<code>DataFrame</code>&nbsp;保存到&nbsp;<code>source</code>&nbsp;时, 如果目标已经存在, 则添加到文件或者&nbsp;<code>Table</code>中</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>SaveMode.Overwrite</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>"overwrite"</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">将&nbsp;<code>DataFrame</code>&nbsp;保存到&nbsp;<code>source</code>&nbsp;时, 如果目标已经存在, 则使用&nbsp;<code>DataFrame</code>&nbsp;中的数据完全覆盖目标</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>SaveMode.Ignore</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>"ignore"</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">将&nbsp;<code>DataFrame</code>&nbsp;保存到&nbsp;<code>source</code>&nbsp;时, 如果目标已经存在, 则不会保存&nbsp;<code>DataFrame</code>&nbsp;数据, 并且也不修改目标数据集, 类似于&nbsp;<code>CREATE TABLE IF NOT EXISTS</code></p>
</td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p><code>DataFrameWriter</code>&nbsp;也有两种使用方式, 一种是使用&nbsp;<code>format</code>&nbsp;配合&nbsp;<code>save</code>, 还有一种是使用封装方法, 例如&nbsp;<code>csv</code>,&nbsp;<code>json</code>,&nbsp;<code>saveAsTable</code>&nbsp;等</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = ...

<span class="hljs-keyword">val df = spark.read
  .option(<span class="hljs-string">"header", <span class="hljs-literal">true)
  .csv(<span class="hljs-string">"dataset/BeijingPM20100101_20151231.csv")

<span class="hljs-comment">// 使用 save 保存, 使用 format 设置文件格式
df.write.format(<span class="hljs-string">"json").save(<span class="hljs-string">"dataset/beijingPM")

<span class="hljs-comment">// 使用 json 保存, 因为方法是 json, 所以隐含的 format 是 json
df.write.json(<span class="hljs-string">"dataset/beijingPM1")</span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">
<div class="paragraph">
<p>默认没有指定&nbsp;<code>format</code>, 默认的&nbsp;<code>format</code>&nbsp;是&nbsp;<code>Parquet</code></p>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>类似&nbsp;<code>DataFrameReader</code>,&nbsp;<code>Writer</code>&nbsp;中也有&nbsp;<code>format</code>,&nbsp;<code>options</code>, 另外&nbsp;<code>schema</code>&nbsp;是包含在&nbsp;<code>DataFrame</code>&nbsp;中的</p>
</li>
<li>
<p><code>DataFrameWriter</code>&nbsp;中还有一个很重要的概念叫做&nbsp;<code>mode</code>, 指定写入模式, 如果目标集合已经存在时的行为</p>
</li>
<li>
<p><code>DataFrameWriter</code>&nbsp;可以将数据保存到&nbsp;<code>Hive</code>&nbsp;表中, 所以也可以指定分区和分桶信息</p>
</li>
</ol></div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_7_3_读写_parquet_格式文件">7.3. 读写 Parquet 格式文件</h3>
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>理解&nbsp;<code>Spark</code>&nbsp;读写&nbsp;<code>Parquet</code>&nbsp;文件的语法</p>
</li>
<li>
<p>理解&nbsp;<code>Spark</code>&nbsp;读写&nbsp;<code>Parquet</code>&nbsp;文件的时候对于分区的处理</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">什么时候会用到&nbsp;<code>Parquet</code>&nbsp;?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/00a2a56f725d86b5c27463f109c43d8c.png" alt="00a2a56f725d86b5c27463f109c43d8c" /></div>
</div>
<div class="paragraph">
<p>在&nbsp;<code>ETL</code>&nbsp;中,&nbsp;<code>Spark</code>&nbsp;经常扮演&nbsp;<code>T</code>&nbsp;的职务, 也就是进行数据清洗和数据转换.</p>
</div>
<div class="paragraph">
<p>为了能够保存比较复杂的数据, 并且保证性能和压缩率, 通常使用&nbsp;<code>Parquet</code>&nbsp;是一个比较不错的选择.</p>
</div>
<div class="paragraph">
<p>所以外部系统收集过来的数据, 有可能会使用&nbsp;<code>Parquet</code>, 而&nbsp;<code>Spark</code>&nbsp;进行读取和转换的时候, 就需要支持对&nbsp;<code>Parquet</code>&nbsp;格式的文件的支持.</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">使用代码读写&nbsp;<code>Parquet</code>&nbsp;文件</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>默认不指定&nbsp;<code>format</code>&nbsp;的时候, 默认就是读写&nbsp;<code>Parquet</code>&nbsp;格式的文件</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = <span class="hljs-keyword">new sql.<span class="hljs-type">SparkSession.<span class="hljs-type">Builder()
  .appName(<span class="hljs-string">"hello")
  .master(<span class="hljs-string">"local[6]")
  .getOrCreate()

<span class="hljs-keyword">val df = spark.read
  .option(<span class="hljs-string">"header", value = <span class="hljs-literal">true)
  .csv(<span class="hljs-string">"dataset/911.csv")

<span class="hljs-comment">// 保存 Parquet 文件
df.write.mode(<span class="hljs-string">"override").save(<span class="hljs-string">"dataset/911.parquet")

<span class="hljs-comment">// 读取 Parquet 文件
<span class="hljs-keyword">val dfFromParquet = spark.read.parquet(<span class="hljs-string">"dataset/911.parquet")
dfFromParquet.createOrReplaceTempView(<span class="hljs-string">"911")

spark.sql(<span class="hljs-string">"select * from 911 where zip &gt; 19000 and zip &lt; 19400").show()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">写入&nbsp;<code>Parquet</code>&nbsp;的时候可以指定分区</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>Spark</code>&nbsp;在写入文件的时候是支持分区的, 可以像&nbsp;<code>Hive</code>&nbsp;一样设置某个列为分区列</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = <span class="hljs-keyword">new sql.<span class="hljs-type">SparkSession.<span class="hljs-type">Builder()
  .appName(<span class="hljs-string">"hello")
  .master(<span class="hljs-string">"local[6]")
  .getOrCreate()

<span class="hljs-comment">// 从 CSV 中读取内容
<span class="hljs-keyword">val dfFromParquet = spark.read.option(<span class="hljs-string">"header", value = <span class="hljs-literal">true).csv(<span class="hljs-string">"dataset/BeijingPM20100101_20151231.csv")

<span class="hljs-comment">// 保存为 Parquet 格式文件, 不指定 format 默认就是 Parquet
dfFromParquet.write.partitionBy(<span class="hljs-string">"year", <span class="hljs-string">"month").save(<span class="hljs-string">"dataset/beijing_pm")</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/67314102d7b36b791b04bafeb5d0d3e8.png" alt="67314102d7b36b791b04bafeb5d0d3e8" width="300" /></div>
</div>
</div>
</div>
</dd></dl></div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">
<div class="paragraph">
<p>这个地方指的分区是类似&nbsp;<code>Hive</code>&nbsp;中表分区的概念, 而不是&nbsp;<code>RDD</code>&nbsp;分布式分区的含义</p>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="dlist"><dl><dt class="hdlist1">分区发现</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>在读取常见文件格式的时候,&nbsp;<code>Spark</code>&nbsp;会自动的进行分区发现, 分区自动发现的时候, 会将文件名中的分区信息当作一列. 例如 如果按照性别分区, 那么一般会生成两个文件夹&nbsp;<code>gender=male</code>&nbsp;和&nbsp;<code>gender=female</code>, 那么在使用&nbsp;<code>Spark</code>&nbsp;读取的时候, 会自动发现这个分区信息, 并且当作列放入创建的&nbsp;<code>DataFrame</code>&nbsp;中</p>
</div>
<div class="paragraph">
<p>使用代码证明这件事可以有两个步骤, 第一步先读取某个分区的单独一个文件并打印其&nbsp;<code>Schema</code>&nbsp;信息, 第二步读取整个数据集所有分区并打印&nbsp;<code>Schema</code>&nbsp;信息, 和第一步做比较就可以确定</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark = ...

<span class="hljs-keyword">val partDF = spark.read.load(<span class="hljs-string">"dataset/beijing_pm/year=2010/month=1") <span class="conum" data-value="1">
partDF.printSchema()</span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>把分区的数据集中的某一个区单做一整个数据集读取, 没有分区信息, 自然也不会进行分区发现</td>
</tr>
</tbody>
</table>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/dbb274b7fcdfd82c3a3922dfa6bfb29e.png" alt="dbb274b7fcdfd82c3a3922dfa6bfb29e" width="600" /></div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val df = spark.read.load(<span class="hljs-string">"dataset/beijing_pm") <span class="conum" data-value="1">
df.printSchema()</span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>此处读取的是整个数据集, 会进行分区发现, DataFrame 中会包含分去列</td>
</tr>
</tbody>
</table>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/84353e6ed2cf479b82b4d2e4e2b6c3c2.png" alt="84353e6ed2cf479b82b4d2e4e2b6c3c2" width="600" /></div>
</div>
</div>
</div>
</dd></dl></div>
<table class="tableblock frame-all grid-all stretch"><caption class="title">Table 1.&nbsp;<code>SparkSession</code>&nbsp;中有关&nbsp;<code>Parquet</code>&nbsp;的配置</caption><colgroup><col /><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">配置</th><th class="tableblock halign-left valign-top">默认值</th><th class="tableblock halign-left valign-top">含义</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>spark.sql.parquet.binaryAsString</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>false</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">一些其他&nbsp;<code>Parquet</code>&nbsp;生产系统, 不区分字符串类型和二进制类型, 该配置告诉&nbsp;<code>SparkSQL</code>&nbsp;将二进制数据解释为字符串以提供与这些系统的兼容性</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>spark.sql.parquet.int96AsTimestamp</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>true</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">一些其他&nbsp;<code>Parquet</code>&nbsp;生产系统, 将&nbsp;<code>Timestamp</code>&nbsp;存为&nbsp;<code>INT96</code>, 该配置告诉&nbsp;<code>SparkSQL</code>&nbsp;将&nbsp;<code>INT96</code>&nbsp;解析为&nbsp;<code>Timestamp</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>spark.sql.parquet.cacheMetadata</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>true</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">打开 Parquet 元数据的缓存, 可以加快查询静态数据</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>spark.sql.parquet.compression.codec</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>snappy</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">压缩方式, 可选&nbsp;<code>uncompressed</code>,&nbsp;<code>snappy</code>,&nbsp;<code>gzip</code>,&nbsp;<code>lzo</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>spark.sql.parquet.mergeSchema</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>false</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">当为 true 时, Parquet 数据源会合并从所有数据文件收集的 Schemas 和数据, 因为这个操作开销比较大, 所以默认关闭</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>spark.sql.optimizer.metadataOnly</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>true</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">如果为&nbsp;<code>true</code>, 会通过原信息来生成分区列, 如果为&nbsp;<code>false</code>&nbsp;则就是通过扫描整个数据集来确定</p>
</td>
</tr>
</tbody>
</table>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>Spark</code>&nbsp;不指定&nbsp;<code>format</code>&nbsp;的时候默认就是按照&nbsp;<code>Parquet</code>&nbsp;的格式解析文件</p>
</li>
<li>
<p><code>Spark</code>&nbsp;在读取&nbsp;<code>Parquet</code>&nbsp;文件的时候会自动的发现&nbsp;<code>Parquet</code>&nbsp;的分区和分区字段</p>
</li>
<li>
<p><code>Spark</code>&nbsp;在写入&nbsp;<code>Parquet</code>&nbsp;文件的时候如果设置了分区字段, 会自动的按照分区存储</p>
</li>
</ol></div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_7_4_读写_json_格式文件">7.4. 读写 JSON 格式文件</h3>
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>理解&nbsp;<code>JSON</code>&nbsp;的使用场景</p>
</li>
<li>
<p>能够使用&nbsp;<code>Spark</code>&nbsp;读取处理&nbsp;<code>JSON</code>&nbsp;格式文件</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">什么时候会用到&nbsp;<code>JSON</code>&nbsp;?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/00a2a56f725d86b5c27463f109c43d8c.png" alt="00a2a56f725d86b5c27463f109c43d8c" /></div>
</div>
<div class="paragraph">
<p>在&nbsp;<code>ETL</code>&nbsp;中,&nbsp;<code>Spark</code>&nbsp;经常扮演&nbsp;<code>T</code>&nbsp;的职务, 也就是进行数据清洗和数据转换.</p>
</div>
<div class="paragraph">
<p>在业务系统中,&nbsp;<code>JSON</code>&nbsp;是一个非常常见的数据格式, 在前后端交互的时候也往往会使用&nbsp;<code>JSON</code>, 所以从业务系统获取的数据很大可能性是使用&nbsp;<code>JSON</code>&nbsp;格式, 所以就需要&nbsp;<code>Spark</code>&nbsp;能够支持 JSON 格式文件的读取</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">读写&nbsp;<code>JSON</code>&nbsp;文件</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>将要&nbsp;<code>Dataset</code>&nbsp;保存为&nbsp;<code>JSON</code>&nbsp;格式的文件比较简单, 是&nbsp;<code>DataFrameWriter</code>&nbsp;的一个常规使用</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = <span class="hljs-keyword">new sql.<span class="hljs-type">SparkSession.<span class="hljs-type">Builder()
  .appName(<span class="hljs-string">"hello")
  .master(<span class="hljs-string">"local[6]")
  .getOrCreate()

<span class="hljs-keyword">val dfFromParquet = spark.read.load(<span class="hljs-string">"dataset/beijing_pm")

<span class="hljs-comment">// 将 DataFrame 保存为 JSON 格式的文件
dfFromParquet.repartition(<span class="hljs-number">1)        <span class="conum" data-value="1">
  .write.format(<span class="hljs-string">"json")
  .save(<span class="hljs-string">"dataset/beijing_pm_json")</span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>如果不重新分区, 则会为&nbsp;<code>DataFrame</code>&nbsp;底层的&nbsp;<code>RDD</code>&nbsp;的每个分区生成一个文件, 为了保持只有一个输出文件, 所以重新分区</td>
</tr>
</tbody>
</table>
</div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">
<div class="paragraph">
<p>保存为&nbsp;<code>JSON</code>&nbsp;格式的文件有一个细节需要注意, 这个&nbsp;<code>JSON</code>&nbsp;格式的文件中, 每一行是一个独立的&nbsp;<code>JSON</code>, 但是整个文件并不只是一个&nbsp;<code>JSON</code>&nbsp;字符串, 所以这种文件格式很多时候被成为&nbsp;<code>JSON Line</code>&nbsp;文件, 有时候后缀名也会变为&nbsp;<code>jsonl</code></p>
</div>
<div class="listingblock">
<div class="title">beijing_pm.jsonl</div>
<div class="content">
<pre class="highlightjs highlight"><code class="language-json hljs" data-lang="json">{<span class="hljs-attr">"day":<span class="hljs-string">"1",<span class="hljs-attr">"hour":<span class="hljs-string">"0",<span class="hljs-attr">"season":<span class="hljs-string">"1",<span class="hljs-attr">"year":<span class="hljs-number">2013,<span class="hljs-attr">"month":<span class="hljs-number">3}
{<span class="hljs-attr">"day":<span class="hljs-string">"1",<span class="hljs-attr">"hour":<span class="hljs-string">"1",<span class="hljs-attr">"season":<span class="hljs-string">"1",<span class="hljs-attr">"year":<span class="hljs-number">2013,<span class="hljs-attr">"month":<span class="hljs-number">3}
{<span class="hljs-attr">"day":<span class="hljs-string">"1",<span class="hljs-attr">"hour":<span class="hljs-string">"2",<span class="hljs-attr">"season":<span class="hljs-string">"1",<span class="hljs-attr">"year":<span class="hljs-number">2013,<span class="hljs-attr">"month":<span class="hljs-number">3}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">
<p>也可以通过&nbsp;<code>DataFrameReader</code>&nbsp;读取一个&nbsp;<code>JSON Line</code>&nbsp;文件</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = ...

<span class="hljs-keyword">val dfFromJSON = spark.read.json(<span class="hljs-string">"dataset/beijing_pm_json")
dfFromJSON.show()</span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p><code>JSON</code>&nbsp;格式的文件是有结构信息的, 也就是&nbsp;<code>JSON</code>&nbsp;中的字段是有类型的, 例如&nbsp;<code>"name": "zhangsan"</code>&nbsp;这样由双引号包裹的&nbsp;<code>Value</code>, 就是字符串类型, 而&nbsp;<code>"age": 10</code>&nbsp;这种没有双引号包裹的就是数字类型, 当然, 也可以是布尔型&nbsp;<code>"has_wife": true</code></p>
</div>
<div class="paragraph">
<p><code>Spark</code>&nbsp;读取&nbsp;<code>JSON Line</code>&nbsp;文件的时候, 会自动的推断类型信息</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = ...

<span class="hljs-keyword">val dfFromJSON = spark.read.json(<span class="hljs-string">"dataset/beijing_pm_json")

dfFromJSON.printSchema()</span></span></span></span></code></pre>
</div>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/e8a53ef37bbf6675525d1a844f8648f1.png" alt="e8a53ef37bbf6675525d1a844f8648f1" width="600" /></div>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Spark</code>&nbsp;可以从一个保存了&nbsp;<code>JSON</code>&nbsp;格式字符串的&nbsp;<code>Dataset[String]</code>&nbsp;中读取&nbsp;<code>JSON</code>&nbsp;信息, 转为&nbsp;<code>DataFrame</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>这种情况其实还是比较常见的, 例如如下的流程</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/da6f1c7f8d98691117a173e03bfdf18f.png" alt="da6f1c7f8d98691117a173e03bfdf18f" /></div>
</div>
<div class="paragraph">
<p>假设业务系统通过&nbsp;<code>Kafka</code>&nbsp;将数据流转进入大数据平台, 这个时候可能需要使用&nbsp;<code>RDD</code>&nbsp;或者&nbsp;<code>Dataset</code>&nbsp;来读取其中的内容, 这个时候一条数据就是一个&nbsp;<code>JSON</code>&nbsp;格式的字符串, 如何将其转为&nbsp;<code>DataFrame</code>&nbsp;或者&nbsp;<code>Dataset[Object]</code>&nbsp;这样具有&nbsp;<code>Schema</code>&nbsp;的数据集呢? 使用如下代码就可以</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark: <span class="hljs-type">SparkSession = ...

<span class="hljs-keyword">import spark.implicits._

<span class="hljs-keyword">val peopleDataset = spark.createDataset(
  <span class="hljs-string">""<span class="hljs-string">"{"<span class="hljs-string">name":"<span class="hljs-type">Yin<span class="hljs-string">","<span class="hljs-string">address":{"<span class="hljs-string">city":"<span class="hljs-type">Columbus<span class="hljs-string">","<span class="hljs-string">state":"<span class="hljs-type">Ohio<span class="hljs-string">"}}"<span class="hljs-string">"" :: <span class="hljs-type">Nil)

spark.read.json(peopleDataset).show()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>JSON</code>&nbsp;通常用于系统间的交互,&nbsp;<code>Spark</code>&nbsp;经常要读取&nbsp;<code>JSON</code>&nbsp;格式文件, 处理, 放在另外一处</p>
</li>
<li>
<p>使用&nbsp;<code>DataFrameReader</code>&nbsp;和&nbsp;<code>DataFrameWriter</code>&nbsp;可以轻易的读取和写入&nbsp;<code>JSON</code>, 并且会自动处理数据类型信息</p>
</li>
</ol></div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_7_5_访问_hive">7.5. 访问 Hive</h3>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>整合&nbsp;<code>SparkSQL</code>&nbsp;和&nbsp;<code>Hive</code>, 使用&nbsp;<code>Hive</code>&nbsp;的&nbsp;<code>MetaStore</code>&nbsp;元信息库</p>
</li>
<li>
<p>使用&nbsp;<code>SparkSQL</code>&nbsp;查询&nbsp;<code>Hive</code>&nbsp;表</p>
</li>
<li>
<p>案例, 使用常见&nbsp;<code>HiveSQL</code></p>
</li>
<li>
<p>写入内容到&nbsp;<code>Hive</code>&nbsp;表</p>
</li>
</ol></div>
</div>
</div>
<div class="sect3">
<h4 id="_7_5_1_sparksql_整合_hive">7.5.1. SparkSQL 整合 Hive</h4>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>开启&nbsp;<code>Hive</code>&nbsp;的&nbsp;<code>MetaStore</code>&nbsp;独立进程</p>
</li>
<li>
<p>整合&nbsp;<code>SparkSQL</code>&nbsp;和&nbsp;<code>Hive</code>&nbsp;的&nbsp;<code>MetaStore</code></p>
</li>
</ol></div>
</div>
</div>
<div class="paragraph">
<p>和一个文件格式不同,&nbsp;<code>Hive</code>&nbsp;是一个外部的数据存储和查询引擎, 所以如果&nbsp;<code>Spark</code>&nbsp;要访问&nbsp;<code>Hive</code>&nbsp;的话, 就需要先整合&nbsp;<code>Hive</code></p>
</div>
<div class="dlist"><dl><dt class="hdlist1">整合什么 ?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>如果要讨论&nbsp;<code>SparkSQL</code>&nbsp;如何和&nbsp;<code>Hive</code>&nbsp;进行整合, 首要考虑的事应该是&nbsp;<code>Hive</code>&nbsp;有什么, 有什么就整合什么就可以</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>MetaStore</code>, 元数据存储</p>
<div class="paragraph">
<p><code>SparkSQL</code>&nbsp;内置的有一个&nbsp;<code>MetaStore</code>, 通过嵌入式数据库&nbsp;<code>Derby</code>&nbsp;保存元信息, 但是对于生产环境来说, 还是应该使用&nbsp;<code>Hive</code>的&nbsp;<code>MetaStore</code>, 一是更成熟, 功能更强, 二是可以使用&nbsp;<code>Hive</code>&nbsp;的元信息</p>
</div>
</li>
<li>
<p>查询引擎</p>
<div class="paragraph">
<p><code>SparkSQL</code>&nbsp;内置了&nbsp;<code>HiveSQL</code>&nbsp;的支持, 所以无需整合</p>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">为什么要开启&nbsp;<code>Hive</code>&nbsp;的&nbsp;<code>MetaStore</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>Hive</code>&nbsp;的&nbsp;<code>MetaStore</code>&nbsp;是一个&nbsp;<code>Hive</code>&nbsp;的组件, 一个&nbsp;<code>Hive</code>&nbsp;提供的程序, 用以保存和访问表的元数据, 整个&nbsp;<code>Hive</code>&nbsp;的结构大致如下</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190523011946.png" alt="20190523011946" /></div>
</div>
<div class="paragraph">
<p>由上图可知道, 其实&nbsp;<code>Hive</code>&nbsp;中主要的组件就三个,&nbsp;<code>HiveServer2</code>&nbsp;负责接受外部系统的查询请求, 例如&nbsp;<code>JDBC</code>,&nbsp;<code>HiveServer2</code>&nbsp;接收到查询请求后, 交给&nbsp;<code>Driver</code>&nbsp;处理,&nbsp;<code>Driver</code>&nbsp;会首先去询问&nbsp;<code>MetaStore</code>&nbsp;表在哪存, 后&nbsp;<code>Driver</code>&nbsp;程序通过&nbsp;<code>MR</code>&nbsp;程序来访问&nbsp;<code>HDFS</code>从而获取结果返回给查询请求者</p>
</div>
<div class="paragraph">
<p>而&nbsp;<code>Hive</code>&nbsp;的&nbsp;<code>MetaStore</code>&nbsp;对&nbsp;<code>SparkSQL</code>&nbsp;的意义非常重大, 如果&nbsp;<code>SparkSQL</code>&nbsp;可以直接访问&nbsp;<code>Hive</code>&nbsp;的&nbsp;<code>MetaStore</code>, 则理论上可以做到和&nbsp;<code>Hive</code>&nbsp;一样的事情, 例如通过&nbsp;<code>Hive</code>&nbsp;表查询数据</p>
</div>
<div class="paragraph">
<p>而 Hive 的 MetaStore 的运行模式有三种</p>
</div>
<div class="ulist">
<ul>
<li>
<p>内嵌&nbsp;<code>Derby</code>&nbsp;数据库模式</p>
<div class="paragraph">
<p>这种模式不必说了, 自然是在测试的时候使用, 生产环境不太可能使用嵌入式数据库, 一是不稳定, 二是这个&nbsp;<code>Derby</code>&nbsp;是单连接的, 不支持并发</p>
</div>
</li>
<li>
<p><code>Local</code>&nbsp;模式</p>
<div class="paragraph">
<p><code>Local</code>&nbsp;和&nbsp;<code>Remote</code>&nbsp;都是访问&nbsp;<code>MySQL</code>&nbsp;数据库作为存储元数据的地方, 但是&nbsp;<code>Local</code>&nbsp;模式的&nbsp;<code>MetaStore</code>&nbsp;没有独立进程, 依附于&nbsp;<code>HiveServer2</code>&nbsp;的进程</p>
</div>
</li>
<li>
<p><code>Remote</code>&nbsp;模式</p>
<div class="paragraph">
<p>和&nbsp;<code>Loca</code>&nbsp;模式一样, 访问&nbsp;<code>MySQL</code>&nbsp;数据库存放元数据, 但是&nbsp;<code>Remote</code>&nbsp;的&nbsp;<code>MetaStore</code>&nbsp;运行在独立的进程中</p>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>我们显然要选择&nbsp;<code>Remote</code>&nbsp;模式, 因为要让其独立运行, 这样才能让&nbsp;<code>SparkSQL</code>&nbsp;一直可以访问</p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Hive</code>&nbsp;开启&nbsp;<code>MetaStore</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1"><code>Step 1</code>: 修改&nbsp;<code>hive-site.xml</code></dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">property&gt;
  <span class="hljs-tag">&lt;<span class="hljs-name">name&gt;hive.metastore.warehouse.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name&gt;
  <span class="hljs-tag">&lt;<span class="hljs-name">value&gt;/user/hive/warehouse<span class="hljs-tag">&lt;/<span class="hljs-name">value&gt;
<span class="hljs-tag">&lt;/<span class="hljs-name">property&gt;

<span class="hljs-tag">&lt;<span class="hljs-name">property&gt;
  <span class="hljs-tag">&lt;<span class="hljs-name">name&gt;javax.jdo.option.ConnectionURL<span class="hljs-tag">&lt;/<span class="hljs-name">name&gt;
  <span class="hljs-tag">&lt;<span class="hljs-name">value&gt;jdbc:mysql://node01:3306/hive?createDatabaseIfNotExist=true<span class="hljs-tag">&lt;/<span class="hljs-name">value&gt;
<span class="hljs-tag">&lt;/<span class="hljs-name">property&gt;

<span class="hljs-tag">&lt;<span class="hljs-name">property&gt;
  <span class="hljs-tag">&lt;<span class="hljs-name">name&gt;javax.jdo.option.ConnectionDriverName<span class="hljs-tag">&lt;/<span class="hljs-name">name&gt;
  <span class="hljs-tag">&lt;<span class="hljs-name">value&gt;com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">value&gt;
<span class="hljs-tag">&lt;/<span class="hljs-name">property&gt;

<span class="hljs-tag">&lt;<span class="hljs-name">property&gt;
  <span class="hljs-tag">&lt;<span class="hljs-name">name&gt;javax.jdo.option.ConnectionUserName<span class="hljs-tag">&lt;/<span class="hljs-name">name&gt;
  <span class="hljs-tag">&lt;<span class="hljs-name">value&gt;username<span class="hljs-tag">&lt;/<span class="hljs-name">value&gt;
<span class="hljs-tag">&lt;/<span class="hljs-name">property&gt;

<span class="hljs-tag">&lt;<span class="hljs-name">property&gt;
  <span class="hljs-tag">&lt;<span class="hljs-name">name&gt;javax.jdo.option.ConnectionPassword<span class="hljs-tag">&lt;/<span class="hljs-name">name&gt;
  <span class="hljs-tag">&lt;<span class="hljs-name">value&gt;password<span class="hljs-tag">&lt;/<span class="hljs-name">value&gt;
<span class="hljs-tag">&lt;/<span class="hljs-name">property&gt;

<span class="hljs-tag">&lt;<span class="hljs-name">property&gt;
  <span class="hljs-tag">&lt;<span class="hljs-name">name&gt;hive.metastore.local<span class="hljs-tag">&lt;/<span class="hljs-name">name&gt;
  <span class="hljs-tag">&lt;<span class="hljs-name">value&gt;false<span class="hljs-tag">&lt;/<span class="hljs-name">value&gt;
<span class="hljs-tag">&lt;/<span class="hljs-name">property&gt;

<span class="hljs-tag">&lt;<span class="hljs-name">property&gt;
  <span class="hljs-tag">&lt;<span class="hljs-name">name&gt;hive.metastore.uris<span class="hljs-tag">&lt;/<span class="hljs-name">name&gt;
  <span class="hljs-tag">&lt;<span class="hljs-name">value&gt;thrift://node01:9083<span class="hljs-tag">&lt;/<span class="hljs-name">value&gt;  //当前服务器
<span class="hljs-tag">&lt;/<span class="hljs-name">property&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</dd><dt class="hdlist1"><code>Step 2</code>: 启动&nbsp;<code>Hive MetaStore</code></dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">nohup /export/servers/hive/bin/hive --service metastore 2&gt;&amp;1 &gt;&gt; /var/log.log &amp;</code></pre>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1"><code>SparkSQL</code>&nbsp;整合&nbsp;<code>Hive</code>&nbsp;的&nbsp;<code>MetaStore</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>即使不去整合&nbsp;<code>MetaStore</code>,&nbsp;<code>Spark</code>&nbsp;也有一个内置的&nbsp;<code>MateStore</code>, 使用&nbsp;<code>Derby</code>&nbsp;嵌入式数据库保存数据, 但是这种方式不适合生产环境, 因为这种模式同一时间只能有一个&nbsp;<code>SparkSession</code>&nbsp;使用, 所以生产环境更推荐使用&nbsp;<code>Hive</code>&nbsp;的&nbsp;<code>MetaStore</code></p>
</div>
<div class="paragraph">
<p><code>SparkSQL</code>&nbsp;整合&nbsp;<code>Hive</code>&nbsp;的&nbsp;<code>MetaStore</code>&nbsp;主要思路就是要通过配置能够访问它, 并且能够使用&nbsp;<code>HDFS</code>&nbsp;保存&nbsp;<code>WareHouse</code>, 这些配置信息一般存在于&nbsp;<code>Hadoop</code>&nbsp;和&nbsp;<code>HDFS</code>&nbsp;的配置文件中, 所以可以直接拷贝&nbsp;<code>Hadoop</code>&nbsp;和&nbsp;<code>Hive</code>&nbsp;的配置文件到&nbsp;<code>Spark</code>&nbsp;的配置目录</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">cd /export/servers/hadoop/etc/hadoop
cp hive-site.xml core-site.xml hdfs-site.xml /export/servers/spark/conf/ <span class="conum" data-value="1"> <span class="conum" data-value="2"> <span class="conum" data-value="3">

scp -r /export/servers/spark/conf node02:/export/servers/spark/conf
scp -r /export/servers/spark/conf node03:/export/servers/spark/conf</span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td><code>Spark</code>&nbsp;需要&nbsp;<code>hive-site.xml</code>&nbsp;的原因是, 要读取&nbsp;<code>Hive</code>&nbsp;的配置信息, 主要是元数据仓库的位置等信息</td>
</tr>
<tr>
<td>&nbsp;</td>
<td><code>Spark</code>&nbsp;需要&nbsp;<code>core-site.xml</code>&nbsp;的原因是, 要读取安全有关的配置</td>
</tr>
<tr>
<td>&nbsp;</td>
<td><code>Spark</code>&nbsp;需要&nbsp;<code>hdfs-site.xml</code>&nbsp;的原因是, 有可能需要在&nbsp;<code>HDFS</code>&nbsp;中放置表文件, 所以需要&nbsp;<code>HDFS</code>&nbsp;的配置</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</dd></dl></div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">
<div class="paragraph">
<p>如果不希望通过拷贝文件的方式整合 Hive, 也可以在 SparkSession 启动的时候, 通过指定 Hive 的 MetaStore 的位置来访问, 但是更推荐整合的方式</p>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_7_5_2_访问_hive_表">7.5.2. 访问 Hive 表</h4>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>在&nbsp;<code>Hive</code>&nbsp;中创建表</p>
</li>
<li>
<p>使用&nbsp;<code>SparkSQL</code>&nbsp;访问&nbsp;<code>Hive</code>&nbsp;中已经存在的表</p>
</li>
<li>
<p>使用&nbsp;<code>SparkSQL</code>&nbsp;创建&nbsp;<code>Hive</code>&nbsp;表</p>
</li>
<li>
<p>使用&nbsp;<code>SparkSQL</code>&nbsp;修改&nbsp;<code>Hive</code>&nbsp;表中的数据</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">在&nbsp;<code>Hive</code>&nbsp;中创建表</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>第一步, 需要先将文件上传到集群中, 使用如下命令上传到&nbsp;<code>HDFS</code>&nbsp;中</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">hdfs dfs -mkdir -p /dataset
hdfs dfs -put studenttabl10k /dataset/</code></pre>
</div>
</div>
<div class="paragraph">
<p>第二步, 使用&nbsp;<code>Hive</code>&nbsp;或者&nbsp;<code>Beeline</code>&nbsp;执行如下&nbsp;<code>SQL</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql"><span class="hljs-keyword">CREATE <span class="hljs-keyword">DATABASE <span class="hljs-keyword">IF <span class="hljs-keyword">NOT <span class="hljs-keyword">EXISTS spark_integrition;

<span class="hljs-keyword">USE spark_integrition;

<span class="hljs-keyword">CREATE <span class="hljs-keyword">EXTERNAL <span class="hljs-keyword">TABLE student
(
  <span class="hljs-keyword">name  <span class="hljs-keyword">STRING,
  age   <span class="hljs-built_in">INT,
  gpa   <span class="hljs-keyword">string
)
<span class="hljs-keyword">ROW <span class="hljs-keyword">FORMAT <span class="hljs-keyword">DELIMITED
  <span class="hljs-keyword">FIELDS <span class="hljs-keyword">TERMINATED <span class="hljs-keyword">BY <span class="hljs-string">'\t'
  <span class="hljs-keyword">LINES <span class="hljs-keyword">TERMINATED <span class="hljs-keyword">BY <span class="hljs-string">'\n'
<span class="hljs-keyword">STORED <span class="hljs-keyword">AS TEXTFILE
LOCATION <span class="hljs-string">'/dataset/hive';

<span class="hljs-keyword">LOAD <span class="hljs-keyword">DATA INPATH <span class="hljs-string">'/dataset/studenttab10k' OVERWRITE <span class="hljs-keyword">INTO <span class="hljs-keyword">TABLE student;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">通过&nbsp;<code>SparkSQL</code>&nbsp;查询&nbsp;<code>Hive</code>&nbsp;的表（<span style="color: #ff0000;">在spark集群中（即，只有使用sparkshell或sparksubmit时）才能整合hive</span>）</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>查询&nbsp;<code>Hive</code>&nbsp;中的表可以直接通过&nbsp;<code>spark.sql(&hellip;​)</code>&nbsp;来进行, 可以直接在其中访问&nbsp;<code>Hive</code>&nbsp;的&nbsp;<code>MetaStore</code>, 前提是一定要将&nbsp;<code>Hive</code>&nbsp;的配置文件拷贝到&nbsp;<code>Spark</code>&nbsp;的&nbsp;<code>conf</code>&nbsp;目录</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">scala&gt; spark.sql(<span class="hljs-string">"use spark_integrition") <span style="color: #ff0000;"> #sql()方法会立刻执行，而不是transformation方法一样惰性求值</span>
scala&gt; <span class="hljs-keyword">val resultDF = spark.sql(<span class="hljs-string">"select * from student limit 10")
scala&gt; resultDF.show()</span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">通过&nbsp;<code>SparkSQL</code>&nbsp;创建&nbsp;<code>Hive</code>&nbsp;表</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>通过&nbsp;<code>SparkSQL</code>&nbsp;可以直接创建&nbsp;<code>Hive</code>&nbsp;表, 并且使用&nbsp;<code>LOAD DATA</code>&nbsp;加载数据</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val createTableStr =
  <span class="hljs-string">""<span class="hljs-string">"
    |CREATE EXTERNAL TABLE student
    |(
    |  name  STRING,
    |  age   INT,
    |  gpa   string
    |)
    |ROW FORMAT DELIMITED
    |  FIELDS TERMINATED BY '\t'
    |  LINES TERMINATED BY '\n'
    |STORED AS TEXTFILE
    |LOCATION '/dataset/hive'
  "<span class="hljs-string">"".stripMargin

spark.sql(<span class="hljs-string">"CREATE DATABASE IF NOT EXISTS spark_integrition1")
spark.sql(<span class="hljs-string">"USE spark_integrition1")
spark.sql(createTableStr)
spark.sql(<span class="hljs-string">"LOAD DATA INPATH '/dataset/studenttab10k' OVERWRITE INTO TABLE student")
spark.sql(<span class="hljs-string">"select * from student limit").show()</span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>目前&nbsp;<code>SparkSQL</code>&nbsp;支持的文件格式有&nbsp;<code>sequencefile</code>,&nbsp;<code>rcfile</code>,&nbsp;<code>orc</code>,&nbsp;<code>parquet</code>,&nbsp;<code>textfile</code>,&nbsp;<code>avro</code>, 并且也可以指定&nbsp;<code>serde</code>&nbsp;的名称</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">使用&nbsp;<code>SparkSQL</code>&nbsp;处理数据并保存进 Hive 表</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>前面都在使用&nbsp;<code>SparkShell</code>&nbsp;的方式来访问&nbsp;<code>Hive</code>, 编写&nbsp;<code>SQL</code>, 通过&nbsp;<code>Spark</code>&nbsp;独立应用的形式也可以做到同样的事, 但是需要一些前置的步骤, 如下</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">Step 1: 导入&nbsp;<code>Maven</code>&nbsp;依赖</dt><dd>
<div class="exampleblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">&lt;dependency&gt;
    &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;
    &lt;artifactId&gt;spark-hive_2<span class="hljs-number">.11&lt;/artifactId&gt;
    &lt;version&gt;${spark.version}&lt;/version&gt;
&lt;/dependency&gt;</span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">Step 2: 配置&nbsp;<code>SparkSession</code></dt><dd>
<div class="exampleblock">
<div class="content">
<div class="paragraph">
<p>如果希望使用&nbsp;<code>SparkSQL</code>&nbsp;访问&nbsp;<code>Hive</code>&nbsp;的话, 需要做两件事</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>开启&nbsp;<code>SparkSession</code>&nbsp;的&nbsp;<code>Hive</code>&nbsp;支持</p>
<div class="paragraph">
<p>经过这一步配置,&nbsp;<code>SparkSQL</code>&nbsp;才会把&nbsp;<code>SQL</code>&nbsp;语句当作&nbsp;<code>HiveSQL</code>&nbsp;来进行解析</p>
</div>
</li>
<li>
<p>设置&nbsp;<code>WareHouse</code>&nbsp;的位置</p>
<div class="paragraph">
<p>虽然&nbsp;<code>hive-stie.xml</code>&nbsp;中已经配置了&nbsp;<code>WareHouse</code>&nbsp;的位置, 但是在&nbsp;<code>Spark 2.0.0</code>&nbsp;后已经废弃了&nbsp;<code>hive-site.xml</code>中设置的&nbsp;<code>hive.metastore.warehouse.dir</code>, 需要在&nbsp;<code>SparkSession</code>&nbsp;中设置&nbsp;<code>WareHouse</code>&nbsp;的位置</p>
</div>
</li>
<li>
<p>设置&nbsp;<code>MetaStore</code>&nbsp;的位置</p>
</li>
</ol></div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark = <span class="hljs-type">SparkSession
  .builder()
  .appName(<span class="hljs-string">"hive example")
  .config(<span class="hljs-string">"spark.sql.warehouse.dir", <span class="hljs-string">"hdfs://node01:8020/dataset/hive")  <span class="conum" data-value="1">
  .config(<span class="hljs-string">"hive.metastore.uris", <span class="hljs-string">"thrift://node01:9083")                 <span class="conum" data-value="2">
  .enableHiveSupport()                                                   <span class="conum" data-value="3">
  .getOrCreate()</span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>设置&nbsp;<code>WareHouse</code>&nbsp;的位置</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>设置&nbsp;<code>MetaStore</code>&nbsp;的位置</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>开启&nbsp;<code>Hive</code>&nbsp;支持</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</dd></dl></div>
<div class="paragraph">
<p>配置好了以后, 就可以通过&nbsp;<code>DataFrame</code>&nbsp;处理数据, 后将数据结果推入&nbsp;<code>Hive</code>&nbsp;表中了, 在将结果保存到&nbsp;<code>Hive</code>&nbsp;表的时候, 可以指定保存模式</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val schema = <span class="hljs-type">StructType(
  <span class="hljs-type">List(
    <span class="hljs-type">StructField(<span class="hljs-string">"name", <span class="hljs-type">StringType),
    <span class="hljs-type">StructField(<span class="hljs-string">"age", <span class="hljs-type">IntegerType),
    <span class="hljs-type">StructField(<span class="hljs-string">"gpa", <span class="hljs-type">FloatType)
  )
)

<span class="hljs-keyword">val studentDF = spark.read
  .option(<span class="hljs-string">"delimiter", <span class="hljs-string">"\t")
  .schema(schema)
  .csv(<span class="hljs-string">"dataset/studenttab10k")

<span class="hljs-keyword">val resultDF = studentDF.where(<span class="hljs-string">"age &lt; 50")

resultDF.write.mode(<span class="hljs-type">SaveMode.<span class="hljs-type">Overwrite).saveAsTable(<span class="hljs-string">"spark_integrition1.student") </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>通过&nbsp;<code>mode</code>&nbsp;指定保存模式, 通过&nbsp;<code>saveAsTable</code>&nbsp;保存数据到&nbsp;<code>Hive</code></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
<div class="sect2">
<h3 id="_7_6_jdbc">7.6. JDBC</h3>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>通过&nbsp;<code>SQL</code>&nbsp;操作&nbsp;<code>MySQL</code>&nbsp;的表</p>
</li>
<li>
<p>将数据写入&nbsp;<code>MySQL</code>&nbsp;的表中</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">准备&nbsp;<code>MySQL</code>&nbsp;环境</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>在使用&nbsp;<code>SparkSQL</code>&nbsp;访问&nbsp;<code>MySQL</code>&nbsp;之前, 要对&nbsp;<code>MySQL</code>&nbsp;进行一些操作, 例如说创建用户, 表和库等</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Step 1: 连接&nbsp;<code>MySQL</code>&nbsp;数据库</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>在&nbsp;<code>MySQL</code>&nbsp;所在的主机上执行如下命令</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">mysql -u root -p</code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Step 2: 创建&nbsp;<code>Spark</code>&nbsp;使用的用户</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>登进&nbsp;<code>MySQL</code>&nbsp;后, 需要先创建用户</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql"><span class="hljs-keyword">CREATE <span class="hljs-keyword">USER <span class="hljs-string">'spark'@<span class="hljs-string">'%' <span class="hljs-keyword">IDENTIFIED <span class="hljs-keyword">BY <span class="hljs-string">'Spark123!';
<span class="hljs-keyword">GRANT ALL <span class="hljs-keyword">ON spark_test.* <span class="hljs-keyword">TO <span class="hljs-string">'spark'@<span class="hljs-string">'%';</span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</li>
<li>
<p>Step 3: 创建库和表</p>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql"><span class="hljs-keyword">CREATE <span class="hljs-keyword">DATABASE spark_test;

<span class="hljs-keyword">USE spark_test;

<span class="hljs-keyword">CREATE <span class="hljs-keyword">TABLE <span class="hljs-keyword">IF <span class="hljs-keyword">NOT <span class="hljs-keyword">EXISTS <span class="hljs-string">`student`(
<span class="hljs-string">`id` <span class="hljs-built_in">INT AUTO_INCREMENT,
<span class="hljs-string">`name` <span class="hljs-built_in">VARCHAR(<span class="hljs-number">100) <span class="hljs-keyword">NOT <span class="hljs-literal">NULL,
<span class="hljs-string">`age` <span class="hljs-built_in">INT <span class="hljs-keyword">NOT <span class="hljs-literal">NULL,
<span class="hljs-string">`gpa` <span class="hljs-built_in">FLOAT,
PRIMARY <span class="hljs-keyword">KEY ( <span class="hljs-string">`id` )
)<span class="hljs-keyword">ENGINE=<span class="hljs-keyword">InnoDB <span class="hljs-keyword">DEFAULT <span class="hljs-keyword">CHARSET=utf8;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">使用&nbsp;<code>SparkSQL</code>&nbsp;向&nbsp;<code>MySQL</code>&nbsp;中写入数据</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>其实在使用&nbsp;<code>SparkSQL</code>&nbsp;访问&nbsp;<code>MySQL</code>&nbsp;是通过&nbsp;<code>JDBC</code>, 那么其实所有支持&nbsp;<code>JDBC</code>&nbsp;的数据库理论上都可以通过这种方式进行访问</p>
</div>
<div class="paragraph">
<p>在使用&nbsp;<code>JDBC</code>&nbsp;访问关系型数据的时候, 其实也是使用&nbsp;<code>DataFrameReader</code>, 对&nbsp;<code>DataFrameReader</code>&nbsp;提供一些配置, 就可以使用&nbsp;<code>Spark</code>&nbsp;访问&nbsp;<code>JDBC</code>, 有如下几个配置可用</p>
</div>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">属性</th><th class="tableblock halign-left valign-top">含义</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>url</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">要连接的&nbsp;<code>JDBC URL</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>dbtable</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">要访问的表, 可以使用任何&nbsp;<code>SQL</code>&nbsp;语句中&nbsp;<code>from</code>&nbsp;子句支持的语法</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>fetchsize</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">数据抓取的大小(单位行), 适用于读的情况</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>batchsize</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">数据传输的大小(单位行), 适用于写的情况</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>isolationLevel</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">事务隔离级别, 是一个枚举, 取值&nbsp;<code>NONE</code>,&nbsp;<code>READ_COMMITTED</code>,&nbsp;<code>READ_UNCOMMITTED</code>,&nbsp;<code>REPEATABLE_READ</code>,&nbsp;<code>SERIALIZABLE</code>, 默认为&nbsp;<code>READ_UNCOMMITTED</code></p>
</td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>读取数据集, 处理过后存往&nbsp;<code>MySQL</code>&nbsp;中的代码如下</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val spark = <span class="hljs-type">SparkSession
  .builder()
  .appName(<span class="hljs-string">"hive example")
  .master(<span class="hljs-string">"local[6]")
  .getOrCreate()

<span class="hljs-keyword">val schema = <span class="hljs-type">StructType(
  <span class="hljs-type">List(
    <span class="hljs-type">StructField(<span class="hljs-string">"name", <span class="hljs-type">StringType),
    <span class="hljs-type">StructField(<span class="hljs-string">"age", <span class="hljs-type">IntegerType),
    <span class="hljs-type">StructField(<span class="hljs-string">"gpa", <span class="hljs-type">FloatType)
  )
)

<span class="hljs-keyword">val studentDF = spark.read
  .option(<span class="hljs-string">"delimiter", <span class="hljs-string">"\t")
  .schema(schema)
  .csv(<span class="hljs-string">"dataset/studenttab10k")

studentDF.write.format(<span class="hljs-string">"jdbc").mode(<span class="hljs-type">SaveMode.<span class="hljs-type">Overwrite)
  .option(<span class="hljs-string">"url", <span class="hljs-string">"jdbc:mysql://node01:3306/spark_test")
  .option(<span class="hljs-string">"dbtable", <span class="hljs-string">"student")
  .option(<span class="hljs-string">"user", <span class="hljs-string">"spark")
  .option(<span class="hljs-string">"password", <span class="hljs-string">"Spark123!")
  .save()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">运行程序</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>如果是在本地运行, 需要导入&nbsp;<code>Maven</code>&nbsp;依赖</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId&gt;mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId&gt;mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId&gt;
    <span class="hljs-tag">&lt;<span class="hljs-name">version&gt;5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version&gt;
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>如果使用&nbsp;<code>Spark submit</code>&nbsp;或者&nbsp;<code>Spark shell</code>&nbsp;来运行任务, 需要通过&nbsp;<code>--jars</code>&nbsp;参数提交&nbsp;<code>MySQL</code>&nbsp;的&nbsp;<code>Jar</code>&nbsp;包, 或者指定&nbsp;<code>--packages</code>&nbsp;从&nbsp;<code>Maven</code>&nbsp;库中读取</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">bin/spark-shell --packages  mysql:mysql-connector-java:5.1.47 --repositories http://maven.aliyun.com/nexus/content/groups/public/</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">从&nbsp;<code>MySQL</code>&nbsp;中读取数据</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>读取&nbsp;<code>MySQL</code>&nbsp;的方式也非常的简单, 只是使用&nbsp;<code>SparkSQL</code>&nbsp;的&nbsp;<code>DataFrameReader</code>&nbsp;加上参数配置即可访问</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">spark.read.format(<span class="hljs-string">"jdbc")
  .option(<span class="hljs-string">"url", <span class="hljs-string">"jdbc:mysql://node01:3306/spark_test")
  .option(<span class="hljs-string">"dbtable", <span class="hljs-string">"student")
  .option(<span class="hljs-string">"user", <span class="hljs-string">"spark")
  .option(<span class="hljs-string">"password", <span class="hljs-string">"Spark123!")
  .load()
  .show()</span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>默认情况下读取&nbsp;<code>MySQL</code>&nbsp;表时, 从&nbsp;<code>MySQL</code>&nbsp;表中读取的数据放入了一个分区, 拉取后可以使用&nbsp;<code>DataFrame</code>&nbsp;重分区来保证并行计算和内存占用不会太高, 但是如果感觉&nbsp;<code>MySQL</code>&nbsp;中数据过多的时候, 读取时可能就会产生&nbsp;<code>OOM</code>, 所以在数据量比较大的场景, 就需要在读取的时候就将其分发到不同的&nbsp;<code>RDD</code>&nbsp;分区</p>
</div>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">属性</th><th class="tableblock halign-left valign-top">含义</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>partitionColumn</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">指定按照哪一列进行分区, 只能设置类型为数字的列, 一般指定为&nbsp;<code>ID</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>lowerBound</code>,&nbsp;<code>upperBound</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">确定步长的参数,&nbsp;<code>lowerBound - upperBound</code>&nbsp;之间的数据均分给每一个分区, 小于&nbsp;<code>lowerBound</code>&nbsp;的数据分给第一个分区, 大于&nbsp;<code>upperBound</code>&nbsp;的数据分给最后一个分区</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>numPartitions</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">分区数量</p>
</td>
</tr>
</tbody>
</table>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">spark.read.format(<span class="hljs-string">"jdbc")
  .option(<span class="hljs-string">"url", <span class="hljs-string">"jdbc:mysql://node01:3306/spark_test")
  .option(<span class="hljs-string">"dbtable", <span class="hljs-string">"student")
  .option(<span class="hljs-string">"user", <span class="hljs-string">"spark")
  .option(<span class="hljs-string">"password", <span class="hljs-string">"Spark123!")
  .option(<span class="hljs-string">"partitionColumn", <span class="hljs-string">"age")
  .option(<span class="hljs-string">"lowerBound", <span class="hljs-number">1)
  .option(<span class="hljs-string">"upperBound", <span class="hljs-number">60)
  .option(<span class="hljs-string">"numPartitions", <span class="hljs-number">10)
  .load()
  .show()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>有时候可能要使用非数字列来作为分区依据,&nbsp;<code>Spark</code>&nbsp;也提供了针对任意类型的列作为分区依据的方法</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val predicates = <span class="hljs-type">Array(
  <span class="hljs-string">"age &lt; 20",
  <span class="hljs-string">"age &gt;= 20, age &lt; 30",
  <span class="hljs-string">"age &gt;= 30"
)

<span class="hljs-keyword">val connectionProperties = <span class="hljs-keyword">new <span class="hljs-type">Properties()
connectionProperties.setProperty(<span class="hljs-string">"user", <span class="hljs-string">"spark")
connectionProperties.setProperty(<span class="hljs-string">"password", <span class="hljs-string">"Spark123!")

spark.read
  .jdbc(
    url = <span class="hljs-string">"jdbc:mysql://node01:3306/spark_test",
    table = <span class="hljs-string">"student",
    predicates = predicates,
    connectionProperties = connectionProperties
  )
  .show()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p><code>SparkSQL</code>&nbsp;中并没有直接提供按照&nbsp;<code>SQL</code>&nbsp;进行筛选读取数据的&nbsp;<code>API</code>&nbsp;和参数, 但是可以通过&nbsp;<code>dbtable</code>&nbsp;来曲线救国,&nbsp;<code>dbtable</code>&nbsp;指定目标表的名称, 但是因为&nbsp;<code>dbtable</code>&nbsp;中可以编写&nbsp;<code>SQL</code>, 所以使用子查询即可做到</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">spark.read.format(<span class="hljs-string">"jdbc")
  .option(<span class="hljs-string">"url", <span class="hljs-string">"jdbc:mysql://node01:3306/spark_test")
  .option(<span class="hljs-string">"dbtable", <span class="hljs-string">"(select name, age from student where age &gt; 10 and age &lt; 20) as stu")
  .option(<span class="hljs-string">"user", <span class="hljs-string">"spark")
  .option(<span class="hljs-string">"password", <span class="hljs-string">"Spark123!")
  .option(<span class="hljs-string">"partitionColumn", <span class="hljs-string">"age")
  .option(<span class="hljs-string">"lowerBound", <span class="hljs-number">1)
  .option(<span class="hljs-string">"upperBound", <span class="hljs-number">60)
  .option(<span class="hljs-string">"numPartitions", <span class="hljs-number">10)
  .load()
  .show()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</div>]]></description></item><item><title>sparksql报错</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/30/11614361.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 30 Sep 2019 14:23:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/30/11614361.html</guid><description><![CDATA[<p>执行时报错：</p>
<p><span style="color: #ff0000;">org.apache.spark.sql.AnalysisException: Unable to generate an encoder for inner class `cn.itcast.spark.sql.Intro$Person` without access to the scope that this class was defined in.</span><br /><span style="color: #ff0000;">Try moving this class out of its parent class.;</span></p>
<p>解决方法：将case class Person(name:String,age:Int)这个样例类移动到父类的外面，就是移到最外面，不要让其包含任何的类中。</p>
<p>&nbsp;</p>]]></description></item><item><title>Update(Stage4)：Spark原理_运行过程_高级特性</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/29/11610059.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 29 Sep 2019 13:12:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/29/11610059.html</guid><description><![CDATA[<p>如何判断宽窄依赖：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190929211105337-1421404071.png" alt="" /></p>
<p>===================================</p>
<p>&nbsp;</p>
<div class="sect1">
<h2 id="_6_spark_底层逻辑">6. Spark 底层逻辑</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>从部署图了解&nbsp;<code>Spark</code>&nbsp;部署了什么, 有什么组件运行在集群中</p>
</li>
<li>
<p>通过对&nbsp;<code>WordCount</code>&nbsp;案例的解剖, 来理解执行逻辑计划的生成</p>
</li>
<li>
<p>通过对逻辑执行计划的细化, 理解如何生成物理计划</p>
</li>
</ol></div>
</div>
</div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">
<div class="paragraph">
<p>如无特殊说明, 以下部分均针对于&nbsp;<code>Spark Standalone</code>&nbsp;进行介绍</p>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="dlist"><dl><dt class="hdlist1">部署情况</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>在&nbsp;<code>Spark</code>&nbsp;部分的底层执行逻辑开始之前, 还是要先认识一下&nbsp;<code>Spark</code>&nbsp;的部署情况, 根据部署情况, 从而理解如何调度.</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/WX20190513-233552.png" alt="WX20190513 233552" /></div>
</div>
<div class="paragraph">
<p>针对于上图, 首先可以看到整体上在集群中运行的角色有如下几个:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Master Daemon</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>负责管理&nbsp;<code>Master</code>&nbsp;节点, 协调资源的获取, 以及连接&nbsp;<code>Worker</code>&nbsp;节点来运行&nbsp;<code>Executor</code>, 是 Spark 集群中的协调节点</p>
</div>
</div>
</div>
</li>
<li>
<p><code>Worker Daemon</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p><code>Workers</code>&nbsp;也称之为叫&nbsp;<code>Slaves</code>, 是 Spark 集群中的计算节点, 用于和 Master 交互并管理&nbsp;<code>Executor</code>.</p>
</div>
<div class="paragraph">
<p>当一个&nbsp;<code>Spark Job</code>&nbsp;提交后, 会创建&nbsp;<code>SparkContext</code>, 后&nbsp;<code>Worker</code>&nbsp;会启动对应的&nbsp;<code>Executor</code>.</p>
</div>
</div>
</div>
</li>
<li>
<p><code>Executor Backend</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>上面有提到&nbsp;<code>Worker</code>&nbsp;用于控制&nbsp;<code>Executor</code>&nbsp;的启停, 其实&nbsp;<code>Worker</code>&nbsp;是通过&nbsp;<code>Executor Backend</code>&nbsp;来进行控制的,&nbsp;<code>Executor Backend</code>&nbsp;是一个进程(是一个&nbsp;<code>JVM</code>&nbsp;实例), 持有一个&nbsp;<code>Executor</code>&nbsp;对象</p>
</div>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>另外在启动程序的时候, 有三种程序需要运行在集群上:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Driver</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p><code>Driver</code>&nbsp;是一个&nbsp;<code>JVM</code>&nbsp;实例, 是一个进程, 是&nbsp;<code>Spark Application</code>&nbsp;运行时候的领导者, 其中运行了&nbsp;<code>SparkContext</code>.</p>
</div>
<div class="paragraph">
<p><code>Driver</code>&nbsp;控制&nbsp;<code>Job</code>&nbsp;和&nbsp;<code>Task</code>, 并且提供&nbsp;<code>WebUI</code>.</p>
</div>
</div>
</div>
</li>
<li>
<p><code>Executor</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p><code>Executor</code>&nbsp;对象中通过线程池来运行&nbsp;<code>Task</code>, 一个&nbsp;<code>Executor</code>&nbsp;中只会运行一个&nbsp;<code>Spark Application</code>&nbsp;的&nbsp;<code>Task</code>, 不同的&nbsp;<code>Spark Application</code>&nbsp;的&nbsp;<code>Task</code>&nbsp;会由不同的&nbsp;<code>Executor</code>&nbsp;来运行</p>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">案例</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>因为要理解执行计划, 重点不在案例, 所以本节以一个非常简单的案例作为入门, 就是我们第一个案例 WordCount</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val sc = ...

val textRDD = sc.parallelize(Seq("Hadoop Spark", "Hadoop Flume", "Spark Sqoop"))
val splitRDD = textRDD.flatMap(_.split(" "))
val tupleRDD = splitRDD.map((_, 1))
val reduceRDD = tupleRDD.reduceByKey(_ + _)
val strRDD = reduceRDD.map(item =&gt; s"${item._1}, ${item._2}")

println(strRDD.toDebugString)
strRDD.collect.foreach(item =&gt; println(item))</code></pre>
</div>
</div>
<div class="paragraph">
<p>整个案例的运行过程大致如下:</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>通过代码的运行, 生成对应的&nbsp;<code>RDD</code>&nbsp;逻辑执行图</p>
</li>
<li>
<p>通过&nbsp;<code>Action</code>&nbsp;操作, 根据逻辑执行图生成对应的物理执行图, 也就是&nbsp;<code>Stage</code>&nbsp;和&nbsp;<code>Task</code></p>
</li>
<li>
<p>将物理执行图运行在集群中</p>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1">逻辑执行图</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>对于上面代码中的&nbsp;<code>reduceRDD</code>&nbsp;如果使用&nbsp;<code>toDebugString</code>&nbsp;打印调试信息的话, 会显式如下内容</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">(6) MapPartitionsRDD[4] at map at WordCount.scala:20 []
 |  ShuffledRDD[3] at reduceByKey at WordCount.scala:19 []
 +-(6) MapPartitionsRDD[2] at map at WordCount.scala:18 []
    |  MapPartitionsRDD[1] at flatMap at WordCount.scala:17 []
    |  ParallelCollectionRDD[0] at parallelize at WordCount.scala:16 []</code></pre>
</div>
</div>
<div class="paragraph">
<p>根据这段内容, 大致能得到这样的一张逻辑执行图</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190515002803.png" alt="20190515002803" /></div>
</div>
<div class="paragraph">
<p>其实 RDD 并没有什么严格的逻辑执行图和物理执行图的概念, 这里也只是借用这个概念, 从而让整个 RDD 的原理可以解释, 好理解.</p>
</div>
<div class="paragraph">
<p>对于 RDD 的逻辑执行图, 起始于第一个入口 RDD 的创建, 结束于 Action 算子执行之前, 主要的过程就是生成一组互相有依赖关系的 RDD, 其并不会真的执行, 只是表示 RDD 之间的关系, 数据的流转过程.</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">物理执行图</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>当触发 Action 执行的时候, 这一组互相依赖的 RDD 要被处理, 所以要转化为可运行的物理执行图, 调度到集群中执行.</p>
</div>
<div class="paragraph">
<p>因为大部分 RDD 是不真正存放数据的, 只是数据从中流转, 所以, 不能直接在集群中运行 RDD, 要有一种 Pipeline 的思想, 需要将这组 RDD 转为 Stage 和 Task, 从而运行 Task, 优化整体执行速度.</p>
</div>
<div class="paragraph">
<p>以上的逻辑执行图会生成如下的物理执行图, 这一切发生在 Action 操作被执行时.</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190515235205.png" alt="20190515235205" /></div>
</div>
<div class="paragraph">
<p>从上图可以总结如下几个点</p>
</div>
<div class="ulist">
<ul>
<li>
<p><span class="image"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190515235442.png" alt="20190515235442" width="200" />&nbsp;在第一个&nbsp;<code>Stage</code>&nbsp;中, 每一个这样的执行流程是一个&nbsp;<code>Task</code>, 也就是在同一个 Stage 中的所有 RDD 的对应分区, 在同一个 Task 中执行</span></p>
</li>
<li>
<p>Stage 的划分是由 Shuffle 操作来确定的, 有 Shuffle 的地方, Stage 断开</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
<div class="sect2">
<h3 id="_6_1_逻辑执行图生成">6.1. 逻辑执行图生成</h3>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>如何生成 RDD</p>
</li>
<li>
<p>如何控制 RDD 之间的关系</p>
</li>
</ol></div>
</div>
</div>
<div class="sect3">
<h4 id="_6_1_1_rdd_的生成">6.1.1. RDD 的生成</h4>
<div class="exampleblock">
<div class="title">重点内容</div>
<div class="content">
<div class="paragraph">
<p>本章要回答如下三个问题</p>
</div>
<div class="ulist">
<ul>
<li>
<p>如何生成 RDD</p>
</li>
<li>
<p>生成什么 RDD</p>
</li>
<li>
<p>如何计算 RDD 中的数据</p>
</li>
</ul>
</div>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val sc = ...

val textRDD = sc.parallelize(Seq("Hadoop Spark", "Hadoop Flume", "Spark Sqoop"))
val splitRDD = textRDD.flatMap(_.split(" "))
val tupleRDD = splitRDD.map((_, 1))
val reduceRDD = tupleRDD.reduceByKey(_ + _)
val strRDD = reduceRDD.map(item =&gt; s"${item._1}, ${item._2}")

println(strRDD.toDebugString)
strRDD.collect.foreach(item =&gt; println(item))</code></pre>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">明确逻辑计划的边界</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>在&nbsp;<code>Action</code>&nbsp;调用之前, 会生成一系列的&nbsp;<code>RDD</code>, 这些&nbsp;<code>RDD</code>&nbsp;之间的关系, 其实就是整个逻辑计划</p>
</div>
<div class="paragraph">
<p>例如上述代码, 如果生成逻辑计划的, 会生成如下一些&nbsp;<code>RDD</code>, 这些&nbsp;<code>RDD</code>&nbsp;是相互关联的, 这些&nbsp;<code>RDD</code>&nbsp;之间, 其实本质上生成的就是一个&nbsp;<strong>计算链</strong></p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190519000019.png" alt="20190519000019" /></div>
</div>
<div class="paragraph">
<p>接下来, 采用迭代渐进式的方式, 一步一步的查看一下整体上的生成过程</p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>textFile</code>&nbsp;算子的背后</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>研究&nbsp;<code>RDD</code>&nbsp;的功能或者表现的时候, 其实本质上研究的就是&nbsp;<code>RDD</code>&nbsp;中的五大属性, 因为&nbsp;<code>RDD</code>&nbsp;透过五大属性来提供功能和表现, 所以如果要研究&nbsp;<code>textFile</code>&nbsp;这个算子, 应该从五大属性着手, 那么第一步就要看看生成的&nbsp;<code>RDD</code>&nbsp;是什么类型的&nbsp;<code>RDD</code></p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>textFile</code>&nbsp;生成的是&nbsp;<code>HadoopRDD</code></p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190519202310.png" alt="20190519202310" width="800" /></div>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190519202411.png" alt="20190519202411" width="800" /></div>
</div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">
<div class="paragraph">
<p>除了上面这一个步骤以外, 后续步骤将不再直接基于代码进行讲解, 因为从代码的角度着手容易迷失逻辑, 这个章节的初心有两个, 一个是希望大家了解 Spark 的内部逻辑和原理, 另外一个是希望大家能够通过本章学习具有代码分析的能力</p>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</li>
<li>
<p><code>HadoopRDD</code>&nbsp;的&nbsp;<code>Partitions</code>&nbsp;对应了&nbsp;<code>HDFS</code>&nbsp;的&nbsp;<code>Blocks</code></p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190519203211.png" alt="20190519203211" /></div>
</div>
<div class="paragraph">
<p>其实本质上每个&nbsp;<code>HadoopRDD</code>&nbsp;的&nbsp;<code>Partition</code>&nbsp;都是对应了一个&nbsp;<code>Hadoop</code>&nbsp;的&nbsp;<code>Block</code>, 通过&nbsp;<code>InputFormat</code>&nbsp;来确定&nbsp;<code>Hadoop</code>中的&nbsp;<code>Block</code>&nbsp;的位置和边界, 从而可以供一些算子使用</p>
</div>
</div>
</div>
</li>
<li>
<p><code>HadoopRDD</code>&nbsp;的&nbsp;<code>compute</code>&nbsp;函数就是在读取&nbsp;<code>HDFS</code>&nbsp;中的&nbsp;<code>Block</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>本质上,&nbsp;<code>compute</code>&nbsp;还是依然使用&nbsp;<code>InputFormat</code>&nbsp;来读取&nbsp;<code>HDFS</code>&nbsp;中对应分区的&nbsp;<code>Block</code></p>
</div>
</div>
</div>
</li>
<li>
<p><code>textFile</code>&nbsp;这个算子生成的其实是一个&nbsp;<code>MapPartitionsRDD</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p><code>textFile</code>&nbsp;这个算子的作用是读取&nbsp;<code>HDFS</code>&nbsp;上的文件, 但是&nbsp;<code>HadoopRDD</code>&nbsp;中存放是一个元组, 其&nbsp;<code>Key</code>&nbsp;是行号, 其&nbsp;<code>Value</code>&nbsp;是&nbsp;<code>Hadoop</code>&nbsp;中定义的&nbsp;<code>Text</code>&nbsp;对象, 这一点和&nbsp;<code>MapReduce</code>&nbsp;程序中的行为是一致的</p>
</div>
<div class="paragraph">
<p>但是并不适合&nbsp;<code>Spark</code>&nbsp;的场景, 所以最终会通过一个&nbsp;<code>map</code>&nbsp;算子, 将&nbsp;<code>(LineNum, Text)</code>&nbsp;转为&nbsp;<code>String</code>&nbsp;形式的一行一行的数据, 所以最终&nbsp;<code>textFile</code>&nbsp;这个算子生成的&nbsp;<code>RDD</code>&nbsp;并不是&nbsp;<code>HadoopRDD</code>, 而是一个&nbsp;<code>MapPartitionsRDD</code></p>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd><dt class="hdlist1"><code>map</code>&nbsp;算子的背后</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190519101943.png" alt="20190519101943" width="800" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>map</code>&nbsp;算子生成了&nbsp;<code>MapPartitionsRDD</code></p>
<div class="paragraph">
<p>由源码可知, 当&nbsp;<code>val rdd2 = rdd1.map()</code>&nbsp;的时候, 其实生成的新&nbsp;<code>RDD</code>&nbsp;是&nbsp;<code>rdd2</code>,&nbsp;<code>rdd2</code>&nbsp;的类型是&nbsp;<code>MapPartitionsRDD</code>, 每个&nbsp;<code>RDD</code>&nbsp;中的五大属性都会有一些不同, 由&nbsp;<code>map</code>&nbsp;算子生成的&nbsp;<code>RDD</code>&nbsp;中的计算函数, 本质上就是遍历对应分区的数据, 将每一个数据转成另外的形式</p>
</div>
</li>
<li>
<p><code>MapPartitionsRDD</code>&nbsp;的计算函数是&nbsp;<code>collection.map( function )</code></p>
<div class="paragraph">
<p>真正运行的集群中的处理单元是&nbsp;<code>Task</code>, 每个&nbsp;<code>Task</code>&nbsp;对应一个&nbsp;<code>RDD</code>&nbsp;的分区, 所以&nbsp;<code>collection</code>&nbsp;对应一个&nbsp;<code>RDD</code>&nbsp;分区的所有数据, 而这个计算的含义就是将一个&nbsp;<code>RDD</code>&nbsp;的分区上所有数据当作一个集合, 通过这个&nbsp;<code>Scala</code>&nbsp;集合的&nbsp;<code>map</code>&nbsp;算子, 来执行一个转换操作, 其转换操作的函数就是传入&nbsp;<code>map</code>&nbsp;算子的&nbsp;<code>function</code></p>
</div>
</li>
<li>
<p>传入&nbsp;<code>map</code>&nbsp;算子的函数会被清理</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190519190306.png" alt="20190519190306" width="500" /></div>
</div>
<div class="paragraph">
<p>这个清理主要是处理闭包中的依赖, 使得这个闭包可以被序列化发往不同的集群节点运行</p>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>flatMap</code>&nbsp;算子的背后</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190519190541.png" alt="20190519190541" width="800" /></div>
</div>
<div class="paragraph">
<p><code>flatMap</code>&nbsp;和&nbsp;<code>map</code>&nbsp;算子其实本质上是一样的, 其步骤和生成的&nbsp;<code>RDD</code>&nbsp;都是一样, 只是对于传入函数的处理不同,&nbsp;<code>map</code>&nbsp;是&nbsp;<code>collect.map( function )</code>&nbsp;而&nbsp;<code>flatMap</code>&nbsp;是&nbsp;<code>collect.flatMap( function )</code></p>
</div>
<div class="paragraph">
<p>从侧面印证了, 其实&nbsp;<code>Spark</code>&nbsp;中的&nbsp;<code>flatMap</code>&nbsp;和&nbsp;<code>Scala</code>&nbsp;基础中的&nbsp;<code>flatMap</code>&nbsp;其实是一样的</p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>textRDD</code>&nbsp;&rarr;&nbsp;<code>splitRDD</code>&nbsp;&rarr;&nbsp;<code>tupleRDD</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>由&nbsp;<code>textRDD</code>&nbsp;到&nbsp;<code>splitRDD</code>&nbsp;再到&nbsp;<code>tupleRDD</code>&nbsp;的过程, 其实就是调用&nbsp;<code>map</code>&nbsp;和&nbsp;<code>flatMap</code>&nbsp;算子生成新的&nbsp;<code>RDD</code>&nbsp;的过程, 所以如下图所示, 就是这个阶段所生成的逻辑计划</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190519211533.png" alt="20190519211533" /></div>
</div>
</div>
</div>
</dd></dl></div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">如何生成&nbsp;<code>RDD</code>&nbsp;?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>生成&nbsp;<code>RDD</code>&nbsp;的常见方式有三种</p>
</div>
<div class="ulist">
<ul>
<li>
<p>从本地集合创建</p>
</li>
<li>
<p>从外部数据集创建</p>
</li>
<li>
<p>从其它&nbsp;<code>RDD</code>&nbsp;衍生</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>通过外部数据集创建&nbsp;<code>RDD</code>, 是通过&nbsp;<code>Hadoop</code>&nbsp;或者其它外部数据源的&nbsp;<code>SDK</code>&nbsp;来进行数据读取, 同时如果外部数据源是有分片的话,&nbsp;<code>RDD</code>&nbsp;会将分区与其分片进行对照</p>
</div>
<div class="paragraph">
<p>通过其它&nbsp;<code>RDD</code>&nbsp;衍生的话, 其实本质上就是通过不同的算子生成不同的&nbsp;<code>RDD</code>&nbsp;的子类对象, 从而控制&nbsp;<code>compute</code>&nbsp;函数的行为来实现算子功能</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">生成哪些&nbsp;<code>RDD</code>&nbsp;?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>不同的算子生成不同的&nbsp;<code>RDD</code>, 生成&nbsp;<code>RDD</code>&nbsp;的类型取决于算子, 例如&nbsp;<code>map</code>&nbsp;和&nbsp;<code>flatMap</code>&nbsp;都会生成&nbsp;<code>RDD</code>&nbsp;的子类&nbsp;<code>MapPartitions</code>&nbsp;的对象</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">如何计算&nbsp;<code>RDD</code>&nbsp;中的数据 ?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>虽然前面我们提到过&nbsp;<code>RDD</code>&nbsp;是偏向计算的, 但是其实&nbsp;<code>RDD</code>&nbsp;还只是表示数据, 纵观&nbsp;<code>RDD</code>&nbsp;的五大属性中有三个是必须的, 分别如下</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Partitions List</code>&nbsp;分区列表</p>
</li>
<li>
<p><code>Compute function</code>&nbsp;计算函数</p>
</li>
<li>
<p><code>Dependencies</code>&nbsp;依赖</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>虽然计算函数是和计算有关的, 但是只有调用了这个函数才会进行计算,&nbsp;<code>RDD</code>&nbsp;显然不会自己调用自己的&nbsp;<code>Compute</code>&nbsp;函数, 一定是由外部调用的, 所以&nbsp;<code>RDD</code>&nbsp;更多的意义是用于表示数据集以及其来源, 和针对于数据的计算</p>
</div>
<div class="paragraph">
<p>所以如何计算&nbsp;<code>RDD</code>&nbsp;中的数据呢? 一定是通过其它的组件来计算的, 而计算的规则, 由&nbsp;<code>RDD</code>&nbsp;中的&nbsp;<code>Compute</code>&nbsp;函数来指定, 不同类型的&nbsp;<code>RDD</code>&nbsp;子类有不同的&nbsp;<code>Compute</code>&nbsp;函数</p>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_6_1_2_rdd_之间的依赖关系">6.1.2. RDD 之间的依赖关系</h4>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>讨论什么是 RDD 之间的依赖关系</p>
</li>
<li>
<p>继而讨论 RDD 分区之间的关系</p>
</li>
<li>
<p>最后确定 RDD 之间的依赖关系分类</p>
</li>
<li>
<p>完善案例的逻辑关系图</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">什么是&nbsp;<code>RDD</code>&nbsp;之间的依赖关系?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190519211533.png" alt="20190519211533" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>什么是关系(依赖关系) ?</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>从算子视角上来看,&nbsp;<code>splitRDD</code>&nbsp;通过&nbsp;<code>map</code>&nbsp;算子得到了&nbsp;<code>tupleRDD</code>, 所以&nbsp;<code>splitRDD</code>&nbsp;和&nbsp;<code>tupleRDD</code>&nbsp;之间的关系是&nbsp;<code>map</code></p>
</div>
<div class="paragraph">
<p>但是仅仅这样说, 会不够全面, 从细节上来看,&nbsp;<code>RDD</code>&nbsp;只是数据和关于数据的计算, 而具体执行这种计算得出结果的是一个神秘的其它组件, 所以, 这两个&nbsp;<code>RDD</code>&nbsp;的关系可以表示为&nbsp;<code>splitRDD</code>&nbsp;的数据通过&nbsp;<code>map</code>&nbsp;操作, 被传入&nbsp;<code>tupleRDD</code>, 这是它们之间更细化的关系</p>
</div>
<div class="paragraph">
<p>但是&nbsp;<code>RDD</code>&nbsp;这个概念本身并不是数据容器, 数据真正应该存放的地方是&nbsp;<code>RDD</code>&nbsp;的分区, 所以如果把视角放在数据这一层面上的话, 直接讲这两个 RDD 之间有关系是不科学的, 应该从这两个 RDD 的分区之间的关系来讨论它们之间的关系</p>
</div>
</div>
</div>
</li>
<li>
<p>那这些分区之间是什么关系?</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>如果仅仅说&nbsp;<code>splitRDD</code>&nbsp;和&nbsp;<code>tupleRDD</code>&nbsp;之间的话, 那它们的分区之间就是一对一的关系</p>
</div>
<div class="paragraph">
<p>但是&nbsp;<code>tupleRDD</code>&nbsp;到&nbsp;<code>reduceRDD</code>&nbsp;呢?&nbsp;<code>tupleRDD</code>&nbsp;通过算子&nbsp;<code>reduceByKey</code>&nbsp;生成&nbsp;<code>reduceRDD</code>, 而这个算子是一个&nbsp;<code>Shuffle</code>&nbsp;操作,&nbsp;<code>Shuffle</code>&nbsp;操作的两个&nbsp;<code>RDD</code>&nbsp;的分区之间并不是一对一,&nbsp;<code>reduceByKey</code>&nbsp;的一个分区对应&nbsp;<code>tupleRDD</code>&nbsp;的多个分区</p>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>reduceByKey</code>&nbsp;算子会生成&nbsp;<code>ShuffledRDD</code></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>reduceByKey</code>&nbsp;是由算子&nbsp;<code>combineByKey</code>&nbsp;来实现的,&nbsp;<code>combineByKey</code>&nbsp;内部会创建&nbsp;<code>ShuffledRDD</code>&nbsp;返回, 具体的代码请大家通过&nbsp;<code>IDEA</code>&nbsp;来进行查看, 此处不再截图, 而整个&nbsp;<code>reduceByKey</code>&nbsp;操作大致如下过程</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190520010402.png" alt="20190520010402" /></div>
</div>
<div class="paragraph">
<p>去掉两个&nbsp;<code>reducer</code>&nbsp;端的分区, 只留下一个的话, 如下</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190520010518.png" alt="20190520010518" /></div>
</div>
<div class="paragraph">
<p>所以, 对于&nbsp;<code>reduceByKey</code>&nbsp;这个&nbsp;<code>Shuffle</code>&nbsp;操作来说,&nbsp;<code>reducer</code>&nbsp;端的一个分区, 会从多个&nbsp;<code>mapper</code>&nbsp;端的分区拿取数据, 是一个多对一的关系</p>
</div>
<div class="paragraph">
<p>至此为止, 出现了两种分区见的关系了, 一种是一对一, 一种是多对一</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">整体上的流程图</dt><dd>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190520011115.png" alt="20190520011115" /></div>
</div>
</dd></dl></div>
</div>
<div class="sect3">
<h4 id="_6_1_3_rdd_之间的依赖关系详解">6.1.3. RDD 之间的依赖关系详解</h4>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="paragraph">
<p>上个小节通过例子演示了 RDD 的分区间的关系有两种形式</p>
</div>
<div class="ulist">
<ul>
<li>
<p>一对一, 一般是直接转换</p>
</li>
<li>
<p>多对一, 一般是 Shuffle</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>本小节会说明如下问题:</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>如果分区间得关系是一对一或者多对一, 那么这种情况下的 RDD 之间的关系的正式命名是什么呢?</p>
</li>
<li>
<p>RDD 之间的依赖关系, 具体有几种情况呢?</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">窄依赖</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>假如&nbsp;<code>rddB = rddA.transform(&hellip;​)</code>, 如果&nbsp;<code>rddB</code>&nbsp;中一个分区依赖&nbsp;<code>rddA</code>&nbsp;也就是其父&nbsp;<code>RDD</code>&nbsp;的少量分区, 这种&nbsp;<code>RDD</code>&nbsp;之间的依赖关系称之为窄依赖</p>
</div>
<div class="paragraph">
<p>换句话说, 子 RDD 的每个分区依赖父 RDD 的少量个数的分区, 这种依赖关系称之为窄依赖</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190520130939.png" alt="20190520130939" width="800" /></div>
</div>
<div class="paragraph">
<p>举个栗子</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val sc = ...

val rddA = sc.parallelize(Seq(1, 2, 3))
val rddB = sc.parallelize(Seq("a", "b"))

/**
  * 运行结果: (1,a), (1,b), (2,a), (2,b), (3,a), (3,b)
  */
rddA.cartesian(rddB).collect().foreach(println(_))</code></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>上述代码的&nbsp;<code>cartesian</code>&nbsp;是求得两个集合的笛卡尔积</p>
</li>
<li>
<p>上述代码的运行结果是&nbsp;<code>rddA</code>&nbsp;中每个元素和&nbsp;<code>rddB</code>&nbsp;中的所有元素结合, 最终的结果数量是两个&nbsp;<code>RDD</code>&nbsp;数量之和</p>
</li>
<li>
<p><code>rddC</code>&nbsp;有两个父&nbsp;<code>RDD</code>, 分别为&nbsp;<code>rddA</code>&nbsp;和&nbsp;<code>rddB</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>对于&nbsp;<code>cartesian</code>&nbsp;来说, 依赖关系如下</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190520144103.png" alt="20190520144103" /></div>
</div>
<div class="paragraph">
<p>上述图形中清晰展示如下现象</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p><code>rddC</code>&nbsp;中的分区数量是两个父&nbsp;<code>RDD</code>&nbsp;的分区数量之乘积</p>
</li>
<li>
<p><code>rddA</code>&nbsp;中每个分区对应&nbsp;<code>rddC</code>&nbsp;中的两个分区 (因为&nbsp;<code>rddB</code>&nbsp;中有两个分区),&nbsp;<code>rddB</code>&nbsp;中的每个分区对应&nbsp;<code>rddC</code>&nbsp;中的三个分区 (因为&nbsp;<code>rddA</code>&nbsp;有三个分区)</p>
</li>
</ol></div>
<div class="paragraph">
<p>它们之间是窄依赖, 事实上在&nbsp;<code>cartesian</code>&nbsp;中也是&nbsp;<code>NarrowDependency</code>&nbsp;这个所有窄依赖的父类的唯一一次直接使用, 为什么呢?</p>
</div>
<div class="paragraph">
<p><strong>因为所有的分区之间是拷贝关系, 并不是 Shuffle 关系</strong></p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>rddC</code>&nbsp;中的每个分区并不是依赖多个父&nbsp;<code>RDD</code>&nbsp;中的多个分区</p>
</li>
<li>
<p><code>rddC</code>&nbsp;中每个分区的数量来自一个父&nbsp;<code>RDD</code>&nbsp;分区中的所有数据, 是一个&nbsp;<code>FullDependence</code>, 所以数据可以直接从父&nbsp;<code>RDD</code>&nbsp;流动到子&nbsp;<code>RDD</code></p>
</li>
<li>
<p>不存在一个父&nbsp;<code>RDD</code>&nbsp;中一部分数据分发过去, 另一部分分发给其它的&nbsp;<code>RDD</code></p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">宽依赖</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">
<div class="paragraph">
<p>并没有所谓的宽依赖, 宽依赖应该称作为&nbsp;<code>ShuffleDependency</code></p>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">
<p>在&nbsp;<code>ShuffleDependency</code>&nbsp;的类声明上如下写到</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">Represents a dependency on the output of a shuffle stage.</code></pre>
</div>
</div>
<div class="paragraph">
<p>上面非常清楚的说道, 宽依赖就是&nbsp;<code>Shuffle</code>&nbsp;中的依赖关系, 换句话说, 只有&nbsp;<code>Shuffle</code>&nbsp;产生的地方才是宽依赖</p>
</div>
<div class="paragraph">
<p>那么宽窄依赖的判断依据就非常简单明确了,&nbsp;<strong>是否有 Shuffle ?</strong></p>
</div>
<div class="paragraph">
<p>举个&nbsp;<code>reduceByKey</code>&nbsp;的例子,&nbsp;<code>rddB = rddA.reduceByKey( (curr, agg) &rArr; curr + agg )</code>&nbsp;会产生如下的依赖关系</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190520151040.png" alt="20190520151040" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>rddB</code>&nbsp;的每个分区都几乎依赖&nbsp;<code>rddA</code>&nbsp;的所有分区</p>
</li>
<li>
<p>对于&nbsp;<code>rddA</code>&nbsp;中的一个分区来说, 其将一部分分发给&nbsp;<code>rddB</code>&nbsp;的&nbsp;<code>p1</code>, 另外一部分分发给&nbsp;<code>rddB</code>&nbsp;的&nbsp;<code>p2</code>, 这不是数据流动, 而是分发</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">如何分辨宽窄依赖 ?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>其实分辨宽窄依赖的本身就是在分辨父子&nbsp;<code>RDD</code>&nbsp;之间是否有&nbsp;<code>Shuffle</code>, 大致有以下的方法</p>
</div>
<div class="ulist">
<ul>
<li>
<p>如果是&nbsp;<code>Shuffle</code>, 两个&nbsp;<code>RDD</code>&nbsp;的分区之间不是单纯的数据流动, 而是分发和复制</p>
</li>
<li>
<p>一般&nbsp;<code>Shuffle</code>&nbsp;的子&nbsp;<code>RDD</code>&nbsp;的每个分区会依赖父&nbsp;<code>RDD</code>&nbsp;的多个分区</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>但是这样判断其实不准确, 如果想分辨某个算子是否是窄依赖, 或者是否是宽依赖, 则还是要取决于具体的算子, 例如想看&nbsp;<code>cartesian</code>&nbsp;生成的是宽依赖还是窄依赖, 可以通过如下步骤</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>查看&nbsp;<code>map</code>&nbsp;算子生成的&nbsp;<code>RDD</code></p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190520155245.png" alt="20190520155245" width="400" /></div>
</div>
</div>
</div>
</li>
<li>
<p>进去&nbsp;<code>RDD</code>&nbsp;查看&nbsp;<code>getDependence</code>&nbsp;方法</p>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190520155314.png" alt="20190520155314" width="400" /></div>
</div>
</div>
</div>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="ulist">
<ul>
<li>
<p>RDD 的逻辑图本质上是对于计算过程的表达, 例如数据从哪来, 经历了哪些步骤的计算</p>
</li>
<li>
<p>每一个步骤都对应一个 RDD, 因为数据处理的情况不同, RDD 之间的依赖关系又分为窄依赖和宽依赖 *</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_6_1_4_常见的窄依赖类型">6.1.4. 常见的窄依赖类型</h4>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="paragraph">
<p>常见的窄依赖其实也是有分类的, 而且宽窄以来不太容易分辨, 所以通过本章, 帮助同学明确窄依赖的类型</p>
</div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">一对一窄依赖</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>其实&nbsp;<code>RDD</code>&nbsp;中默认的是&nbsp;<code>OneToOneDependency</code>, 后被不同的&nbsp;<code>RDD</code>&nbsp;子类指定为其它的依赖类型, 常见的一对一依赖是&nbsp;<code>map</code>&nbsp;算子所产生的依赖, 例如&nbsp;<code>rddB = rddA.map(&hellip;​)</code></p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190520160405.png" alt="20190520160405" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>每个分区之间一一对应, 所以叫做一对一窄依赖</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">Range 窄依赖</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>Range</code>&nbsp;窄依赖其实也是一对一窄依赖, 但是保留了中间的分隔信息, 可以通过某个分区获取其父分区, 目前只有一个算子生成这种窄依赖, 就是&nbsp;<code>union</code>&nbsp;算子, 例如&nbsp;<code>rddC = rddA.union(rddB)</code></p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190520161043.png" alt="20190520161043" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>rddC</code>&nbsp;其实就是&nbsp;<code>rddA</code>&nbsp;拼接&nbsp;<code>rddB</code>&nbsp;生成的, 所以&nbsp;<code>rddC</code>&nbsp;的&nbsp;<code>p5</code>&nbsp;和&nbsp;<code>p6</code>&nbsp;就是&nbsp;<code>rddB</code>&nbsp;的&nbsp;<code>p1</code>&nbsp;和&nbsp;<code>p2</code></p>
</li>
<li>
<p>所以需要有方式获取到&nbsp;<code>rddC</code>&nbsp;的&nbsp;<code>p5</code>&nbsp;其父分区是谁, 于是就需要记录一下边界, 其它部分和一对一窄依赖一样</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">多对一窄依赖</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>多对一窄依赖其图形和&nbsp;<code>Shuffle</code>&nbsp;依赖非常相似, 所以在遇到的时候, 要注意其&nbsp;<code>RDD</code>&nbsp;之间是否有&nbsp;<code>Shuffle</code>&nbsp;过程, 比较容易让人困惑, 常见的多对一依赖就是重分区算子&nbsp;<code>coalesce</code>, 例如&nbsp;<code>rddB = rddA.coalesce(2, shuffle = false)</code>, 但同时也要注意, 如果&nbsp;<code>shuffle = true</code>&nbsp;那就是完全不同的情况了</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190520161621.png" alt="20190520161621" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>因为没有&nbsp;<code>Shuffle</code>, 所以这是一个窄依赖</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">再谈宽窄依赖的区别</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>宽窄依赖的区别非常重要, 因为涉及了一件非常重要的事情:&nbsp;<strong>如何计算&nbsp;<code>RDD</code>&nbsp;?</strong></p>
</div>
<div class="paragraph">
<p>宽窄以来的核心区别是:&nbsp;<strong>窄依赖的&nbsp;<code>RDD</code>&nbsp;可以放在一个&nbsp;<code>Task</code>&nbsp;中运行</strong></p>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
<div class="sect2">
<h3 id="_6_2_物理执行图生成">6.2. 物理执行图生成</h3>
<div class="exampleblock">
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>物理图的意义</p>
</li>
<li>
<p>如何划分 Task</p>
</li>
<li>
<p>如何划分 Stage</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">物理图的作用是什么?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">问题一: 物理图的意义是什么?</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>物理图解决的其实就是&nbsp;<code>RDD</code>&nbsp;流程生成以后, 如何计算和运行的问题, 也就是如何把 RDD 放在集群中执行的问题</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/Snipaste_2019-05-23_14-00-33.png" alt="Snipaste 2019 05 23 14 00 33" /></div>
</div>
</div>
</div>
</dd><dt class="hdlist1">问题二: 如果要确定如何运行的问题, 则需要先确定集群中有什么组件</dt><dd>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>首先集群中物理元件就是一台一台的机器</p>
</li>
<li>
<p>其次这些机器上跑的守护进程有两种:&nbsp;<code>Master</code>,&nbsp;<code>Worker</code></p>
<div class="ulist">
<ul>
<li>
<p>每个守护进程其实就代表了一台机器, 代表这台机器的角色, 代表这台机器和外界通信</p>
</li>
<li>
<p>例如我们常说一台机器是&nbsp;<code>Master</code>, 其含义是这台机器中运行了一个&nbsp;<code>Master</code>&nbsp;守护进程, 如果一台机器运行了&nbsp;<code>Master</code>&nbsp;的同时又运行了&nbsp;<code>Worker</code>, 则说这台机器是&nbsp;<code>Master</code>&nbsp;也可以, 说它是&nbsp;<code>Worker</code>&nbsp;也行</p>
</li>
</ul>
</div>
</li>
<li>
<p>真正能运行&nbsp;<code>RDD</code>&nbsp;的组件是:&nbsp;<code>Executor</code>, 也就是说其实&nbsp;<code>RDD</code>&nbsp;最终是运行在&nbsp;<code>Executor</code>&nbsp;中的, 也就是说, 无论是&nbsp;<code>Master</code>还是&nbsp;<code>Worker</code>&nbsp;其实都是用于管理&nbsp;<code>Executor</code>&nbsp;和调度程序的</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>结论是&nbsp;<code>RDD</code>&nbsp;一定在&nbsp;<code>Executor</code>&nbsp;中计算, 而&nbsp;<code>Master</code>&nbsp;和&nbsp;<code>Worker</code>&nbsp;负责调度和管理&nbsp;<code>Executor</code></p>
</div>
</div>
</div>
</dd><dt class="hdlist1">问题三: 物理图的生成需要考虑什么问题?</dt><dd>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>要计算&nbsp;<code>RDD</code>, 不仅要计算, 还要很快的计算 &rarr; 优化性能</p>
</li>
<li>
<p>要考虑容错, 容错的常见手段是缓存 &rarr;&nbsp;<code>RDD</code>&nbsp;要可以缓存</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>结论是在生成物理图的时候, 不仅要考虑效率问题, 还要考虑一种更合适的方式, 让&nbsp;<code>RDD</code>&nbsp;运行的更好</p>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">谁来计算 RDD ?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">问题一: RDD 是什么, 用来做什么 ?</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>回顾一下&nbsp;<code>RDD</code>&nbsp;的五个属性</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>A list of partitions</code></p>
</li>
<li>
<p><code>A function for computing each split</code></p>
</li>
<li>
<p><code>A list of dependencies on other RDDs</code></p>
</li>
<li>
<p><code>Optionally, a Partitioner for key-value RDDs (e.g. to say that the RDD is hash-partitioned)</code></p>
</li>
<li>
<p><code>Optionally, a list of preferred locations to compute each split on (e.g. block locations for an HDFS file)</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>简单的说就是: 分区列表, 计算函数, 依赖关系, 分区函数, 最佳位置</p>
</div>
<div class="ulist">
<ul>
<li>
<p>分区列表, 分区函数, 最佳位置, 这三个属性其实说的就是数据集在哪, 在哪更合适, 如何分区</p>
</li>
<li>
<p>计算函数和依赖关系, 这两个属性其实说的是数据集从哪来</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>所以结论是&nbsp;<code>RDD</code>&nbsp;是一个数据集的表示, 不仅表示了数据集, 还表示了这个数据集从哪来, 如何计算</p>
</div>
<div class="paragraph">
<p>但是问题是, 谁来计算 ? 如果为一台汽车设计了一个设计图, 那么设计图自己生产汽车吗 ?</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">问题二: 谁来计算 ?</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>前面我们明确了两件事,&nbsp;<code>RDD</code>&nbsp;在哪被计算? 在&nbsp;<code>Executor</code>&nbsp;中.&nbsp;<code>RDD</code>&nbsp;是什么? 是一个数据集以及其如何计算的图纸.</p>
</div>
<div class="paragraph">
<p>直接使用&nbsp;<code>Executor</code>&nbsp;也是不合适的, 因为一个计算的执行总是需要一个容器, 例如&nbsp;<code>JVM</code>&nbsp;是一个进程, 只有进程中才能有线程, 所以这个计算&nbsp;<code>RDD</code>&nbsp;的线程应该运行在一个进程中, 这个进程就是&nbsp;<code>Exeutor</code>,&nbsp;<code>Executor</code>&nbsp;有如下两个职责</p>
</div>
<div class="ulist">
<ul>
<li>
<p>和&nbsp;<code>Driver</code>&nbsp;保持交互从而认领属于自己的任务</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190521111630.png" alt="20190521111630" width="500" /></div>
</div>
</li>
<li>
<p>接受任务后, 运行任务</p>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190521111456.png" alt="20190521111456" width="400" /></div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
<div class="paragraph">
<p>所以, 应该由一个线程来执行&nbsp;<code>RDD</code>&nbsp;的计算任务, 而&nbsp;<code>Executor</code>&nbsp;作为执行这个任务的容器, 也就是一个进程, 用于创建和执行线程, 这个执行具体计算任务的线程叫做&nbsp;<code>Task</code></p>
</div>
</div>
</div>
</dd><dt class="hdlist1">问题三: Task 该如何设计 ?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>第一个想法是每个&nbsp;<code>RDD</code>&nbsp;都由一个&nbsp;<code>Task</code>&nbsp;来计算 第二个想法是一整个逻辑执行图中所有的&nbsp;<code>RDD</code>&nbsp;都由一组&nbsp;<code>Task</code>&nbsp;来执行 第三个想法是分阶段执行</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">第一个想法: 为每个 RDD 的分区设置一组 Task</dt><dd>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190521113535.png" alt="20190521113535" /></div>
</div>
<div class="paragraph">
<p>大概就是每个&nbsp;<code>RDD</code>&nbsp;都有三个&nbsp;<code>Task</code>, 每个&nbsp;<code>Task</code>&nbsp;对应一个&nbsp;<code>RDD</code>&nbsp;的分区, 执行一个分区的数据的计算</p>
</div>
<div class="paragraph">
<p>但是这么做有一个非常难以解决的问题, 就是数据存储的问题, 例如&nbsp;<code>Task 1, 4, 7, 10, 13, 16</code>&nbsp;在同一个流程上, 但是这些&nbsp;<code>Task</code>&nbsp;之间需要交换数据, 因为这些&nbsp;<code>Task</code>&nbsp;可能被调度到不同的机器上上, 所以&nbsp;<code>Task1</code>&nbsp;执行完了数据以后需要暂存, 后交给&nbsp;<code>Task4</code>&nbsp;来获取</p>
</div>
<div class="paragraph">
<p>这只是一个简单的逻辑图, 如果是一个复杂的逻辑图, 会有什么表现? 要存储多少数据? 无论是放在磁盘还是放在内存中, 是不是都是一种极大的负担?</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">第二个想法: 让数据流动</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>很自然的, 第一个想法的问题是数据需要存储和交换, 那不存储不就好了吗? 对, 可以让数据流动起来</p>
</div>
<div class="paragraph">
<p>第一个要解决的问题就是, 要为数据创建管道(<code>Pipeline</code>), 有了管道, 就可以流动</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190521114511.png" alt="20190521114511" /></div>
</div>
<div class="paragraph">
<p>简单来说, 就是为所有的&nbsp;<code>RDD</code>&nbsp;有关联的分区使用同一个&nbsp;<code>Task</code>, 但是就没问题了吗? 请关注红框部分</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190521114717.png" alt="20190521114717" /></div>
</div>
<div class="paragraph">
<p>这两个&nbsp;<code>RDD</code>&nbsp;之间是&nbsp;<code>Shuffle</code>&nbsp;关系, 也就是说, 右边的&nbsp;<code>RDD</code>&nbsp;的一个分区可能依赖左边&nbsp;<code>RDD</code>&nbsp;的所有分区, 这样的话, 数据在这个地方流不动了, 怎么办?</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">第三个想法: 划分阶段</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>既然在&nbsp;<code>Shuffle</code>&nbsp;处数据流不动了, 那就可以在这个地方中断一下, 后面&nbsp;<code>Stage</code>&nbsp;部分详解</p>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">如何划分阶段 ?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>为了减少执行任务, 减少数据暂存和交换的机会, 所以需要创建管道, 让数据沿着管道流动, 其实也就是原先每个&nbsp;<code>RDD</code>&nbsp;都有一组&nbsp;<code>Task</code>, 现在改为所有的&nbsp;<code>RDD</code>&nbsp;共用一组&nbsp;<code>Task</code>, 但是也有问题, 问题如下</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190521114717.png" alt="20190521114717" /></div>
</div>
<div class="paragraph">
<p>就是说, 在&nbsp;<code>Shuffle</code>&nbsp;处, 必须断开管道, 进行数据交换, 交换过后, 继续流动, 所以整个流程可以变为如下样子</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190521115759.png" alt="20190521115759" /></div>
</div>
<div class="paragraph">
<p>把&nbsp;<code>Task</code>&nbsp;断开成两个部分,&nbsp;<code>Task4</code>&nbsp;可以从&nbsp;<code>Task 1, 2, 3</code>&nbsp;中获取数据, 后&nbsp;<code>Task4</code>&nbsp;又作为管道, 继续让数据在其中流动</p>
</div>
<div class="paragraph">
<p>但是还有一个问题, 说断开就直接断开吗? 不用打个招呼的呀? 这个断开即没有道理, 也没有规则, 所以可以为这个断开增加一个概念叫做阶段, 按照阶段断开, 阶段的英文叫做&nbsp;<code>Stage</code>, 如下</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190521120501.png" alt="20190521120501" /></div>
</div>
<div class="paragraph">
<p>所以划分阶段的本身就是设置断开点的规则, 那么该如何划分阶段呢?</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>第一步, 从最后一个&nbsp;<code>RDD</code>, 也就是逻辑图中最右边的&nbsp;<code>RDD</code>&nbsp;开始, 向前滑动&nbsp;<code>Stage</code>&nbsp;的范围, 为&nbsp;<code>Stage0</code></p>
</li>
<li>
<p>第二步, 遇到&nbsp;<code>ShuffleDependency</code>&nbsp;断开&nbsp;<code>Stage</code>, 从下一个&nbsp;<code>RDD</code>&nbsp;开始创建新的&nbsp;<code>Stage</code>, 为&nbsp;<code>Stage1</code></p>
</li>
<li>
<p>第三步, 新的&nbsp;<code>Stage</code>&nbsp;按照同样的规则继续滑动, 直到包裹所有的&nbsp;<code>RDD</code></p>
</li>
</ol></div>
<div class="paragraph">
<p>总结来看, 就是针对于宽窄依赖来判断, 一个&nbsp;<code>Stage</code>&nbsp;中只有窄依赖, 因为只有窄依赖才能形成数据的&nbsp;<code>Pipeline</code>.</p>
</div>
<div class="paragraph">
<p>如果要进行&nbsp;<code>Shuffle</code>&nbsp;的话, 数据是流不过去的, 必须要拷贝和拉取. 所以遇到&nbsp;<code>RDD</code>&nbsp;宽依赖的两个&nbsp;<code>RDD</code>&nbsp;时, 要切断这两个&nbsp;<code>RDD</code>的&nbsp;<code>Stage</code>.</p>
</div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">
<div class="paragraph">
<p>这样一个 RDD 依赖的链条, 我们称之为 RDD 的血统, 其中有宽依赖也有窄依赖</p>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</dd><dt class="hdlist1">数据怎么流动 ?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val sc = ...

val textRDD = sc.parallelize(Seq("Hadoop Spark", "Hadoop Flume", "Spark Sqoop"))
val splitRDD = textRDD.flatMap(_.split(" "))
val tupleRDD = splitRDD.map((_, 1))
val reduceRDD = tupleRDD.reduceByKey(_ + _)
val strRDD = reduceRDD.map(item =&gt; s"${item._1}, ${item._2}")

strRDD.collect.foreach(item =&gt; println(item))</code></pre>
</div>
</div>
<div class="paragraph">
<p>上述代码是这个章节我们一直使用的代码流程, 如下是其完整的逻辑执行图</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190521161456.png" alt="20190521161456" /></div>
</div>
<div class="paragraph">
<p>如果放在集群中运行, 通过&nbsp;<code>WebUI</code>&nbsp;可以查看到如下&nbsp;<code>DAG</code>&nbsp;结构</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190521161337.png" alt="20190521161337" width="400" /></div>
</div>
<div class="dlist"><dl><dt class="hdlist1">Step 1: 从&nbsp;<code>ResultStage</code>&nbsp;开始执行</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>最接近&nbsp;<code>Result</code>&nbsp;部分的&nbsp;<code>Stage id</code>&nbsp;为 0, 这个&nbsp;<code>Stage</code>&nbsp;被称之为&nbsp;<code>ResultStage</code></p>
</div>
<div class="paragraph">
<p>由代码可以知道, 最终调用&nbsp;<code>Action</code>&nbsp;促使整个流程执行的是最后一个&nbsp;<code>RDD</code>,&nbsp;<code>strRDD.collect</code>, 所以当执行&nbsp;<code>RDD</code>&nbsp;的计算时候, 先计算的也是这个&nbsp;<code>RDD</code></p>
</div>
</div>
</div>
</dd><dt class="hdlist1">Step 2:&nbsp;<code>RDD</code>&nbsp;之间是有关联的</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>前面已经知道, 最后一个&nbsp;<code>RDD</code>&nbsp;先得到执行机会, 先从这个&nbsp;<code>RDD</code>&nbsp;开始执行, 但是这个&nbsp;<code>RDD</code>&nbsp;中有数据吗 ? 如果没有数据, 它的计算是什么? 它的计算是从父&nbsp;<code>RDD</code>&nbsp;中获取数据, 并执行传入的算子的函数</p>
</div>
<div class="paragraph">
<p>简单来说, 从产生&nbsp;<code>Result</code>&nbsp;的地方开始计算, 但是其&nbsp;<code>RDD</code>&nbsp;中是没数据的, 所以会找到父&nbsp;<code>RDD</code>&nbsp;来要数据, 父&nbsp;<code>RDD</code>&nbsp;也没有数据, 继续向上要, 所以, 计算从&nbsp;<code>Result</code>&nbsp;处调用, 但是从整个逻辑图中的最左边&nbsp;<code>RDD</code>&nbsp;开始, 类似一个递归的过程</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190521162302.png" alt="20190521162302" /></div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_6_3_调度过程">6.3. 调度过程</h3>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>生成逻辑图和物理图的系统组件</p>
</li>
<li>
<p><code>Job</code>&nbsp;和&nbsp;<code>Stage</code>,&nbsp;<code>Task</code>&nbsp;之间的关系</p>
</li>
<li>
<p>如何调度&nbsp;<code>Job</code></p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">逻辑图</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>是什么 怎么生成 具体怎么生成</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val textRDD = sc.parallelize(Seq("Hadoop Spark", "Hadoop Flume", "Spark Sqoop"))
val splitRDD = textRDD.flatMap(_.split(" "))
val tupleRDD = splitRDD.map((_, 1))
val reduceRDD = tupleRDD.reduceByKey(_ + _)
val strRDD = reduceRDD.map(item =&gt; s"${item._1}, ${item._2}")</code></pre>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">逻辑图如何生成</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>上述代码在&nbsp;<code>Spark Application</code>&nbsp;的&nbsp;<code>main</code>&nbsp;方法中执行, 而&nbsp;<code>Spark Application</code>&nbsp;在&nbsp;<code>Driver</code>&nbsp;中执行, 所以上述代码在&nbsp;<code>Driver</code>&nbsp;中被执行, 那么这段代码执行的结果是什么呢?</p>
</div>
<div class="paragraph">
<p>一段&nbsp;<code>Scala</code>&nbsp;代码的执行结果就是最后一行的执行结果, 所以上述的代码, 从逻辑上执行结果就是最后一个&nbsp;<code>RDD</code>, 最后一个&nbsp;<code>RDD</code>&nbsp;也可以认为就是逻辑执行图, 为什么呢?</p>
</div>
<div class="paragraph">
<p>例如&nbsp;<code>rdd2 = rdd1.map(&hellip;​)</code>&nbsp;中, 其实本质上&nbsp;<code>rdd2</code>&nbsp;是一个类型为&nbsp;<code>MapPartitionsRDD</code>&nbsp;的对象, 而创建这个对象的时候, 会通过构造函数传入当前&nbsp;<code>RDD</code>&nbsp;对象, 也就是父&nbsp;<code>RDD</code>, 也就是调用&nbsp;<code>map</code>&nbsp;算子的&nbsp;<code>rdd1</code>,&nbsp;<code>rdd1</code>&nbsp;是&nbsp;<code>rdd2</code>&nbsp;的父&nbsp;<code>RDD</code></p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190521165818.png" alt="20190521165818" width="600" /></div>
</div>
<div class="paragraph">
<p>一个&nbsp;<code>RDD</code>&nbsp;依赖另外一个&nbsp;<code>RDD</code>, 这个&nbsp;<code>RDD</code>&nbsp;又依赖另外的&nbsp;<code>RDD</code>, 一个&nbsp;<code>RDD</code>&nbsp;可以通过&nbsp;<code>getDependency</code>&nbsp;获得其父&nbsp;<code>RDD</code>, 这种环环相扣的关系, 最终从最后一个&nbsp;<code>RDD</code>&nbsp;就可以推演出前面所有的&nbsp;<code>RDD</code></p>
</div>
</div>
</div>
</dd><dt class="hdlist1">逻辑图是什么, 干啥用</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>逻辑图其实本质上描述的就是数据的计算过程, 数据从哪来, 经过什么样的计算, 得到什么样的结果, 再执行什么计算, 得到什么结果</p>
</div>
</div>
</div>
</dd></dl></div>
<div class="paragraph">
<p>可是数据的计算是描述好了, 这种计算该如何执行呢?</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">物理图</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>数据的计算表示好了, 该正式执行了, 但是如何执行? 如何执行更快更好更酷? 就需要为其执行做一个规划, 所以需要生成物理执行图</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">strRDD.collect.foreach(item =&gt; println(item))</code></pre>
</div>
</div>
<div class="paragraph">
<p>上述代码其实就是最后的一个&nbsp;<code>RDD</code>&nbsp;调用了&nbsp;<code>Action</code>&nbsp;方法, 调用&nbsp;<code>Action</code>&nbsp;方法的时候, 会请求一个叫做&nbsp;<code>DAGScheduler</code>&nbsp;的组件,&nbsp;<code>DAGScheduler</code>&nbsp;会创建用于执行&nbsp;<code>RDD</code>&nbsp;的&nbsp;<code>Stage</code>&nbsp;和&nbsp;<code>Task</code></p>
</div>
<div class="paragraph">
<p><code>DAGScheduler</code>&nbsp;是一个由&nbsp;<code>SparkContext</code>&nbsp;创建, 运行在&nbsp;<code>Driver</code>&nbsp;上的组件, 其作用就是将由&nbsp;<code>RDD</code>&nbsp;构建出来的逻辑计划, 构建成为由真正在集群中运行的&nbsp;<code>Task</code>&nbsp;组成的物理执行计划,&nbsp;<code>DAGScheduler</code>&nbsp;主要做如下三件事</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>帮助每个&nbsp;<code>Job</code>&nbsp;计算&nbsp;<code>DAG</code>&nbsp;并发给&nbsp;<code>TaskSheduler</code>&nbsp;调度</p>
</li>
<li>
<p>确定每个&nbsp;<code>Task</code>&nbsp;的最佳位置</p>
</li>
<li>
<p>跟踪&nbsp;<code>RDD</code>&nbsp;的缓存状态, 避免重新计算</p>
</li>
</ol></div>
<div class="paragraph">
<p>从字面意思上来看,&nbsp;<code>DAGScheduler</code>&nbsp;是调度&nbsp;<code>DAG</code>&nbsp;去运行的,&nbsp;<code>DAG</code>&nbsp;被称作为有向无环图, 其实可以将&nbsp;<code>DAG</code>&nbsp;理解为就是&nbsp;<code>RDD</code>&nbsp;的逻辑图, 其呈现两个特点:&nbsp;<code>RDD</code>&nbsp;的计算是有方向的,&nbsp;<code>RDD</code>&nbsp;的计算是无环的, 所以&nbsp;<code>DAGScheduler</code>&nbsp;也可以称之为&nbsp;<code>RDD Scheduler</code>, 但是真正运行在集群中的并不是&nbsp;<code>RDD</code>, 而是&nbsp;<code>Task</code>&nbsp;和&nbsp;<code>Stage</code>,&nbsp;<code>DAGScheduler</code>&nbsp;负责这种转换</p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Job</code>&nbsp;是什么 ?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1"><code>Job</code>&nbsp;什么时候生成 ?</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>当一个&nbsp;<code>RDD</code>&nbsp;调用了&nbsp;<code>Action</code>&nbsp;算子的时候, 在&nbsp;<code>Action</code>&nbsp;算子内部, 会使用&nbsp;<code>sc.runJob()</code>&nbsp;调用&nbsp;<code>SparkContext</code>&nbsp;中的&nbsp;<code>runJob</code>&nbsp;方法, 这个方法又会调用&nbsp;<code>DAGScheduler</code>&nbsp;中的&nbsp;<code>runJob</code>, 后在&nbsp;<code>DAGScheduler</code>&nbsp;中使用消息驱动的形式创建&nbsp;<code>Job</code></p>
</div>
<div class="paragraph">
<p>简而言之,&nbsp;<code>Job</code>&nbsp;在&nbsp;<code>RDD</code>&nbsp;调用&nbsp;<code>Action</code>&nbsp;算子的时候生成, 而且调用一次&nbsp;<code>Action</code>&nbsp;算子, 就会生成一个&nbsp;<code>Job</code>, 如果一个&nbsp;<code>SparkApplication</code>&nbsp;中调用了多次&nbsp;<code>Action</code>&nbsp;算子, 会生成多个&nbsp;<code>Job</code>&nbsp;串行执行, 每个&nbsp;<code>Job</code>&nbsp;独立运作, 被独立调度, 所以&nbsp;<code>RDD</code>的计算也会被执行多次</p>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>Job</code>&nbsp;是什么 ?</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>如果要将&nbsp;<code>Spark</code>&nbsp;的程序调度到集群中运行,&nbsp;<code>Job</code>&nbsp;是粒度最大的单位, 调度以&nbsp;<code>Job</code>&nbsp;为最大单位, 将&nbsp;<code>Job</code>&nbsp;拆分为&nbsp;<code>Stage</code>&nbsp;和&nbsp;<code>Task</code>&nbsp;去调度分发和运行, 一个&nbsp;<code>Job</code>&nbsp;就是一个&nbsp;<code>Spark</code>&nbsp;程序从&nbsp;<code>读取 &rarr; 计算 &rarr; 运行</code>&nbsp;的过程</p>
</div>
<div class="paragraph">
<p>一个&nbsp;<code>Spark Application</code>&nbsp;可以包含多个&nbsp;<code>Job</code>, 这些&nbsp;<code>Job</code>&nbsp;之间是串行的, 也就是第二个&nbsp;<code>Job</code>&nbsp;需要等待第一个&nbsp;<code>Job</code>&nbsp;的执行结束后才会开始执行</p>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1"><code>Job</code>&nbsp;和&nbsp;<code>Stage</code>&nbsp;的关系</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p><code>Job</code>&nbsp;是一个最大的调度单位, 也就是说&nbsp;<code>DAGScheduler</code>&nbsp;会首先创建一个&nbsp;<code>Job</code>&nbsp;的相关信息, 后去调度&nbsp;<code>Job</code>, 但是没办法直接调度&nbsp;<code>Job</code>, 比如说现在要做一盘手撕包菜, 不可能直接去炒一整颗包菜, 要切好撕碎, 再去炒</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">为什么&nbsp;<code>Job</code>&nbsp;需要切分 ?</dt><dd>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190521161456.png" alt="20190521161456" /></div>
</div>
<div class="ulist">
<ul>
<li>
<p>因为&nbsp;<code>Job</code>&nbsp;的含义是对整个&nbsp;<code>RDD</code>&nbsp;血统求值, 但是&nbsp;<code>RDD</code>&nbsp;之间可能会有一些宽依赖</p>
</li>
<li>
<p>如果遇到宽依赖的话, 两个&nbsp;<code>RDD</code>&nbsp;之间需要进行数据拉取和复制</p>
<div class="paragraph">
<p>如果要进行拉取和复制的话, 那么一个&nbsp;<code>RDD</code>&nbsp;就必须等待它所依赖的&nbsp;<code>RDD</code>&nbsp;所有分区先计算完成, 然后再进行拉取</p>
</div>
</li>
<li>
<p>由上得知, 一个&nbsp;<code>Job</code>&nbsp;是无法计算完整个&nbsp;<code>RDD</code>&nbsp;血统的</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">如何切分 ?</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>创建一个&nbsp;<code>Stage</code>, 从后向前回溯&nbsp;<code>RDD</code>, 遇到&nbsp;<code>Shuffle</code>&nbsp;依赖就结束&nbsp;<code>Stage</code>, 后创建新的&nbsp;<code>Stage</code>&nbsp;继续回溯. 这个过程上面已经详细的讲解过, 但是问题是切分以后如何执行呢, 从后向前还是从前向后, 是串行执行多个&nbsp;<code>Stage</code>, 还是并行执行多个&nbsp;<code>Stage</code></p>
</div>
</div>
</div>
</dd><dt class="hdlist1">问题一: 执行顺序</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>在图中,&nbsp;<code>Stage 0</code>&nbsp;的计算需要依赖&nbsp;<code>Stage 1</code>&nbsp;的数据, 因为&nbsp;<code>reduceRDD</code>&nbsp;中一个分区可能需要多个&nbsp;<code>tupleRDD</code>&nbsp;分区的数据, 所以&nbsp;<code>tupleRDD</code>&nbsp;必须先计算完, 所以, 应该在逻辑图中自左向右执行&nbsp;<code>Stage</code></p>
</div>
</div>
</div>
</dd><dt class="hdlist1">问题二: 串行还是并行</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>还是同样的原因,&nbsp;<code>Stage 0</code>&nbsp;如果想计算,&nbsp;<code>Stage 1</code>&nbsp;必须先计算完, 因为&nbsp;<code>Stage 0</code>&nbsp;中每个分区都依赖&nbsp;<code>Stage 1</code>&nbsp;中的所有分区, 所以&nbsp;<code>Stage 1</code>&nbsp;不仅需要先执行, 而且&nbsp;<code>Stage 1</code>&nbsp;执行完之前&nbsp;<code>Stage 0</code>&nbsp;无法执行, 它们只能串行执行</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">总结</dt><dd>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>一个&nbsp;<code>Stage</code>&nbsp;就是物理执行计划中的一个步骤, 一个&nbsp;<code>Spark Job</code>&nbsp;就是划分到不同&nbsp;<code>Stage</code>&nbsp;的计算过程</p>
</li>
<li>
<p><code>Stage</code>&nbsp;之间的边界由&nbsp;<code>Shuffle</code>&nbsp;操作来确定</p>
<div class="ulist">
<ul>
<li>
<p><code>Stage</code>&nbsp;内的&nbsp;<code>RDD</code>&nbsp;之间都是窄依赖, 可以放在一个管道中执行</p>
</li>
<li>
<p>而&nbsp;<code>Shuffle</code>&nbsp;后的&nbsp;<code>Stage</code>&nbsp;需要等待前面&nbsp;<code>Stage</code>&nbsp;的执行</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p><code>Stage</code>&nbsp;有两种</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>ShuffMapStage</code>, 其中存放窄依赖的&nbsp;<code>RDD</code></p>
</li>
<li>
<p><code>ResultStage</code>, 每个&nbsp;<code>Job</code>&nbsp;只有一个, 负责计算结果, 一个&nbsp;<code>ResultStage</code>&nbsp;执行完成标志着整个&nbsp;<code>Job</code>&nbsp;执行完毕</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1"><code>Stage</code>&nbsp;和&nbsp;<code>Task</code>&nbsp;的关系</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190521120501.png" alt="20190521120501" /></div>
</div>
<div class="paragraph">
<p>前面我们说到&nbsp;<code>Job</code>&nbsp;无法直接执行, 需要先划分为多个&nbsp;<code>Stage</code>, 去执行&nbsp;<code>Stage</code>, 那么&nbsp;<code>Stage</code>&nbsp;可以直接执行吗?</p>
</div>
<div class="ulist">
<ul>
<li>
<p>第一点:&nbsp;<code>Stage</code>&nbsp;中的&nbsp;<code>RDD</code>&nbsp;之间是窄依赖</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>因为&nbsp;<code>Stage</code>&nbsp;中的所有&nbsp;<code>RDD</code>&nbsp;之间都是窄依赖, 窄依赖&nbsp;<code>RDD</code>&nbsp;理论上是可以放在同一个&nbsp;<code>Pipeline(管道, 流水线)</code>&nbsp;中执行的, 似乎可以直接调度&nbsp;<code>Stage</code>&nbsp;了? 其实不行, 看第二点</p>
</div>
</div>
</div>
</li>
<li>
<p>第二点: 别忘了&nbsp;<code>RDD</code>&nbsp;还有分区</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>一个&nbsp;<code>RDD</code>&nbsp;只是一个概念, 而真正存放和处理数据时, 都是以分区作为单位的</p>
</div>
<div class="paragraph">
<p><code>Stage</code>&nbsp;对应的是多个整体上的&nbsp;<code>RDD</code>, 而真正的运行是需要针对&nbsp;<code>RDD</code>&nbsp;的分区来进行的</p>
</div>
</div>
</div>
</li>
<li>
<p>第三点: 一个&nbsp;<code>Task</code>&nbsp;对应一个&nbsp;<code>RDD</code>&nbsp;的分区</p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>一个比&nbsp;<code>Stage</code>&nbsp;粒度更细的单元叫做&nbsp;<code>Task</code>,&nbsp;<code>Stage</code>&nbsp;是由&nbsp;<code>Task</code>&nbsp;组成的, 之所以有&nbsp;<code>Task</code>&nbsp;这个概念, 是因为&nbsp;<code>Stage</code>&nbsp;针对整个&nbsp;<code>RDD</code>, 而计算的时候, 要针对&nbsp;<code>RDD</code>&nbsp;的分区</p>
</div>
<div class="paragraph">
<p>假设一个&nbsp;<code>Stage</code>&nbsp;中有 10 个&nbsp;<code>RDD</code>, 这些&nbsp;<code>RDD</code>&nbsp;中的分区各不相同, 但是分区最多的&nbsp;<code>RDD</code>&nbsp;有 30 个分区, 而且很显然, 它们之间是窄依赖关系</p>
</div>
<div class="paragraph">
<p>那么, 这个&nbsp;<code>Stage</code>&nbsp;中应该有多少&nbsp;<code>Task</code>&nbsp;呢? 应该有 30 个&nbsp;<code>Task</code>, 因为一个&nbsp;<code>Task</code>&nbsp;计算一个&nbsp;<code>RDD</code>&nbsp;的分区. 这个&nbsp;<code>Stage</code>&nbsp;至多有 30 个分区需要计算</p>
</div>
</div>
</div>
</li>
<li>
<p>总结</p>
<div class="openblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>一个&nbsp;<code>Stage</code>&nbsp;就是一组并行的&nbsp;<code>Task</code>&nbsp;集合</p>
</li>
<li>
<p>Task 是 Spark 中最小的独立执行单元, 其作用是处理一个 RDD 分区</p>
</li>
<li>
<p>一个 Task 只可能存在于一个 Stage 中, 并且只能计算一个 RDD 的分区</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">TaskSet</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>梳理一下这几个概念,&nbsp;<code>Job &gt; Stage &gt; Task</code>,&nbsp;<code>Job 中包含 Stage 中包含 Task</code></p>
</div>
<div class="paragraph">
<p>而&nbsp;<code>Stage</code>&nbsp;中经常会有一组&nbsp;<code>Task</code>&nbsp;需要同时执行, 所以针对于每一个&nbsp;<code>Task</code>&nbsp;来进行调度太过繁琐, 而且没有意义, 所以每个&nbsp;<code>Stage</code>&nbsp;中的&nbsp;<code>Task</code>&nbsp;们会被收集起来, 放入一个&nbsp;<code>TaskSet</code>&nbsp;集合中</p>
</div>
<div class="ulist">
<ul>
<li>
<p>一个&nbsp;<code>Stage</code>&nbsp;有一个&nbsp;<code>TaskSet</code></p>
</li>
<li>
<p><code>TaskSet</code>&nbsp;中&nbsp;<code>Task</code>&nbsp;的个数由&nbsp;<code>Stage</code>&nbsp;中的最大分区数决定</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
<div class="sidebarblock">
<div class="content">
<div class="title">整体执行流程</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190522015026.png" alt="20190522015026" /></div>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_6_3_shuffle_过程">6.3. Shuffle 过程</h3>
<div class="exampleblock">
<div class="title">导读</div>
<div class="content">
<div class="paragraph">
<p>本章节重点是介绍&nbsp;<code>Shuffle</code>&nbsp;的流程, 因为根据&nbsp;<code>ShuffleWriter</code>&nbsp;的实现不同, 其过程也不同, 所以前半部分根据默认的存储引擎&nbsp;<code>SortShuffleWriter</code>&nbsp;来讲解</p>
</div>
<div class="paragraph">
<p>后半部分简要介绍一下其它的&nbsp;<code>ShuffleWriter</code></p>
</div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1"><code>Shuffle</code>&nbsp;过程的组件结构</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>从整体视角上来看,&nbsp;<code>Shuffle</code>&nbsp;发生在两个&nbsp;<code>Stage</code>&nbsp;之间, 一个&nbsp;<code>Stage</code>&nbsp;把数据计算好, 整理好, 等待另外一个&nbsp;<code>Stage</code>&nbsp;来拉取</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190522132537.png" alt="20190522132537" /></div>
</div>
<div class="paragraph">
<p>放大视角, 会发现, 其实&nbsp;<code>Shuffle</code>&nbsp;发生在&nbsp;<code>Task</code>&nbsp;之间, 一个&nbsp;<code>Task</code>&nbsp;把数据整理好, 等待&nbsp;<code>Reducer</code>&nbsp;端的&nbsp;<code>Task</code>&nbsp;来拉取</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190522132852.png" alt="20190522132852" /></div>
</div>
<div class="paragraph">
<p>如果更细化一下,&nbsp;<code>Task</code>&nbsp;之间如何进行数据拷贝的呢? 其实就是一方&nbsp;<code>Task</code>&nbsp;把文件生成好, 然后另一方&nbsp;<code>Task</code>&nbsp;来拉取</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190522133401.png" alt="20190522133401" /></div>
</div>
<div class="paragraph">
<p>现在是一个&nbsp;<code>Reducer</code>&nbsp;的情况, 如果有多个&nbsp;<code>Reducer</code>&nbsp;呢? 如果有多个&nbsp;<code>Reducer</code>&nbsp;的话, 就可以在每个&nbsp;<code>Mapper</code>&nbsp;为所有的&nbsp;<code>Reducer</code>&nbsp;生成各一个文件, 这种叫做&nbsp;<code>Hash base shuffle</code>, 这种&nbsp;<code>Shuffle</code>&nbsp;的方式问题大家也知道, 就是生成中间文件过多, 而且生成文件的话需要缓冲区, 占用内存过大</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190522140738.png" alt="20190522140738" /></div>
</div>
<div class="paragraph">
<p>那么可以把这些文件合并起来, 生成一个文件返回, 这种&nbsp;<code>Shuffle</code>&nbsp;方式叫做&nbsp;<code>Sort base shuffle</code>, 每个&nbsp;<code>Reducer</code>&nbsp;去文件的不同位置拿取数据</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190522141807.png" alt="20190522141807" /></div>
</div>
<div class="paragraph">
<p>如果再细化一下, 把参与这件事的组件也放置进去, 就会是如下这样</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190522170646.png" alt="20190522170646" /></div>
</div>
</div>
</div>
</dd><dt class="hdlist1">有哪些&nbsp;<code>ShuffleWriter</code>&nbsp;?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>大致上有三个&nbsp;<code>ShufflWriter</code>,&nbsp;<code>Spark</code>&nbsp;会按照一定的规则去使用这三种不同的&nbsp;<code>Writer</code></p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>BypassMergeSortShuffleWriter</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>这种&nbsp;<code>Shuffle Writer</code>&nbsp;也依然有&nbsp;<code>Hash base shuffle</code>&nbsp;的问题, 它会在每一个&nbsp;<code>Mapper</code>&nbsp;端对所有的&nbsp;<code>Reducer</code>&nbsp;生成一个文件, 然后再合并这个文件生成一个统一的输出文件, 这个过程中依然是有很多文件产生的, 所以只适合在小量数据的场景下使用</p>
</div>
<div class="paragraph">
<p><code>Spark</code>&nbsp;有考虑去掉这种&nbsp;<code>Writer</code>, 但是因为结构中有一些依赖, 所以一直没去掉</p>
</div>
<div class="paragraph">
<p>当&nbsp;<code>Reducer</code>&nbsp;个数小于&nbsp;<code>spark.shuffle.sort.bypassMergeThreshold</code>, 并且没有&nbsp;<code>Mapper</code>&nbsp;端聚合的时候启用这种方式</p>
</div>
</div>
</div>
</li>
<li>
<p><code>SortShuffleWriter</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>这种&nbsp;<code>ShuffleWriter</code>&nbsp;写文件的方式非常像&nbsp;<code>MapReduce</code>&nbsp;了, 后面详说</p>
</div>
<div class="paragraph">
<p>当其它两种&nbsp;<code>Shuffle</code>&nbsp;不符合开启条件时, 这种&nbsp;<code>Shuffle</code>&nbsp;方式是默认的</p>
</div>
</div>
</div>
</li>
<li>
<p><code>UnsafeShuffleWriter</code></p>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>这种&nbsp;<code>ShuffWriter</code>&nbsp;会将数据序列化, 然后放入缓冲区进行排序, 排序结束后&nbsp;<code>Spill</code>&nbsp;到磁盘, 最终合并&nbsp;<code>Spill</code>&nbsp;文件为一个大文件, 同时在进行内存存储的时候使用了&nbsp;<code>Java</code>&nbsp;得&nbsp;<code>Unsafe API</code>, 也就是使用堆外内存, 是钨丝计划的一部分</p>
</div>
<div class="paragraph">
<p>也不是很常用, 只有在满足如下三个条件时候才会启用</p>
</div>
<div class="ulist">
<ul>
<li>
<p>序列化器序列化后的数据, 必须支持排序</p>
</li>
<li>
<p>没有&nbsp;<code>Mapper</code>&nbsp;端的聚合</p>
</li>
<li>
<p><code>Reducer</code>&nbsp;的个数不能超过支持的上限 (2 ^ 24)</p>
</li>
</ul>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1"><code>SortShuffleWriter</code>&nbsp;的执行过程</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190522160031.png" alt="20190522160031" /></div>
</div>
<div class="paragraph">
<p>整个&nbsp;<code>SortShuffleWriter</code>&nbsp;如上述所说, 大致有如下几步</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>首先&nbsp;<code>SortShuffleWriter</code>&nbsp;在&nbsp;<code>write</code>&nbsp;方法中回去写文件, 这个方法中创建了&nbsp;<code>ExternalSorter</code></p>
</li>
<li>
<p><code>write</code>&nbsp;中将数据&nbsp;<code>insertAll</code>&nbsp;到&nbsp;<code>ExternalSorter</code>&nbsp;中</p>
</li>
<li>
<p>在&nbsp;<code>ExternalSorter</code>&nbsp;中排序</p>
<div class="olist loweralpha"><ol class="loweralpha" type="a">
<li>
<p>如果要聚合, 放入&nbsp;<code>AppendOnlyMap</code>&nbsp;中, 如果不聚合, 放入&nbsp;<code>PartitionedPairBuffer</code>&nbsp;中</p>
</li>
<li>
<p>在数据结构中进行排序, 排序过程中如果内存数据大于阈值则溢写到磁盘</p>
</li>
</ol></div>
</li>
<li>
<p>使用&nbsp;<code>ExternalSorter</code>&nbsp;的&nbsp;<code>writePartitionedFile</code>&nbsp;写入输入文件</p>
<div class="olist loweralpha"><ol class="loweralpha" type="a">
<li>
<p>将所有的溢写文件通过类似&nbsp;<code>MergeSort</code>&nbsp;的算法合并</p>
</li>
<li>
<p>将数据写入最终的目标文件中</p>
</li>
</ol></div>
</li>
</ol></div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_7_rdd_的分布式共享变量">7. RDD 的分布式共享变量</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>理解闭包以及 Spark 分布式运行代码的根本原理</p>
</li>
<li>
<p>理解累加变量的使用场景</p>
</li>
<li>
<p>理解广播的使用场景</p>
</li>
</ol></div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">什么是闭包</div>
<div class="paragraph">
<p>闭包是一个必须要理解, 但是又不太好理解的知识点, 先看一个小例子</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java"><span class="hljs-meta">@Test
<span class="hljs-function">def <span class="hljs-title">test<span class="hljs-params">(): Unit = {
  val areaFunction = closure()
  val area = areaFunction(<span class="hljs-number">2)
  println(area)
}

<span class="hljs-function">def <span class="hljs-title">closure<span class="hljs-params">(): Int =&gt; Double = {
  val factor = <span class="hljs-number">3.14
  val areaFunction = (r: Int) =&gt; math.pow(r, <span class="hljs-number">2) * factor
  areaFunction
}</span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>上述例子中, `closure`方法返回的一个函数的引用, 其实就是一个闭包, 闭包本质上就是一个封闭的作用域, 要理解闭包, 是一定要和作用域联系起来的.</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">能否在&nbsp;<code>test</code>&nbsp;方法中访问&nbsp;<code>closure</code>&nbsp;定义的变量?</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java"><span class="hljs-meta">@Test
<span class="hljs-function">def <span class="hljs-title">test<span class="hljs-params">(): Unit = {
  println(factor)
}

<span class="hljs-function">def <span class="hljs-title">closure<span class="hljs-params">(): Int =&gt; Double = {
  val factor = <span class="hljs-number">3.14
}</span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</dd><dt class="hdlist1">有没有什么间接的方式?</dt><dd>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java"><span class="hljs-meta">@Test
<span class="hljs-function">def <span class="hljs-title">test<span class="hljs-params">(): Unit = {
  val areaFunction = closure()
  areaFunction()
}

<span class="hljs-function">def <span class="hljs-title">closure<span class="hljs-params">(): <span class="hljs-params">() =&gt; Unit = {
  val factor = <span class="hljs-number">3.14
  val areaFunction = () =&gt; println(factor)
  areaFunction
}</span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</dd><dt class="hdlist1">什么是闭包?</dt><dd>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">val areaFunction = closure()
areaFunction()</code></pre>
</div>
</div>
<div class="paragraph">
<p>通过&nbsp;<code>closure</code>&nbsp;返回的函数&nbsp;<code>areaFunction</code>&nbsp;就是一个闭包, 其函数内部的作用域并不是&nbsp;<code>test</code>&nbsp;函数的作用域, 这种连带作用域一起打包的方式, 我们称之为闭包, 在 Scala 中</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Scala 中的闭包本质上就是一个对象, 是 FunctionX 的实例*</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="title">分发闭包</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">sc.textFile(<span class="hljs-string">"dataset/access_log_sample.txt")
  .flatMap(item =&gt; item.split(<span class="hljs-string">""))
  .collect()</span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>上述这段代码中,&nbsp;<code>flatMap</code>&nbsp;中传入的是另外一个函数, 传入的这个函数就是一个闭包, 这个闭包会被序列化运行在不同的 Executor 中</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/1d0afe0f7a86237910b974f116fc1747.png" alt="1d0afe0f7a86237910b974f116fc1747" width="800" /></div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java"><span class="hljs-class"><span class="hljs-keyword">class <span class="hljs-title">MyClass {
  val field = <span class="hljs-string">"Hello"

  <span class="hljs-function">def <span class="hljs-title">doStuff<span class="hljs-params">(rdd: RDD[String]): RDD[String] = {
    rdd.map(x =&gt; field + x)
  }
}</span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>这段代码中的闭包就有了一个依赖, 依赖于外部的一个类, 因为传递给算子的函数最终要在 Executor 中运行, 所以需要&nbsp;<strong>序列化</strong><code>MyClass</code>&nbsp;发给每一个&nbsp;<code>Executor</code>, 从而在&nbsp;<code>Executor</code>&nbsp;访问&nbsp;<code>MyClass</code>&nbsp;对象的属性</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/97d96cbd4169753a9c44c8e3d04735d2.png" alt="97d96cbd4169753a9c44c8e3d04735d2" width="800" /></div>
</div>
</div>
</div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>闭包就是一个封闭的作用域, 也是一个对象</p>
</li>
<li>
<p>Spark 算子所接受的函数, 本质上是一个闭包, 因为其需要封闭作用域, 并且序列化自身和依赖, 分发到不同的节点中运行</p>
</li>
</ol></div>
</div>
</div>
<div class="sect2">
<h3 id="_7_1_累加器">7.1. 累加器</h3>
<div class="dlist"><dl><dt class="hdlist1">一个小问题</dt><dd>
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java"><span class="hljs-keyword">var count = <span class="hljs-number">0

val config = <span class="hljs-keyword">new SparkConf().setAppName(<span class="hljs-string">"ip_ana").setMaster(<span class="hljs-string">"local[6]")
val sc = <span class="hljs-keyword">new SparkContext(config)

sc.parallelize(Seq(<span class="hljs-number">1, <span class="hljs-number">2, <span class="hljs-number">3, <span class="hljs-number">4, <span class="hljs-number">5))
  .foreach(count += _)

println(count)</span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>上面这段代码是一个非常错误的使用, 请不要仿照, 这段代码只是为了证明一些事情</p>
</div>
<div class="paragraph">
<p>先明确两件事,&nbsp;<code>var count = 0</code>&nbsp;是在 Driver 中定义的,&nbsp;<code>foreach(count += _)</code>&nbsp;这个算子以及传递进去的闭包运行在 Executor 中</p>
</div>
<div class="paragraph">
<p>这段代码整体想做的事情是累加一个变量, 但是这段代码的写法却做不到这件事, 原因也很简单, 因为具体的算子是闭包, 被分发给不同的节点运行, 所以这个闭包中累加的并不是 Driver 中的这个变量</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">全局累加器</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>Accumulators(累加器) 是一个只支持&nbsp;<code>added</code>(添加) 的分布式变量, 可以在分布式环境下保持一致性, 并且能够做到高效的并发.</p>
</div>
<div class="paragraph">
<p>原生 Spark 支持数值型的累加器, 可以用于实现计数或者求和, 开发者也可以使用自定义累加器以实现更高级的需求</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">val config = <span class="hljs-keyword">new SparkConf().setAppName(<span class="hljs-string">"ip_ana").setMaster(<span class="hljs-string">"local[6]")
val sc = <span class="hljs-keyword">new SparkContext(config)

val counter = sc.longAccumulator(<span class="hljs-string">"counter")

sc.parallelize(Seq(<span class="hljs-number">1, <span class="hljs-number">2, <span class="hljs-number">3, <span class="hljs-number">4, <span class="hljs-number">5))
  .foreach(counter.add(_))

<span class="hljs-comment">// 运行结果: 15
println(counter.value)</span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>注意点:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Accumulator 是支持并发并行的, 在任何地方都可以通过&nbsp;<code>add</code>&nbsp;来修改数值, 无论是 Driver 还是 Executor</p>
</li>
<li>
<p>只能在 Driver 中才能调用&nbsp;<code>value</code>&nbsp;来获取数值</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>在 WebUI 中关于 Job 部分也可以看到 Accumulator 的信息, 以及其运行的情况</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/41b76292cc02a2e51cb086171e3420fb.png" alt="41b76292cc02a2e51cb086171e3420fb" width="800" /></div>
</div>
<div class="paragraph">
<p>累计器件还有两个小特性, 第一, 累加器能保证在 Spark 任务出现问题被重启的时候不会出现重复计算. 第二, 累加器只有在 Action 执行的时候才会被触发.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">val config = <span class="hljs-keyword">new SparkConf().setAppName(<span class="hljs-string">"ip_ana").setMaster(<span class="hljs-string">"local[6]")
val sc = <span class="hljs-keyword">new SparkContext(config)

val counter = sc.longAccumulator(<span class="hljs-string">"counter")

sc.parallelize(Seq(<span class="hljs-number">1, <span class="hljs-number">2, <span class="hljs-number">3, <span class="hljs-number">4, <span class="hljs-number">5))
  .map(counter.add(_)) <span class="hljs-comment">// 这个地方不是 Action, 而是一个 Transformation

<span class="hljs-comment">// 运行结果是 0
println(counter.value)</span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">自定义累加器</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>开发者可以通过自定义累加器来实现更多类型的累加器, 累加器的作用远远不只是累加, 比如可以实现一个累加器, 用于向里面添加一些运行信息</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java"><span class="hljs-class"><span class="hljs-keyword">class <span class="hljs-title">InfoAccumulator <span class="hljs-keyword">extends <span class="hljs-title">AccumulatorV2[<span class="hljs-title">String, <span class="hljs-title">Set[<span class="hljs-title">String]] {
  <span class="hljs-keyword">private val infos: mutable.Set[String] = mutable.Set()

  override def isZero: Boolean = {
    infos.isEmpty
  }

  <span class="hljs-function">override def <span class="hljs-title">copy<span class="hljs-params">(): AccumulatorV2[String, Set[String]] = {
    val newAccumulator = <span class="hljs-keyword">new InfoAccumulator()
    infos.<span class="hljs-keyword">synchronized {
      newAccumulator.infos ++= infos
    }
    newAccumulator
  }

  <span class="hljs-function">override def <span class="hljs-title">reset<span class="hljs-params">(): Unit = {
    infos.clear()
  }

  <span class="hljs-function">override def <span class="hljs-title">add<span class="hljs-params">(v: String): Unit = {
    infos += v
  }

  <span class="hljs-function">override def <span class="hljs-title">merge<span class="hljs-params">(other: AccumulatorV2[String, Set[String]]): Unit = {
    infos ++= other.value
  }

  override def value: Set[String] = {
    infos.toSet
  }
}

<span class="hljs-meta">@Test
<span class="hljs-function">def <span class="hljs-title">accumulator2<span class="hljs-params">(): Unit = {
  val config = <span class="hljs-keyword">new SparkConf().setAppName(<span class="hljs-string">"ip_ana").setMaster(<span class="hljs-string">"local[6]")
  val sc = <span class="hljs-keyword">new SparkContext(config)

  val infoAccumulator = <span class="hljs-keyword">new InfoAccumulator()
  sc.register(infoAccumulator, <span class="hljs-string">"infos")

  sc.parallelize(Seq(<span class="hljs-string">"1", <span class="hljs-string">"2", <span class="hljs-string">"3"))
    .foreach(item =&gt; infoAccumulator.add(item))

  <span class="hljs-comment">// 运行结果: Set(3, 1, 2)
  println(infoAccumulator.value)

  sc.stop()
}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>注意点:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>可以通过继承&nbsp;<code>AccumulatorV2</code>&nbsp;来创建新的累加器</p>
</li>
<li>
<p>有几个方法需要重写</p>
<div class="ulist">
<ul>
<li>
<p>reset 方法用于把累加器重置为 0</p>
</li>
<li>
<p>add 方法用于把其它值添加到累加器中</p>
</li>
<li>
<p>merge 方法用于指定如何合并其他的累加器</p>
</li>
</ul>
</div>
</li>
<li>
<p><code>value</code>&nbsp;需要返回一个不可变的集合, 因为不能因为外部的修改而影响自身的值</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_7_2_广播变量">7.2. 广播变量</h3>
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>理解为什么需要广播变量, 以及其应用场景</p>
</li>
<li>
<p>能够通过代码使用广播变量</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">广播变量的作用</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>广播变量允许开发者将一个&nbsp;<code>Read-Only</code>&nbsp;的变量缓存到集群中每个节点中, 而不是传递给每一个 Task 一个副本.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>集群中每个节点, 指的是一个机器</p>
</li>
<li>
<p>每一个 Task, 一个 Task 是一个 Stage 中的最小处理单元, 一个 Executor 中可以有多个 Stage, 每个 Stage 有多个 Task</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>所以在需要跨多个 Stage 的多个 Task 中使用相同数据的情况下, 广播特别的有用</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/7eb422ef368aec2a1e60636b0f9dfd77.png" alt="7eb422ef368aec2a1e60636b0f9dfd77" width="800" /></div>
</div>
</div>
</div>
</dd><dt class="hdlist1">广播变量的API</dt><dd>
<div class="sidebarblock">
<div class="content">
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">方法名</th><th class="tableblock halign-left valign-top">描述</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>id</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">唯一标识</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>value</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">广播变量的值</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>unpersist</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">在 Executor 中异步的删除缓存副本</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>destroy</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">销毁所有此广播变量所关联的数据和元数据</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>toString</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">字符串表示</p>
</td>
</tr>
</tbody>
</table>
<div class="dlist"><dl><dt class="hdlist1">使用广播变量的一般套路</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>可以通过如下方式创建广播变量</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val b = sc.broadcast(1)</code></pre>
</div>
</div>
<div class="paragraph">
<p>如果 Log 级别为 DEBUG 的时候, 会打印如下信息</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">DEBUG BlockManager: Put block broadcast_0 locally took  430 ms
DEBUG BlockManager: Putting block broadcast_0 without replication took  431 ms
DEBUG BlockManager: Told master about block broadcast_0_piece0
DEBUG BlockManager: Put block broadcast_0_piece0 locally took  4 ms
DEBUG BlockManager: Putting block broadcast_0_piece0 without replication took  4 ms</code></pre>
</div>
</div>
<div class="paragraph">
<p>创建后可以使用&nbsp;<code>value</code>&nbsp;获取数据</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">b.value</code></pre>
</div>
</div>
<div class="paragraph">
<p>获取数据的时候会打印如下信息</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">DEBUG BlockManager: Getting local block broadcast_0
DEBUG BlockManager: Level for block broadcast_0 is StorageLevel(disk, memory, deserialized, 1 replicas)</code></pre>
</div>
</div>
<div class="paragraph">
<p>广播变量使用完了以后, 可以使用&nbsp;<code>unpersist</code>&nbsp;删除数据</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">b.unpersist</code></pre>
</div>
</div>
<div class="paragraph">
<p>删除数据以后, 可以使用&nbsp;<code>destroy</code>&nbsp;销毁变量, 释放内存空间</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">b.destroy</code></pre>
</div>
</div>
<div class="paragraph">
<p>销毁以后, 会打印如下信息</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">DEBUG BlockManager: Removing broadcast 0
DEBUG BlockManager: Removing block broadcast_0_piece0
DEBUG BlockManager: Told master about block broadcast_0_piece0
DEBUG BlockManager: Removing block broadcast_0</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">使用&nbsp;<code>value</code>&nbsp;方法的注意点</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>方法签名&nbsp;<code>value: T</code></p>
</div>
<div class="paragraph">
<p>在&nbsp;<code>value</code>&nbsp;方法内部会确保使用获取数据的时候, 变量必须是可用状态, 所以必须在变量被&nbsp;<code>destroy</code>&nbsp;之前使用&nbsp;<code>value</code>&nbsp;方法, 如果使用&nbsp;<code>value</code>&nbsp;时变量已经失效, 则会爆出以下错误</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">org.apache.spark.SparkException: Attempted to use Broadcast(0) after it was destroyed (destroy at &lt;console&gt;:27)
  at org.apache.spark.broadcast.Broadcast.assertValid(Broadcast.scala:144)
  at org.apache.spark.broadcast.Broadcast.value(Broadcast.scala:69)
  ... 48 elided</code></pre>
</div>
</div>
</div>
</div>
</dd><dt class="hdlist1">使用&nbsp;<code>destroy</code>&nbsp;方法的注意点</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>方法签名&nbsp;<code>destroy(): Unit</code></p>
</div>
<div class="paragraph">
<p><code>destroy</code>&nbsp;方法会移除广播变量, 彻底销毁掉, 但是如果你试图多次&nbsp;<code>destroy</code>&nbsp;广播变量, 则会爆出以下错误</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-text hljs" data-lang="text">org.apache.spark.SparkException: Attempted to use Broadcast(0) after it was destroyed (destroy at &lt;console&gt;:27)
  at org.apache.spark.broadcast.Broadcast.assertValid(Broadcast.scala:144)
  at org.apache.spark.broadcast.Broadcast.destroy(Broadcast.scala:107)
  at org.apache.spark.broadcast.Broadcast.destroy(Broadcast.scala:98)
  ... 48 elided</code></pre>
</div>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
</dd><dt class="hdlist1">广播变量的使用场景</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>假设我们在某个算子中需要使用一个保存了项目和项目的网址关系的&nbsp;<code>Map[String, String]</code>&nbsp;静态集合, 如下</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val pws = Map("Apache Spark" -&gt; "http://spark.apache.org/", "Scala" -&gt; "http://www.scala-lang.org/")

val websites = sc.parallelize(Seq("Apache Spark", "Scala")).map(pws).collect</code></pre>
</div>
</div>
<div class="paragraph">
<p>上面这段代码是没有问题的, 可以正常运行的, 但是非常的低效, 因为虽然可能&nbsp;<code>pws</code>&nbsp;已经存在于某个&nbsp;<code>Executor</code>&nbsp;中了, 但是在需要的时候还是会继续发往这个&nbsp;<code>Executor</code>, 如果想要优化这段代码, 则需要尽可能的降低网络开销</p>
</div>
<div class="paragraph">
<p>可以使用广播变量进行优化, 因为广播变量会缓存在集群中的机器中, 比&nbsp;<code>Executor</code>&nbsp;在逻辑上更 "大"</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val pwsB = sc.broadcast(pws)
val websites = sc.parallelize(Seq("Apache Spark", "Scala")).map(pwsB.value).collect</code></pre>
</div>
</div>
<div class="paragraph">
<p>上面两段代码所做的事情其实是一样的, 但是当需要运行多个&nbsp;<code>Executor</code>&nbsp;(以及多个&nbsp;<code>Task</code>) 的时候, 后者的效率更高</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">扩展</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>正常情况下使用 Task 拉取数据的时候, 会将数据拷贝到 Executor 中多次, 但是使用广播变量的时候只会复制一份数据到 Executor 中, 所以在两种情况下特别适合使用广播变量</p>
</div>
<div class="ulist">
<ul>
<li>
<p>一个 Executor 中有多个 Task 的时候</p>
</li>
<li>
<p>一个变量比较大的时候</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>而且在 Spark 中还有一个约定俗称的做法, 当一个 RDD 很大并且还需要和另外一个 RDD 执行&nbsp;<code>join</code>&nbsp;的时候, 可以将较小的 RDD 广播出去, 然后使用大的 RDD 在算子&nbsp;<code>map</code>&nbsp;中直接&nbsp;<code>join</code>, 从而实现在 Map 端&nbsp;<code>join</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">val acMap = sc.broadcast(myRDD.map { case (a,b,c,b) =&gt; (a, c) }.collectAsMap)
val otherMap = sc.broadcast(myOtherRDD.collectAsMap)

myBigRDD.map { case (a, b, c, d) =&gt;
  (acMap.value.get(a).get, otherMap.value.get(c).get)
}.collect</code></pre>
</div>
</div>
<div class="paragraph">
<p>一般情况下在这种场景下, 会广播 Map 类型的数据, 而不是数组, 因为这样容易使用 Key 找到对应的 Value 简化使用</p>
</div>
</div>
</div>
</dd></dl></div>
<div class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>广播变量用于将变量缓存在集群中的机器中, 避免机器内的 Executors 多次使用网络拉取数据</p>
</li>
<li>
<p>广播变量的使用步骤: (1) 创建 (2) 在 Task 中获取值 (3) 销毁</p>
</li>
</ol></div>
</div>
</div>
</div>
</div>
</div>]]></description></item><item><title>Update(Stage4)：spark_rdd算子：第2节 RDD_action算子_分区_缓存：缓存、Checkpoint</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/28/11604950.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 28 Sep 2019 13:23:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/28/11604950.html</guid><description><![CDATA[<h2 id="_4_缓存">4. 缓存</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">概要</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>缓存的意义</p>
</li>
<li>
<p>缓存相关的 API</p>
</li>
<li>
<p>缓存级别以及最佳实践</p>
</li>
</ol></div>
</div>
</div>
<div class="sect2">
<h3 id="_4_1_缓存的意义">4.1. 缓存的意义</h3>
<div class="dlist"><dl><dt class="hdlist1">使用缓存的原因 - 多次使用 RDD</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>需求: 在日志文件中找到访问次数最少的 IP 和访问次数最多的 IP</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val conf = <span class="hljs-keyword">new <span class="hljs-type">SparkConf().setMaster(<span class="hljs-string">"local[6]").setAppName(<span class="hljs-string">"debug_string")
<span class="hljs-keyword">val sc = <span class="hljs-keyword">new <span class="hljs-type">SparkContext(conf)

<span class="hljs-keyword">val interimRDD = sc.textFile(<span class="hljs-string">"dataset/access_log_sample.txt")
  .map(item =&gt; (item.split(<span class="hljs-string">" ")(<span class="hljs-number">0), <span class="hljs-number">1))
  .filter(item =&gt; <span class="hljs-type">StringUtils.isNotBlank(item._1))
  .reduceByKey((curr, agg) =&gt; curr + agg) <span class="conum" data-value="1">

<span class="hljs-keyword">val resultLess = interimRDD.sortBy(item =&gt; item._2, ascending = <span class="hljs-literal">true).first()
<span class="hljs-keyword">val resultMore = interimRDD.sortBy(item =&gt; item._2, ascending = <span class="hljs-literal">false).first()

println(<span class="hljs-string">s"出现次数最少的 IP : <span class="hljs-subst">$resultLess, 出现次数最多的 IP : <span class="hljs-subst">$resultMore")

sc.stop()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>这是一个 Shuffle 操作, Shuffle 操作会在集群内进行数据拷贝</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">
<p>在上述代码中, 多次使用到了&nbsp;<code>interimRDD</code>, 导致文件读取两次, 计算两次, 有没有什么办法增进上述代码的性能?</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">使用缓存的原因 - 容错</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190511163654.png" alt="20190511163654" /></div>
</div>
<div class="paragraph">
<p>当在计算 RDD3 的时候如果出错了, 会怎么进行容错?</p>
</div>
<div class="paragraph">
<p>会再次计算 RDD1 和 RDD2 的整个链条, 假设 RDD1 和 RDD2 是通过比较昂贵的操作得来的, 有没有什么办法减少这种开销?</p>
</div>
</div>
</div>
</dd></dl></div>
<div class="paragraph">
<p>上述两个问题的解决方案其实都是&nbsp;<code>缓存</code>, 除此之外, 使用缓存的理由还有很多, 但是总结一句, 就是缓存能够帮助开发者在进行一些昂贵操作后, 将其结果保存下来, 以便下次使用无需再次执行, 缓存能够显著的提升性能.</p>
</div>
<div class="paragraph">
<p>所以, 缓存适合在一个 RDD 需要重复多次利用, 并且还不是特别大的情况下使用, 例如迭代计算等场景.</p>
</div>
</div>
<div class="sect2">
<h3 id="_4_2_缓存相关的_api">4.2. 缓存相关的 API</h3>
<div class="dlist"><dl><dt class="hdlist1">可以使用&nbsp;<code>cache</code>&nbsp;方法进行缓存</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val conf = <span class="hljs-keyword">new <span class="hljs-type">SparkConf().setMaster(<span class="hljs-string">"local[6]").setAppName(<span class="hljs-string">"debug_string")
<span class="hljs-keyword">val sc = <span class="hljs-keyword">new <span class="hljs-type">SparkContext(conf)

<span class="hljs-keyword">val interimRDD = sc.textFile(<span class="hljs-string">"dataset/access_log_sample.txt")
  .map(item =&gt; (item.split(<span class="hljs-string">" ")(<span class="hljs-number">0), <span class="hljs-number">1))
  .filter(item =&gt; <span class="hljs-type">StringUtils.isNotBlank(item._1))
  .reduceByKey((curr, agg) =&gt; curr + agg)
  .cache() <span class="conum" data-value="1">

<span class="hljs-keyword">val resultLess = interimRDD.sortBy(item =&gt; item._2, ascending = <span class="hljs-literal">true).first()
<span class="hljs-keyword">val resultMore = interimRDD.sortBy(item =&gt; item._2, ascending = <span class="hljs-literal">false).first()

println(<span class="hljs-string">s"出现次数最少的 IP : <span class="hljs-subst">$resultLess, 出现次数最多的 IP : <span class="hljs-subst">$resultMore")

sc.stop()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>缓存</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">
<p>方法签名如下</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">cache(): <span class="hljs-keyword">this.<span class="hljs-keyword">type = persist()</span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>cache 方法其实是&nbsp;<code>persist</code>&nbsp;方法的一个别名</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190511164152.png" alt="20190511164152" /></div>
</div>
</div>
</div>
</dd><dt class="hdlist1">也可以使用 persist 方法进行缓存</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre>val conf = new SparkConf().setMaster("local[6]").setAppName("debug_string")
val sc = new SparkContext(conf)

val interimRDD = sc.textFile("dataset/access_log_sample.txt")
  .map(item =&gt; (item.split(" ")(0), 1))
  .filter(item =&gt; StringUtils.isNotBlank(item._1))
  .reduceByKey((curr, agg) =&gt; curr + agg)
  .persist(StorageLevel.MEMORY_ONLY) <span class="conum" data-value="1">

val resultLess = interimRDD.sortBy(item =&gt; item._2, ascending = true).first()
val resultMore = interimRDD.sortBy(item =&gt; item._2, ascending = false).first()

println(s"出现次数最少的 IP : $resultLess, 出现次数最多的 IP : $resultMore")

sc.stop()</span></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>缓存</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">
<p>方法签名如下</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala">persist(): <span class="hljs-keyword">this.<span class="hljs-keyword">type
persist(newLevel: <span class="hljs-type">StorageLevel): <span class="hljs-keyword">this.<span class="hljs-keyword">type</span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p><code>persist</code>&nbsp;方法其实有两种形式,&nbsp;<code>persist()</code>&nbsp;是&nbsp;<code>persist(newLevel: StorageLevel)</code>&nbsp;的一个别名,&nbsp;<code>persist(newLevel: StorageLevel)</code>&nbsp;能够指定缓存的级别</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190511164532.png" alt="20190511164532" /></div>
</div>
</div>
</div>
</dd><dt class="hdlist1">缓存其实是一种空间换时间的做法, 会占用额外的存储资源, 如何清理?</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val conf = <span class="hljs-keyword">new <span class="hljs-type">SparkConf().setMaster(<span class="hljs-string">"local[6]").setAppName(<span class="hljs-string">"debug_string")
<span class="hljs-keyword">val sc = <span class="hljs-keyword">new <span class="hljs-type">SparkContext(conf)

<span class="hljs-keyword">val interimRDD = sc.textFile(<span class="hljs-string">"dataset/access_log_sample.txt")
  .map(item =&gt; (item.split(<span class="hljs-string">" ")(<span class="hljs-number">0), <span class="hljs-number">1))
  .filter(item =&gt; <span class="hljs-type">StringUtils.isNotBlank(item._1))
  .reduceByKey((curr, agg) =&gt; curr + agg)
  .persist()

interimRDD.unpersist() <span class="conum" data-value="1">

<span class="hljs-keyword">val resultLess = interimRDD.sortBy(item =&gt; item._2, ascending = <span class="hljs-literal">true).first()
<span class="hljs-keyword">val resultMore = interimRDD.sortBy(item =&gt; item._2, ascending = <span class="hljs-literal">false).first()

println(<span class="hljs-string">s"出现次数最少的 IP : <span class="hljs-subst">$resultLess, 出现次数最多的 IP : <span class="hljs-subst">$resultMore")

sc.stop()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>清理缓存</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">
<p>根据缓存级别的不同, 缓存存储的位置也不同, 但是使用&nbsp;<code>unpersist</code>&nbsp;可以指定删除 RDD 对应的缓存信息, 并指定缓存级别为&nbsp;<code>NONE</code></p>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_4_3_缓存级别">4.3. 缓存级别</h3>
<div class="paragraph">
<p>其实如何缓存是一个技术活, 有很多细节需要思考, 如下</p>
</div>
<div class="ulist">
<ul>
<li>
<p>是否使用磁盘缓存?</p>
</li>
<li>
<p>是否使用内存缓存?</p>
</li>
<li>
<p>是否使用堆外内存?</p>
</li>
<li>
<p>缓存前是否先序列化?</p>
</li>
<li>
<p>是否需要有副本?</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>如果要回答这些信息的话, 可以先查看一下 RDD 的缓存级别对象</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val conf = <span class="hljs-keyword">new <span class="hljs-type">SparkConf().setMaster(<span class="hljs-string">"local[6]").setAppName(<span class="hljs-string">"debug_string")
<span class="hljs-keyword">val sc = <span class="hljs-keyword">new <span class="hljs-type">SparkContext(conf)

<span class="hljs-keyword">val interimRDD = sc.textFile(<span class="hljs-string">"dataset/access_log_sample.txt")
  .map(item =&gt; (item.split(<span class="hljs-string">" ")(<span class="hljs-number">0), <span class="hljs-number">1))
  .filter(item =&gt; <span class="hljs-type">StringUtils.isNotBlank(item._1))
  .reduceByKey((curr, agg) =&gt; curr + agg)
  .persist()

println(interimRDD.getStorageLevel)

sc.stop()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>打印出来的对象是&nbsp;<code>StorageLevel</code>, 其中有如下几个构造参数</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190511170124.png" alt="20190511170124" width="600" /></div>
</div>
<div class="paragraph">
<p>根据这几个参数的不同,&nbsp;<code>StorageLevel</code>&nbsp;有如下几个枚举对象</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/20190511170338.png" alt="20190511170338" width="600" /></div>
</div>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /><col /><col /><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">缓存级别</th><th class="tableblock halign-left valign-top"><code>userDisk</code>&nbsp;是否使用磁盘</th><th class="tableblock halign-left valign-top"><code>useMemory</code>&nbsp;是否使用内存</th><th class="tableblock halign-left valign-top"><code>useOffHeap</code>&nbsp;是否使用堆外内存</th><th class="tableblock halign-left valign-top"><code>deserialized</code>是否以反序列化形式存储</th><th class="tableblock halign-left valign-top"><code>replication</code>&nbsp;副本数</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>NONE</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">1</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>DISK_ONLY</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">1</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>DISK_ONLY_2</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">2</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>MEMORY_ONLY</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">1</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>MEMORY_ONLY_2</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">2</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>MEMORY_ONLY_SER</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">1</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>MEMORY_ONLY_SER_2</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">2</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>MEMORY_AND_DISK</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">1</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>MEMORY_AND_DISK</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">2</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>MEMORY_AND_DISK_SER</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">1</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>MEMORY_AND_DISK_SER_2</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">2</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>OFF_HEAP</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">true</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">false</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">1</p>
</td>
</tr>
</tbody>
</table>
<div class="sidebarblock">
<div class="content">
<div class="title">如何选择分区级别</div>
<div class="paragraph">
<p>Spark 的存储级别的选择，核心问题是在 memory 内存使用率和 CPU 效率之间进行权衡。建议按下面的过程进行存储级别的选择:</p>
</div>
<div class="paragraph">
<p>如果您的 RDD 适合于默认存储级别（MEMORY_ONLY），leave them that way。这是 CPU 效率最高的选项，允许 RDD 上的操作尽可能快地运行.</p>
</div>
<div class="paragraph">
<p>如果不是，试着使用 MEMORY_ONLY_SER 和 selecting a fast serialization library 以使对象更加节省空间，但仍然能够快速访问。(Java和Scala)</p>
</div>
<div class="paragraph">
<p>不要溢出到磁盘，除非计算您的数据集的函数是昂贵的，或者它们过滤大量的数据。否则，重新计算分区可能与从磁盘读取分区一样快.</p>
</div>
<div class="paragraph">
<p>如果需要快速故障恢复，请使用复制的存储级别（例如，如果使用 Spark 来服务 来自网络应用程序的请求）。All 存储级别通过重新计算丢失的数据来提供完整的容错能力，但复制的数据可让您继续在 RDD 上运行任务，而无需等待重新计算一个丢失的分区.</p>
<p>&nbsp;</p>
<h2 id="_5_checkpoint">5. Checkpoint</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>Checkpoint 的作用</p>
</li>
<li>
<p>Checkpoint 的使用</p>
</li>
</ol></div>
</div>
</div>
<div class="sect2">
<h3 id="_5_1_checkpoint_的作用">5.1. Checkpoint 的作用</h3>
<div class="paragraph">
<p>Checkpoint 的主要作用是斩断 RDD 的依赖链, 并且将数据存储在可靠的存储引擎中, 例如支持分布式存储和副本机制的 HDFS.</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">Checkpoint 的方式</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p><strong>可靠的</strong>&nbsp;将数据存储在可靠的存储引擎中, 例如 HDFS</p>
</li>
<li>
<p><strong>本地的</strong>&nbsp;将数据存储在本地</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">什么是斩断依赖链</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>斩断依赖链是一个非常重要的操作, 接下来以 HDFS 的 NameNode 的原理来举例说明</p>
</div>
<div class="paragraph">
<p>HDFS 的 NameNode 中主要职责就是维护两个文件, 一个叫做&nbsp;<code>edits</code>, 另外一个叫做&nbsp;<code>fsimage</code>.&nbsp;<code>edits</code>&nbsp;中主要存放&nbsp;<code>EditLog</code>,&nbsp;<code>FsImage</code>&nbsp;保存了当前系统中所有目录和文件的信息. 这个&nbsp;<code>FsImage</code>&nbsp;其实就是一个&nbsp;<code>Checkpoint</code>.</p>
</div>
<div class="paragraph">
<p>HDFS 的 NameNode 维护这两个文件的主要过程是, 首先, 会由&nbsp;<code>fsimage</code>&nbsp;文件记录当前系统某个时间点的完整数据, 自此之后的数据并不是时刻写入&nbsp;<code>fsimage</code>, 而是将操作记录存储在&nbsp;<code>edits</code>&nbsp;文件中. 其次, 在一定的触发条件下,&nbsp;<code>edits</code>&nbsp;会将自身合并进入&nbsp;<code>fsimage</code>. 最后生成新的&nbsp;<code>fsimage</code>&nbsp;文件,&nbsp;<code>edits</code>&nbsp;重置, 从新记录这次&nbsp;<code>fsimage</code>&nbsp;以后的操作日志.</p>
</div>
<div class="paragraph">
<p>如果不合并&nbsp;<code>edits</code>&nbsp;进入&nbsp;<code>fsimage</code>&nbsp;会怎样? 会导致&nbsp;<code>edits</code>&nbsp;中记录的日志过长, 容易出错.</p>
</div>
<div class="paragraph">
<p>所以当 Spark 的一个 Job 执行流程过长的时候, 也需要这样的一个斩断依赖链的过程, 使得接下来的计算轻装上阵.</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">Checkpoint 和 Cache 的区别</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>Cache 可以把 RDD 计算出来然后放在内存中, 但是 RDD 的依赖链(相当于 NameNode 中的 Edits 日志)是不能丢掉的, 因为这种缓存是不可靠的, 如果出现了一些错误(例如 Executor 宕机), 这个 RDD 的容错就只能通过回溯依赖链, 重放计算出来.</p>
</div>
<div class="paragraph">
<p>但是 Checkpoint 把结果保存在 HDFS 这类存储中, 就是可靠的了, 所以可以斩断依赖, 如果出错了, 则通过复制 HDFS 中的文件来实现容错.</p>
</div>
<div class="paragraph">
<p>所以他们的区别主要在以下两点</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Checkpoint 可以保存数据到 HDFS 这类可靠的存储上, Persist 和 Cache 只能保存在本地的磁盘和内存中</p>
</li>
<li>
<p>Checkpoint 可以斩断 RDD 的依赖链, 而 Persist 和 Cache 不行</p>
</li>
<li>
<p>因为 CheckpointRDD 没有向上的依赖链, 所以程序结束后依然存在, 不会被删除. 而 Cache 和 Persist 会在程序结束后立刻被清除.</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_5_2_使用_checkpoint">5.2. 使用 Checkpoint</h3>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-scala hljs" data-lang="scala"><span class="hljs-keyword">val conf = <span class="hljs-keyword">new <span class="hljs-type">SparkConf().setMaster(<span class="hljs-string">"local[6]").setAppName(<span class="hljs-string">"debug_string")
<span class="hljs-keyword">val sc = <span class="hljs-keyword">new <span class="hljs-type">SparkContext(conf)
sc.setCheckpointDir(<span class="hljs-string">"checkpoint") <span class="conum" data-value="1">

<span class="hljs-keyword">val interimRDD = sc.textFile(<span class="hljs-string">"dataset/access_log_sample.txt")
  .map(item =&gt; (item.split(<span class="hljs-string">" ")(<span class="hljs-number">0), <span class="hljs-number">1))
  .filter(item =&gt; <span class="hljs-type">StringUtils.isNotBlank(item._1))
  .reduceByKey((curr, agg) =&gt; curr + agg)

interimRDD.checkpoint() <span class="conum" data-value="2">

interimRDD.collect().foreach(println(_))

sc.stop()</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<p>&nbsp;</p>
<p>1）在使用 Checkpoint 之前需要先设置 Checkpoint 的存储路径, 而且如果任务在集群中运行的话，这个路径必须是 HDFS 上的路径<br />2）开启 Checkpoint<br />一个小细节：<br />	val interimRDD = sc.textFile("dataset/access_log_sample.txt")<br />	  .map(item =&gt; (item.split(" ")(0), 1))<br />	  .filter(item =&gt; StringUtils.isNotBlank(item._1))<br />	  .reduceByKey((curr, agg) =&gt; curr + agg)<br />	  .cache() </p>
<p>	interimRDD.checkpoint()<br />	interimRDD.collect().foreach(println(_))<br />checkpoint 之前先 cache 一下, 准没错<br />应该在 checkpoint 之前先 cache 一下, 因为 checkpoint 会重新计算整个 RDD 的数据然后再存入 HDFS 等地方.</p>
<p>所以上述代码中如果 checkpoint 之前没有 cache, 则整个流程会被计算两次, 一次是 checkpoint, 另外一次是 collect。</p>


</div>
<div class="colist arabic">&nbsp;</div>


</div>


</div>


</div>


</div>


</div>


</div>


</div>]]></description></item><item><title>Update(Stage4)：spark_rdd算子：第2节 RDD_action算子_分区_缓存：算子和分区</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/28/11601938.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 28 Sep 2019 02:37:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/28/11601938.html</guid><description><![CDATA[<h2>一、reduce和reduceByKey：</h2>
<h2><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190928105210691-1619536246.png" alt="" /></h2>
<p>&nbsp;</p>
<h2>二、：RDD 的算子总结</h2>
<div class="sect2">
<div class="exampleblock">
<div class="content">
<div class="dlist"><dl><dt class="hdlist1">RDD 的算子大部分都会生成一些专用的 RDD</dt><dd>
<div class="ulist">
<ul>
<li>
<p><code>map</code>,&nbsp;<code>flatMap</code>,&nbsp;<code>filter</code>&nbsp;等算子会生成&nbsp;<code>MapPartitionsRDD</code></p>
</li>
<li>
<p><code>coalesce</code>,&nbsp;<code>repartition</code>&nbsp;等算子会生成&nbsp;<code>CoalescedRDD</code></p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">常见的 RDD 有两种类型</dt><dd>
<div class="ulist">
<ul>
<li>
<p>转换型的 RDD, Transformation</p>
</li>
<li>
<p>动作型的 RDD, Action</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">常见的 Transformation 类型的 RDD</dt><dd>
<div class="ulist">
<ul>
<li>
<p>map</p>
</li>
<li>
<p>flatMap</p>
</li>
<li>
<p>filter</p>
</li>
<li>
<p>groupBy</p>
</li>
<li>
<p>reduceByKey</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">常见的 Action 类型的 RDD</dt><dd>
<div class="ulist">
<ul>
<li>
<p>collect</p>
</li>
<li>
<p>countByKey</p>
</li>
<li>
<p>reduce</p>
</li>
</ul>
</div>
</dd></dl></div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_2_3_rdd_对不同类型数据的支持">2.3. RDD 对不同类型数据的支持</h3>
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>理解 RDD 对 Key-Value 类型的数据是有专门支持的</p>
</li>
<li>
<p>理解 RDD 对数字类型也有专门的支持</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">一般情况下 RDD 要处理的数据有三类</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>字符串</p>
</li>
<li>
<p>键值对</p>
</li>
<li>
<p>数字型</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">RDD 的算子设计对这三类不同的数据分别都有支持</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>对于以字符串为代表的基本数据类型是比较基础的一些的操作, 诸如 map, flatMap, filter 等基础的算子</p>
</li>
<li>
<p>对于键值对类型的数据, 有额外的支持, 诸如 reduceByKey, groupByKey 等 byKey 的算子</p>
</li>
<li>
<p>同样对于数字型的数据也有额外的支持, 诸如 max, min 等</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">RDD 对键值对数据的额外支持：</dt></dl>
<div class="sidebarblock" style="display: inline !important;">
<div class="content" style="display: inline !important;">
<div class="paragraph" style="display: inline !important;">
<p style="display: inline !important;">键值型数据本质上就是一个二元元组, 键值对类型的 RDD 表示为&nbsp;<code>RDD[(K, V)]</code></p>
</div>
</div>
</div>
<dl><dt class="hdlist1"></dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>RDD 对键值对的额外支持是通过隐式支持来完成的, 一个&nbsp;<code>RDD[(K, V)]</code>, 可以被隐式转换为一个&nbsp;<code>PairRDDFunctions</code>&nbsp;对象, 从而调用其中的方法.</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/3b365c28403495cb8d07a2ee5d0a6376.png" alt="3b365c28403495cb8d07a2ee5d0a6376" width="800" /></div>
</div>
<div class="dlist"><dl><dt class="hdlist1">既然对键值对的支持是通过&nbsp;<code>PairRDDFunctions</code>&nbsp;提供的, 那么从&nbsp;<code>PairRDDFunctions</code>&nbsp;中就可以看到这些支持有什么</dt></dl></div>
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">类别</th><th class="tableblock halign-left valign-top">算子</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top" rowspan="3">
<p class="tableblock">聚合操作</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>reduceByKey</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>foldByKey</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>combineByKey</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" rowspan="2">
<p class="tableblock">分组操作</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>cogroup</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>groupByKey</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" rowspan="3">
<p class="tableblock">连接操作</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>join</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>leftOuterJoin</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>rightOuterJoin</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" rowspan="2">
<p class="tableblock">排序操作</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>sortBy</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>sortByKey</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" rowspan="3">
<p class="tableblock">Action</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>countByKey</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>take</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>collect</code></p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd><dt class="hdlist1">RDD 对数字型数据的额外支持：</dt></dl>
<div class="sidebarblock" style="display: inline !important;">
<div class="content" style="display: inline !important;">
<div class="paragraph" style="display: inline !important;">
<p style="display: inline !important;">对于数字型数据的额外支持基本上都是 Action 操作, 而不是转换操作：</p>
</div>
</div>
</div>
<dl><dt class="hdlist1"></dt><dd>
<div class="sidebarblock">
<div class="content">
<table class="tableblock frame-all grid-all stretch"><colgroup><col /><col /></colgroup>
<thead>
<tr><th class="tableblock halign-left valign-top">算子</th><th class="tableblock halign-left valign-top">含义</th></tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>count</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">个数</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>mean</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">均值</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>sum</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">求和</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>max</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">最大值</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>min</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">最小值</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>variance</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">方差</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>sampleVariance</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">从采样中计算方差</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>stdev</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">标准差</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code>sampleStdev</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">采样的标准差</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</dd></dl></div>
</div>
<p>&nbsp;详见代码。</p>
<p>&nbsp;</p>
<h2>三、RDD 的 Shuffle 和分区：</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>RDD 的分区操作</p>
</li>
<li>
<p>Shuffle 的原理</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">分区的作用</dt><dd>
<p>RDD 使用分区来分布式并行处理数据, 并且要做到尽量少的在不同的 Executor 之间使用网络交换数据, 所以当使用 RDD 读取数据的时候, 会尽量的在物理上靠近数据源, 比如说在读取 Cassandra 或者 HDFS 中数据的时候, 会尽量的保持 RDD 的分区和数据源的分区数, 分区模式等一一对应</p>
</dd><dt class="hdlist1">分区和 Shuffle 的关系</dt><dd>
<p>分区的主要作用是用来实现并行计算, 本质上和 Shuffle 没什么关系, 但是往往在进行数据处理的时候, 例如`reduceByKey`, `groupByKey`等聚合操作, 需要把 Key 相同的 Value 拉取到一起进行计算, 这个时候因为这些 Key 相同的 Value 可能会坐落于不同的分区, 于是理解分区才能理解 Shuffle 的根本原理</p>
</dd><dt class="hdlist1">Spark 中的 Shuffle 操作的特点</dt><dd>
<div class="ulist">
<ul>
<li>
<p>只有&nbsp;<code>Key-Value</code>&nbsp;型的 RDD 才会有 Shuffle 操作, 例如&nbsp;<code>RDD[(K, V)]</code>, 但是有一个特例, 就是&nbsp;<code>repartition</code>&nbsp;算子可以对任何数据类型 Shuffle</p>
</li>
<li>
<p>早期版本 Spark 的 Shuffle 算法是&nbsp;<code>Hash base shuffle</code>, 后来改为&nbsp;<code>Sort base shuffle</code>, 更适合大吞吐量的场景</p>
</li>
</ul>
</div>
</dd></dl></div>
<div class="sect2">
<h3 id="_3_1_rdd_的分区操作">3.1. RDD 的分区操作</h3>
<div class="dlist"><dl><dt class="hdlist1">查看分区数</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">scala&gt; sc.parallelize(<span class="hljs-number">1 to <span class="hljs-number">100).count
res0: Long = <span class="hljs-number">100</span></span></span></code></pre>
</div>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/873af6194db362a1ab5432372aa8bd21.png" alt="873af6194db362a1ab5432372aa8bd21" width="800" /></div>
</div>
<div class="paragraph">
<p>之所以会有 8 个 Tasks, 是因为在启动的时候指定的命令是&nbsp;<code>spark-shell --master local[8]</code>, 这样会生成 1 个 Executors, 这个 Executors 有 8 个 Cores, 所以默认会有 8 个 Tasks, 每个 Cores 对应一个分区, 每个分区对应一个 Tasks, 可以通过&nbsp;<code>rdd.partitions.size</code>&nbsp;来查看分区数量</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/a41901e5af14f37c88b3f1ea9b97fbfb.png" alt="a41901e5af14f37c88b3f1ea9b97fbfb" width="800" /></div>
</div>
<div class="paragraph">
<p>同时也可以通过 spark-shell 的 WebUI 来查看 Executors 的情况</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/24b2646308923d7549a7758f7550e0a8.png" alt="24b2646308923d7549a7758f7550e0a8" width="800" /></div>
</div>
</div>
</div>
</dd></dl></div>
<div class="paragraph">
<p>默认的分区数量是和 Cores 的数量有关的, 也可以通过如下三种方式修改或者重新指定分区数量</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">创建 RDD 时指定分区数</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">scala&gt; val rdd1 = sc.parallelize(<span class="hljs-number">1 to <span class="hljs-number">100, <span class="hljs-number">6)
rdd1: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[<span class="hljs-number">1] at parallelize at &lt;console&gt;:<span class="hljs-number">24

scala&gt; rdd1.partitions.size
res1: Int = <span class="hljs-number">6

scala&gt; val rdd2 = sc.textFile(<span class="hljs-string">"hdfs:///dataset/wordcount.txt", <span class="hljs-number">6)
rdd2: org.apache.spark.rdd.RDD[String] = hdfs:<span class="hljs-comment">///dataset/wordcount.txt MapPartitionsRDD[3] at textFile at &lt;console&gt;:24

scala&gt; rdd2.partitions.size
res2: Int = <span class="hljs-number">7</span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>rdd1 是通过本地集合创建的, 创建的时候通过第二个参数指定了分区数量. rdd2 是通过读取 HDFS 中文件创建的, 同样通过第二个参数指定了分区数, 因为是从 HDFS 中读取文件, 所以最终的分区数是由 Hadoop 的 InputFormat 来指定的, 所以比指定的分区数大了一个.</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">通过`coalesce` 算子指定</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">coalesce(numPartitions: Int, shuffle: Boolean = <span class="hljs-keyword">false)(implicit ord: Ordering[T] = <span class="hljs-keyword">null): RDD[T]</span></span></code></pre>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">numPartitions</dt><dd>
<p>新生成的 RDD 的分区数</p>
</dd><dt class="hdlist1">shuffle</dt><dd>
<p>是否 Shuffle</p>
</dd></dl></div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="hljs javascript">scala&gt; val source = sc.parallelize(<span class="hljs-number">1 to <span class="hljs-number">100, <span class="hljs-number">6)
source: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[<span class="hljs-number">0] at parallelize at &lt;<span class="hljs-built_in">console&gt;:<span class="hljs-number">24

scala&gt; source.partitions.size
res0: Int = <span class="hljs-number">6

scala&gt; val noShuffleRdd = source.coalesce(numPartitions=<span class="hljs-number">8, shuffle=<span class="hljs-literal">false)
noShuffleRdd: org.apache.spark.rdd.RDD[Int] = CoalescedRDD[<span class="hljs-number">1] at coalesce at &lt;<span class="hljs-built_in">console&gt;:<span class="hljs-number">26

scala&gt; noShuffleRdd.toDebugString <span class="conum" data-value="1">
res1: <span class="hljs-built_in">String =
(<span class="hljs-number">6) CoalescedRDD[<span class="hljs-number">1] at coalesce at &lt;<span class="hljs-built_in">console&gt;:<span class="hljs-number">26 []
 |  ParallelCollectionRDD[<span class="hljs-number">0] at parallelize at &lt;<span class="hljs-built_in">console&gt;:<span class="hljs-number">24 []

 scala&gt; val noShuffleRdd = source.coalesce(numPartitions=<span class="hljs-number">8, shuffle=<span class="hljs-literal">false)
 noShuffleRdd: org.apache.spark.rdd.RDD[Int] = CoalescedRDD[<span class="hljs-number">1] at coalesce at &lt;<span class="hljs-built_in">console&gt;:<span class="hljs-number">26

scala&gt; shuffleRdd.toDebugString <span class="conum" data-value="2">
res3: <span class="hljs-built_in">String =
(<span class="hljs-number">8) MapPartitionsRDD[<span class="hljs-number">5] at coalesce at &lt;<span class="hljs-built_in">console&gt;:<span class="hljs-number">26 []
 |  CoalescedRDD[<span class="hljs-number">4] at coalesce at &lt;<span class="hljs-built_in">console&gt;:<span class="hljs-number">26 []
 |  ShuffledRDD[<span class="hljs-number">3] at coalesce at &lt;<span class="hljs-built_in">console&gt;:<span class="hljs-number">26 []
 +-(<span class="hljs-number">6) MapPartitionsRDD[<span class="hljs-number">2] at coalesce at &lt;<span class="hljs-built_in">console&gt;:<span class="hljs-number">26 []
    |  ParallelCollectionRDD[<span class="hljs-number">0] at parallelize at &lt;<span class="hljs-built_in">console&gt;:<span class="hljs-number">24 []

scala&gt; noShuffleRdd.partitions.size     <span class="conum" data-value="3">
res4: Int = <span class="hljs-number">6

scala&gt; shuffleRdd.partitions.size
res5: Int = <span class="hljs-number">8</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>如果&nbsp;<code>shuffle</code>&nbsp;参数指定为&nbsp;<code>false</code>, 运行计划中确实没有&nbsp;<code>ShuffledRDD</code>, 没有&nbsp;<code>shuffled</code>&nbsp;这个过程</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>如果&nbsp;<code>shuffle</code>&nbsp;参数指定为&nbsp;<code>true</code>, 运行计划中有一个&nbsp;<code>ShuffledRDD</code>, 有一个明确的显式的&nbsp;<code>shuffled</code>&nbsp;过程</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>如果&nbsp;<code>shuffle</code>&nbsp;参数指定为&nbsp;<code>false</code>&nbsp;却增加了分区数, 分区数并不会发生改变, 这是因为增加分区是一个宽依赖, 没有&nbsp;<code>shuffled</code>&nbsp;过程无法做到, 后续会详细解释宽依赖的概念</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</dd><dt class="hdlist1">通过&nbsp;<code>repartition</code>&nbsp;算子指定</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">repartition(numPartitions: Int)(implicit ord: Ordering[T] = <span class="hljs-keyword">null): RDD[T]</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><code>repartition</code>&nbsp;算子本质上就是&nbsp;<code>coalesce(numPartitions, shuffle = true)</code></p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/45d7a2b6e9e2727504e9cf28adbe6c49.png" alt="45d7a2b6e9e2727504e9cf28adbe6c49" width="800" /></div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="hljs yaml">scala&gt; val source = sc.parallelize(<span class="hljs-number">1 to <span class="hljs-number">100, <span class="hljs-number">6)
<span class="hljs-attr">source: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[<span class="hljs-number">7] at parallelize at &lt;console&gt;:<span class="hljs-number">24

scala&gt; source.partitions.size
<span class="hljs-attr">res7: Int = <span class="hljs-number">6

scala&gt; source.repartition(<span class="hljs-number">100).partitions.size <span class="conum" data-value="1">
<span class="hljs-attr">res8: Int = <span class="hljs-number">100

scala&gt; source.repartition(<span class="hljs-number">1).partitions.size <span class="conum" data-value="2">
<span class="hljs-attr">res9: Int = <span class="hljs-number">1</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tbody>
<tr>
<td>&nbsp;</td>
<td>增加分区有效</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>减少分区有效</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">
<p><code>repartition</code>&nbsp;算子无论是增加还是减少分区都是有效的, 因为本质上&nbsp;<code>repartition</code>&nbsp;会通过&nbsp;<code>shuffle</code>&nbsp;操作把数据分发给新的 RDD 的不同的分区, 只有&nbsp;<code>shuffle</code>&nbsp;操作才可能做到增大分区数, 默认情况下, 分区函数是&nbsp;<code>RoundRobin</code>, 如果希望改变分区函数, 也就是数据分布的方式, 可以通过自定义分区函数来实现</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/b1181258789202436ca6d2d92e604d59.png" alt="b1181258789202436ca6d2d92e604d59" width="800" /></div>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect2">
<h3 id="_3_2_rdd_的_shuffle_是什么">3.2. RDD 的 Shuffle 是什么</h3>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">val sourceRdd = sc.textFile(<span class="hljs-string">"hdfs://node01:9020/dataset/wordcount.txt")
val flattenCountRdd = sourceRdd.flatMap(_.split(<span class="hljs-string">" ")).map((_, <span class="hljs-number">1))
val aggCountRdd = flattenCountRdd.reduceByKey(_ + _)
val result = aggCountRdd.collect</span></span></span></code></pre>
</div>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/23377ac4a368fc94b6f8f3117af67154.png" alt="23377ac4a368fc94b6f8f3117af67154" width="800" /></div>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/10b536c17409ec37fa1f1b308b2b521e.png" alt="10b536c17409ec37fa1f1b308b2b521e" width="800" /></div>
</div>
<div class="paragraph">
<p><code>reduceByKey</code>&nbsp;这个算子本质上就是先按照 Key 分组, 后对每一组数据进行&nbsp;<code>reduce</code>, 所面临的挑战就是 Key 相同的所有数据可能分布在不同的 Partition 分区中, 甚至可能在不同的节点中, 但是它们必须被共同计算.</p>
</div>
<div class="paragraph">
<p>为了让来自相同 Key 的所有数据都在&nbsp;<code>reduceByKey</code>&nbsp;的同一个&nbsp;<code>reduce</code>&nbsp;中处理, 需要执行一个&nbsp;<code>all-to-all</code>&nbsp;的操作, 需要在不同的节点(不同的分区)之间拷贝数据, 必须跨分区聚集相同 Key 的所有数据, 这个过程叫做&nbsp;<code>Shuffle</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_3_3_rdd_的_shuffle_原理">3.3. RDD 的 Shuffle 原理</h3>
<div class="paragraph">
<p>Spark 的 Shuffle 发展大致有两个阶段:&nbsp;<code>Hash base shuffle</code>&nbsp;和&nbsp;<code>Sort base shuffle</code></p>
</div>
<div class="dlist"><dl><dt class="hdlist1">Hash base shuffle</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/2daf43cc1750fffab62ae5e16fab54c2.png" alt="2daf43cc1750fffab62ae5e16fab54c2" /></div>
</div>
<div class="paragraph">
<p>大致的原理是分桶, 假设 Reducer 的个数为 R, 那么每个 Mapper 有 R 个桶, 按照 Key 的 Hash 将数据映射到不同的桶中, Reduce 找到每一个 Mapper 中对应自己的桶拉取数据.</p>
</div>
<div class="paragraph">
<p>假设 Mapper 的个数为 M, 整个集群的文件数量是&nbsp;<code>M * R</code>, 如果有 1,000 个 Mapper 和 Reducer, 则会生成 1,000,000 个文件, 这个量非常大了.</p>
</div>
<div class="paragraph">
<p>过多的文件会导致文件系统打开过多的文件描述符, 占用系统资源. 所以这种方式并不适合大规模数据的处理, 只适合中等规模和小规模的数据处理, 在 Spark 1.2 版本中废弃了这种方式.</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">Sort base shuffle</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/94f038994f8553dd32370ae78878d038.png" alt="94f038994f8553dd32370ae78878d038" /></div>
</div>
<div class="paragraph">
<p>对于 Sort base shuffle 来说, 每个 Map 侧的分区只有一个输出文件, Reduce 侧的 Task 来拉取, 大致流程如下</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>Map 侧将数据全部放入一个叫做 AppendOnlyMap 的组件中, 同时可以在这个特殊的数据结构中做聚合操作</p>
</li>
<li>
<p>然后通过一个类似于 MergeSort 的排序算法 TimSort 对 AppendOnlyMap 底层的 Array 排序</p>
<div class="ulist">
<ul>
<li>
<p>先按照 Partition ID 排序, 后按照 Key 的 HashCode 排序</p>
</li>
</ul>
</div>
</li>
<li>
<p>最终每个 Map Task 生成一个 输出文件, Reduce Task 来拉取自己对应的数据</p>
</li>
</ol></div>
<div class="paragraph">
<p>从上面可以得到结论, Sort base shuffle 确实可以大幅度减少所产生的中间文件, 从而能够更好的应对大吞吐量的场景, 在 Spark 1.2 以后, 已经默认采用这种方式.</p>
</div>
<div class="paragraph">
<p>但是需要大家知道的是, Spark 的 Shuffle 算法并不只是这一种, 即使是在最新版本, 也有三种 Shuffle 算法, 这三种算法对每个 Map 都只产生一个临时文件, 但是产生文件的方式不同, 一种是类似 Hash 的方式, 一种是刚才所说的 Sort, 一种是对 Sort 的一种优化(使用 Unsafe API 直接申请堆外内存)</p>
</div>
</div>
</div>
</dd></dl></div>
</div>
</div>
<p>&nbsp;</p>]]></description></item><item><title>Update(Stage4)：spark_rdd算子：第1节 RDD_定义_转换算子：深入RDD</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/25/11588252.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 25 Sep 2019 15:04:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/25/11588252.html</guid><description><![CDATA[<h2>一、</h2>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190925230151273-1471337948.png" alt="" /></p>
<p>&nbsp;</p>
<h2>二、案例：详见代码。针对案例提出的6个问题：</h2>
<ol>
<li>
<p><em>假设要针对整个网站的历史数据进行处理, 量有 1T, 如何处理?</em></p>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>放在集群中, 利用集群多台计算机来并行处理</p>
</div>
</div>
</div>
</li>
<li>
<p><em>如何放在集群中运行?</em></p>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/6088be299490adbaaeece8717ae985e8.png" alt="6088be299490adbaaeece8717ae985e8" width="800" /></div>
</div>
<div class="dlist"><dl><dt class="hdlist1">简单来讲, 并行计算就是同时使用多个计算资源解决一个问题, 有如下四个要点</dt><dd>
<div class="ulist">
<ul>
<li>
<p>要解决的问题必须可以分解为多个可以并发计算的部分</p>
</li>
<li>
<p>每个部分要可以在不同处理器上被同时执行</p>
</li>
<li>
<p><strong>需要一个共享内存的机制</strong></p>
</li>
<li>
<p>需要一个总体上的协作机制来进行调度</p>
</li>
</ul>
</div>
</dd></dl></div>
</div>
</div>
</li>
<li>
<p><em>如果放在集群中的话, 可能要对整个计算任务进行分解, 如何分解?</em></p>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/f738dbe3df690bc0ba8f580a3e2d1112.png" alt="f738dbe3df690bc0ba8f580a3e2d1112" width="800" /></div>
</div>
<div class="dlist"><dl><dt class="hdlist1">概述</dt><dd>
<div class="ulist">
<ul>
<li>
<p>对于 HDFS 中的文件, 是分为不同的 Block 的</p>
</li>
<li>
<p>在进行计算的时候, 就可以按照 Block 来划分, 每一个 Block 对应一个不同的计算单元</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">扩展</dt><dd>
<div class="ulist">
<ul>
<li>
<p><code>RDD</code>&nbsp;并没有真实的存放数据, 数据是从 HDFS 中读取的, 在计算的过程中读取即可</p>
</li>
<li>
<p><code>RDD</code>&nbsp;至少是需要可以&nbsp;<strong>分片</strong>&nbsp;的, 因为HDFS中的文件就是分片的,&nbsp;<code>RDD</code>&nbsp;分片的意义在于表示对源数据集每个分片的计算,&nbsp;<code>RDD</code>&nbsp;可以分片也意味着&nbsp;<strong>可以并行计算</strong></p>
</li>
</ul>
</div>
</dd></dl></div>
</div>
</div>
</li>
<li>
<p><em>移动数据不如移动计算是一个基础的优化, 如何做到?</em></p>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/1d344ab200bd12866c26ca2ea6ab1e37.png" alt="1d344ab200bd12866c26ca2ea6ab1e37" width="800" /></div>
</div>
<div class="paragraph">
<p>每一个计算单元需要记录其存储单元的位置, 尽量调度过去</p>
</div>
</div>
</div>
</li>
<li>
<p><em>在集群中运行, 需要很多节点之间配合, 出错的概率也更高, 出错了怎么办?</em></p>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/5c7bef41f177a96e99c7ad8a500b7310.png" alt="5c7bef41f177a96e99c7ad8a500b7310" width="800" /></div>
</div>
<div class="dlist"><dl><dt class="hdlist1">RDD1 &rarr; RDD2 &rarr; RDD3 这个过程中, RDD2 出错了, 有两种办法可以解决</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>缓存 RDD2 的数据, 直接恢复 RDD2, 类似 HDFS 的备份机制</p>
</li>
<li>
<p>记录 RDD2 的依赖关系, 通过其父级的 RDD 来恢复 RDD2, 这种方式会少很多数据的交互和保存</p>
</li>
</ol></div>
</dd><dt class="hdlist1">如何通过父级 RDD 来恢复?</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>记录 RDD2 的父亲是 RDD1</p>
</li>
<li>
<p>记录 RDD2 的计算函数, 例如记录&nbsp;<code>RDD2 = RDD1.map(&hellip;​)</code>,&nbsp;<code>map(&hellip;​)</code>&nbsp;就是计算函数</p>
</li>
<li>
<p>当 RDD2 计算出错的时候, 可以通过父级 RDD 和计算函数来恢复 RDD2</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</li>
<li>
<p><em>假如任务特别复杂, 流程特别长, 有很多 RDD 之间有依赖关系, 如何优化?</em></p>
<div class="sidebarblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/dc87ed7f9b653bccb43d099bbb4f537f.png" alt="dc87ed7f9b653bccb43d099bbb4f537f" width="800" /></div>
</div>
<div class="paragraph">
<p>上面提到了可以使用依赖关系来进行容错, 但是如果依赖关系特别长的时候, 这种方式其实也比较低效, 这个时候就应该使用另外一种方式, 也就是记录数据集的状态</p>
</div>
<div class="dlist"><dl><dt class="hdlist1">在 Spark 中有两个手段可以做到</dt><dd>
<div class="olist arabic"><ol class="arabic">
<li>
<p>缓存</p>
</li>
<li>
<p>Checkpoint</p>
</li>
</ol></div>
</dd></dl></div>
</div>
</div>
</li>
</ol>
<p>&nbsp;</p>
<h2>三、</h2>
<h3 id="_1_2_再谈_rdd">1.2. 再谈 RDD</h3>
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>理解 RDD 为什么会出现</p>
</li>
<li>
<p>理解 RDD 的主要特点</p>
</li>
<li>
<p>理解 RDD 的五大属性</p>
</li>
</ol></div>
</div>
</div>
<div class="sect3">
<h4 id="_1_2_1_rdd_为什么会出现">1.2.1. RDD 为什么会出现?</h4>
<div class="dlist"><dl><dt class="hdlist1">在 RDD 出现之前, 当时 MapReduce 是比较主流的, 而 MapReduce 如何执行迭代计算的任务呢?</dt><dd>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/306061ee343d8515ecafbce43bc54bc6.png" alt="306061ee343d8515ecafbce43bc54bc6" width="800" /></div>
</div>
<div class="paragraph">
<p>多个 MapReduce 任务之间没有基于内存的数据共享方式, 只能通过磁盘来进行共享</p>
</div>
<div class="paragraph">
<p>这种方式明显比较低效</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">RDD 如何解决迭代计算非常低效的问题呢?</dt><dd>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/4fc644616fb13ef896eb3a8cea5d3bd7.png" alt="4fc644616fb13ef896eb3a8cea5d3bd7" width="800" /></div>
</div>
<div class="paragraph">
<p>在 Spark 中, 其实最终 Job3 从逻辑上的计算过程是:&nbsp;<code>Job3 = (Job1.map).filter</code>, 整个过程是共享内存的, 而不需要将中间结果存放在可靠的分布式文件系统中</p>
</div>
<div class="paragraph">
<p>这种方式可以在保证容错的前提下, 提供更多的灵活, 更快的执行速度, RDD 在执行迭代型任务时候的表现可以通过下面代码体现</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java"><span class="hljs-comment">// 线性回归
val points = sc.textFile(...)
	.map(...)
	.persist(...)
val w = <span class="hljs-function">randomValue
<span class="hljs-title">for <span class="hljs-params">(i &lt;- <span class="hljs-number">1 to <span class="hljs-number">10000) {
    val gradient = points.map(p =&gt; p.x * (<span class="hljs-number">1 / (<span class="hljs-number">1 + exp(-p.y * (w dot p.x))) - <span class="hljs-number">1) * p.y)
    	.reduce(_ + _)
    w -= gradient
}</span></span></span></span></span></span></span></span></span></code></pre>
</div>
</div>
<div class="paragraph">
<p>在这个例子中, 进行了大致 10000 次迭代, 如果在 MapReduce 中实现, 可能需要运行很多 Job, 每个 Job 之间都要通过 HDFS 共享结果, 熟快熟慢一窥便知</p>
</div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect3">
<h4 id="_1_2_2_rdd_的特点">1.2.2. RDD 的特点</h4>
<div class="dlist"><dl><dt class="hdlist1">RDD 不仅是数据集, 也是编程模型</dt><dd>
<div class="openblock">
<div class="content">
<div class="paragraph">
<p>RDD 即是一种数据结构, 同时也提供了上层 API, 同时 RDD 的 API 和 Scala 中对集合运算的 API 非常类似, 同样也都是各种算子</p>
</div>
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/02adfc1bcd91e70c1619fc6a67b13f92.png" alt="02adfc1bcd91e70c1619fc6a67b13f92" width="800" /></div>
</div>
<div class="paragraph">
<p>RDD 的算子大致分为两类:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Transformation 转换操作, 例如&nbsp;<code>map</code>&nbsp;<code>flatMap</code>&nbsp;<code>filter</code>&nbsp;等</p>
</li>
<li>
<p>Action 动作操作, 例如&nbsp;<code>reduce</code>&nbsp;<code>collect</code>&nbsp;<code>show</code>&nbsp;等</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>执行 RDD 的时候, 在执行到转换操作的时候, 并不会立刻执行, 直到遇见了 Action 操作, 才会触发真正的执行, 这个特点叫做&nbsp;<strong>惰性求值</strong></p>
</div>
</div>
</div>
</dd><dt class="hdlist1">RDD 可以分区</dt><dd>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/2ba2cc9ad8e745c26df482b4e968c802.png" alt="2ba2cc9ad8e745c26df482b4e968c802" width="800" /></div>
</div>
<div class="paragraph">
<p>RDD 是一个分布式计算框架, 所以, 一定是要能够进行分区计算的, 只有分区了, 才能利用集群的并行计算能力</p>
</div>
<div class="paragraph">
<p>同时, RDD 不需要始终被具体化, 也就是说: RDD 中可以没有数据, 只要有足够的信息知道自己是从谁计算得来的就可以, 这是一种非常高效的容错方式</p>
</div>
</div>
</div>
</dd><dt class="hdlist1">RDD 是只读的</dt><dd>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/ed6a534cfe0a56de3c34ac6e1e8d504e.png" alt="ed6a534cfe0a56de3c34ac6e1e8d504e" width="800" /></div>
</div>
<div class="paragraph">
<p>RDD 是只读的, 不允许任何形式的修改. 虽说不能因为 RDD 和 HDFS 是只读的, 就认为分布式存储系统必须设计为只读的. 但是设计为只读的, 会显著降低问题的复杂度, 因为 RDD 需要可以容错, 可以惰性求值, 可以移动计算, 所以很难支持修改.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>RDD2 中可能没有数据, 只是保留了依赖关系和计算函数, 那修改啥?</p>
</li>
<li>
<p>如果因为支持修改, 而必须保存数据的话, 怎么容错?</p>
</li>
<li>
<p>如果允许修改, 如何定位要修改的那一行? RDD 的转换是粗粒度的, 也就是说, RDD 并不感知具体每一行在哪.</p>
</li>
</ul>
</div>
</div>
</div>
</dd><dt class="hdlist1">RDD 是可以容错的</dt><dd>
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/5c7bef41f177a96e99c7ad8a500b7310.png" alt="5c7bef41f177a96e99c7ad8a500b7310" width="800" /></div>
</div>
<div class="dlist"><dl><dt class="hdlist1">RDD 的容错有两种方式</dt><dd>
<div class="ulist">
<ul>
<li>
<p>保存 RDD 之间的依赖关系, 以及计算函数, 出现错误重新计算</p>
</li>
<li>
<p>直接将 RDD 的数据存放在外部存储系统, 出现错误直接读取, Checkpoint</p>
</li>
</ul>
</div>
</dd></dl></div>
</div>
</div>
</dd></dl></div>
</div>
<div class="sect3">
<h4 id="_1_2_3_什么叫做弹性分布式数据集">1.2.3. 什么叫做弹性分布式数据集</h4>
<div class="dlist"><dl><dt class="hdlist1">分布式</dt><dd>
<p>RDD 支持分区, 可以运行在集群中</p>
</dd><dt class="hdlist1">弹性</dt><dd>
<div class="ulist">
<ul>
<li>
<p>RDD 支持高效的容错</p>
</li>
<li>
<p>RDD 中的数据即可以缓存在内存中, 也可以缓存在磁盘中, 也可以缓存在外部存储中</p>
</li>
</ul>
</div>
</dd><dt class="hdlist1">数据集</dt><dd>
<div class="ulist">
<ul>
<li>
<p>RDD 可以不保存具体数据, 只保留创建自己的必备信息, 例如依赖和计算函数</p>
</li>
<li>
<p>RDD 也可以缓存起来, 相当于存储具体数据</p>
</li>
</ul>
</div>
</dd></dl></div>
<div class="sidebarblock">
<div class="content">
<div class="title">总结: RDD 的五大属性</div>
<div class="paragraph">
<p>首先整理一下上面所提到的 RDD 所要实现的功能:</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>RDD 有分区</p>
</li>
<li>
<p>RDD 要可以通过依赖关系和计算函数进行容错</p>
</li>
<li>
<p>RDD 要针对数据本地性进行优化</p>
</li>
<li>
<p>RDD 支持 MapReduce 形式的计算, 所以要能够对数据进行 Shuffled</p>
</li>
</ol></div>
<div class="paragraph">
<p>对于 RDD 来说, 其中应该有什么内容呢? 如果站在 RDD 设计者的角度上, 这个类中, 至少需要什么属性?</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Partition List</code>&nbsp;分片列表, 记录 RDD 的分片, 可以在创建 RDD 的时候指定分区数目, 也可以通过算子来生成新的 RDD 从而改变分区数目</p>
</li>
<li>
<p><code>Compute Function</code>&nbsp;为了实现容错, 需要记录 RDD 之间转换所执行的计算函数</p>
</li>
<li>
<p><code>RDD Dependencies</code>&nbsp;RDD 之间的依赖关系, 要在 RDD 中记录其上级 RDD 是谁, 从而实现容错和计算</p>
</li>
<li>
<p><code>Partitioner</code>&nbsp;为了执行 Shuffled 操作, 必须要有一个函数用来计算数据应该发往哪个分区</p>
</li>
<li>
<p><code>Preferred Location</code>&nbsp;优先位置, 为了实现数据本地性操作, 从而移动计算而不是移动存储, 需要记录每个 RDD 分区最好应该放置在什么位置</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2 id="_2_rdd_的算子">四、RDD 的算子：</h2>
<div class="sectionbody">
<div class="exampleblock">
<div class="title">目标</div>
<div class="content">
<div class="olist arabic"><ol class="arabic">
<li>
<p>理解 RDD 的算子分类, 以及其特性</p>
</li>
<li>
<p>理解常见算子的使用</p>
</li>
</ol></div>
</div>
</div>
<div class="dlist"><dl><dt class="hdlist1">分类</dt><dd>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>RDD 中的算子从功能上分为两大类：</p>
</div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>Transformation(转换) 它会在一个已经存在的 RDD 上创建一个新的 RDD, 将旧的 RDD 的数据转换为另外一种形式后放入新的 RDD</p>
</li>
<li>
<p>Action(动作) 执行各个分区的计算任务, 将的到的结果返回到 Driver 中</p>
</li>
</ol></div>
<div class="paragraph">
<p>RDD 中可以存放各种类型的数据, 那么对于不同类型的数据, RDD 又可以分为三类：</p>
</div>
<div class="ulist">
<ul>
<li>
<p>针对基础类型(例如 String)处理的普通算子</p>
</li>
<li>
<p>针对&nbsp;<code>Key-Value</code>&nbsp;数据处理的&nbsp;<code>byKey</code>&nbsp;算子</p>
</li>
<li>
<p>针对数字类型数据处理的计算算子</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
</div>
<p>特点</p>
<div class="sidebarblock">
<div class="content">
<div class="ulist">
<ul>
<li>
<p>Spark 中所有的 Transformations 是 Lazy(惰性) 的, 它们不会立即执行获得结果. 相反, 它们只会记录在数据集上要应用的操作. 只有当需要返回结果给 Driver 时, 才会执行这些操作, 通过 DAGScheduler 和 TaskScheduler 分发到集群中运行, 这个特性叫做&nbsp;<span style="color: #ff0000;"><strong>惰性求值</strong></span></p>
</li>
<li>
<p>默认情况下, 每一个 Action 运行的时候, 其所关联的所有 Transformation RDD 都会重新计算, 但是也可以使用&nbsp;<code>presist</code>&nbsp;方法将 RDD 持久化到磁盘或者内存中. 这个时候为了下次可以更快的访问, 会把数据保存到集群上.</p>
</li>
</ul>
</div>
</div>
</div>
<p>各类算子的举例，详见代码。</p>
<p>&nbsp;</p>
<h2>五、rdd算子的名称，规定了算子的功能、基调；传入算子的参数函数，规定了具体的实现方法。</h2>
<p>&nbsp;</p>
<h2>六、combineByKey算子：</h2>
<p>举例说明：<img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190927224937821-161777991.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>作用</p>
<div class="ulist">
<ul>
<li>
<p>对数据集按照 Key 进行聚合</p>
</li>
</ul>
</div>
<p>调用</p>
<div class="ulist">
<ul>
<li>
<p><code>combineByKey(createCombiner, mergeValue, mergeCombiners, [partitioner], [mapSideCombiner], [serializer])</code></p>
</li>
</ul>
</div>
<p>参数</p>
<div class="ulist">
<ul>
<li>
<p><code>createCombiner</code>&nbsp;将 Value 进行初步转换</p>
</li>
<li>
<p><code>mergeValue</code>&nbsp;在每个分区把上一步转换的结果聚合</p>
</li>
<li>
<p><code>mergeCombiners</code>&nbsp;在所有分区上把每个分区的聚合结果聚合</p>
</li>
<li>
<p><code>partitioner</code>&nbsp;可选, 分区函数</p>
</li>
<li>
<p><code>mapSideCombiner</code>&nbsp;可选, 是否在 Map 端 Combine</p>
</li>
<li>
<p><code>serializer</code>&nbsp;序列化器</p>
</li>
</ul>
</div>
<p>注意点</p>
<div class="ulist">
<ul>
<li>
<p><code>combineByKey</code>&nbsp;的要点就是三个函数的意义要理解</p>
</li>
<li>
<p><code>groupByKey</code>,&nbsp;<code>reduceByKey</code>&nbsp;的底层都是&nbsp;<code>combineByKey</code></p>
</li>
</ul>
</div>
<p>&nbsp;详见代码。</p>
<p>&nbsp;</p>]]></description></item><item><title>idea使用小技巧</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/16/11530666.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 16 Sep 2019 14:20:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/16/11530666.html</guid><description><![CDATA[<p>1.按住alt，鼠标往下拉一条直线，可以选中一列或多列，或者不选中任何文字，可以让光标定位到这几行的相同的列的位置，然后输入文本，发现在被选中的所有行同时输入了这些文本（类似notepad++）：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190916221956906-257546663.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>2.</p>
<p>&nbsp;</p>]]></description></item><item><title>Notepad++查看文本文件的总的字符数、GBK字节数、UTF8字节数</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/16/11530573.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 16 Sep 2019 14:01:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/16/11530573.html</guid><description><![CDATA[<p>如果其编码是</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190916215604932-238944065.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190916215719184-1549091572.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>小结：UTF-8编码下，一个汉字占3字节，GBK编码下，一个汉字占2字节：</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190916220008355-283702520.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>idea中scala项目补全变量、添加打印语句的小技巧</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/13/11517231.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 13 Sep 2019 09:24:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/13/11517231.html</guid><description><![CDATA[<p>1. 自动补全变量：</p>
<p>new Person.var&nbsp; ，然后按回车键；效果：代码变成： val person: Person = new Person</p>
<p>&nbsp;</p>
<p>2.添加打印语句：</p>
<p>person.name.prln （也可以是prtln） ，然后按回车键。效果，代码变成： println(person.name)</p>]]></description></item><item><title>Base64</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/11/11509223.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 11 Sep 2019 14:23:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/11/11509223.html</guid><description><![CDATA[<div class="para">Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。可查看RFC2045～RFC2049，上面有MIME的详细规范。</div>
<div class="para">Base64编码是从二进制到字符的过程，可用于在HTTP环境下传递较长的标识信息。采用Base64编码具有不可读性，需要解码后才能阅读。</div>
<div class="para">Base64由于以上优点被广泛应用于计算机的各个领域，然而由于输出内容中包括两个以上&ldquo;符号类&rdquo;字符（+, /, =)，不同的应用场景又分别研制了Base64的各种&ldquo;变种&rdquo;。为统一和规范化Base64的输出，Base62x被视为无符号化的改进版本。</div>
<div class="para">&nbsp;</div>
<div class="para">
<div class="para">标准的Base64并不适合直接放在URL里传输，因为URL编码器会把标准Base64中的&ldquo;/&rdquo;和&ldquo;+&rdquo;字符变为形如&ldquo;%XX&rdquo;的形式，而这些&ldquo;%&rdquo;号在存入数据库时还需要再进行转换，因为ANSI SQL中已将&ldquo;%&rdquo;号用作通配符。</div>
<div class="para">为解决此问题，可采用一种用于URL的改进Base64编码，它在末尾填充'='号，并将标准Base64中的&ldquo;+&rdquo;和&ldquo;/&rdquo;分别改成了&ldquo;-&rdquo;和&ldquo;_&rdquo;，这样就免去了在URL编解码和数据库存储时所要作的转换，避免了编码信息长度在此过程中的增加，并统一了数据库、表单等处对象标识符的格式。</div>
<div class="para">另有一种用于正则表达式的改进Base64变种，它将&ldquo;+&rdquo;和&ldquo;/&rdquo;改成了&ldquo;!&rdquo;和&ldquo;-&rdquo;，因为&ldquo;+&rdquo;,&ldquo;*&rdquo;以及前面在IRCu中用到的&ldquo;[&rdquo;和&ldquo;]&rdquo;在正则表达式中都可能具有特殊含义。</div>
<div class="para">此外还有一些变种，它们将&ldquo;+/&rdquo;改为&ldquo;_-&rdquo;或&ldquo;._&rdquo;（用作编程语言中的标识符名称）或&ldquo;.-&rdquo;（用于XML中的Nmtoken）甚至&ldquo;_:&rdquo;（用于XML中的Name）。</div>
<div class="para">Base64要求把每三个8Bit的字节转换为四个6Bit的字节（3*8 = 4*6 = 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，转换后的字符串理论上将要比原来的长1/3。</div>
<div class="para-title level-3">
<h3 class="title-text">规则</h3>
</div>
<div class="para">关于这个编码的规则：</div>
<div class="para">①.把3个字节变成4个字节。</div>
<div class="para">②每76个字符加一个换行符。</div>
<div class="para">③.最后的结束符也要处理。</div>
<div class="para-title level-3">
<h3 class="title-text">例子1</h3>
</div>
<div class="para">转换前 11111111, 11111111, 11111111 （二进制）</div>
<div class="para">转换后 00111111, 00111111, 00111111, 00111111 （二进制）</div>
<div class="para">上面的三个字节是原文，下面的四个字节是转换后的Base64编码，其前两位均为0。</div>
<div class="para">转换后，我们用一个码表来得到我们想要的字符串（也就是最终的Base64编码），这个表是这样的：（摘自RFC2045）</div>
<div class="para">转换表</div>
</div>
<div class="para">
<div class="para">Table 1: The Base64 Alphabet</div>
<br class="Apple-interchange-newline" />
<table class="table-view log-set-param">
<tbody>
<tr>
<td align="left" valign="center" width="66">
<div class="para">索引</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">对应字符</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">索引</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">对应字符</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">索引</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">对应字符</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">索引</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">对应字符</div>


</td>


</tr>
<tr>
<td align="left" valign="center" width="66">
<div class="para">0</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">A</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">17</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">R</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">34</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">i</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">51</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">z</div>


</td>


</tr>
<tr>
<td align="left" valign="center" width="66">
<div class="para">1</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">B</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">18</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">S</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">35</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">j</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">52</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">0</div>


</td>


</tr>
<tr>
<td align="left" valign="center" width="66">
<div class="para">2</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">C</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">19</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">T</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">36</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">k</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">53</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">1</div>


</td>


</tr>
<tr>
<td align="left" valign="center" width="66">
<div class="para">3</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">D</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">20</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">U</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">37</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">l</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">54</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">2</div>


</td>


</tr>
<tr>
<td align="left" valign="center" width="66">
<div class="para">4</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">E</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">21</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">V</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">38</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">m</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">55</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">3</div>


</td>


</tr>
<tr>
<td align="left" valign="center" width="66">
<div class="para">5</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">F</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">22</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">W</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">39</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">n</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">56</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">4</div>


</td>


</tr>
<tr>
<td align="left" valign="center" width="66">
<div class="para">6</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">G</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">23</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">X</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">40</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">o</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">57</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">5</div>


</td>


</tr>
<tr>
<td align="left" valign="center" width="66">
<div class="para">7</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">H</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">24</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">Y</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">41</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">p</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">58</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">6</div>


</td>


</tr>
<tr>
<td align="left" valign="center" width="66">
<div class="para">8</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">I</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">25</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">Z</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">42</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">q</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">59</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">7</div>


</td>


</tr>
<tr>
<td align="left" valign="center" width="66">
<div class="para">9</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">J</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">26</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">a</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">43</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">r</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">60</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">8</div>


</td>


</tr>
<tr>
<td align="left" valign="center" width="66">
<div class="para">10</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">K</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">27</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">b</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">44</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">s</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">61</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">9</div>


</td>


</tr>
<tr>
<td align="left" valign="center" width="66">
<div class="para">11</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">L</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">28</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">c</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">45</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">t</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">62</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">+</div>


</td>


</tr>
<tr>
<td align="left" valign="center" width="66">
<div class="para">12</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">M</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">29</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">d</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">46</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">u</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">63</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">/</div>


</td>


</tr>
<tr>
<td align="left" valign="center" width="66">
<div class="para">13</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">N</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">30</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">e</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">47</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">v</div>


</td>
<td>&nbsp;</td>
<td>&nbsp;</td>


</tr>
<tr>
<td align="left" valign="center" width="66">
<div class="para">14</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">O</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">31</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">f</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">48</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">w</div>


</td>
<td>&nbsp;</td>
<td>&nbsp;</td>


</tr>
<tr>
<td align="left" valign="center" width="66">
<div class="para">15</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">P</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">32</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">g</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">49</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">x</div>


</td>
<td>&nbsp;</td>
<td>&nbsp;</td>


</tr>
<tr>
<td align="left" valign="center" width="66">
<div class="para">16</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">Q</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">33</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">h</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">50</div>


</td>
<td align="left" valign="center" width="66">
<div class="para">y</div>


</td>
<td>&nbsp;</td>


</tr>


</tbody>


</table>
<div class="para-title level-3">
<h3 class="title-text">例子2</h3>

</div>
<div class="para">转换前 10101101,10111010,01110110</div>
<div class="para">转换后 00101011, 00011011 ,00101001 ,00110110</div>
<div class="para">十进制 43 27 41 54</div>
<div class="para">对应码表中的值 r b p 2</div>
<div class="para">所以上面的24位编码，编码后的Base64值为 rbp2</div>
<div class="para">解码同理，把 rbq2 的二进制位连接上再重组得到三个8位值，得出原码。</div>
<div class="para">（解码只是编码的逆过程，有关MIME的RFC还有很多，如果需要详细情况请自行查找。）</div>
<div class="para">第一个字节，根据源字节的第一个字节处理。</div>
<div class="para">规则：源第一字节右移两位，去掉低2位，高2位补零。</div>
<div class="para">既：00 + 高6位</div>
<div class="para">第二个字节，根据源字节的第一个字节和第二个字节联合处理。</div>
<div class="para">规则如下，第一个字节高6位去掉然后左移四位，第二个字节右移四位</div>
<div class="para">即：源第一字节低2位 + 源第2字节高4位</div>
<div class="para">第三个字节，根据源字节的第二个字节和第三个字节联合处理，</div>
<div class="para">规则第二个字节去掉高4位并左移两位（得高6位），第三个字节右移6位并去掉高6位（得低2位），相加即可</div>
<div class="para">第四个字节，规则，源第三字节去掉高2位即可</div>
<div class="para">//用更接近于编程的思维来说，编码的过程是这样的：</div>
<div class="para">//第一个字符通过右移2位获得第一个目标字符的Base64表位置，根据这个数值取到表上相应的字符，就是第一//个目标字符。</div>
<div class="para">//然后将第一个字符与0x03(00000011)进行与(&amp;)操作并左移4位,接着第二个字符右移4位与前者相或(|)，即获得第二个目标字符。</div>
<div class="para">//再将第二个字符与0x0f(00001111)进行与(&amp;)操作并左移2位,接着第三个字符右移6位与前者相或(|)，获得第三个目标字符。</div>
<div class="para">//最后将第三个字符与0x3f(00111111)进行与(&amp;)操作即获得第四个目标字符。</div>
<div class="para">//在以上的每一个步骤之后，再把结果与 0x3F 进行 AND&nbsp;位操作，就可以得到编码后的字符了。</div>
<div class="para">原文的字节数量应该是3的倍数，如果这个条件不能满足的话，具体的解决办法是这样的：原文剩余的字节根据编码规则继续单独转(1变2，2变3；不够的位数用0补全)，再用=号补满4个字节。这就是为什么有些Base64编码会以一个或两个等号结束的原因，但等号最多只有两个。因为一个原字节至少会变成两个目标字节，所以余数任何情况下都只可能是0，1，2这三个数中的一个。如果余数是0的话，就表示原文字节数正好是3的倍数（最理想的情况）。如果是1的话，转成2个Base64编码字符，为了让Base64编码是4的倍数，就要补2个等号；同理，如果是2的话，就要补1个等号。</div>
<div class="anchor-list">&nbsp;</div>
<div class="para-title level-2">
<h2 class="title-text">原理</h2>

</div>
<div class="para">转码过程例子：</div>
<div class="para">3*8=4*6</div>
<div class="para">内存1个字节占8位</div>
<div class="para">转前： s 1 3</div>
<div class="para">先转成ascii：对应 115 49 51</div>
<div class="para">2进制： 01110011 00110001 00110011</div>
<div class="para">6个一组（4组）&nbsp;011100110011000100110011</div>
<div class="para">然后才有后面的 011100 110011 000100 110011</div>
<div class="para">然后计算机一个字节占8位，不够就自动补两个高位0了</div>
<div class="para">所以有了高位补0</div>
<div class="para">科学计算器输入&nbsp;00011100&nbsp;00110011&nbsp;00000100&nbsp;00110011</div>
<div class="para">得到 28 51 4 51</div>
<div class="para">查对下照表 c z E z</div>
<div class="para"><br />　　先以&ldquo;迅雷下载&rdquo;为例： 很多下载类网站都提供&ldquo;迅雷下载&rdquo;的链接，其地址通常是加密的迅雷专用下载地址。</div>
<div class="para">其实迅雷的&ldquo;专用地址&rdquo;也是用Base64"加密"的，其过程如下：</div>
<div class="para">一、在地址的前后分别添加AA和ZZ</div>
<div class="para">二、对新的字符串进行Base64编码</div>
<div class="para">另：　Flashget的与迅雷类似，只不过在第一步时加的&ldquo;料&rdquo;不同罢了，Flashget在地址前后加的&ldquo;料&rdquo;是[FLASHGET]</div>
<div class="para">而QQ旋风的干脆不加料，直接就对地址进行Base64编码了</div>
<div class="anchor-list">&nbsp;</div>
<div class="para-title level-2">
<h2 class="title-text">应用</h2>

</div>
<div class="para">Base64编码可用于在HTTP环境下传递较长的标识信息。例如，在Java Persistence系统Hibernate中，就采用了Base64来将一个较长的一个标识符（一般为128-bit的UUID）编码为一个字符串，用作HTTP表单和HTTP GET URL中的参数。在其他应用程序中，也常常需要把二进制数据编码为适合放在URL（包括隐藏表单域）中的形式。此时，采用Base64编码不仅比较简短，同时也具有不可读性，即所编码的数据不会被人用肉眼所直接看到。</div>
<div class="para">然而，标准的Base64并不适合直接放在URL里传输，因为URL编码器会把标准Base64中的&ldquo;/&rdquo;和&ldquo;+&rdquo;字符变为形如&ldquo;%XX&rdquo;的形式，而这些&ldquo;%&rdquo;号在存入数据库时还需要再进行转换，因为ANSI SQL中已将&ldquo;%&rdquo;号用作通配符。</div>
<div class="para">为解决此问题，可采用一种用于URL的改进Base64编码，它不仅在末尾去掉填充的'='号，并将标准Base64中的&ldquo;+&rdquo;和&ldquo;/&rdquo;分别改成了&ldquo;-&rdquo;和&ldquo;_&rdquo;，这样就免去了在URL编解码和数据库存储时所要作的转换，避免了编码信息长度在此过程中的增加，并统一了数据库、表单等处对象标识符的格式。</div>
<div class="para">另有一种用于正则表达式的改进Base64变种，它将&ldquo;+&rdquo;和&ldquo;/&rdquo;改成了&ldquo;!&rdquo;和&ldquo;-&rdquo;，因为&ldquo;+&rdquo;,&ldquo;/&rdquo;以及前面在IRCu中用到的&ldquo;[&rdquo;和&ldquo;]&rdquo;在正则表达式中都可能具有特殊含义。</div>
<div class="para">此外还有一些变种，它们将&ldquo;+/&rdquo;改为&ldquo;_-&rdquo;或&ldquo;._&rdquo;（用作编程语言中的标识符名称）或&ldquo;.-&rdquo;（用于XML中的Nmtoken）甚至&ldquo;_:&rdquo;（用于XML中的Name）。</div>
<div class="para">其他应用</div>
<div class="para">Mozilla Thunderbird和Evolution用Base64来保密电子邮件密码</div>
<div class="para">Base64 也会经常用作一个简单的&ldquo;加密&rdquo;来保护某些数据，而真正的加密通常都比较繁琐。</div>
<div class="para">垃圾讯息传播者用Base64来避过反垃圾邮件工具，因为那些工具通常都不会翻译Base64的讯息。</div>
<div class="para">在LDIF档案，Base64用作编码字串。</div>
<div class="para">&nbsp;</div>
<div class="para">
<h2 class="title-text">代码实现</h2>
<p>&nbsp;详见代码</p>

</div>

</div>]]></description></item><item><title>编码、摘要、加密</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/11/11503989.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 10 Sep 2019 16:13:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/11/11503989.html</guid><description><![CDATA[<p>1、编码、摘要、加密的区别：</p>
<p>相同点：</p>
<p>　　三种方式都是通过某种公开的算法将原始信息进行编码 /加密</p>
<p>不同点：</p>
<p>　　编码：将数据转化成某种固定的格式的编码信息，方便不同系统间的传输，通过解码编码信息可以得到原始信息</p>
<p>　　哈希（又称为摘要、散列）：验证信息的唯一性，不能通过哈希值还原原始信息</p>
<p>　　加密：加密传输信息，保证信息的安全性，通过密钥和密文可以还原原始信息</p>
<p>&nbsp;</p>
<p>编码、哈希、加密的区别：经常看到有人混淆这几个概念，把 md5、sha256 甚至还有 Base64 当作加密算法，弄不清楚摘要、编码、加密的区别，下面就这几个概念结合几个例子来区分以下。</p>
<p>编码：</p>
<p>编码本质上是信息形式的转化。编码的目的不是为了加密信息，是将消息转化成统一的格式，方便在不同系统之中传输。例如最常见的ASCII字符编码。由于网络上只能传输二进制数据，任何数据如果想要经由网络传输，就必须先转化成二进制，ASCII 提供了一个将A、B、C等字母转化为二进制的规则。</p>
<p>信息&mdash;&gt;编码&mdash;&gt;二进制&mdash;&gt;解码&mdash;&gt;信息</p>
<p>通过解码可以还原原始信息</p>
<p>例子：ASCII, Unicode, URL Encoding, Base64等</p>
<p>摘要(哈希)：</p>
<p>摘要的目的是为了校验信息的完整性，保证信息在传输过程中不被篡改。例如你在网络上需要下载一个非官方论坛软件，但又担心软件被第三方篡改，可以将该软件的md5值和官方下载的md5值进行对比，如果一致，则可放心使用。摘要算法有如下几个特点：</p>
<p>　　输入相同时，输出一致；输入不同时，输出不同。通过输出，不能计算出输入 对输入的任何细微修改，都会导致完全不同的输出。</p>
<p>　　由于以上特性，摘要也常被用来给密码加密，不过由于计算机运算能力的提升以及越来越丰富的破解手段，已不建议使用摘要算法来给密码加密。</p>
<p>　　通过摘要信息不能还原原始信息。</p>
<p>例子：md5, sha系列</p>
<p>加密：</p>
<p>加密是为了保证数据安全传输，使得其他人不能获取的具体信息内容。例如你想给某人发送一封密信，或通过互联网给人发送密码，这些对隐秘性要求比较强的事情，就需要对信息进行加密。</p>
<p>　　加密的专注点不在可用性上，这点和编码有明显的区别。加密是可逆的，明文 + 秘钥 = 加密信息</p>
<p>　　加密又分为对称加密和非对称加密，区别在于在加密和解密信息时秘钥是不是同一个。</p>
<p>　　加密信息能通过密钥被还原为原始信息</p>
<p>对称加密：DES, AES</p>
<p>非对称加密： RSA。</p>
<p>&nbsp;</p>
<p>2、java中的编码/解码 、加密/解密的代码：</p>
<p>　　详见代码</p>]]></description></item><item><title>Update(Stage4)：scala补充知识</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/07/11483627.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 07 Sep 2019 14:48:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/07/11483627.html</guid><description><![CDATA[<p>&nbsp;</p>
<p>1.惰性加载：</p>
<p class="md-end-block md-p md-focus"><span class="md-plain md-expand">在企业的大数据开发中，有时候会编写非常复杂的SQL语句，这些SQL语句可能有几百行甚至上千行。这些SQL语句，如果直接加载到JVM中，会有很大的内存开销。如何解决？</span></p>
<p class="md-end-block md-p"><span class="md-plain">当有一些变量保存的数据较大时，但是不需要马上加载到JVM内存。可以使用<span><strong>惰性赋值</strong><span class="md-plain">来提高效率。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">语法格式：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">lazy <span class="cm-keyword">val<span class="cm-operator">/<span class="cm-keyword">var <span class="cm-def">变量名 <span class="cm-operator">= <span class="cm-variable">表达式</span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">2.<span class="md-plain">scala提供多种定义字符串的方式，将来我们可以根据需要来选择最方便的定义方式。</span></p>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">使用双引号 ：&nbsp; &nbsp;val/var 变量名 = &ldquo;字符串&rdquo;</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">使用插值表达式（有效避免大量字符串的拼接）：&nbsp;val/var 变量名 = s"${变量/表达式}字符串" &nbsp;</span></p>
</li>
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-plain">使用三引号：&nbsp;</span><span class="md-plain md-expand">如果有大段的文本需要保存，就可以使用三引号来定义字符串。例如：保存一大段的SQL语句。三个引号中间的所有字符串都将作为字符串的值。</span></p>
<p>val/var 变量名 = """字符串1<br />字符串2"""</p>














</li>














</ul>
<p>eg. val sql = """select<br />     | *<br />     | from<br />     |     t_user<br />     | where<br />     |     name = "zhangsan""""</p>
<p>println(sql)</p>
<p>&nbsp;</p>
<p>3. 运算符</p>
<ul class="ul-list" data-mark="*">
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-plain md-expand">scala中没有，++、--运算符</span></p>












</li>
<li class="md-list-item">
<p class="md-end-block md-p md-focus"><span class="md-plain">与Java不一样，在scala中，可以直接使用<span><code>==</code><span class="md-plain">、<span><code>!=</code><span class="md-plain">进行比较，它们与<span><code>equals</code><span class="md-plain">方法表示一致。而比较两个对象的引用值，使用<span><code>eq</code></span></span></span></span></span></span></span></span></p>












</li>












</ul>
<p>eg. val str1 = "abc"<br />val str2 = str1 + ""<br />str1 == str2&nbsp; &nbsp; //true<br />str1.eq(str2)&nbsp; &nbsp; //false</p>
<p>&nbsp;</p>
<p><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span>4.<img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190908102348580-1688698435.png" alt="" width="911" height="563" /></span></span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<p>&nbsp;val b:Int = null&nbsp; &nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">scala会解释报错：</span></p>
<p class="md-end-block md-p md-focus"><span class="md-plain">Null类型并不能转换为Int类型，说明<span><strong>Null类型并不是Int类型的子类</strong></span></span></p>
<p>&nbsp;</p>
<p><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span>5.&nbsp;</span></span></span></span></span></span></span></span><span class="md-plain md-expand">条件表达式，与Java不一样，有返回值</span></p>
<p><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span>在scala中，没有三元表达式，可以使用if表达式替代三元表达式</span></span></span></span></span></span></span></span></p>
<p><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span>eg. val result = if(sex == "male") 1 else 0</span></span></span></span></span></span></span></span></p>
<p>块表达式<br />- scala中，使用{}表示一个块表达式<br />- 和if表达式一样，块表达式也是有值的<br />- 值就是最后一个表达式的值</p>
<p>&nbsp;</p>
<p><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span>6.中缀调用法： for(i &lt;-&nbsp; 1 to 10) ...</span></span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<p><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span>7.嵌套循环：for(i &lt;- 1 to 3; j &lt;- 1 to 5) {print("*");if(j == 5) println("")}</span></span></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<p><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span>8.</span></span></span></span></span></span></span></span>break和continue</p>
<p>- 在scala中，类似Java和C++的break/continue关键字被移除了<br />- 如果一定要使用break/continue，就需要使用scala.util.control包的Break类的**breakable**和**break**方法。</p>
<p>实现break</p>
<p>**用法**</p>
<p>- 导入Breaks包`import scala.util.control.Breaks._`<br />- 使用breakable将for表达式包起来<br />- for表达式中需要退出循环的地方，添加`break()`方法调用</p>
<p>**示例**<br />使用for表达式打印1-100的数字，如果数字到达50，退出for表达式</p>
<p>**参考代码**</p>
<p>// 导入scala.util.control包下的Break<br />import scala.util.control.Breaks._<br />breakable{<br />    for(i &lt;- 1 to 100) {<br />        if(i &gt;= 50) break()<br />        else println(i)<br />    }<br />}</p>
<p>实现continue<br />**用法**<br />continue的实现与break类似，但有一点不同：<br />&gt; 实现break是用breakable{}将整个for表达式包起来，而实现continue是用breakable{}将for表达式的循环体包含起来就可以了</p>
<p>**示例**</p>
<p>打印1-100的数字，使用for表达式来遍历，如果数字能整除10，不打印</p>
<p>// 导入scala.util.control包下的Break    <br />import scala.util.control.Breaks._<br />for(i &lt;- 1 to 100 ) {<br />    breakable{<br />        if(i % 10 == 0) break()<br />        else println(i)<br />    }<br />}</p>
<p>&nbsp;</p>
<p><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span>9.方法参数：</span></span></span></span></span></span></span></span></p>
<p>默认参数: 在定义方法时可以给参数定义一个默认值。<br />// x，y带有默认值为0 <br />def add(x:Int = 0, y:Int = 0) = x + y<br />add()  //0<br /> <br />带名参数: 在调用方法时，可以指定参数的名称来进行调用。<br />def add(x:Int = 0, y:Int = 0) = x + y<br />add(x=1)  //1</p>
<p>变长参数: 如果方法的参数是不固定的，可以定义一个方法的参数是变长参数。<br />scala&gt; def add(num:Int*) = num.sum<br />add(1,2,3,4,5)  //15</p>
<p>&nbsp;</p>
<p><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span>10.&nbsp;</span></span></span></span></span></span></span></span>方法调用方式</p>
<p>在scala中，有以下几种方法调用方式，<br />- 后缀调用法<br />- 中缀调用法<br />- 花括号调用法<br />- 无括号调用法<br />在后续编写spark、flink程序时，我们会使用到这些方法调用方式。</p>
<p>后缀调用法：这种方法与Java没有区别。<br />对象名.方法名(参数)<br />scala&gt; Math.abs(-1)<br />res3: Int = 1</p>
<p>中缀调用法：<br />**语法** 对象名 方法名 参数。<br />1 to 10<br />操作符即方法。<br />1 + 1<br />scala&gt; Math abs -1  res4: Int = 1<br />&gt; 如果有多个参数，使用括号括起来</p>
<p>花括号调用法<br />语法<br />Math.abs{ <br />    // 表达式1<br />    // 表达式2<br />}<br />&gt; 方法只有一个参数，才能使用花括号调用法<br />scala&gt; Math.abs{<br />	println("请绝对值")<br />	-10<br />}<br />res13: Int = 10</p>
<p>无括号调用法：如果方法没有参数，可以省略方法名后面的括号。<br />def m3()=println("hello")<br />m3&nbsp; //调用时不用加括号</p>
<p>&nbsp;</p>
<p><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span>11.</span></span></span></span></span></span></span></span>方法和函数的区别</p>
<p>- 方法是隶属于类或者对象的，在运行时，它是加载到JVM的方法区中<br />- 可以将函数对象赋值给一个变量，在运行时，它是加载到JVM的堆内存中<br />- 函数是一个对象，继承自FunctionN，函数对象有apply，curried，toString，tupled这些方法。方法则没有</p>
<p>&nbsp;</p>
<p><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span><span class="md-plain"><span>12.定长数组和变长数组：</span></span></span></span></span></span></span></span></p>
<p># 定长数组：<br />- 定长数组指的是数组的**长度**是**不允许改变**的<br />- 数组的**元素**是**可以改变**的</p>
<p>// 通过指定长度定义数组<br />val/var 变量名 = new Array[元素类型](数组长度)<br />// 用元素直接初始化数组<br />val/var 变量名 = Array(元素1, 元素2, 元素3...)</p>
<p># 变长数组：<br />变长数组指的是数组的长度是可变的，可以往数组中添加、删除元素<br />创建变长数组，需要提前导入ArrayBuffer类`import scala.collection.mutable.ArrayBuffer</p>
<p>创建空的ArrayBuffer变长数组，语法结构：<br />val/var a = ArrayBuffer[元素类型]()<br />创建带有初始元素的ArrayBuffer<br />val/var a = ArrayBuffer(元素1，元素2，元素3....)</p>
<p>&nbsp;</p>
<p>13.for(i &lt;- 0 until a.length) prinln(a(i))&nbsp; &nbsp; //until关键字</p>
<p>&nbsp;</p>
<p>14. val a = Array(1,2,3,4,5)</p>
<p>a.sum, a.max, a.min, a.sorted, a.sorted.reverse</p>
<p>&nbsp;</p>
<p>15.元组</p>
<p>使用括号来定义元组<br />val/var 元组 = (元素1, 元素2, 元素3....)<br />使用箭头来定义元组（元组只有两个元素）<br />val/var 元组 = 元素1-&gt;元素2</p>
<p><em>注：如果用val修饰元组变量，则其里面的所有元素都是不能被重新赋值！ 这点和数组不同。</em></p>
<p>&nbsp;</p>
<p>16.&nbsp;列表：</p>
<p>列表是scala中最重要的、也是最常用的数据结构。List具备以下性质：<br />- 可以保存重复的值<br />- 有先后顺序<br />在scala中，也有两种列表，一种是不可变列表、另一种是可变列表<br />不可变列表就是列表的元素、长度都是不可变的。<br />**语法**<br />使用`List(元素1, 元素2, 元素3, ...)`来创建一个不可变列表，语法格式：<br />val/var 变量名 = List(元素1, 元素2, 元素3...)<br />使用`Nil`创建一个不可变的空列表<br />val/var 变量名 = Nil<br />使用`::`方法创建一个不可变列表<br />val/var 变量名 = 元素1 :: 元素2 :: Nil<br />&gt; 使用**::**拼接方式来创建列表，必须在最后添加一个Nil</p>
<p>&nbsp;</p>
<p>17. list获取列表的前缀和后缀：</p>
<p>scala&gt; val a = List(1,2,3,4,5)<br />a: List[Int] = List(1, 2, 3, 4, 5)</p>
<p>scala&gt; a.take(3)<br />res56: List[Int] = List(1, 2, 3)</p>
<p>scala&gt; a.drop(3)<br />res60: List[Int] = List(4, 5)</p>
<p>&nbsp;</p>
<p>18.list<em id="__mceDel"><span class="md-plain md-expand">拉链与拉开</span></em></p>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">拉链：使用zip将两个列表，组合成一个元素为元组的列表</span></p>










</li>
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-plain">拉开：将一个包含元组的列表，解开成包含两个列表的元组</span></p>










</li>










</ul>
<p>scala&gt; val a = List("zhangsan", "lisi", "wangwu")<br />a: List[String] = List(zhangsan, lisi, wangwu)<br />scala&gt; val b = List(19, 20, 21)<br />b: List[Int] = List(19, 20, 21)<br />scala&gt; a.zip(b)<br />res1: List[(String, Int)] = List((zhangsan,19), (lisi,20), (wangwu,21))</p>
<p>scala&gt; res1.unzip<br />res6: (List[String], List[Int]) = (List(zhangsan, lisi, wangwu),List(19, 20, 21))</p>
<p>&nbsp;</p>
<p>19.方法中的函数参数，如果该函数的参数在方法体中只出现一次，且没有其他的任何嵌套调用，则该函数的参数部分可以省略，且其表达式中用到参数时，可以用下划线代替。</p>
<p>&nbsp;</p>
<p>20.println("-" * 15) ，结果：打印出来15个减号</p>
<p>&nbsp;</p>
<p>21.<em id="__mceDel"><span class="md-plain">当我们定义一个样例类，编译器自动帮助我们实现了以下几个有用的方法：</span></em></p>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain md-expand">apply方法&nbsp; // 不用new关键字，构建对象</span></p>






</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">toString方法&nbsp; //eg. Person(张三,20)</span></p>






</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">equals方法&nbsp; //比较2个对象的所有成员变量是否相等（如果比较引用是否相等，用eq）</span></p>






</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">hashCode方法&nbsp;</span></p>






</li>
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-plain">copy方法&nbsp; //可使用带名参数拷贝一个对象的所有成员变量到另一个对象。</span></p>






</li>






</ul>
<p>&nbsp;</p>
<p>22. 非变、协变、逆变：详见代码</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190917232611694-1812730805.png" alt="" /></p>
<p>&nbsp;</p>
<p>23.方法格式和函数格式：</p>
<p>方法：&nbsp; def 方法名(参数:参数类型,&nbsp;参数:参数类型 ...) : 返回值类型 = { 方法体 }&nbsp;</p>
<p>函数：&nbsp; val/var 函数变量名<span style="color: #ff0000;"> : 【(参数类型, 参数类型, ...) =&gt; 返回值类型】</span> = (参数:参数类型,&nbsp;参数:参数类型 ...) =&gt; { 函数体 }&nbsp; &nbsp;//函数可以省略返回值类型，scala会根据函数体自动判断，即 红色字体部分可以省略；如果函数体只有一个表达式，可省略花括号。</p>
<p>方法可以转化为函数，反过来不行：&nbsp; eg. val func = add _&nbsp; //将add方法转化为函数，赋值给变量func</p>
<p>eg1.&nbsp;<em style="font-family: 'Courier New'; font-size: 12px;">val func: Int =&gt; String = (num:Int) =&gt; "*" * num&nbsp; //</em><em id="__mceDel" style="font-family: 'Courier New'; font-size: 12px;">用于将数字转换为指定个数的小星星</em></p>
<p>&nbsp;eg2.&nbsp;<em id="__mceDel">scala&gt; var func2 : <span style="color: #ff0000;">(Int,Int) =&gt; String</span> = (x:Int,y:Int) =&gt; x+y+"a"&nbsp; //红色字体部分可以省略</em></p>
<p><em id="__mceDel">　　&nbsp; func2: (Int, Int) =&gt; String = &lt;function2&gt;</em></p>
<p>&nbsp;</p>
<p>24.scala的actors和akka的actors的区别：</p>
<div class="em-widget-msg-wrapper msgtype-txt">
<div class="em-widget-msg-container em-widget-msg-txt"><span class="text"><span class="text"><span class="text">首先actor模型是处理高并发问题的，</span></span></span>Akka actors和Scala actors是该模型的两个实现，
<div class="em-widget-msg-wrapper msgtype-txt">
<div class="em-widget-msg-container em-widget-msg-txt"><span class="text"><span class="text">akka是另一个独立的actor, 比scala自带的强大的多, 当然也是scala写的，</span></span>
<div class="em-widget-msg-wrapper msgtype-txt">
<div class="em-widget-msg-container em-widget-msg-txt"><span class="text">在生产过程中大多数都是使用akka中的actor模型。</span></div>

</div>
<p>&nbsp;</p>
<div class="em-widget-msg-container em-widget-msg-txt"><span class="text">&nbsp;</span></div>
<p>&nbsp;</p>

</div>

</div>
<p>&nbsp;</p>
<div class="em-widget-msg-container em-widget-msg-txt"><span class="text">&nbsp;</span></div>
<p>&nbsp;</p>

</div>

</div>
<p>&nbsp;</p>]]></description></item><item><title>身份证号码的组成</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/06/11478498.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 06 Sep 2019 13:55:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/06/11478498.html</guid><description><![CDATA[<p>公民身份号码的不仅应用在居民身份证上，也运用于其他领域。身份证的基本由地址码、出生日期码、顺序及性别码、校验和这几样构成。一般身份证最后一位都是数字，为什么还会出现字母X呢？原因就是居民身份证号码是按照国家标准编制的，由18位组成，?第18位立为校验码。?校验码是由号码编制单位按统-?-的公式计算出来的，如果某人的尾号是0-9，都不会出现X，但如果尾号是10，那么就得用X来代替，因为如果用10做尾号，那么此人的身份证就变成了19位，而19位的号码不符合国家标准。X是罗马数字中的10，所以用来代替数字10，使身份证符合标准！</p>]]></description></item><item><title>Oracle的TO_CHAR()格式化数字为百分数的字符串</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/06/11471185.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 06 Sep 2019 01:56:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/06/11471185.html</guid><description><![CDATA[<p>&nbsp;</p>
<p>TO_CHAR(-0.926903249,'FM999999990.00') || '%'</p>
<p>&nbsp;</p>
<p>说明：</p>
<p>1，(点号) ：'99.99' ：</p>
<p>点号，不要念为"句号"，句号是个圆圈，点号只能出现在小数点对应的地方.只能出现一次。</p>
<p>&nbsp;</p>
<p>2，0(零) '0999.99' ：</p>
<p>零，在对应位置返回对应的字符，如果没有则以'0'填充。</p>
<p>&nbsp;</p>
<p>3，9 '999.99' ：</p>
<p>9在小数位，则表示转换为对应字符，没有对应，则不填充字符。</p>
<p>&nbsp;</p>]]></description></item><item><title>转载和补充：Oracle中的一些特殊字符</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/06/11471163.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 06 Sep 2019 01:52:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/06/11471163.html</guid><description><![CDATA[<p>oracle通配符,运算符的使用</p>
<p>用于where比较条件的有：</p>
<p>等于：=、&lt;、&lt;=、&gt;、&gt;=、&lt;&gt;</p>
<p>包含：in、not in exists、not exists</p>
<p>范围：between...and、not between....and</p>
<p>匹配测试：like、not like</p>
<p>Null测试：is null、is not null</p>
<p>布尔链接：and、or、not</p>
<p>通配符：</p>
<p>在where子句中，通配符可与like条件一起使用。在Oracle中：</p>
<p>%(百分号)： 用来表示任意数量的字符，或者可能根本没有字符。</p>
<p>_(下划线)： 表示确切的未知字符。</p>
<p>?(问号)： 用来表示确切的未知字符。</p>
<p>#(井号)： 用来表示确切的阿拉伯数字，0到9。</p>
<p>[a-d](方括号)：用来表示字符范围，在这里是从a到d。</p>
<p>单引号(')：在Oracle中，应该只使用单引号将文本和字符和日期括起来，不能使用引号（包括单双引号）将数字括起来。</p>
<p>双引号(")：在Oracle中，单双引号含义不同。双引号被用来将包含特定字符或者空格的列别名括起来。双引号还被用来将文本放入日期格式。</p>
<p>撇号(')：在Oracle中，撇号也可以写成彼此相邻的两个单引号。为了在供应商名字中间查找所有带撇号的供应商名字，可以这样编写代码：</p>
<p>select * from l_suppliers where supplier_name like '%''%'</p>
<p>&amp;符号：在Oracle中,&amp;符号常用来指出一个变量。例如，&amp;fox是一个变量，稍微有点不同的一种&amp;&amp;fox。每当&amp;fox出现在Oracle脚本中时，都会要求您为它提供一个值。而使用&amp;&amp;fox，您只需要在&amp;&amp;fox第一次出现时为它提供变量值。如果想将&amp;符号作为普通的符号使用，则应该关闭这个特性。要想关闭这个特性，可以运行以下的命令：set define off，这是一个SQLplus命令，不是一个SQL命令。SQLplus设置了SQL在Oracle中运行的环境。</p>
<p>双竖线（||）：Oracle使用双竖线表示字符串连接函数。</p>
<p>星号(*)：select*意味着选择所有的列，count（*）意味着计算所有的行，表示通配符时，表示0个或任意多个字符。</p>
<p>正斜杠(/)：在Oracle中，用来终止SQL语句。更准确的说，是表示了&ldquo;运行现在位于缓冲区的SQL代码&rdquo;。正斜杠也用作分隔项。</p>
<p>多行注释：。</p>
<p>不等于：有多种表达方式：!=、^=、&lt;&gt;、notxxx=yyy、not(xxx=yyy)</p>
<p>&nbsp;</p>
<p>转载自：&nbsp;</p>
<p>https://www.cnblogs.com/keanuyaoo/articles/3310460.html</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>补充：</p>
<p>&amp;号，如果SELECT后的字符串中，或者WHERE子句中，有&amp;号，则会有问题，</p>
<p>因为&amp;号后面跟一个变量名，Oracle会要求你手动输入一个变量值，然后再继续往下运行。</p>
<p>解决方法：</p>
<p>1，用CHR函数，CHR(38)等于&amp;号：</p>
<p>SELECT 'MDL#' || CHR(38) || CHR(38) || '#20190905' FROM DUAL;&nbsp;</p>
<p>&nbsp;</p>
<p>2，多加一个&amp;号，用来转义：</p>
<p>SELECT 'MDL#&amp;&amp;#20190905' FROM DUAL;</p>
<p>两个&amp;号，select时，就会转义为一个&amp;号。</p>
<p>&nbsp;</p>]]></description></item><item><title>redis哨兵模式启动redis-sentinel sentinel.conf  报错</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/05/11470107.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 05 Sep 2019 13:59:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/05/11470107.html</guid><description><![CDATA[<p>[root@node01 redis-3.2.8]# redis-sentinel sentinel.conf</p>
<p>*** FATAL CONFIG FILE ERROR ***<br />Reading the configuration file, at line 73<br />&gt;&gt;&gt; 'sentinel auth-pass 192.168.8.100 123456'<br />No such master with specified name.</p>
<p>&nbsp;</p>
<p>原因：以下的两行配置，有先后顺序，先配置monitor的名称mymaster，然后下面一行才能使用mymaster这个名称：</p>
<p>sentinel monitor mymaster 192.168.8.100 6379 2<br />sentinel auth-pass mymaster 123456</p>
<p>&nbsp;</p>]]></description></item><item><title>redis使用技巧小结</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/04/11462429.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 04 Sep 2019 15:33:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/04/11462429.html</guid><description><![CDATA[<p>一、Redis 密码设置和查看密码<br />redis没有实现访问控制这个功能，但是它提供了一个轻量级的认证方式，可以编辑redis.conf配置来启用认证。<br />1、初始化Redis密码：<br />在配置文件中有个参数：requirepass，这个就是配置redis访问密码的参数；<br />比如 requirepass password<br />（Ps:需重启Redis才能生效） redis的查询速度是非常快的，外部用户一秒内可以尝试多大150K个密码；所以密码要尽量长（对于DBA 没有必要必须记住密码）；</p>
<p>2、不重启Redis设置密码：<br />在配置文件中配置requirepass的密码（当redis重启时密码依然有效）。<br />redis 127.0.0.1:6379&gt; config set requirepass password<br />查询密码：<br />redis 127.0.0.1:6379&gt; config get requirepass<br />(error) ERR operation not permitted</p>
<p>密码验证：<br />redis 127.0.0.1:6379&gt; auth password<br />OK</p>
<p>再次查询：<br />redis 127.0.0.1:6379&gt; config get requirepass<br />1) "requirepass"<br />2) "password"<br />PS：如果配置文件中没添加密码 那么redis重启后，密码失效；<br />   <br />3、登陆有密码的Redis：<br />在登录的时候的时候输入密码：<br />redis-cli -p 6379 -a password<br />先登陆后验证：<br />redis-cli -p 6379<br />redis 127.0.0.1:6379&gt; auth password<br />OK<br />AUTH命令跟其他redis命令一样，是没有加密的；阻止不了攻击者在网络上窃取你的密码；<br />认证层的目标是提供多一层的保护。如果防火墙或者用来保护redis的系统防御外部攻击失败的话，外部用户如果没有通过密码认证还是无法访问redis的。</p>
<p>二、启动、停止redis：<br />启动redis：<br />node02执行以下命令启动redis<br />cd  /export/servers/redis-3.2.8/<br />src/redis-server  redis.conf<br />停止redis：<br />redis-cli -h node02 -p 6379 shutdown</p>
<p>或者直接kill -9 redis进程号</p>
<p>&nbsp;</p>
<p>三、连接redis客户端：<br />node01执行以下命令连接redis客户端<br />cd /export/servers/redis-3.2.8<br />src/redis-cli -h node01 -p 6379 -a password</p>
<p>四、批量删除keys：<br />1.未登录客户端的情况下：<br />redis为默认端口号6379，无连接密码，删除命令如下：<br />redis-cli keys "key*" | xargs redis-cli del</p>
<p>redis不为默认端口号6379，连接密码为"password"，删除命令如下：<br />redis-cli -h node02 -p 6379 -a password keys "itcast*" | xargs redis-cli -h node02 -p 6379 -a password del<br />但是会报错：(error) ERR wrong number of arguments for 'del' command</p>
<p>2.登录redis客户端后，也可以批量删除，如下：<br />DEL key1 key2  #删除多个key<br />flushdb  #删除当前数据库中的所有Key<br />flushall  #删除所有数据库中的key</p>
<p>&nbsp;</p>
<p>五、redis绑定多个IP：</p>
<p>bind 192.168.8.100 127.0.0.1&nbsp; #多个IP之间用空格进行分隔</p>
<p>bind 0.0.0.0&nbsp; #可以绑定任意IP</p>
<p>&nbsp;</p>
<p>六、redis的主从复制架构需要密码验证：</p>
<p class="title-article">redis master配置了密码，需要进行主从同步的话，要在所有的slave的redis.conf中配置验证：masterauth 123456</p>
<p>否则查看redis.log，可以发现报错信息如下：</p>
<p>5933:S 05 Sep 20:46:09.100 * Connecting to MASTER 192.168.8.100:6379<br />5933:S 05 Sep 20:46:09.101 * MASTER &lt;-&gt; SLAVE sync started<br />5933:S 05 Sep 20:46:09.101 * Non blocking connect for SYNC fired the event.<br />5933:S 05 Sep 20:46:09.103 * Master replied to PING, replication can continue...<br />5933:S 05 Sep 20:46:09.103 * (Non critical) Master does not understand REPLCONF listening-port: -NOAUTH Authentication required.<br />5933:S 05 Sep 20:46:09.104 * (Non critical) Master does not understand REPLCONF capa: -NOAUTH Authentication required.<br />5933:S 05 Sep 20:46:09.104 * Partial resynchronization not possible (no cached master)<br />5933:S 05 Sep 20:46:09.105 # Unexpected reply to PSYNC from master: -<span style="color: #ff0000;">NOAUTH Authentication required</span>.<br />5933:S 05 Sep 20:46:09.105 * Retrying with SYNC...<br />5933:S 05 Sep 20:46:09.106 # MASTER aborted replication with an error: NOAUTH Authentication required.</p>
<p>&nbsp;</p>
<p>七、哨兵模式，sentinel和redis身份验证配置：</p>
<p>当一个master配置为需要密码才能连接时，客户端和slave在连接时都需要提供密码。</p>
<p>redis.conf文件中：</p>
<p>（1）master通过requirepass设置自身的密码，不提供密码无法连接到这个master。<br />（2）slave通过masterauth来设置访问master时的密码。<br />但是当使用了sentinel时，由于一个master可能会变成一个slave，一个slave也可能会变成master，所以需要同时设置上述两个配置项。</p>
<p>sentinel.conf文件中，需要配置：</p>
<p>sentinel monitor mymaster 192.168.8.100 6379 2</p>
<p>sentinel auth-pass mymaster 123456&nbsp; &nbsp;# Set the password to use to authenticate with the master and slav<em id="__mceDel">es.</em></p>
<p>protected-mode no（设置成：protected-mode no；保护模式关闭，如果你不关闭保护模式，启动哨兵的时候，无法正常运行）</p>
<p>&nbsp;注意：（1）如果redis的master和slave设置了密码，则必须要设置protected-mode no，否则master的redis-server进程意外停止时，redis.log日志文件中会打印错误信息：</p>
<p>3936:S 05 Sep 22:40:38.745 * Connecting to MASTER 192.168.8.100:6379<br />3936:S 05 Sep 22:40:38.746 * MASTER &lt;-&gt; SLAVE sync started<br />3936:S 05 Sep 22:40:38.747 # <span style="color: #ff0000;">Error condition on socket for SYNC: Connection refused</span></p>
<p>（2）可能需要master和slave的密码设置相同，不过没有验证过设置不同密码的话哨兵模式会不会失败。&nbsp;</p>
<p>&nbsp;</p>
<p>八、</p>
<p>&nbsp;</p>]]></description></item><item><title>Update(stage3)：第1节 redis组件：10、redis集群</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/04/11456592.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 03 Sep 2019 16:22:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/04/11456592.html</guid><description><![CDATA[<h1>10、redis集群</h1>
<h2>1、redis集群的介绍</h2>
<p>Redis 集群是一个提供在多个Redis节点之间共享数据的程序集。</p>
<p>Redis 集群并不支持同时处理多个键的 Redis 命令，因为这需要在多个节点间移动数据，这样会降低redis集群的性能，在高负载的情况下可能会导致不可预料的错误。</p>
<p>Redis 集群通过分区来提供一定程度的可用性，即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p>
<p>&nbsp;</p>
<p>Redis 集群的优势:&nbsp;</p>
<p>1.缓存永不宕机：启动集群，永远让集群的一部分起作用。主节点失效了子节点能迅速改变角色成为主节点，整个集群的部分节点失败或者不可达的情况下能够继续处理命令；</p>
<p>2.迅速恢复数据：持久化数据，能在宕机后迅速解决数据丢失的问题；</p>
<p>3.Redis可以使用所有机器的内存，变相扩展性能；</p>
<p>4.使Redis的计算能力通过简单地增加服务器得到成倍提升,Redis的网络带宽也会随着计算机和网卡的增加而成倍增长；</p>
<p>5.Redis集群没有中心节点，不会因为某个节点成为整个集群的性能瓶颈;</p>
<p>6.异步处理数据，实现快速读写。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190904002105699-825794827.png" alt="" /></p>
<h2>2、redis集群环境搭建</h2>
<p>由于redis集群当中最少需要三个主节点，每个主节点，最少需要一个对应的从节点，所以搭建redis集群最少需要三主三从的配置，所以redis集群最少需要6台redis的实例，我们这里使用三台机器，每台服务器上面运行两个redis的实例。我们这里使用node01服务器，通过配置不同的端口，实现redis集群的环境搭建</p>
<h3>第一步：node01服务器解压redis压缩包</h3>
<p>node01执行以下命令重新解压redis压缩包到/export路径下</p>
<p class="code">cd /export/softwares/</p>
<p class="code">tar -zxf redis-3.2.8.tar.gz -C /export/</p>
<h3>第二步：安装redis必须依赖环境并进行编译</h3>
<p>node01执行以下命令安装redis的依赖环境</p>
<p class="code">yum -y install gcc-c++ tcl</p>
<p>对redis进行编译</p>
<p class="code">cd /export/redis-3.2.8</p>
<p class="code">make &amp;&amp; make install</p>
<h3>第三步：创建redis不同实例的配置文件夹</h3>
<p>创建文件夹，并将redis的配置文件拷贝到以下这些目录</p>
<p class="code">cd /export/redis-3.2.8</p>
<p class="code">mkdir -p /export/redis-3.2.8/clusters/7001</p>
<p class="code">mkdir -p /export/redis-3.2.8/clusters/7002</p>
<p class="code">mkdir -p /export/redis-3.2.8/clusters/7003</p>
<p class="code">mkdir -p /export/redis-3.2.8/clusters/7004</p>
<p class="code">mkdir -p /export/redis-3.2.8/clusters/7005</p>
<p class="code">mkdir -p /export/redis-3.2.8/clusters/7006</p>
<h3>第四步：修改redis的六个配置文件</h3>
<p>node01执行以下命令修改redis的配置文件</p>
<p class="code">mkdir -p /export/redis-3.2.8/logs</p>
<p class="code">mkdir -p /export/redis-3.2.8/redisdata/7001</p>
<p class="code">mkdir -p /export/redis-3.2.8/redisdata/7002</p>
<p class="code">mkdir -p /export/redis-3.2.8/redisdata/7003</p>
<p class="code">mkdir -p /export/redis-3.2.8/redisdata/7004</p>
<p class="code">mkdir -p /export/redis-3.2.8/redisdata/7005</p>
<p class="code">mkdir -p /export/redis-3.2.8/redisdata/7006</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>第一个配置文件修改</p>
<p class="code">vim &nbsp;/export/redis-3.2.8/redis.conf</p>
<div>
<p class="a">bind node01</p>
<p class="a">port 7001</p>
<p class="a">cluster-enabled yes</p>
<p class="a">cluster-config-file nodes-7001.conf</p>
<p class="a">cluster-node-timeout 5000</p>
<p class="a">appendonly yes</p>
<p class="a">daemonize yes</p>
<p class="a">pidfile /var/run/redis_7001.pid</p>
<p class="a">logfile "/export/redis-3.2.8/logs/7001.log"</p>
<p class="a">dir /export/redis-3.2.8/redisdata/7001</p>
</div>
<p>将修改后的文件拷贝到对应的文件夹下面去</p>
<p class="code">cp /export/redis-3.2.8/redis.conf /export/redis-3.2.8/clusters/7001</p>
<p>&nbsp;</p>
<p>第二个配置文件修改</p>
<p class="code">cp /export/redis-3.2.8/redis.conf /export/redis-3.2.8/clusters/7002</p>
<p class="code">vim &nbsp;/export/redis-3.2.8/clusters/7002/redis.conf</p>
<div>
<p class="a">bind node01</p>
<p class="a">port 7002</p>
<p class="a">cluster-enabled yes</p>
<p class="a">cluster-config-file nodes-7002.conf</p>
<p class="a">cluster-node-timeout 5000</p>
<p class="a">appendonly yes</p>
<p class="a">daemonize yes</p>
<p class="a">pidfile /var/run/redis_7002.pid</p>
<p class="a">logfile "/export/redis-3.2.8/logs/7002.log"</p>
<p class="a">dir /export/redis-3.2.8/redisdata/7002</p>
<p class="a">&nbsp;</p>
</div>
<p>第三个配置文件修改</p>
<p class="code">cp /export/redis-3.2.8/redis.conf /export/redis-3.2.8/clusters/7003</p>
<p class="code">vim &nbsp;/export/redis-3.2.8/clusters/7003/redis.conf</p>
<div>
<p class="a">bind node01</p>
<p class="a">port 7003</p>
<p class="a">cluster-enabled yes</p>
<p class="a">cluster-config-file nodes-7003.conf</p>
<p class="a">cluster-node-timeout 5000</p>
<p class="a">appendonly yes</p>
<p class="a">daemonize yes</p>
<p class="a">pidfile /var/run/redis_7003.pid</p>
<p class="a">logfile "/export/redis-3.2.8/logs/7003.log"</p>
<p class="a">dir /export/redis-3.2.8/redisdata/7003</p>
</div>
<p>&nbsp;</p>
<p>第四个配置文件修改</p>
<p class="code">cp /export/redis-3.2.8/redis.conf /export/redis-3.2.8/clusters/7004</p>
<p class="code">vim &nbsp;/export/redis-3.2.8/clusters/7004/redis.conf</p>
<div>
<p class="a">bind node01</p>
<p class="a">port 7004</p>
<p class="a">cluster-enabled yes</p>
<p class="a">cluster-config-file nodes-7004.conf</p>
<p class="a">cluster-node-timeout 5000</p>
<p class="a">appendonly yes</p>
<p class="a">daemonize yes</p>
<p class="a">pidfile /var/run/redis_7004.pid</p>
<p class="a">logfile "/export/redis-3.2.8/logs/7004.log"</p>
<p class="a">dir /export/servers/redis-3.2.8/redisdata/7004</p>
</div>
<p>&nbsp;</p>
<p>第五个配置文件修改</p>
<p class="code">cp /export/redis-3.2.8/redis.conf /export/redis-3.2.8/clusters/7005</p>
<p class="code">vim &nbsp;/export/redis-3.2.8/clusters/7005/redis.conf</p>
<div>
<p class="a">bind node01</p>
<p class="a">port 7005</p>
<p class="a">cluster-enabled yes</p>
<p class="a">cluster-config-file nodes-7005.conf</p>
<p class="a">cluster-node-timeout 5000</p>
<p class="a">appendonly yes</p>
<p class="a">daemonize yes</p>
<p class="a">pidfile /var/run/redis_7005.pid</p>
<p class="a">logfile "/export/redis-3.2.8/logs/7005.log"</p>
<p class="a">dir /export/servers/redis-3.2.8/redisdata/7005</p>
</div>
<p>&nbsp;</p>
<p>第六个配置文件修改</p>
<p class="code">cp /export/redis-3.2.8/redis.conf /export/redis-3.2.8/clusters/7006</p>
<p class="code">vim &nbsp;/export/redis-3.2.8/clusters/7006/redis.conf</p>
<div>
<p class="a">bind node01</p>
<p class="a">port 7006</p>
<p class="a">cluster-enabled yes</p>
<p class="a">cluster-config-file nodes-7006.conf</p>
<p class="a">cluster-node-timeout 5000</p>
<p class="a">appendonly yes</p>
<p class="a">daemonize yes</p>
<p class="a">pidfile /var/run/redis_7006.pid</p>
<p class="a">logfile "/export/redis-3.2.8/logs/7006.log"</p>
<p class="a">dir /export/servers/redis-3.2.8/redisdata/7006</p>
</div>
<p>&nbsp;</p>
<h3>第五步：启动redis进程</h3>
<p>node01执行以下命令来启动redis集群</p>
<p class="code">cd /export/redis-3.2.8</p>
<p class="code">src/redis-server clusters/7001/redis.conf</p>
<p class="code">src/redis-server clusters/7002/redis.conf</p>
<p class="code">src/redis-server clusters/7003/redis.conf</p>
<p class="code">src/redis-server clusters/7004/redis.conf</p>
<p class="code">src/redis-server clusters/7005/redis.conf</p>
<p class="code">src/redis-server clusters/7006/redis.conf</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>第六步：安装ruby运行环境</h3>
<p>node01执行以下命令，安装ruby运行环境，因为redis集群的启动需要借助ruby的环境</p>
<p class="code">yum install ruby</p>
<p class="code">yum install rubygems</p>
<p class="code">gem install redis</p>
<p>这个时候可能会报错，如下：</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190904002028304-247696395.png" alt="" /></p>
<p>这时，需要升级Ruby版本</p>
<p>node01执行以下命令升级ruby版本</p>
<div>
<p class="a0">cd /export/redis-3.2.8</p>
<p class="a0">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</p>
<p class="a0">&nbsp;</p>
<p class="a0">curl -sSL https://get.rvm.io | bash -s stable</p>
<p class="a0">source /etc/profile.d/rvm.sh</p>
<p class="a0">rvm list known</p>
<p class="a0">rvm install 2.4.1</p>
</div>
<p>&nbsp;</p>
<h3>第七步：创建redis集群</h3>
<p>node01执行以下命令创建redis集群</p>
<p class="code">cd /export/redis-3.2.8</p>
<p class="code">gem install redis</p>
<p class="code">src/redis-trib.rb create --replicas 1 192.168.8.100:7001 192.168.8.100:7002 192.168.8.100:7003 192.168.8.100:7004 192.168.8.100:7005 192.168.8.100:7006</p>
<h3>第八步：连接redis客户端</h3>
<p>node01执行以下命令连接redis客户端</p>
<p class="code">cd /export/redis-3.2.8</p>
<p class="code">src/redis-cli&nbsp; -h node01 -c -p 7001</p>
<p>&nbsp;</p>
<h2>3、redis集群管理</h2>
<p>添加一个新节点作为主节点</p>
<p>启动新节点的redis服务，然后添加到集群当中去</p>
<p>启动服务</p>
<p>cd /export/redis-3.2.8</p>
<p>mkdir -p /export/redis-3.2.8/clusters/7007</p>
<p>mkdir -p /export/redis-3.2.8/redisdata/7007</p>
<p class="code">src/redis-server clusters/7007/redis.conf</p>
<p class="code">src/redis-trib.rb add-node 192.168.8.100:7007 192.168.8.100:7001</p>
<p class="code">连接客户端：src/redis-cli -h node01 -c -p 7007</p>
<p class="code">src/redis-cli -h node01 -c -p 7001</p>
<p>&nbsp;</p>
<p>添加一个新节点作为副本</p>
<p>mkdir -p /export/redis-3.2.8/clusters/7008</p>
<p>mkdir -p /export/redis-3.2.8/redisdata/7008</p>
<p class="code">src/redis-server clusters/7008/redis.conf</p>
<p class="code">src/redis-trib.rb add-node --slave 192.168.8.100:7008 192.168.8.100:7001</p>
<p>&nbsp;</p>
<p>删除一个节点</p>
<p>命令格式</p>
<pre>src/redis-trib del-node 127.0.0.1:7000 `&lt;node-id&gt;`</pre>
<pre>src/redis-trib.rb del-node 192.168.100.100:7008 7c7b7f68bc56bf24cbb36b599d2e2d97b26c5540</pre>
<p>注：node-id如何查看，执行命令： redis-trib.rb check 192.168.8.100:7001 ，可以查看所有节点的唯一id&nbsp;</p>
<p>&nbsp;</p>
<p>重新分片</p>
<pre>./redis-trib.rb reshard node01:7001</pre>
<pre>./redis-trib.rb reshard --from &lt;node-id&gt; --to &lt;node-id&gt; --slots &lt;number of slots&gt; --yes &lt;host&gt;:&lt;port&gt;</pre>
<p>&nbsp;</p>
<h2>4、JavaAPI操作redis集群</h2>
<div>
<p class="a0">详见代码</p>
</div>]]></description></item><item><title>Update(stage3)：第1节 redis组件：8、主从复制架构；9、Sentinel架构</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/04/11456588.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 03 Sep 2019 16:20:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/04/11456588.html</guid><description><![CDATA[<h1>8、redis的主从复制架构</h1>
<p>在Redis中，用户可以通过执行SLAVEOF命令或者设置slaveof选项，让一个服务器去复制（replicate）另一个服务器，我们称呼被复制的服务器为主服务器（master），而对主服务器进行复制的服务器则被称为从服务器（slave），如图所示。</p>
<p><br clear="ALL" />
</p>
<p>使用主从复制这种模式，实现node01作为主节点，node02与node03作为从节点，并且将node01所有的数据全部都同步到node02与node03服务器</p>
<h2>第一步：node02与node03服务器安装redis</h2>
<h3>node02与node03执行以下命令安装依赖环境</h3>
<p class="code">yum -y install gcc-c++</p>
<h3>node02与node03上传redis压缩包</h3>
<p>在node02与node03服务器上面上传redis压缩包，然后进行解压</p>
<p>将安装包上传到/export/softwares路径下</p>
<p class="code">cd /export/softwares</p>
<p class="code">tar -zxvf redis-3.2.8.tar.gz -C ../servers/</p>
<h3>node02与node03服务器安装tcl</h3>
<p>node02与node03服务器执行以下命令在线装TCL</p>
<p class="code">yum&nbsp;
-y&nbsp; install&nbsp; tcl</p>
<p>&nbsp;</p>
<h3>node02与node03服务器编译redis</h3>
<p>node02与node03执行以下命令进行编译redis</p>
<p>执行以下命令进行编译：</p>
<p class="code">cd /export/servers/redis-3.2.8/</p>
<p class="code">make&nbsp;MALLOC=libc&nbsp;&nbsp; 或者使用命令&nbsp; make&nbsp; 进行编译</p>
<p class="code">make test &amp;&amp; make install</p>
<h3>node02与node03服务器修改redis配置文件</h3>
<h4>node02服务器修改配置文件命令如下</h4>
<p>执行以下命令修改redis配置文件</p>
<p class="code">cd /export/servers/redis-3.2.8/</p>
<p class="code">mkdir -p /export/servers/redis-3.2.8/logs</p>
<p class="code">mkdir -p /export/servers/redis-3.2.8/redisdata</p>
<p class="code">vim redis.conf</p>
<div>
<p class="a">bind node02</p>
<p class="a">daemonize yes</p>
<p class="a">pidfile /var/run/redis_6379.pid</p>
<p class="a">logfile
"/export/servers/redis-3.2.8/logs/redis.log"</p>
<p class="a">dir /export/servers/redis-3.2.8/redisdata</p>
<p class="a">slaveof node01 6379</p>







</div>
<h4>node03服务器修改配置文件命令如下</h4>
<p>执行以下命令修改redis配置文件</p>
<p class="code">cd /export/servers/redis-3.2.8/</p>
<p class="code">mkdir -p /export/servers/redis-3.2.8/logs</p>
<p class="code">mkdir -p /export/servers/redis-3.2.8/redisdata</p>
<p class="code">vim redis.conf</p>
<div>
<p class="a">bind
node03</p>
<p class="a">daemonize yes</p>
<p class="a">pidfile /var/run/redis_6379.pid</p>
<p class="a">logfile "/export/servers/redis-3.2.8/logs/redis.log"</p>
<p class="a">dir /export/servers/redis-3.2.8/redisdata</p>
<p class="a">slaveof
node01 6379</p>







</div>
<p>&nbsp;</p>
<h2>第二步、启动node02与node03机器的redis服务</h2>
<p>&nbsp;</p>
<p>node02执行以下命令启动redis服务</p>
<p class="code">cd&nbsp; /export/servers/redis-3.2.8/src</p>
<p class="code">redis-server&nbsp;
../redis.conf</p>
<p>node03执行以下命令启动redis服务</p>
<p class="code">cd&nbsp; /export/servers/redis-3.2.8/src</p>
<p class="code">redis-server&nbsp;
../redis.conf</p>
<p>&nbsp;</p>
<p>启动成功便可以实现redis的主从复制，node01可以读写操作，node02与node03只支持读取操作。</p>
<p>&nbsp;</p>
<h1>9、redis当中的Sentinel架构</h1>
<p>　　Sentinel（哨兵）是Redis 的高可用性解决方案：由一个或多个Sentinel 实例 组成的Sentinel 系统可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190904001911627-886864053.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>例如：</p>
<p><br clear="ALL" />
</p>
<p>在Server1 掉线后：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190904001841377-232520458.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190904001810165-1463304253.png" alt="" /></p>
<p>升级Server2 为新的主服务器：</p>
<p>&nbsp;</p>
<h2>第一步：三台机器修改哨兵配置文件</h2>
<p>三台机器执行以下命令修改redis的哨兵配置文件</p>
<p class="code">cd /export/servers/redis-3.2.8</p>
<p class="code">vim sentinel.conf</p>
<div>
<p class="1"># 配置监听的主服务器，这里sentinel monitor代表监控，mymaster代表服务器的名称，可以自定义，192.168.11.128代表监控的主服务器，6379代表端口，2代表只有两个或两个以上的哨兵认为主服务器不可用的时候，才会进行failover操作。</p>
<p class="a">#修改bind配置，每台机器修改为自己对应的主机名</p>
<p class="a">bind
node01&nbsp; </p>
<p class="a">#配置sentinel服务后台运行</p>
<p class="a">daemonize
yes</p>
<p class="a">#修改三台机器监控的主节点，现在主节点是node01服务器</p>
<p class="a">sentinel monitor mymaster node01 6379 2</p>
<p class="1"># sentinel auth-pass定义服务的密码，mymaster是服务名称，123456是Redis服务器密码</p>
<p class="1"># sentinel auth-pass &lt;master-name&gt;
&lt;password&gt;</p>







</div>
<p>&nbsp;</p>
<h2>第二步：三台机器启动哨兵服务</h2>
<p class="code">cd /export/servers/redis-3.2.8</p>
<p class="code">src/redis-sentinel sentinel.conf </p>
<h2>第三步：node01服务器杀死redis服务进程</h2>
<p>使用kill&nbsp; -9命令杀死redis服务进程，模拟redis故障宕机情况</p>
<p>过一段时间之后，就会在node02与node03服务器选择一台服务器来切换为主节点</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>第四步：redis的sentinel模式代码开发</h2>
<div>
<p class="1">详见代码</p>




</div>]]></description></item><item><title>Update(stage3)：第1节 redis组件：7、持久化</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/04/11456574.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 03 Sep 2019 16:14:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/04/11456574.html</guid><description><![CDATA[<h1>7、redis的持久化</h1>
<p>由于redis是一个内存数据库，所有的数据都是保存在内存当中的，内存当中的数据极易丢失，所以redis的数据持久化就显得尤为重要，在redis当中，提供了两种数据持久化的方式，分别为RDB以及AOF，且redis默认开启的数据持久化方式为RDB方式，接下来我们就分别来看下两种方式的配置吧</p>
<p>&nbsp;</p>
<h2>1、RDB持久化方案介绍</h2>
<h3>RDB方案介绍</h3>
<p>Redis会定期保存数据快照至一个rbd文件中，并在启动时自动加载rdb文件，恢复之前保存的数据。可以在配置文件中配置Redis进行快照保存的时机：</p>
<p>save [seconds] [changes]</p>
<p>意为在[seconds]秒内如果发生了[changes]次数据修改，则进行一次RDB快照保存，例如</p>
<div>
<p class="a0">save 60 100</p>
</div>
<p>会让Redis<span style="color: #ff0000;">每60秒检查一次</span>数据变更情况，如果发生了100次或以上的数据变更，则进行RDB快照保存。可以配置多条save指令，让Redis执行多级的快照保存策略。Redis默认开启RDB快照。也可以通过SAVE或者BGSAVE命令手动触发RDB快照保存。</p>
<p>SAVE&nbsp;和&nbsp;BGSAVE&nbsp;两个命令都会调用&nbsp;rdbSave&nbsp;函数，但它们调用的方式各有不同：</p>
<ul>
<li>SAVE&nbsp;直接调用&nbsp;rdbSave&nbsp;，阻塞&nbsp;Redis&nbsp;主进程，直到保存完成为止。在主进程阻塞期间，服务器不能处理客户端的任何请求。</li>
<li>BGSAVE&nbsp;则&nbsp;fork&nbsp;出一个子进程，子进程负责调用&nbsp;rdbSave&nbsp;，并在保存完成之后向主进程发送信号，通知保存已完成。&nbsp;Redis&nbsp;服务器在BGSAVE&nbsp;执行期间仍然可以继续处理客户端的请求。</li>
</ul>
<h3>RDB方案优点</h3>
<p>1、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对性能影响最小。如前文所述，Redis在保存RDB快照时会fork出子进程进行，几乎不影响Redis处理客户端请求的效率。</p>
<p>&nbsp;</p>
<p>2、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 每次快照会生成一个完整的数据快照文件，所以可以辅以其他手段保存多个时间点的快照（例如把每天0点的快照备份至其他存储媒介中），作为非常可靠的灾难恢复手段。</p>
<p>&nbsp;</p>
<p>3、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 使用RDB文件进行数据恢复比使用AOF要快很多</p>
<h3>RDB方案缺点</h3>
<p>1、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 快照是定期生成的，所以在Redis crash时或多或少会丢失一部分数据。</p>
<p>&nbsp;</p>
<p>2、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果数据集非常大且CPU不够强（比如单核CPU），Redis在fork子进程时可能会消耗相对较长的时间，影响Redis对外提供服务的能力。</p>
<h3>RDB方案配置</h3>
<p>修改redis的配置文件</p>
<p>&nbsp;</p>
<div>
<p class="a">cd /export/servers/redis-3.2.8/</p>
<p class="a">vim redis.conf</p>
<p class="a">save 900 1</p>
<p class="a">save 300 10</p>
<p class="a">save 60 10000<a href="file:///E:/Study/BigData/heima/stage3/Update/redis%20%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88%E6%96%87%E6%A1%A3/redis%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88.docx#_msocom_1">[a1]</a>&nbsp;</p>
<p class="a">save 5 1<a href="file:///E:/Study/BigData/heima/stage3/Update/redis%20%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88%E6%96%87%E6%A1%A3/redis%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88.docx#_msocom_2">[a2]</a>&nbsp;</p>
</div>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190904001320540-108930060.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>重新启动redis服务</p>
<p>每次生成新的dump.rdb都会覆盖掉之前的老的快照</p>
<p class="code">ps -ef | grep redis</p>
<p class="code">kill -9 69632 74217</p>
<p class="code">src/redis-server redis.conf</p>
<div>
<p class="a">root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 69632&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp; 0 11:07 ?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 00:00:55 redis-server 192.168.52.100:6379</p>
</div>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190904001350879-1541440392.png" alt="" /></p>
<h2>2、AOF持久化方案介绍</h2>
<h3>AOF方案介绍：</h3>
<p>采用AOF持久方式时，Redis会把每一个写请求都记录在一个日志文件里。在Redis重启时，会把AOF文件中记录的所有写操作顺序执行一遍，确保数据恢复到最新。AOF默认是关闭的，如要开启，进行如下配置：</p>
<div>
<p class="a0">appendonly yes</p>
</div>
<p>AOF提供了三种fsync配置，always/everysec/no，通过配置项[appendfsync]指定：</p>
<p>appendfsync no：不进行fsync，将flush文件的时机交给OS决定，速度最快appendfsync always：每写入一条日志就进行一次fsync操作，数据安全性最高，但速度最慢</p>
<p>appendfsync everysec：折中的做法，交由后台线程每秒fsync一次</p>
<p>随着AOF不断地记录写操作日志，因为所有的操作都会记录，所以必定会出现一些无用的日志。大量无用的日志会让AOF文件过大，也会让数据恢复的时间过长。不过Redis提供了AOF rewrite功能，可以重写AOF文件，只保留能够把数据恢复到最新状态的最小写操作集。</p>
<p>AOF rewrite可以通过BGREWRITEAOF命令触发，也可以配置Redis定期自动进行：</p>
<p>auto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mb</p>
<p>上面两行配置的含义是，Redis在每次AOF rewrite时，会记录完成rewrite后的AOF日志大小，当AOF日志大小在该基础上增长了100%后，自动进行AOF rewrite。同时如果增长的大小没有达到64mb，则不会进行rewrite。</p>
<p>&nbsp;</p>
<h3>AOF优点：</h3>
<p>1、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 最安全，在启用appendfsync always时，任何已写入的数据都不会丢失，使用在启用appendfsync everysec也至多只会丢失1秒的数据</p>
<p>&nbsp;</p>
<p>2、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AOF文件在发生断电等问题时也不会损坏，即使出现了某条日志只写入了一半的情况，也可以使用redis-check-aof工具轻松修复。</p>
<p>&nbsp;</p>
<p>3、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AOF文件易读，可修改，在进行了某些错误的数据清除操作后，只要AOF文件没有rewrite，就可以把AOF文件备份出来，把错误的命令删除，然后恢复数据。</p>
<p><strong>AOF</strong><strong>的缺点：</strong></p>
<p>1、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AOF文件通常比RDB文件更大</p>
<p>2、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 性能消耗比RDB高</p>
<p>3、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 数据恢复速度比RDB慢</p>
<p>&nbsp;</p>
<p>Redis的数据持久化工作本身就会带来延迟，需要根据数据的安全级别和性能要求制定合理的持久化策略：</p>
<p>AOF + fsync always的设置虽然能够绝对确保数据安全，但每个操作都会触发一次fsync，会对Redis的性能有比较明显的影响</p>
<p>&nbsp;</p>
<p>AOF + fsync every second是比较好的折中方案，每秒fsync一次</p>
<p>&nbsp;</p>
<p>AOF + fsync never会提供AOF持久化方案下的最优性能使用RDB持久化通常会提供比使用AOF更高的性能，但需要注意RDB的策略配置</p>
<p>&nbsp;</p>
<p>每一次RDB快照和AOF Rewrite都需要Redis主进程进行fork操作。fork操作本身可能会产生较高的耗时，与CPU和Redis占用的内存大小有关。根据具体的情况合理配置RDB快照和AOF Rewrite时机，避免过于频繁的fork带来的延迟</p>
<p>&nbsp;</p>
<p>Redis在fork子进程时需要将内存分页表拷贝至子进程，以占用了24GB内存的Redis实例为例，共需要拷贝24GB / 4kB * 8 = 48MB的数据。在使用单Xeon 2.27Ghz的物理机上，这一fork操作耗时216ms。</p>
<p>&nbsp;</p>
<h3>AOF方案配置</h3>
<p>&nbsp;</p>
<p>在redis中，aof的持久化机制默认是关闭的</p>
<p>AOF持久化，默认是关闭的，默认是打开RDB持久化</p>
<p>&nbsp;</p>
<p>appendonly yes，可以打开AOF持久化机制，在生产环境里面，一般来说AOF都是要打开的，除非你说随便丢个几分钟的数据也无所谓</p>
<p>打开AOF持久化机制之后，redis每次接收到一条写命令，就会写入日志文件中，当然是先写入os cache的，然后每隔一定时间再fsync一下</p>
<p>而且即使AOF和RDB都开启了，redis重启的时候，也是优先通过AOF进行数据恢复的，因为aof数据比较完整</p>
<p>可以配置AOF的fsync策略，有三种策略可以选择，一种是每次写入一条数据就执行一次fsync; 一种是每隔一秒执行一次fsync; 一种是不主动执行fsync</p>
<p>always: 每次写入一条数据，立即将这个数据对应的写日志fsync到磁盘上去，性能非常非常差，吞吐量很低; 确保说redis里的数据一条都不丢，那就只能这样了</p>
<p>在redis当中默认的AOF持久化机制都是关闭的</p>
<p>&nbsp;</p>
<h4>配置redis的AOF持久化机制方式</h4>
<p class="code">cd /export/servers/redis-3.2.8</p>
<p class="code">vim redis.conf</p>
<p>&nbsp;</p>
<div>
<p class="a">appendonly yes</p>
<p class="a"># appendfsync always<a href="file:///E:/Study/BigData/heima/stage3/Update/redis%20%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88%E6%96%87%E6%A1%A3/redis%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88.docx#_msocom_3">[a3]</a>&nbsp;</p>
<p class="a">appendfsync everysec<a href="file:///E:/Study/BigData/heima/stage3/Update/redis%20%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88%E6%96%87%E6%A1%A3/redis%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88.docx#_msocom_4">[a4]</a>&nbsp;</p>
<p class="a"># appendfsync no<a href="file:///E:/Study/BigData/heima/stage3/Update/redis%20%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88%E6%96%87%E6%A1%A3/redis%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88.docx#_msocom_5">[a5]</a>&nbsp;</p>
</div>
<p>&nbsp;</p>
<div><hr align="left" size="1" width="33%" />
<div>
<div>
<p>&nbsp;<a href="file:///E:/Study/BigData/heima/stage3/Update/redis%20%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88%E6%96%87%E6%A1%A3/redis%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88.docx#_msoanchor_1">[a1]</a>这三个选项是redis的配置文件默认自带的存储机制。表示每隔多少秒，有多少个key发生变化就生成一份dump.rdb文件，作为redis的快照文件</p>
<p>例如：save&nbsp; 60&nbsp; 10000 表示在60秒内，有10000个key发生变化，就会生成一份redis的快照</p>
</div>
</div>
<div>
<div>
<p>&nbsp;<a href="file:///E:/Study/BigData/heima/stage3/Update/redis%20%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88%E6%96%87%E6%A1%A3/redis%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88.docx#_msoanchor_2">[a2]</a>我自己修改的配置，表示每隔五秒钟，有一条数据发生变化都需要重新生成redis的快照</p>
</div>
</div>
<div>
<div>
<p>&nbsp;<a href="file:///E:/Study/BigData/heima/stage3/Update/redis%20%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88%E6%96%87%E6%A1%A3/redis%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88.docx#_msoanchor_3">[a3]</a>always: 每次写入一条数据，立即将这个数据对应的写日志fsync到磁盘上去，性能非常非常差，吞吐量很低; 确保说redis里的数据一条都不丢，那就只能这样了</p>
<p>&nbsp;</p>
</div>
</div>
<div>
<div>
<p>&nbsp;<a href="file:///E:/Study/BigData/heima/stage3/Update/redis%20%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88%E6%96%87%E6%A1%A3/redis%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88.docx#_msoanchor_4">[a4]</a>每秒将os cache中的数据fsync到磁盘，这个最常用的，生产环境一般都这么配置，性能很高，QPS还是可以上万的</p>
</div>
</div>
<div>
<div>
<p>&nbsp;<a href="file:///E:/Study/BigData/heima/stage3/Update/redis%20%E8%AF%BE%E7%A8%8B/%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88%E6%96%87%E6%A1%A3/redis%E8%AF%BE%E7%A8%8B%E6%95%99%E6%A1%88.docx#_msoanchor_5">[a5]</a>仅仅redis负责将数据写入os cache就撒手不管了，然后后面os自己会时不时有自己的策略将数据刷入磁盘，不可控了</p>
</div>
</div>
</div>]]></description></item><item><title>Update(stage3)：第1节 redis组件：4、安装(略)；5、数据类型(略)；6、javaAPI操作；</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/04/11456564.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 03 Sep 2019 16:12:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/04/11456564.html</guid><description><![CDATA[<h2>第三步：redis的javaAPI操作</h2>
<h3>操作string类型数据</h3>
<h3>操作hash列表类型数据</h3>
<h3>操作list类型数据</h3>
<h3>操作set类型的数据</h3>
<p>&nbsp;详见代码</p>]]></description></item><item><title>Update(stage3)：第1节 redis组件：1 - 3、web发展历史以及redis简介</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/03/11456513.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 03 Sep 2019 15:51:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/03/11456513.html</guid><description><![CDATA[<h1 align="center">Redis课程教案</h1>
<h1>1、 NoSQL数据库的发展历史简介</h1>
<h2>1、web系统的变迁历史</h2>
<h3><img style="font-size: 14px;" src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190903234852410-642684526.png" alt="" /></h3>
<p>&nbsp;</p>
<h3>web1.0时代简介</h3>
<p>基本上就是一些简单的静态页面的渲染，不会涉及到太多的复杂业务逻辑，功能简单单一，基本上服务器性能不会有太大压力</p>
<p>缺点：1、Service 越来越多，调用关系变复杂，前端搭建本地环境不再是一件简单的事。考虑团队协作，往往会考虑搭建集中式的开发服务器来解决。这种解决方案对编译型的后端开发来说也许还好，但对前端开发来说并不友好。天哪，我只是想调整下按钮样式，却要本地开发、代码上传、验证生效等好几个步骤。也许习惯了也还好，但开发服务器总是不那么稳定，出问题时往往需要依赖后端开发搞定。看似仅仅是前端开发难以本地化，但这对研发效率的影响其实蛮大。</p>
<p>2、JSP 等代码的可维护性越来越差。JSP 非常强大，可以内嵌 Java 代码。这种强大使得前后端的职责不清晰，JSP 变成了一个灰色地带。经常为了赶项目，为了各种紧急需求，会在 JSP 里揉杂大量业务代码。积攒到一定阶段时，往往会带来大量维护成本。</p>
<p>&nbsp;</p>
<h3>web2.0时代简介</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190903234933695-832610410.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>随着Web2.0的时代的到来，用户访问量大幅度提升，同时产生了大量的用户数据。加上后来的智能移动设备的普及，所有的互联网平台都面临了巨大的性能挑战。包括web服务器CPU及内存压力。数据库服务器IO压力等</p>
<p>&nbsp;</p>
<p>为了解决服务器的性能压力问题，出现了各种各样的解决方案，最典型的就是使用MVC的架构，MVC 是个非常好的协作模式，从架构层面让开发者懂得什么代码应该写在什么地方。为了让 View 层更简单干脆，还可以选择 Velocity、Freemaker 等模板，使得模板里写不了 Java 代码。看起来是功能变弱了，但正是这种限制使得前后端分工更清晰。但是同样也会面临以下问题</p>
<p>&nbsp;</p>
<p>1、前端开发重度依赖开发环境。这种架构下，前后端协作有两种模式：一种是前端写 demo，写好后，让后端去套模板。淘宝早期包括现在依旧有大量业务线是这种模式。好处很明显，demo 可以本地开发，很高效。不足是还需要后端套模板，有可能套错，套完后还需要前端确定，来回沟通调整的成本比较大。另一种协作模式是前端负责浏览器端的所有开发和服务器端的 View 层模板开发，支付宝是这种模式。好处是 UI 相关的代码都是前端去写就好，后端不用太关注，不足就是前端开发重度绑定后端环境，环境成为影响前端开发效率的重要因素。</p>
<p>&nbsp;</p>
<p>2、前后端职责依旧纠缠不清。Velocity 模板还是蛮强大的，变量、逻辑、宏等特性，依旧可以通过拿到的上下文变量来实现各种业务逻辑。这样，只要前端弱势一点，往往就会被后端要求在模板层写出不少业务代码。还有一个很大的灰色地带是 Controller，页面路由等功能本应该是前端最关注的，但却是由后端来实现。Controller 本身与 Model 往往也会纠缠不清，看了让人咬牙的代码经常会出现在 Controller 层。这些问题不能全归结于程序员的素养，否则 JSP 就够了。</p>
<p>&nbsp;</p>
<p>关于如何解决Web服务器的负载压力，其中最常用的一种方式就是使用nginx实现web集群的服务转发以及服务拆分等等</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190903235000223-676441911.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>但是这样也会存在问题，后端服务器的多个tomcat之间如何解决session共享的问题，以及session存放的问题等等</p>
<p>为了解决session存放的问题，也有多种解决方案</p>
<p>方案一：存放在cookie里面。不安全，否定</p>
<p>方案二：存放在文件或者数据库当中。速度慢</p>
<p>方案三：session复制。大量session冗余，节点浪费大</p>
<p>方案四：使用NoSQL缓存数据库。例如redis或者memcache等，完美解决</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>NoSQL</strong><strong>适用场景</strong></p>
<p>&nbsp;</p>
<ul>
<li>对数据高并发的读写</li>
<li>海量数据的读写</li>
<li>对数据高可扩展性的</li>
<li>速度够快，能够快速的存取数据</li>
</ul>
<p><strong>NoSQL</strong><strong>不适用场景</strong></p>
<ul>
<li>需要事务支持</li>
<li>基于sql的结构化查询存储，处理复杂的关系,需要即席查询（用户自定义查询条件的查询）。</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>总结：用不着sql</strong><strong>的和用了sql</strong><strong>也不行的情况，请考虑用NoSql</strong></p>
<h1>2、 NoSQL数据库兄弟会</h1>
<h2>1、memcache介绍</h2>
<ul>
<li>很早出现的NoSql数据库</li>
<li>数据都在内存中，一般不持久化</li>
<li>支持简单的key-value模式</li>
<li>一般是作为缓存数据库辅助持久化的数据库</li>
<li>几乎覆盖了Memcached的绝大部分功能</li>
<li>数据都在内存中，支持持久化，主要用作备份恢复</li>
<li>除了支持简单的key-value模式，还支持多种数据结构的存储，比如 list、set、hash、zset等。</li>
<li>一般是作为缓存数据库辅助持久化的数据库</li>
<li>现在市面上用得非常多的一款内存数据库</li>
<li>高性能、开源、模式自由(schema&nbsp; free)的文档型数据库</li>
<li>数据都在内存中， 如果内存不足，把不常用的数据保存到硬盘</li>
<li>虽然是key-value模式，但是对value（尤其是json）提供了丰富的查询功能</li>
<li>支持二进制数据及大型对象</li>
<li>可以根据数据的特点替代RDBMS ，成为独立的数据库。或者配合RDBMS，存储特定的数据。
<ul>
<li>HBase是<strong>Hadoop</strong>项目中的数据库。它用于需要对大量的数据进行随机、实时的读写操作的场景中。HBase的目标就是处理数据量非常庞大的表，可以用普通的计算机处理超过10亿行数据，还可处理有数百万列元素的数据表。</li>
</ul>
</li>
</ul>
<h2>2、redis介绍</h2>
<h2>3、mongoDB介绍</h2>
<h2>4、列式存储HBase介绍</h2>
<h1>3、 Redis的基本介绍以及使用场景</h1>
<p>redis官网地址：</p>
<p><a href="https://redis.io/">https://redis.io/</a></p>
<p>中文网站</p>
<p><a href="http://www.redis.cn/">http://www.redis.cn/</a></p>
<h2>3.1、redis的基本介绍</h2>
<p>&nbsp;</p>
<p>&nbsp;Redis是当前比较热门的NOSQL系统之一，它是一个开源的使用ANSI c语言编写的<strong>key-value</strong>存储系统（区别于MySQL的二维表格的形式存储。）。和Memcache类似，但很大程度补偿了Memcache的不足。和Memcache一样，Redis数据都是缓存在计算机内存中，不同的是，Memcache只能将数据缓存到内存中，无法自动定期写入硬盘，这就表示，一断电或重启，内存清空，数据丢失。所以Memcache的应用场景适用于缓存无需持久化的数据。而Redis不同的是它会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，实现数据的持久化</p>
<p>&nbsp;</p>
<h2>3.2、redis的适用场景</h2>
<p>&nbsp;</p>
<p align="left"><strong>1.</strong><strong>取最新</strong><strong>N</strong><strong>个数据的操作</strong></p>
<p align="left">比如典型的取你网站的最新文章，通过下面方式，我们可以将最新的5000条评论的ID放在Redis的List集合中，并将超出集合部分从数据库获取</p>
<ul>
<li>使用LPUSH latest.comments&lt;ID&gt;命令，向list集合中插入数据</li>
<li>插入完成后再用LTRIM latest.comments 0 5000命令使其永远只保存最近5000个ID</li>
<li>然后我们在客户端获取某一页评论时可以用下面的逻辑（伪代码）</li>
</ul>
<div>
<p class="a">FUNCTION get_latest_comments(start,num_items):</p>
<p class="a">&nbsp;&nbsp;&nbsp; id_list = redis.lrange("latest.comments",start,start+num_items-1)</p>
<p class="a">&nbsp;&nbsp;&nbsp; IF id_list.length &lt; num_items</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; id_list = SQL_DB("SELECT ... ORDER BY time LIMIT ...")</p>
<p class="a">&nbsp;&nbsp;&nbsp; END</p>
<p class="a">&nbsp;&nbsp;&nbsp; RETURN id_list</p>
<p class="a">END</p>
</div>
<p align="left">如果你还有不同的筛选维度，比如某个分类的最新N条，那么你可以再建一个按此分类的List，只存ID的话，Redis是非常高效的。</p>
<p align="left"><strong>2.</strong><strong>排行榜应用，取</strong><strong>TOP N</strong><strong>操作</strong></p>
<p align="left">这个需求与上面需求的不同之处在于，前面操作以时间为权重，这个是以某个条件为权重，比如按顶的次数排序，这时候就需要我们的sorted&nbsp;set出马了，将你要排序的值设置成sorted&nbsp;set的score，将具体的数据设置成相应的value，每次只需要执行一条ZADD命令即可。</p>
<p align="left"><strong>3.</strong><strong>需要精准设定过期时间的应用</strong></p>
<p align="left">比如你可以把上面说到的sorted&nbsp;set的score值设置成过期时间的时间戳，那么就可以简单地通过过期时间排序，定时清除过期数据了，不仅是清除Redis中的过期数据，你完全可以把Redis里这个过期时间当成是对数据库中数据的索引，用Redis来找出哪些数据需要过期删除，然后再精准地从数据库中删除相应的记录。</p>
<p align="left"><strong>4.</strong><strong>计数器应用</strong></p>
<p align="left">Redis的命令都是原子性的，你可以轻松地利用INCR，DECR命令来构建计数器系统。</p>
<p align="left"><strong>5.Uniq</strong><strong>操作，获取某段时间所有数据排重值</strong></p>
<p align="left">这个使用Redis的set数据结构最合适了，只需要不断地将数据往set中扔就行了，set意为集合，所以会自动排重。</p>
<p align="left"><strong>6.</strong><strong>实时系统，反垃圾系统</strong></p>
<p align="left">通过上面说到的set功能，你可以知道一个终端用户是否进行了某个操作，可以找到其操作的集合并进行分析统计对比等。没有做不到，只有想不到。</p>
<p align="left"><strong>7.Pub/Sub</strong><strong>构建实时消息系统</strong></p>
<p align="left">Redis的Pub/Sub系统可以构建实时的消息系统，比如很多用Pub/Sub构建的实时聊天系统的例子。</p>
<p align="left"><strong>8.</strong><strong>构建队列系统</strong></p>
<p align="left">使用list可以构建队列系统，使用sorted set甚至可以构建有优先级的队列系统。</p>
<p align="left"><strong>9.</strong><strong>缓存</strong></p>
<p align="left">将数据直接存放到内存中，性能优于Memcached，数据结构更多样化。</p>
<p>&nbsp;</p>
<h2>3.3、redis的特点</h2>
<p>高效性：Redis读取的速度是110000次/s，写的速度是81000次/s</p>
<p>原子性：Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。</p>
<p>支持多种数据结构：string（字符串）；list（列表）；hash（哈希），set（集合）；zset(有序集合)</p>
<p>稳定性：持久化，主从复制（集群）</p>
<p>其他特性：支持过期时间，支持事务，消息订阅。</p>
<p>&nbsp;</p>]]></description></item><item><title>linux Shell（待学）</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/03/11456215.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 03 Sep 2019 14:41:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/03/11456215.html</guid><description><![CDATA[<h1 class="md-end-block md-heading"><span class="md-plain">2. Shell</span></h1>
<h2 class="md-end-block md-heading"><span class="md-plain">2.1 简介</span></h2>
<p class="md-end-block md-p"><span class="md-plain">shell脚本执行方式Shell 是一个用 C 语言编写的程序，通过 Shell 用户可以访问操作系统内核服务。它类似于 DOS 下的 command 和后来的 cmd.exe。Shell 既是一种命令语言，又是一种程序设计语言。</span></p>
<p class="md-end-block md-p"><span class="md-plain">Shell script 是一种为 shell 编写的脚本程序。Shell 编程一般指 shell脚本编程，不是指开发 shell 自身。</span></p>
<p class="md-end-block md-p"><span class="md-plain">Shell 编程跟 java、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</span></p>
<p class="md-end-block md-p"><span class="md-plain">Linux 的 Shell 种类众多，一个系统可以存在多个 shell，可以通过 cat /etc/shells 命令查看系统中安装的 shell。</span></p>
<p class="md-end-block md-p"><span class="md-plain">Bash 由于易用和免费，在日常工作中被广泛使用。同时，Bash 也是大多数Linux 系统默认的 Shell。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">2.2快速入门</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">1 编写脚本</span></h3>
<p class="md-end-block md-p"><span class="md-plain">新建 /root/test/shell/01.sh 文件</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span><span>​<br /><span>echo 'hello world'</span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span>#<span class="md-plain">!是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</span></span></p>
<p class="md-end-block md-p"><span class="md-plain">echo 命令用于向窗口输出文本。</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">2 解释器</span></h3>
<p class="md-end-block md-p"><span class="md-plain">java 需要 虚拟机解释器, 同理 shell脚本也需要 解析器</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[root@node04 shells]# cat /etc/shells<br /><span>/bin/sh<br /><span>/bin/bash<br /><span>/sbin/nologin<br /><span>/bin/dash<br /><span>/bin/tcsh<br /><span>/bin/csh</span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">3 执行shell脚本</span></h3>
<p class="md-end-block md-p"><span><strong>3.1</strong><span class="md-plain"> 执行方式一</span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[root@node04 shells]# /bin/sh 01.sh<br /><span>hello world<br /><span><span>​<br /><span>[root@node04 shells]# /bin/bash 01.sh<br /><span>hello world</span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span><strong>3.3.1</strong><span class="md-plain"> <span><strong>问题: bash</strong><span class="md-plain"> <span><strong>和 sh*</strong><span class="md-plain">*是什么关系?**</span></span></span></span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">sh 是 bash 的 快捷方式</span></p>
<p class="md-end-block md-p"><span><strong>3.2</strong><span class="md-plain"> <span><strong>执行方式二</strong></span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">方式一的简化方式</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[root@node04 shells]# bash 01.sh<br /><span>hello world<br /><span><span>​<br /><span>[root@node04 shells]# sh 01.sh<br /><span>hello world<br /><span><span>​</span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span><strong>3.2.1</strong><span class="md-plain"> <span><strong>问题:</strong><span class="md-plain"> <span><strong>请思考</strong><span class="md-plain"> <span><strong>为什么可以省略 /bin/</strong></span></span></span></span></span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">因为 PATH环境变量中增加了 /bin/目录, 所以 使用/bin/sh等类似指令时, 可以省略 /bin</span></p>
<p class="md-end-block md-p"><span><strong>3.3</strong><span class="md-plain"> <span><strong>执行方式三</strong></span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">./文件名</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[root@node04 shells]# ll<br /><span>总用量 4<br /><span>-rw-r--r--. 1 root root 32 3月  14 00:20 01.sh<br /><span><span>​<br /><span>[root@node04 shells]# ./01.sh<br /><span>-bash: ./01.sh: 权限不够</span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span><strong>3.3.1</strong><span class="md-plain"> <span><strong>权限不够怎么办?</strong></span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[root@node04 shells]# chmod +x 01.sh<br /><span><span>​<br /><span>[root@node04 shells]# ll<br /><span>总用量 4<br /><span>-rwxr-xr-x. 1 root root 32 3月  14 00:20 01.sh<br /><span>再次执行:<br /><span><span>​<br /><span>[root@node04 shells]# ./01.sh<br /><span>hello world!</span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">2.3 shell变量</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">1 简介</span></h3>
<p class="md-end-block md-p"><span class="md-plain">定义变量时，变量名不加美元符号（$，PHP语言中变量需要），如：</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">your_name="runoob.com"</span></p>
<p class="md-end-block md-p"><span class="md-plain">注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">中间不能有空格，可以使用下划线（_）。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">不能使用标点符号。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">不能使用bash里的关键字（可用help命令查看保留关键字）。</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">有效的 Shell 变量名示例如下：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>RUNOOB<br /><span>LD_LIBRARY_PATH<br /><span>_var<br /><span>var2</span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">无效的变量命名：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>?var=123<br /><span>user*name=runoob</span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">除了显式地直接赋值，还可以用语句给变量赋值，如：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>for file in `ls /etc`</span></pre>
<p class="md-end-block md-p"><span class="md-plain">或</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>for file in $(ls /etc)</span></pre>
<p class="md-end-block md-p"><span class="md-plain">以上语句将 /etc 下目录的文件名循环出来。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">2 使用变量</span></h3>
<p class="md-end-block md-p"><span class="md-plain">使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>your_name="qinjx"<br /><span><span>​<br /><span>echo $your_name<br /><span><span>​<br /><span>echo ${your_name}</span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>for skill in Ada Coffe Action Java; do<br /><span> &nbsp;  echo "I am good at ${skill}Script"<br /><span>done</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">如果不给skill变量加花括号，写成echo "I am good at $skillScript"，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</span></p>
<p class="md-end-block md-p"><span class="md-plain">推荐给所有变量加上花括号，这是个好的编程习惯。</span></p>
<p class="md-end-block md-p"><span class="md-plain">已定义的变量，可以被重新定义，如：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>your_name="tom"<br /><span>echo $your_name<br /><span>your_name="alibaba"<br /><span>echo $your_name</span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">这样写是合法的，但注意，第二次赋值的时候不能写$your_name="alibaba"，使用变量的时候才加美元符（$）。</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">3 只读变量</span></h3>
<p class="md-end-block md-p"><span class="md-plain">使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</span></p>
<p class="md-end-block md-p"><span class="md-plain">下面的例子尝试更改只读变量，结果报错：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span><span>​<br /><span>myUrl="http://www.google.com"<br /><span>readonly myUrl<br /><span>myUrl="http://www.runoob.com"</span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">运行脚本，结果如下：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>/bin/sh: NAME: This variable is read only.</span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">4 删除变量</span></h3>
<p class="md-end-block md-p"><span class="md-plain">使用 unset 命令可以删除变量。语法：</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">unset variable_name</span></p>
<p class="md-end-block md-p"><span class="md-plain">变量被删除后不能再次使用。unset 命令不能删除只读变量。</span></p>
<p class="md-end-block md-p"><span><strong>实例</strong></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/sh<br /><span>myUrl="http://www.runoob.com"<br /><span>unset myUrl<br /><span>echo $myUrl</span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">以上实例执行将没有任何输出。</span></p>
<h2 class="md-end-block md-heading"><span class="md-plain">2.4 字符串</span></h2>
<p class="md-end-block md-p"><span class="md-plain"> 字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">1 单引号</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>name='乔布斯'<br /><span><span>​<br /><span>str='我很崇拜$name'<br /><span><span>​<br /><span>echo $str<br /><span><span>​</span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">输出结果为:</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>我很崇拜$name</span></pre>
<p class="md-end-block md-p"><span class="md-plain">单引号字符串的限制：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">2 双引号</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>name="乔布斯"<br /><span><span>​<br /><span>str="我很崇拜$name"<br /><span><span>​<br /><span>echo $str</span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">输出结果为：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>我很崇拜 乔布斯</span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">双引号的优点：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">双引号里可以有变量</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">双引号里可以出现转义字符</span></p>
</li>
</ul>
<h3 class="md-end-block md-heading"><span class="md-plain">3 拼接字符串</span></h3>
<p class="md-end-block md-p"><span class="md-plain"> <span><strong>3.1</strong><span class="md-plain"> <span><strong>使用双引号拼接</strong></span></span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>yourname="吴恩达"<br /><span>wenhou_1="你好,$yourname ."<br /><span>wenhou_2="你好,"$yourname" ."<br /><span>wenhou_3="你好,\"$yourname\" ."<br /><span>echo $wenhou_1 $wenhou_2 $wenhou_3</span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">输出结果为：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>你好,吴恩达 . 你好,吴恩达 . 你好,"吴恩达" .</span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain"> <span><strong>3.2 使用单引号拼接</strong></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>yourname="乔布斯"<br /><span><span>​<br /><span>wenhou_4='你好,$yourname.'<br /><span><span>​<br /><span>wenhou_5='你好,'$yourname.''<br /><span><span>​<br /><span>wenhou_6='你好,"$yourname" .'<br /><span><span>​<br /><span>echo $wenhou_3 $wenhou_4 $wenhou_5</span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">输出结果</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>你好,$yourname. 你好,乔布斯. 你好,"$yourname" .<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">4 获取字符串长度</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>string="jobs"<br /><span><span>​<br /><span>echo ${string} &nbsp;  # 输出结果: jobs<br /><span><span>​<br /><span>echo ${#string} &nbsp; # 输出结果: 4<br /><span><span>​</span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">5 提取子字符串</span></h3>
<p class="md-end-block md-p"><span class="md-plain">以下实例从字符串第 <span><strong>2</strong><span class="md-plain"> 个字符开始截取 <span><strong>4</strong><span class="md-plain"> 个字符：</span></span></span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>string="敢于亮剑决不后退"<br /><span><span>​<br /><span>echo ${string:2:2} &nbsp;  # 输出结果为: 亮剑<br /><span><span>​</span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">6 查找子字符串</span></h3>
<p class="md-end-block md-p"><span class="md-plain">查找字符 <span><strong>i</strong><span class="md-plain"> 或 <span><strong>o</strong><span class="md-plain"> 的位置(哪个字母先出现就计算哪个)：</span></span></span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>string="i am a boy"<br /><span>echo `expr index "$string" am` &nbsp;  # 输出是: 3<br /><span><span>​</span></span></span></span></pre>
<p class="md-end-block md-p"><span><strong>注意：</strong><span class="md-plain"> 以上脚本中 ` 是反引号(Esc下面的)，而不是单引号 '，不要看错了哦。</span></span></p>
<h2 class="md-end-block md-heading"><span class="md-plain">2.5 Shell 传递参数</span></h2>
<p class="md-end-block md-p"><span class="md-plain">我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：<span><strong>$n</strong><span class="md-plain">。</span></span></span></p>
<p class="md-end-block md-p"><span><strong>n</strong><span class="md-plain"> 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推&hellip;&hellip;</span></span></p>
<p class="md-end-block md-p"><span><strong>实例</strong></span></p>
<p class="md-end-block md-p"><span class="md-plain">以下实例我们向脚本传递三个参数，并分别输出，其中 <span><strong>$0</strong><span class="md-plain"> 为执行的文件名：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">#!/bin/bash<br /><span><span>​<br /><span><span class="cm-builtin">echo <span class="cm-string">"Shell 传递参数实例！";<br /><span><span>​<br /><span><span class="cm-builtin">echo <span class="cm-string">"执行的文件名：<span class="cm-def">$0<span class="cm-string">";<br /><span><span>​<br /><span><span class="cm-builtin">echo <span class="cm-string">"第一个参数为：<span class="cm-def">$1<span class="cm-string">";<br /><span><span>​<br /><span><span class="cm-builtin">echo <span class="cm-string">"第二个参数为：<span class="cm-def">$2<span class="cm-string">";<br /><span><span>​<br /><span><span class="cm-builtin">echo <span class="cm-string">"第三个参数为：<span class="cm-def">$3<span class="cm-string">";</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">为脚本设置可执行权限，并执行脚本，输出结果如下所示：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>$ chmod +x test.sh <br /><span><span>​<br /><span>$ ./test.sh 1 2 3<br /><span><span>​</span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">Shell 传递参数实例！</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>执行的文件名：./test.sh<br /><span><span>​<br /><span>第一个参数为：1<br /><span><span>​<br /><span>第二个参数为：2<br /><span><span>​<br /><span>第三个参数为：3<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">另外，还有几个特殊字符用来处理参数：</span></p>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span>参数处理</span></span></th><th><span class="td-span"><span>说明</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">$#</span></span></td>
<td><span class="td-span"><span class="md-plain">传递到脚本的参数个数</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">$*</span></span></td>
<td><span class="td-span"><span class="md-plain">以一个单字符串显示所有向脚本传递的参数。 如"$*"用「"」括起来的情况、以"$1 $2 &hellip; $n"的形式输出所有参数。</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">$$</span></span></td>
<td><span class="td-span"><span class="md-plain">脚本运行的当前进程ID号</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">$!</span></span></td>
<td><span class="td-span"><span class="md-plain">后台运行的最后一个进程的ID号</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">$@</span></span></td>
<td><span class="td-span"><span class="md-plain">与$*相同，但是使用时加引号，并在引号中返回每个参数。 如"$@"用「"」括起来的情况、以"$1" "$2" &hellip; "$n" 的形式输出所有参数。</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">$-</span></span></td>
<td><span class="td-span"><span class="md-plain">显示Shell使用的当前选项，与<span class=" md-link"><a href="http://www.runoob.com/linux/linux-comm-set.html"><span class="md-plain">set命令</span></a><span class="md-plain">功能相同。</span></span></span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">$?</span></span></td>
<td><span class="td-span"><span class="md-plain">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</span></span></td>
</tr>
</tbody>
</table>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span><span>​<br /><span>echo "Shell 传递参数实例！";<br /><span><span>​<br /><span>echo "第一个参数为：$1";<br /><span><span>​<br /><span>echo "参数个数为：$#";<br /><span><span>​<br /><span>echo "传递的参数作为一个字符串显示：$*";<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">执行脚本，输出结果如下所示：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>$ chmod +x test.sh <br /><span><span>​<br /><span>$ ./test.sh 1 2 3<br /><span><span>​<br /><span>Shell 传递参数实例！<br /><span><span>​<br /><span>第一个参数为：1<br /><span><span>​<br /><span>参数个数为：3<br /><span><span>​<br /><span>传递的参数作为一个字符串显示：1 2 3<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">$* 与 $@ 区别：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">相同点：都是引用所有参数。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2 3"（传递了一个参数），而 "@" 等价于 "1" "2" "3"（传递了三个参数）。</span></p>
</li>
</ul>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span><span>​<br /><span>echo "-- $* 演示 ---"<br /><span>for i in "$*"; do<br /><span> &nbsp;  echo $i<br /><span>done<br /><span><span>​<br /><span>echo "-- $@ 演示 ---"<br /><span>for i in "$@"; do<br /><span> &nbsp;  echo $i<br /><span>done<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">执行脚本，输出结果如下所示：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>$ chmod +x test.sh <br /><span><span>​<br /><span>$ ./test.sh 1 2 3<br /><span><span>​<br /><span>-- $* 演示 ---<br /><span>1 2 3<br /><span><span>​<br /><span>-- $@ 演示 ---<br /><span>1<br /><span>2<br /><span>3<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">2.6 Shell算术运算符</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">1 简介</span></h3>
<p class="md-end-block md-p"><span class="md-plain">Shell 和其他编程一样，支持包括：算术、关系、布尔、字符串等运算符。原生 bash 不支持简单的数学运算，但是可以通过其他命令来实现，例如expr。expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</span></p>
<p class="md-end-block md-p"><span class="md-plain">例如，两个数相加：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>val=`expr 2 + 2`<br /><span>echo $val<br /><span><span>​</span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">注意：</span></p>
<p class="md-end-block md-p"><span class="md-plain">表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2。</span></p>
<p class="md-end-block md-p"><span class="md-plain">完整的表达式要被 <span><code></code><span class="md-plain"> 包含，注意不是单引号，在 Esc 键下边。</span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</span></p>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span>运算符</span></span></th><th><span class="td-span"><span>说明</span></span></th><th><span class="td-span"><span>举例</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">+</span></span></td>
<td><span class="td-span"><span class="md-plain">加法</span></span></td>
<td><span class="td-span"><span><code>expr $a + $b</code><span class="md-plain"> 结果为 30。</span></span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">-</span></span></td>
<td><span class="td-span"><span class="md-plain">减法</span></span></td>
<td><span class="td-span"><span><code>expr $a - $b</code><span class="md-plain"> 结果为 -10。</span></span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">*</span></span></td>
<td><span class="td-span"><span class="md-plain">乘法</span></span></td>
<td><span class="td-span"><span><code>expr $a \* $b</code><span class="md-plain"> 结果为 200。</span></span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">/</span></span></td>
<td><span class="td-span"><span class="md-plain">除法</span></span></td>
<td><span class="td-span"><span><code>expr $b / $a</code><span class="md-plain"> 结果为 2。</span></span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">%</span></span></td>
<td><span class="td-span"><span class="md-plain">取余</span></span></td>
<td><span class="td-span"><span><code>expr $b % $a</code><span class="md-plain"> 结果为 0。</span></span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">=</span></span></td>
<td><span class="td-span"><span class="md-plain">赋值</span></span></td>
<td><span class="td-span"><span class="md-plain">a=$b 将把变量 b 的值赋给 a。</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">==</span></span></td>
<td><span class="td-span"><span class="md-plain">相等。用于比较两个数字，相同则返回 true。</span></span></td>
<td><span class="td-span"><span class="md-plain">[ $a == $b ] 返回 false。</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">!=</span></span></td>
<td><span class="td-span"><span class="md-plain">不相等。用于比较两个数字，不相同则返回 true。</span></span></td>
<td><span class="td-span"><span class="md-plain">[ $a != $b ] 返回 true。</span></span></td>
</tr>
</tbody>
</table>
<p class="md-end-block md-p"><span><strong>注意：</strong><span class="md-plain">条件表达式要放在方括号之间，并且要有空格，例如: <span><strong>[$a==$b]</strong><span class="md-plain"> 是错误的，必须写成 <span><strong>[ $a == $b ]</strong><span class="md-plain">。</span></span></span></span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">2 例子</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span><span>​<br /><span>a=4<br /><span><span>​<br /><span>b=20<br /><span><span>​<br /><span>#加法运算<br /><span><span>​<br /><span>each expr $a + $b<br /><span><span>​<br /><span>#减法运算<br /><span><span>​<br /><span>echo expr $a - $b<br /><span><span>​<br /><span>#乘法运算，注意*号前面需要反斜杠<br /><span><span>​<br /><span>echo expr $a \* $b<br /><span><span>​<br /><span>#除法运算<br /><span><span>​<br /><span>echo $a / $b<br /><span><span>​<br /><span> <br /><span><span>​<br /><span>此外，还可以通过(())、$(())、$[]进行算术运算。<br /><span><span>​<br /><span> <br /><span><span>​<br /><span> ((a++))<br /><span><span>​<br /><span>echo "a = $a"<br /><span><span>​<br /><span>c=$((a+b))<br /><span><span>​<br /><span>d=$[a+b]<br /><span><span>​<br /><span>echo "c = $c"<br /><span><span>​<br /><span>echo "d = $d"<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">2.7流程控制</span></h2>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">1 if else</span></h3>
<p class="md-end-block md-p"><span><strong>1.1 if</strong></span></p>
<p class="md-end-block md-p"><span class="md-plain">if 语句语法格式：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>if condition<br /><span>then<br /><span> &nbsp;  command1 <br /><span> &nbsp;  command2<br /><span> &nbsp;  ...<br /><span> &nbsp;  commandN <br /><span>fi<br /><span><span>​</span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">写成一行（适用于终端命令提示符）：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>if [ $(ps -ef | grep -c "ssh") -gt 1 ]; then echo "true"; fi<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">末尾的fi就是if倒过来拼写，后面还会遇到类似的。</span></p>
<p class="md-end-block md-p"><span><strong>1.2 if else</strong></span></p>
<p class="md-end-block md-p"><span class="md-plain">if else 语法格式：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>if condition<br /><span>then<br /><span> &nbsp;  command1<br /><span> &nbsp;  command2<br /><span> &nbsp;  ...<br /><span> &nbsp;  commandN<br /><span>else<br /><span> &nbsp;  command<br /><span>fi<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span><strong>1.3 if else-if else</strong></span></p>
<p class="md-end-block md-p"><span class="md-plain">if else-if else 语法格式：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>if condition1<br /><span>then<br /><span> &nbsp;  command1<br /><span>elif condition2 <br /><span>then <br /><span> &nbsp;  command2<br /><span>else<br /><span> &nbsp;  commandN<br /><span>fi<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">以下实例判断两个变量是否相等：</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">关系运算符</span></h3>
<p class="md-end-block md-p"><span class="md-plain">关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</span></p>
<p class="md-end-block md-p"><span class="md-plain">下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</span></p>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span>运算符</span></span></th><th><span class="td-span"><span>说明</span></span></th><th><span class="td-span"><span>举例</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">-eq</span></span></td>
<td><span class="td-span"><span class="md-plain">检测两个数是否相等，相等返回 true。</span></span></td>
<td><span class="td-span"><span class="md-plain">[ $a -eq $b ] 返回 false。</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">-ne</span></span></td>
<td><span class="td-span"><span class="md-plain">检测两个数是否不相等，不相等返回 true。</span></span></td>
<td><span class="td-span"><span class="md-plain">[ $a -ne $b ] 返回 true。</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">-gt</span></span></td>
<td><span class="td-span"><span class="md-plain">检测左边的数是否大于右边的，如果是，则返回 true。</span></span></td>
<td><span class="td-span"><span class="md-plain">[ $a -gt $b ] 返回 false。</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">-lt</span></span></td>
<td><span class="td-span"><span class="md-plain">检测左边的数是否小于右边的，如果是，则返回 true。</span></span></td>
<td><span class="td-span"><span class="md-plain">[ $a -lt $b ] 返回 true。</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">-ge</span></span></td>
<td><span class="td-span"><span class="md-plain">检测左边的数是否大于等于右边的，如果是，则返回 true。</span></span></td>
<td><span class="td-span"><span class="md-plain">[ $a -ge $b ] 返回 false。</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">-le</span></span></td>
<td><span class="td-span"><span class="md-plain">检测左边的数是否小于等于右边的，如果是，则返回 true。</span></span></td>
<td><span class="td-span"><span class="md-plain">[ $a -le $b ] 返回 true。</span></span></td>
</tr>
</tbody>
</table>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>a=10<br /><span><span>​<br /><span>b=20<br /><span><span>​<br /><span>if [ $a == $b ]<br /><span><span>​<br /><span>then<br /><span><span>​<br /><span> &nbsp; echo "a 等于 b"<br /><span><span>​<br /><span>elif [ $a -gt $b ]<br /><span><span>​<br /><span>then<br /><span><span>​<br /><span> &nbsp; echo "a 大于 b"<br /><span><span>​<br /><span>elif [ $a -lt $b ]<br /><span><span>​<br /><span>then<br /><span><span>​<br /><span> &nbsp; echo "a 小于 b"<br /><span><span>​<br /><span>else<br /><span><span>​<br /><span> &nbsp; echo "没有符合的条件"<br /><span><span>​<br /><span>fi<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">输出结果：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>a 小于 b<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">if else语句经常与test命令结合使用，如下所示：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>num1=$[2*3]<br /><span><span>​<br /><span>num2=$[1+5]<br /><span><span>​<br /><span>if test $[num1] -eq $[num2]<br /><span><span>​<br /><span>then<br /><span><span>​<br /><span> &nbsp;  echo '两个数字相等!'<br /><span><span>​<br /><span>else<br /><span><span>​<br /><span> &nbsp;  echo '两个数字不相等!'<br /><span><span>​<br /><span>fi<br /><span><span>​<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">输出结果：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>两个数字相等!<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">2 for 循环</span></h3>
<p class="md-end-block md-p"><span class="md-plain">与其他编程语言类似，Shell支持for循环。</span></p>
<p class="md-end-block md-p"><span class="md-plain">for循环一般格式为：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>for var in item1 item2 ... itemN<br /><span>do<br /><span> &nbsp;  command1<br /><span> &nbsp;  command2<br /><span> &nbsp;  ...<br /><span> &nbsp;  commandN<br /><span>done<br /><span><span>​</span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">写成一行：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>for var in item1 item2 ... itemN; do command1; command2&hellip; done;<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">当变量值在列表里，for循环即执行一次所有命令，使用变量名获取列表中的当前取值。命令可为任何有效的shell命令和语句。in列表可以包含替换、字符串和文件名。</span></p>
<p class="md-end-block md-p"><span class="md-plain">in列表是可选的，如果不用它，for循环使用命令行的位置参数。</span></p>
<p class="md-end-block md-p"><span class="md-plain">例如，顺序输出当前列表中的数字：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>for loop in 1 2 3 4 5<br /><span>do<br /><span> &nbsp;  echo "The value is: $loop"<br /><span>done<br /><span><span>​</span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">输出结果：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>The value is: 1<br /><span><span>​<br /><span>The value is: 2<br /><span><span>​<br /><span>The value is: 3<br /><span><span>​<br /><span>The value is: 4<br /><span><span>​<br /><span>The value is: 5<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">顺序输出字符串中的字符：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>for str in 'This is a string'<br /><span>do<br /><span> &nbsp;  echo $str<br /><span>done<br /><span><span>​</span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">输出结果：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>This is a string<br /><span><span>​</span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">3 while 语句</span></h3>
<p class="md-end-block md-p"><span class="md-plain">while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>while condition<br /><span>do<br /><span> &nbsp;  command<br /><span>done<br /><span><span>​</span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">以下是一个基本的while循环，测试条件是：如果int小于等于5，那么条件返回真。int从0开始，每次循环处理时，int加1。运行上述脚本，返回数字1到5，然后终止。</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span><span>​<br /><span>int=1<br /><span>while(( $int&lt;=5 ))<br /><span>do<br /><span> &nbsp;  echo $int<br /><span> &nbsp;  let "int++"<br /><span>done<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">运行脚本，输出：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>1<br /><span>2<br /><span>3<br /><span>4<br /><span>5<br /><span><span>​</span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">使用中使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量，具体可查阅：<span class=" md-link"><a href="http://www.runoob.com/linux/linux-comm-let.html"><span class="md-plain">Bash let 命令</span></a><span class="md-plain">。</span></span></span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">4 无限循环</span></h3>
<p class="md-end-block md-p"><span class="md-plain">无限循环语法格式：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>while :<br /><span>do<br /><span> &nbsp;  command<br /><span>done<br /><span><span>​</span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">或者</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>while true<br /><span>do<br /><span> &nbsp;  command<br /><span>done<br /><span><span>​</span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">或者</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>for (( ; ; ))<br /><span><span>​</span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">5 case</span></h3>
<p class="md-end-block md-p"><span class="md-plain">Shell case语句为多选择语句。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。case语句格式如下：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>case 值 in<br /><span><span>​<br /><span>模式1)<br /><span> &nbsp;  command1<br /><span> &nbsp;  command2<br /><span> &nbsp;  ...<br /><span> &nbsp;  commandN<br /><span> &nbsp;  ;;<br /><span>模式2）<br /><span> &nbsp;  command1<br /><span> &nbsp;  command2<br /><span> &nbsp;  ...<br /><span> &nbsp;  commandN<br /><span> &nbsp;  ;;<br /><span>esac<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">case工作方式如上所示。取值后面必须为单词in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。</span></p>
<p class="md-end-block md-p"><span class="md-plain">取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。</span></p>
<p class="md-end-block md-p"><span class="md-plain">下面的脚本提示输入1到4，与每一种模式进行匹配：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>echo '输入 1 到 4 之间的数字:'<br /><span><span>​<br /><span>echo '你输入的数字为:'<br /><span><span>​<br /><span>read aNum<br /><span><span>​<br /><span>case $aNum in<br /><span> &nbsp;  1)  echo '你选择了 1'<br /><span> &nbsp;  ;;<br /><span><span>​<br /><span> &nbsp;  2)  echo '你选择了 2'<br /><span> &nbsp;  ;;<br /><span><span>​<br /><span> &nbsp;  3)  echo '你选择了 3'<br /><span> &nbsp;  ;;<br /><span><span>​<br /><span> &nbsp;  4)  echo '你选择了 4'<br /><span> &nbsp;  ;;<br /><span><span>​<br /><span> &nbsp;  *)  echo '你没有输入 1 到 4 之间的数字'<br /><span> &nbsp;  ;;<br /><span>esac<br /><span><span>​<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">输入不同的内容，会有不同的结果，例如：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>输入 1 到 4 之间的数字:<br /><span><span>​<br /><span>你输入的数字为:<br /><span><span>​<br /><span>3<br /><span><span>​<br /><span>你选择了 3<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">6 跳出循环</span></h3>
<p class="md-end-block md-p"><span class="md-plain">在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue。</span></p>
<p class="md-end-block md-p"><span><strong>break</strong><span class="md-plain">命令</span></span></p>
<p class="md-end-block md-p"><span class="md-plain">break命令允许跳出所有循环（终止执行后面的所有循环）。</span></p>
<p class="md-end-block md-p"><span class="md-plain">下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，需要使用break命令。</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span><span>​<br /><span>while :<br /><span>do<br /><span> &nbsp;  echo -n "输入 1 到 5 之间的数字:"<br /><span> &nbsp; &nbsp;<br /><span> &nbsp;  read aNum<br /><span><span>​<br /><span> &nbsp;  case $aNum in<br /><span> &nbsp; &nbsp; &nbsp;  1|2|3|4|5) echo "你输入的数字为 $aNum!"<br /><span> &nbsp; &nbsp; &nbsp;  ;;<br /><span> &nbsp; &nbsp; &nbsp;  *) echo "你输入的数字不是 1 到 5 之间的! 游戏结束"<br /><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  break<br /><span> &nbsp; &nbsp; &nbsp;  ;;<br /><span> &nbsp;  esac<br /><span>done<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">执行以上代码，输出结果为：</span></p>
<p class="md-end-block md-p"><span class="md-plain">输入 1 到 5 之间的数字:3</span></p>
<p class="md-end-block md-p"><span class="md-plain">你输入的数字为 3!</span></p>
<p class="md-end-block md-p"><span class="md-plain">输入 1 到 5 之间的数字:7</span></p>
<p class="md-end-block md-p"><span class="md-plain">你输入的数字不是 1 到 5 之间的! 游戏结束</span></p>
<p class="md-end-block md-p"><span><strong>continue</strong></span></p>
<p class="md-end-block md-p"><span class="md-plain">continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</span></p>
<p class="md-end-block md-p"><span class="md-plain">对上面的例子进行修改：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span><span>​<br /><span>while :<br /><span><span>​<br /><span>do<br /><span><span>​<br /><span> &nbsp;  echo -n "输入 1 到 5 之间的数字: "<br /><span><span>​<br /><span> &nbsp;  read aNum<br /><span><span>​<br /><span> &nbsp;  case $aNum in<br /><span><span>​<br /><span> &nbsp; &nbsp; &nbsp;  1|2|3|4|5) echo "你输入的数字为 $aNum!"<br /><span><span>​<br /><span> &nbsp; &nbsp; &nbsp;  ;;<br /><span><span>​<br /><span> &nbsp; &nbsp; &nbsp;  *) echo "你输入的数字不是 1 到 5 之间的!"<br /><span><span>​<br /><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  continue<br /><span><span>​<br /><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  echo "游戏结束"<br /><span><span>​<br /><span> &nbsp; &nbsp; &nbsp;  ;;<br /><span><span>​<br /><span> &nbsp;  esac<br /><span><span>​<br /><span>done<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">运行代码发现，当输入大于5的数字时，该例中的循环不会结束，语句 <span><strong>echo "*</strong><span class="md-plain">*游戏结束"** 永远不会被执行。</span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">2.8 函数使用</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">1 语法</span></h3>
<p class="md-end-block md-p"><span class="md-plain">linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。</span></p>
<p class="md-end-block md-p"><span class="md-plain">shell中函数的定义格式如下：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[ function ] funname()<br /><span><span>​<br /><span>{<br /><span> &nbsp;  action;<br /><span> &nbsp;  [return int;]<br /><span>}<br /><span><span>​</span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">说明：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">下面的例子定义了一个函数并进行调用：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">#!/bin/bash<br /><span><span>​<br /><span>demoFun(){<br /><span><span>​<br /><span> &nbsp; &nbsp;<span class="cm-builtin">echo <span class="cm-string">"这是我的第一个 shell 函数!"<br /><span><span>​<br /><span>}<br /><span><span>​<br /><span><span class="cm-builtin">echo <span class="cm-string">"-----函数开始执行-----"<br /><span>demoFun<br /><span><span class="cm-builtin">echo <span class="cm-string">"-----函数执行完毕-----"</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">输出结果：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>-----函数开始执行-----<br /><span>这是我的第一个 shell 函数!<br /><span>-----函数执行完毕-----<br /><span><span>​</span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">下面定义一个带有return语句的函数：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span><span>​<br /><span>funWithReturn(){<br /><span><span>​<br /><span> &nbsp;  echo "这个函数会对输入的两个数字进行相加运算..."<br /><span><span>​<br /><span> &nbsp;  echo "输入第一个数字: "<br /><span><span>​<br /><span> &nbsp;  read aNum<br /><span><span>​<br /><span> &nbsp;  echo "输入第二个数字: "<br /><span><span>​<br /><span> &nbsp;  read anotherNum<br /><span><span>​<br /><span> &nbsp;  echo "两个数字分别为 $aNum 和 $anotherNum !"<br /><span><span>​<br /><span> &nbsp;  return $(($aNum+$anotherNum))<br /><span><span>​<br /><span>}<br /><span><span>​<br /><span>funWithReturn<br /><span><span>​<br /><span>echo "输入的两个数字之和为 $? !"<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">输出类似下面：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>这个函数会对输入的两个数字进行相加运算...<br /><span><span>​<br /><span>输入第一个数字: <br /><span><span>​<br /><span>1<br /><span><span>​<br /><span>输入第二个数字: <br /><span><span>​<br /><span>2<br /><span><span>​<br /><span>两个数字分别为 1 和 2 !<br /><span><span>​<br /><span>输入的两个数字之和为 3 !<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">函数返回值在调用该函数后通过 $? 来获得。</span></p>
<p class="md-end-block md-p"><span class="md-plain">注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">2 函数参数</span></h3>
<p class="md-end-block md-p"><span class="md-plain">在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...</span></p>
<p class="md-end-block md-p"><span class="md-plain">带参数的函数示例：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span><span>​<br /><span>funWithParam(){<br /><span> &nbsp;  echo "第一个参数为 $1 !"<br /><span> &nbsp;  echo "第二个参数为 $2 !"<br /><span> &nbsp;  echo "第十个参数为 $10 !"<br /><span> &nbsp;  echo "第十个参数为 ${10} !"<br /><span> &nbsp;  echo "第十一个参数为 ${11} !"<br /><span> &nbsp;  echo "参数总数有 $# 个!"<br /><span> &nbsp;  echo "作为一个字符串输出所有参数 $* !"<br /><span>}<br /><span><span>​<br /><span>funWithParam 1 2 3 4 5 6 7 8 9 34 73<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">输出结果：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>第一个参数为 1 !<br /><span><span>​<br /><span>第二个参数为 2 !<br /><span><span>​<br /><span>第十个参数为 10 !<br /><span><span>​<br /><span>第十个参数为 34 !<br /><span><span>​<br /><span>第十一个参数为 73 !<br /><span><span>​<br /><span>参数总数有 11 个!<br /><span><span>​<br /><span>作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n&gt;=10时，需要使用${n}来获取参数。</span></p>
<p class="md-end-block md-p"><span class="md-plain">另外，还有几个特殊字符用来处理参数：</span></p>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span>参数处理</span></span></th><th><span class="td-span"><span>说明</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">$#</span></span></td>
<td><span class="td-span"><span class="md-plain">传递到脚本的参数个数</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">$*</span></span></td>
<td><span class="td-span"><span class="md-plain">以一个单字符串显示所有向脚本传递的参数</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">$$</span></span></td>
<td><span class="td-span"><span class="md-plain">脚本运行的当前进程ID号</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">$!</span></span></td>
<td><span class="td-span"><span class="md-plain">后台运行的最后一个进程的ID号</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">$@</span></span></td>
<td><span class="td-span"><span class="md-plain">与$*相同，但是使用时加引号，并在引号中返回每个参数。</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">$-</span></span></td>
<td><span class="td-span"><span class="md-plain">显示Shell使用的当前选项，与set命令功能相同。</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">$?</span></span></td>
<td><span class="td-span"><span class="md-plain">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</span></span></td>
</tr>
</tbody>
</table>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">2.9 数组</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">1 定义数组</span></h3>
<p class="md-end-block md-p"><span class="md-plain">数组中可以存放多个值。Bash Shell 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小（与 PHP 类似）。</span></p>
<p class="md-end-block md-p"><span class="md-plain">与大部分编程语言类似，数组元素的下标由0开始。</span></p>
<p class="md-end-block md-p"><span class="md-plain">Shell 数组用括号来表示，元素用"空格"符号分割开，语法格式如下：</span></p>
<p class="md-end-block md-p"><span class="md-plain">array_name=(value1 ... valuen)</span></p>
<h4 class="md-end-block md-heading"><span class="md-plain">1.1 实例</span></h4>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span><span>​<br /><span>my_array=(A B "C" D)<br /><span><span>​<br /><span>我们也可以使用下标来定义数组:<br /><span><span>​<br /><span>array_name[0]=value0<br /><span><span>​<br /><span>array_name[1]=value1<br /><span><span>​<br /><span>array_name[2]=value2<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">2 读取数组</span></h3>
<p class="md-end-block md-p"><span class="md-plain">读取数组元素值的一般格式是：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>${array_name[index]}<br /><span><span>​</span></span></span></pre>
<h4 class="md-end-block md-heading"><span class="md-plain">2.1 实例</span></h4>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span><span>​<br /><span>my_array=(A B "C" D)<br /><span><span>​<br /><span>echo "第一个元素为: ${my_array[0]}"<br /><span><span>​<br /><span>echo "第二个元素为: ${my_array[1]}"<br /><span><span>​<br /><span>echo "第三个元素为: ${my_array[2]}"<br /><span><span>​<br /><span>echo "第四个元素为: ${my_array[3]}"<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">执行脚本，输出结果如下所示：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>$ chmod +x test.sh <br /><span><span>​<br /><span>$ ./test.sh<br /><span><span>​<br /><span>第一个元素为: A<br /><span>第二个元素为: B<br /><span>第三个元素为: C<br /><span>第四个元素为: D<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">2.2 获取数组中的所有元素</span></h4>
<p class="md-end-block md-p"><span class="md-plain">使用@ 或 * 可以获取数组中的所有元素，例如：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span><span>​<br /><span>my_array[0]=A<br /><span>my_array[1]=B<br /><span>my_array[2]=C<br /><span>my_array[3]=D<br /><span><span>​<br /><span>echo "数组的元素为: ${my_array[*]}"<br /><span>echo "数组的元素为: ${my_array[@]}"<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">执行脚本，输出结果如下所示：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>$ chmod +x test.sh <br /><span>$ ./test.sh<br /><span><span>​<br /><span>数组的元素为: A B C D<br /><span>数组的元素为: A B C D<br /><span><span>​</span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">2.3 获取数组的长度</span></h4>
<p class="md-end-block md-p"><span class="md-plain">获取数组长度的方法与获取字符串长度的方法相同，例如：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span>my_array[0]=A<br /><span>my_array[1]=B<br /><span>my_array[2]=C<br /><span>my_array[3]=D<br /><span><span>​<br /><span>echo "数组元素个数为: ${#my_array[*]}"<br /><span>echo "数组元素个数为: ${#my_array[@]}"<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">执行脚本，输出结果如下所示：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>$ chmod +x test.sh <br /><span>$ ./test.sh<br /><span><span>​<br /><span>数组元素个数为: 4<br /><span>数组元素个数为: 4<br /><span><span>​</span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">3 遍历数组</span></h3>
<h4 class="md-end-block md-heading"><span class="md-plain">3.1 方式一</span></h4>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span><span>​<br /><span>my_arr=(AA BB CC)<br /><span><span>​<br /><span>for var in ${my_arr[*]}<br /><span>do<br /><span>  echo $var<br /><span>done<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">3.2 方式二</span></h4>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>my_arr=(AA BB CC)<br /><span>my_arr_num=${#my_arr[*]}<br /><span>for((i=0;i&lt;my_arr_num;i++));<br /><span>do<br /><span>  echo "-----------------------------"<br /><span>  echo ${my_arr[$i]}<br /><span>done</span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">2.10 select</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">1 简介</span></h3>
<p class="md-end-block md-p"><span class="md-plain">select表达式是bash的一种扩展应用，擅长于交互式场合。用户可以从一组不同的值中进行选择：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>select var in ... ;<br /><span>do<br /><span>　commond<br /><span>done<br /><span>.... now $var can be used ...<br /><span><span>​</span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">注意：</span></p>
<p class="md-end-block md-p"><span class="md-plain">select 是个无限循环，因此要记住用 break 命令退出循环，或用exit 命令终止脚本</span></p>
<p class="md-end-block md-p"><span class="md-plain">示例</span></p>
<p class="md-end-block md-p"><span class="md-plain">下面是一个简单的示例：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span> <br /><span>echo "What is your favourite OS?"<br /><span>select var in "Linux" "Gnu Hurd" "Free BSD" "Other";<br /><span>do<br /><span>  break;<br /><span>done<br /><span>echo "You have selected $var"<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">该脚本的运行结果如下：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>What is your favourite OS?<br /><span>1) Linux<br /><span>2) Gnu Hurd<br /><span>3) Free BSD<br /><span>4) Other<br /><span>#? 1<br /><span>You have selected Linux<br /><span><span>​</span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">2 练习</span></h3>
<p class="md-end-block md-p"><span class="md-plain">实现如下的效果</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>1) java<br /><span>2) c++<br /><span>3) shell<br /><span>请输入你的选择:3<br /><span>你选择的是shell<br /><span><span>​</span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">代码如下</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span>select var in java c++ shell;<br /><span>do<br /><span>  break;<br /><span>done<br /><span>echo "你选择的是$var"<br /><span><span>​</span></span></span></span></span></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">3 select和case的综合练习</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span>echo "你想学习什么语言?"<br /><span>PS3="请输入你的选择:" &nbsp;  # 设置提示字符串<br /><span>select var in java c++ shell python;<br /><span>do<br /><span>  case $var in<br /><span> &nbsp; &nbsp; "java")<br /><span> &nbsp; &nbsp; &nbsp; echo "恭喜你选择成功.java最牛"<br /><span> &nbsp; &nbsp; ;;<br /><span> &nbsp; &nbsp; "c++")<br /><span> &nbsp; &nbsp; &nbsp; echo "驱动开发  网络优化  go 语言"<br /><span> &nbsp; &nbsp; ;;<br /><span> &nbsp; &nbsp; "shell")<br /><span> &nbsp; &nbsp; &nbsp; echo "运维必会"<br /><span> &nbsp; &nbsp; ;;<br /><span> &nbsp; &nbsp; python)<br /><span> &nbsp; &nbsp; &nbsp; echo "人工智能"<br /><span> &nbsp; &nbsp; esac<br /><span> <br /><span> &nbsp; &nbsp; break &nbsp;  # 如果这里没有break 将会进行无限循环<br /><span>done<br /><span> <br /><span>echo "你选择的是:$var"<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">4 修改提示符PS3</span></h3>
<p class="md-end-block md-p"><span class="md-plain">PS3作为select语句的shell界面提示符，提示符为PS3的值（赋予的字符串），更换默认的提示符&rdquo;#?&rdquo;</span></p>
<p class="md-end-block md-p"><span class="md-plain">注意：PS3一定要定义在select语句的前面</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span>PS3="请输入你的选择:"<br /><span>select var in java c++ shell;<br /><span>do<br /><span>  break;<br /><span>done<br /><span>echo "你选择的是$var"<br /><span><span>​</span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">2.11 EOF</span></h2>
<p class="md-end-block md-p"><span class="md-plain"> Shell中通常将EOF与 &lt;&lt; 结合使用，表示后续的输入作为子命令或子Shell的输入，直到遇到EOF为止，再返回到主调Shell。</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">1. 覆盖效果</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span>cat &gt;/root/a.txt &lt;&lt;EOF<br /><span>ABCD<br /><span>EOF<br /><span><span>​</span></span></span></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">2. 追加效果</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span>cat &gt;/root/a.txt &lt;&lt;EOF<br /><span>ABCD<br /><span>EOF<br /><span><span>​</span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">2.12 加载其它文件的变量</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">1 简介</span></h3>
<p class="md-end-block md-p"><span class="md-plain">和其他语言一样，Shell 也可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。</span></p>
<p class="md-end-block md-p"><span class="md-plain">Shell 文件包含的语法格式如下：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>. filename &nbsp; # 注意点号(.)和文件名中间有一空格<br /><span> <br /><span>或<br /><span> <br /><span>source filename <br /><span><span>​</span></span></span></span></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">2 练习</span></h3>
<p class="md-end-block md-p"><span class="md-plain">定义两个文件 test1.sh和test2.sh，在test1中定义一个变量arr=(java c++ shell),在test2中对arr进行循环打印输出。</span></p>
<p class="md-end-block md-p"><span><strong>第一步: vim test1.sh</strong></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span><span>​<br /><span>my_arr=(AA BB CC)<br /><span><span>​</span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">第二步: vim test2.sh</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#!/bin/bash<br /><span><span>​<br /><span>source ./test1.sh  # 加载test1.sh 的文件内容<br /><span><span>​<br /><span>for var in ${my_arr[*]}<br /><span><span>​<br /><span>do<br /><span><span>​<br /><span>  echo $var<br /><span><span>​<br /><span>done<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">第三步: 执行 test2.sh</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>sh test2.sh<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">好处 : </span></p>
<p class="md-end-block md-p"><span class="md-plain"> 1. 数据源 和 业务处理 分离</span></p>
<p class="md-end-block md-p"><span class="md-plain"> 2. 复用 代码扩展性更强</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">2.13 一键安装jdk</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">1 思路</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>#第1步：提示用户安装jdk<br /><span><span>​<br /><span>#第2步：删除centos自带的jdk<br /><span><span>​<br /><span>#第3步：创建/usr/local/java目录，进入目录<br /><span><span>​<br /><span>#第4步：下载jdk安装包<br /><span><span>​<br /><span>#第5步：解压jdk，删除压缩包<br /><span><span>​<br /><span>#第6步：设置环境变量<br /><span><span>​<br /><span>#第7步：加载环境变量<br /><span><span>​<br /><span>#第8步：提示用户安装成功，查看java的版本<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">2 代码</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-meta">#!/bin/bash<br /><span><span>​<br /><span><span class="cm-comment"># 1.提示安装jdk<br /><span><span class="cm-builtin">echo <span class="cm-string">"现在开始安装jdk"<br /><span><span class="cm-builtin">sleep <span class="cm-number">1<span class="cm-tab"> <span class="cm-tab">    <span class="cm-comment"># 休眠1秒钟<br /><span><span class="cm-comment"># 2.删除centos自带的jdk<br /><span><span class="cm-def">oldjava<span class="cm-operator">=<span class="cm-quote">` rpm -qa | grep java `<br /><span><span class="cm-keyword">for old <span class="cm-keyword">in <span class="cm-def">${oldjava};<br /><span><span class="cm-keyword">do<br /><span> &nbsp; &nbsp;<span class="cm-comment"># echo $old<br /><span> &nbsp;  rpm <span class="cm-attribute">-e <span class="cm-attribute">--nodeps <span class="cm-def">$old<br /><span><span class="cm-keyword">done<br /><span><span class="cm-comment"># 3.创建安装目录/usr/local/java, 进入安装目录<br /><span><span class="cm-def">java_path<span class="cm-operator">=<span class="cm-string">"/usr/local/java"<br /><span><span class="cm-keyword">if [ ! <span class="cm-attribute">-d <span class="cm-def">$java_path  ]<br /><span><span class="cm-keyword">then<br /><span> &nbsp; &nbsp;<span class="cm-builtin">mkdir <span class="cm-attribute">-p <span class="cm-def">$java_path<br /><span><span class="cm-keyword">fi<br /><span><span class="cm-builtin">cd <span class="cm-def">$java_path<br /><span><span>​<br /><span><span class="cm-comment"># 4.下载jdk安装包<br /><span><span class="cm-keyword">if [ ! <span class="cm-attribute">-f jdk-8u141-linux-x64.tar.gz  ]<br /><span><span class="cm-keyword">then<br /><span> &nbsp; &nbsp; <span class="cm-builtin">cp /export/soft/jdk-8u141-linux-x64.tar.gz ./<br /><span><span class="cm-keyword">fi<br /><span><span>​<br /><span><span class="cm-comment"># 5.解压缩安装包,删除安装包<br /><span><span class="cm-keyword">if [ ! <span class="cm-attribute">-f jdk1.8.0_141  ]<br /><span><span class="cm-keyword">then<br /><span> &nbsp;  tar <span class="cm-attribute">-zxvf jdk-8u141-linux-x64.tar.gz<br /><span> &nbsp; &nbsp;<span class="cm-builtin">rm <span class="cm-attribute">-rf jdk-8u141-linux-x64.tar.gz<br /><span><span class="cm-keyword">fi<br /><span><span>​<br /><span><span>​<br /><span><span class="cm-comment"># 6.设置环境变量<br /><span><span class="cm-def">JAVA_HOME<span class="cm-operator">=<span class="cm-string">"/usr/local/java/jdk1.8.0_141"<br /><span><span class="cm-keyword">if ! <span class="cm-builtin">grep <span class="cm-string">"JAVA_HOME=<span class="cm-def">$JAVA_HOME<span class="cm-string">" /etc/profile<br /><span><span class="cm-keyword">then<br /><span> &nbsp; &nbsp; <span class="cm-builtin">echo <span class="cm-string">"-------------------- path = <span class="cm-def">$PATH<span class="cm-string">"<br /><span> &nbsp; &nbsp;<span class="cm-comment"># JAVA_HOME<br /><span> &nbsp; &nbsp;<span class="cm-builtin">echo <span class="cm-string">"--------------JAVA_HOME------------------"<br /><span> &nbsp; &nbsp;<span class="cm-builtin">echo <span class="cm-string">"export JAVA_HOME=<span class="cm-def">$JAVA_HOME<span class="cm-string">" | <span class="cm-builtin">tee <span class="cm-attribute">-a /etc/profile<br /><span> &nbsp; &nbsp;<span class="cm-comment"># PATH<br /><span> &nbsp; &nbsp;<span class="cm-builtin">echo <span class="cm-string">"--------------PATH------------------------"<br /><span> &nbsp; &nbsp;<span class="cm-builtin">echo <span class="cm-string">"export PATH=:<span class="cm-def">$JAVA_HOME<span class="cm-string">/bin:<span class="cm-def">$PATH<span class="cm-string">" | <span class="cm-builtin">tee <span class="cm-attribute">-a /etc/profile<br /><span><span class="cm-keyword">fi<br /><span><span>​<br /><span><span class="cm-comment"># 7.加载环境变量<br /><span><span class="cm-builtin">source /etc/profile<br /><span><span>​<br /><span><span class="cm-comment"># 8.提示用户安装成功,查看jdk安装版本<br /><span><span class="cm-builtin">echo <span class="cm-string">"恭喜您,jdk安装成功!"<br /><span>java <span class="cm-attribute">-version</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">注意：在var目录上传jdk安装包！！！</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p md-focus"><span class="md-plain">从网络上下载jdk地址：</span></p>
<p>wget --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz</p>
<p>&nbsp;</p>]]></description></item><item><title>linux 管道相关命令（待学）</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/03/11456203.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 03 Sep 2019 14:39:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/03/11456203.html</guid><description><![CDATA[<h1 class="md-end-block md-heading">1.1 cut</h1>
<p class="md-end-block md-p"><span class="md-plain">cut：以某种方式按照文件的行进行分割</span></p>
<p class="md-end-block md-p"><span><strong>参数列表</strong><span class="md-plain">：</span></span></p>
<p class="md-end-block md-p"><span class="md-plain"> -b 按字节选取 忽略多字节字符边界，除非也指定了 -n 标志</span></p>
<p class="md-end-block md-p"><span class="md-plain"> -c 按字符选取</span></p>
<p class="md-end-block md-p"><span class="md-plain"> -d 自定义分隔符，默认为制表符。</span></p>
<p class="md-end-block md-p"><span class="md-plain"> -f 与-d一起使用，指定显示哪个区域。</span></p>
<p class="md-end-block md-p"><span class="md-plain"> 范围控制：</span></p>
<p class="md-end-block md-p"><span class="md-plain"> n:只有第n项</span></p>
<p class="md-end-block md-p"><span class="md-plain"> n-:从第n项一直到行尾</span></p>
<p class="md-end-block md-p"><span class="md-plain"> n-m:从第n项到第m项(包括m)</span></p>
<p class="md-end-block md-p"><span class="md-plain"> 准备工作</span></p>
<p class="md-end-block md-p"><span class="md-plain">vim 1.txt </span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>111:aaa:bbb:ccc<br /><span>222:ddd:eee:fff<br /><span>333:ggg:hhh<br /><span>444:iii</span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">cat 1.txt | cut -c 1</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain"> 练习1 截取出1.txt文件中前2行的第5个字符</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>head -2 1.txt | cut -c 5</span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习2 截取出1.txt文件中前2行以&rdquo;:&rdquo;进行分割的第1,2段内容</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>head -2 1.txt | cut -d ':' -f 1,2</span></pre>
<p class="md-end-block md-p"><span class="md-plain">或者</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>head -2 1.txt | cut -d ':' -f 1-2</span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习3</span></p>
<p class="md-end-block md-p"><span class="md-plain">截取出1.txt文件中前2行以&rdquo;:&rdquo;进行分割的第1,2,3段内容</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>head -2 1.txt | cut -d ':' -f 1,2,3</span></pre>
<p class="md-end-block md-p"><span class="md-plain">或者</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span> head -2 1.txt | cut -d ':' -f 1-3</span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">1.2 sort 的 工作原理</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">1.2.1 基本使用</span></h3>
<p class="md-end-block md-p"><span class="md-plain">sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[root@node01 tmp]# cat 01.txt<br /><span>banana<br /><span>apple<br /><span>pear<br /><span>orange<br /><span>pear<br /><span><span>​<br /><span>[root@node01 tmp]# sort 01.txt <br /><span>apple<br /><span>banana<br /><span>orange<br /><span>pear<br /><span>pear</span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.2.2 sort的-u选项</span></h3>
<p class="md-end-block md-p"><span class="md-plain">它的作用很简单，就是在输出行中去除重复行。</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[root@node01 tmp]# sort -u 01.txt <br /><span>apple<br /><span>banana<br /><span>orange<br /><span>pear</span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">pear由于重复被-u选项无情的删除了。</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">1. sort的-r 和 -n选项</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[root@node01 tmp]# cat 02.txt <br /><span>1<br /><span>3<br /><span>5<br /><span>7<br /><span>11<br /><span>2<br /><span>4<br /><span>6<br /><span>10<br /><span>8<br /><span>9</span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">sort默认的排序方式是升序</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[root@node01 tmp]# sort 02.txt <br /><span>1<br /><span>10<br /><span>11<br /><span>2<br /><span>3<br /><span>4<br /><span>5<br /><span>6<br /><span>7<br /><span>8<br /><span>9</span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span><strong>排序程序将这些数字按字符来排序了，排序程序会先比较1和2，显然1小，所以就将10放在2前面</strong></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[root@node01 tmp]# sort -n 02.txt<br /><span>1<br /><span>2<br /><span>3<br /><span>4<br /><span>5<br /><span>6<br /><span>7<br /><span>8<br /><span>9<br /><span>10<br /><span>11</span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">-r表示降序，n表示按数字进行排序</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[root@node01 tmp]# sort -n -r 02.txt<br /><span>11<br /><span>10<br /><span>9<br /><span>8<br /><span>7<br /><span>6<br /><span>5<br /><span>4<br /><span>3<br /><span>2<br /><span>1</span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">合并式</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[root@node01 tmp]# sort -nr 02.txt &nbsp;<br /><span>11<br /><span>10<br /><span>9<br /><span>8<br /><span>7<br /><span>6<br /><span>5<br /><span>4<br /><span>3<br /><span>2<br /><span>1</span></span></span></span></span></span></span></span></span></span></span></span></pre>
<h2 class="md-end-block md-heading"><span class="md-plain">1.3 wc命令</span></h2>
<p class="md-end-block md-p"><span class="md-plain">wc命令用于计算字数。</span></p>
<p class="md-end-block md-p"><span class="md-plain">利用wc指令我们可以计算文件的Byte数、字数、或是列数，若不指定文件名称、或是所给予的文件名为"-"，则wc指令会从标准输入设备读取数据。</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.3.1 语法</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span>​</span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">参数：</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">-c或--bytes或--chars 只显示Bytes数。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">-l或--lines 只显示行数。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">-w或--words 只显示字数。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">--help 在线帮助。</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">--version 显示版本信息。</span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.3.2 准备工作</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>111<br /><span>222 bbb<br /><span>333 aaa bbb <br /><span>444 aaa bbb ccc<br /><span>555 aaa bbb ccc ddd<br /><span>666 aaa bbb ccc ddd eee</span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.3.3 需求: 统计指定文件行数 字数 字节数</span></h3>
<p class="md-end-block md-p"><span class="md-plain">在默认的情况下，wc将计算指定文件的行数、字数，以及字节数。使用的命令为：</span></p>
<p class="md-end-block md-p"><span class="md-plain">wc 文件名 <span class="md-softbreak"> <span class="md-plain">使用 wc统计，结果如下：</span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[root@hadoop01 ~]# wc 01.txt &nbsp; &nbsp; <br /><span>6 21 85 01.txt<br /><span><span>​<br /><span>wc 01.txt &nbsp; &nbsp; &nbsp; # 01.txt 文件的统计信息<br /><span>6 21 85 01.txt &nbsp;  # 01.txt文件: 行数为6, 单词数为 21, 字节数为 85<br /><span>其中，3 个数字分别表示 01.txt文件的行数、单词数，以及该文件的字节数。</span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.3.4 需求: 统计多个文件的 行数 单词数 字节数</span></h3>
<p class="md-end-block md-p"><span class="md-plain">如果想同时统计多个文件的信息，例如同时统计01.txt 、02.txt 、03.txt，可使用如下命令：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[root@hadoop01 ~]# wc 01.txt 02.txt 03.txt<br /><span>  6  21  85 01.txt<br /><span>  2 &nbsp; 3  12 02.txt<br /><span>  3 &nbsp; 6  25 03.txt<br /><span> 11  30 122 总用量</span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.3.5 需求: 查看 根目录下有多少个文件</span></h3>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[root@hadoop01 ~]# ls /<br /><span>bin &nbsp; cgroup  etc &nbsp; lib &nbsp;  lost+found  misc  net  proc  sbin &nbsp; &nbsp; srv  tmp  var<br /><span>boot  dev &nbsp; &nbsp; home  lib64  media &nbsp; &nbsp; &nbsp; mnt &nbsp; opt  root  selinux  sys  usr<br /><span>[root@hadoop01 ~]# ls / | wc -w<br /><span>23</span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">1.4 uniq</span></h2>
<p class="md-end-block md-p"><span class="md-plain">uniq 命令用于检查及删除文本文件中重复出现的行，一般与 sort 命令结合使用。</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">1 参数说明：</span></h3>
<p class="md-end-block md-p"><span class="md-plain">&nbsp; &nbsp;&nbsp;-c 统计行数</span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">2 准备工作</span></h3>
<p class="md-end-block md-p"><span class="md-plain">vim 5.txt</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>张三 &nbsp; &nbsp;98<br /><span>李四 &nbsp; &nbsp;100<br /><span>王五 &nbsp; &nbsp;90<br /><span>赵六 &nbsp; &nbsp;95<br /><span>麻七 &nbsp; &nbsp;70<br /><span>李四 &nbsp; &nbsp;100<br /><span>王五 &nbsp; &nbsp;90<br /><span>赵六 &nbsp; &nbsp;95<br /><span>麻七 &nbsp; &nbsp;70</span></span></span></span></span></span></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">3 练习1&nbsp;去除5.txt中重复的行</span></h3>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>cat 5.txt | sort | uniq</span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">4 练习2&nbsp;统计5.txt中每行内容出现的次数</span></h3>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>cat 5.txt | sort | uniq -c</span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">1.5 tee</span></h2>
<p class="md-end-block md-p"><span class="md-plain">tee 和&nbsp;&gt;类似，重定向的同时还在屏幕输出<span class="md-softbreak"> <span class="md-plain">参数说明：<span class="md-softbreak"> <span class="md-plain">tee -a 内容追加 和 &gt;&gt; 类似</span></span></span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>[root@hadoop01 tmp]# echo 'aaa' | tee 1.txt<br /><span>aaa<br /><span><span>​<br /><span>[root@hadoop01 tmp]# cat 1.txt<br /><span>aaa<br /><span><span>​<br /><span>[root@hadoop01 tmp]# echo 'bbb' | tee -a 1.txt<br /><span>bbb<br /><span><span>​<br /><span>[root@hadoop01 tmp]# cat 1.txt<br /><span>aaa<br /><span>bbb</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>练习1 统计5.txt中每行内容出现的次数输出到a.txt,并且把内容显示在控制台</span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>sort 5.txt | uniq -c | tee a.txt</span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>练习2 统计5.txt中每行内容出现的次数输出追加到a.txt,并且把内容显示在控制台</span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>sort 5.txt | uniq -c | tee -a a.txt</span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">1.6 tr</span></h2>
<p class="md-end-block md-p"><span class="md-plain">Linux tr 命令用于转换或删除文件中的字符。<span class="md-softbreak"> <span class="md-plain">tr 指令从标准输入设备读取数据，经过字符串转译后，将结果输出到标准输出设备。</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">-d, --delete：删除指令字符</span></p>
<p class="md-end-block md-p"><span class="md-plain">练习1&nbsp;把itheima的小写i换成大写I</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>echo "itheima" | tr 'i' 'I'</span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习2&nbsp;把itheima的小写i和a换成大写I和A</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>echo "itheima" | tr 'i' 'I' | tr 'a' 'A'</span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习3&nbsp;把itheima的转换为大写</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>echo "itheima" |tr '[a-z]' '[A-Z]'</span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习4<span class="md-softbreak"> <span class="md-plain">删除abc1d4e5f中的数字</span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>echo 'abc1d4e5f' | tr -d '[0-9]'<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习5 单词计数</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>words.txt中的内容如下：<br /><span>hello,world,hadoop<br /><span>hive,sqoop,flume,hello<br /><span>kitty,tom,jerry,world<br /><span>hadoop<br /><span><span>​</span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>cat words.txt | tr -s ',' '\n' | sort | uniq -c | sort -r | awk '{print $2, $1}'<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">脚本解释：</span></p>
<p class="md-end-block md-p"><span class="md-tab"> <span class="md-plain">tr -s ' ' '\n' &nbsp; &nbsp; <span class="md-linebreak"> <span class="md-linebreak-mark"> <span class="md-tab"> <span class="md-plain">表示：连续出现的空格只保留一个，并在空格处以换行符分割文本 <span class="md-linebreak"> <span class="md-linebreak-mark"> <span class="md-plain">​<span class="md-softbreak"> <span class="md-tab"> <span class="md-plain">tr -s ',' '\t'<span class="md-softbreak"> <span class="md-tab"> <span class="md-plain">表示 ,使用 tab代替</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-tab"> <span class="md-plain">sort<span class="md-softbreak"> <span class="md-tab"> <span class="md-plain">表示：对输出文本进行排序</span></span></span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-tab"> <span class="md-plain">uniq -c<span class="md-softbreak"> <span class="md-tab"> <span class="md-plain">表示：对连续出现的重复的行进行计数</span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-tab"> <span class="md-plain">sort -r<span class="md-softbreak"> <span class="md-tab"> <span class="md-plain">表示：对输出文本进行降序排序</span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-tab"> <span class="md-plain">awk '{print $2, $1}'<span class="md-softbreak"> <span class="md-tab"> <span class="md-plain">表示：打印出文本的第二列和第一列</span></span></span></span></span></p>
<h2 class="md-end-block md-heading"><span class="md-plain">1.7 split</span></h2>
<p class="md-end-block md-p"><span class="md-plain">该指令将大文件分割成较小的文件，在默认情况下将按照每1000行切割成一个小文件<span class="md-softbreak"> <span class="md-plain">参数说明：<span class="md-softbreak"> <span class="md-plain">&nbsp; &nbsp;&nbsp;-b&lt;字节&gt; : 指定每多少字节切成一个小文件<span class="md-softbreak"> <span class="md-plain">&nbsp; &nbsp;&nbsp;-l&lt;行数&gt; : 指定每多少行切成一个小文件</span></span></span></span></span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习1 从/etc目录下查找以conf结尾的文件，并所有文件内容写入到v.txt</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>find /etc/ -type f -name "*conf" -exec cat {} &gt;&gt; v.txt \;<br /><span><span>​<br /><span>[root@hadoop01 tmp]# rm -rf *<br /><span><span>​<br /><span>[root@hadoop01 tmp]# ll<br /><span><span>​<br /><span>总用量 0<br /><span><span>​<br /><span>[root@hadoop01 tmp]# find /etc/ -type f -name "*conf" -exec cat {} &gt;&gt; v.txt \;<br /><span><span>​<br /><span>[root@hadoop01 tmp]# ll<br /><span><span>​<br /><span>总用量 420<br /><span><span>​<br /><span>-rw-r--r--. 1 root root 429746 3月 &nbsp;17 23:15 v.txt<br /><span><span>​<br /><span>[root@hadoop01 tmp]# wc v.txt <br /><span><span>​<br /><span> 12982 &nbsp;56922 429746 v.txt<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习2<span class="md-softbreak"> <span class="md-plain">把v.txt进行分割</span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>split v.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习3<span class="md-softbreak"> <span class="md-plain">把v.txt按2000进行分割</span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>split -l 2000 v.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习4&nbsp;把v.txt按10k进行分割</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>du &ndash;sh v.txt<br /><span><span>​<br /><span>split -b 10k v.txt<br /><span><span>​</span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">hadoop数据的划分, 这个是物理上真真实实的进行了划分，数据文件上传到HDFS里的时候，需要划分成一块一块，默认的每个块128MB。</span></p>
<h2 class="md-end-block md-heading"><span class="md-plain">1.8 awk</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">1.8.1 简介</span></h3>
<p class="md-end-block md-p"><span class="md-plain">awk是一种处理文本文件的命令，是一个强大的文本分析工具。但是比较复杂，不过功能比sed更加的强大，它支持分段。默认每行按空格或TAB分割。</span></p>
<p class="md-end-block md-p"><span class="md-plain">1.1 选项参数说明：<span class="md-softbreak"> <span class="md-plain">&nbsp; &nbsp;&nbsp;-F 指定输入文件折分隔符</span></span></span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.8.2 默认分段</span></h3>
<p class="md-end-block md-p"><span class="md-plain">默认每行按空格或TAB分割，使用$n来获取段号</span></p>
<p class="md-end-block md-p"><span class="md-plain">vim 1.txt</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>aaa 111 333<br /><span>bbb 444 555<br /><span>ccc 666 777 888<br /><span>ddd 999 222 999</span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习1&nbsp;创建1.txt,输入内容，打印出第1段</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk '{print $1}' 1.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习2<span class="md-softbreak"> <span class="md-plain">打印出1.txt的第1,2,3段</span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk '{print $1,$2,$3}' 1.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习3<span class="md-softbreak"> <span class="md-plain">打印出1.txt的第1,2,3段，并且使用#号连接</span></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk '{print $1"#"$2"#"$3}' 1.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.8.3 段之间的连接符OFS</span></h3>
<p class="md-end-block md-p"><span class="md-plain">练习1&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">打印1,2,3段，指定#为连接符</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk '{OFS="#"}{print $1,$2,$3}' 1.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.8.4 指定分隔符</span></h3>
<p class="md-end-block md-p"><span class="md-plain">-F<span class="md-tab"> <span class="md-plain">来指定分隔符</span></span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">准备工作</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">vim 2.txt</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>aaa:111:333<br /><span>bbb:444:555<br /><span>ccc:666:777:888<br /><span>ddd:999:222:999:cccc<br /><span><span>​</span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习1&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">打印出2.txt的第1段</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '{print $1}' 2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习2&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">打印出2.txt的所有段</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '{print $0}' 2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习3&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">打印出2.txt的第1,3段</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '{print $1,$3}' 2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.8.5 内容匹配</span></h3>
<p class="md-end-block md-p"><span class="md-plain">练习1&nbsp;匹配2.txt中包含cc的内容</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk '/cc/' 2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习2&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">匹配2.txt中第1段包含cc的内容</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '$1 ~ /cc/' 2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习3&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">匹配2.txt中第1段包含至少连续两个c的内容</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '$1 ~ /cc+/' 2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习4&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">在2.txt中如果匹配到aaa就打印第1,3段，如果匹配到ccc,就打印第1,3,4段</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '/aaa/ {print $1,$3} /ccc/ {print $1,$3,$4}' 1.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习5&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">在2.txt中如果匹配到aaa或者ddd,就打印全部内容</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '/aaa|ddd/ {print $0}' 2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.8.6 段内容判断</span></h3>
<p class="md-end-block md-p"><span class="md-plain">练习1&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">在2.txt中如果第3段等于222就打印所有内容</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '$3==222 {print $0}' &nbsp;2.txt <br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习2&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">在2.txt中如果第3段等于333就打印第一段</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '$3==333 {print $1}' &nbsp;2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习3&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">在2.txt中如果第3段大于等于300就打印第一段</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '$3&gt;=300 {print $0}' &nbsp;2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习4&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">在2.txt中如果第5段不等于cccc就打印全部</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '$5!="cccc" {print $0}' 2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习5&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">在2.txt中如果第1段等于ccc，并且第2段大于300就打印全部</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '$1=="ccc" &amp;&amp; $2&gt;300 {print $0}' 2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习6&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">在2.txt中如果第1段等于ccc，并且第2段匹配666就打印全部</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '$1=="ccc" &amp;&amp; $2==666 {print $0}' 2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.8.7 段之间的比较</span></h3>
<p class="md-end-block md-p"><span class="md-plain">练习1&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">在2.txt中如果第3段小于第4段就打印全部</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '$3&lt;$4 {print $0}' &nbsp;2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习2&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">在2.txt中如果第2段等于第4段就打印全部</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '$2==$4 {print $0}' 2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.8.8 NR行号和 NF段数</span></h3>
<p class="md-end-block md-p"><span class="md-plain">练习1</span></p>
<p class="md-end-block md-p"><span class="md-plain">打印2.txt全部内容显示行号</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '{print NR " : " $0}' &nbsp;2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习2&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">打印2.txt全部内容显示段数</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '{print NF " : " $0}' &nbsp;2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习3&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">打印2.txt前2行，并显示行号 （用三种不同的方式实现）</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>nl 2.txt | head -2<br /><span><span>​<br /><span>nl 2.txt | sed -n -e '1,2p'<br /><span> &nbsp; &nbsp;<br /><span>awk -F ':' 'NR&lt;=2 {print NR " " $0}' 2.txt<br /><span><span>​</span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习4&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">打印2.txt前2行，并且第1段匹配 aaa或者eee，打印全部，打印行号 （用两种方式）</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>nl 2.txt | head -2 | awk -F ':' '$1 ~ /aaa|eee/'<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">或者</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' 'NR&lt;=2 &amp;&amp; $1 ~ /aaa|eee/ {print NR " " $0}' &nbsp;2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习5&nbsp;从2.txt的前3行中匹配出第2段等于 666，并显示行号（用两种方式）</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>nl passwd | head -n 3 | awk -F ":" '$7=="/sbin/nologin" {print $0}'<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">或者</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' 'NR&lt;=3 &amp;&amp; $2==666 {print $0}' 2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习6&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">从2.txt前3行，把第1段内容替换为itheima，指定分隔符为|，显示行号（用两种方式）</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>nl 2.txt | head -3 | awk -F ':' '{OFS="|"} $1="itheima" {print NR "  " $0}'<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">或者</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' '{OFS="|"} NR&lt;=3 &amp;&amp; $1="itheima" {print NR "  " $0}' &nbsp;2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.8.9 分段求和</span></h3>
<p class="md-end-block md-p"><span class="md-plain">awk脚本，我们需要注意两个关键词BEGIN和END。<span class="md-softbreak"> <span class="md-plain">BEGIN{ 这里面放的是执行前的语句 }<span class="md-softbreak"> <span class="md-plain">{这里面放的是处理每一行时要执行的语句}<span class="md-softbreak"> <span class="md-plain">END {这里面放的是处理完所有的行后要执行的语句 }</span></span></span></span></span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">2.8.1 练习1&nbsp;对2.txt中的第2段求和</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk -F ':' 'BEGING{}{total=total+$2}END{print total}' &nbsp;2.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.8.10 综合练习</span></h3>
<p class="md-end-block md-p"><span class="md-plain">练习1&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">对统计awk目录下所有文本文件的大小</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>ll | awk 'BEGIN{}{total=total+$5} END{print(total)}'<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习2&nbsp;打印99乘法表</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>awk 'BEGIN{ for(i=1;i&lt;=9;i++){ for(j=1;j&lt;=i;j++){ printf("%dx%d=%d%s", i, j, i*j, "\t" )  } printf("\n")  }  }'<br /><span><span>​</span></span></span></pre>
<h2 class="md-end-block md-heading"><span class="md-plain">1.9 sed</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">简介</span></h3>
<p class="md-end-block md-p"><span class="md-plain">sed命令是来处理文本文件。sed也可以实现grep的功能，但是要复杂一些。<span class="md-softbreak"> <span class="md-plain">它的强大之处在于替换。并且对于正则也是支持的。</span></span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">参数说明：</span></p>
<p class="md-end-block md-p"><span class="md-plain">-n 仅显示处理后的结果<span class="md-softbreak"> <span class="md-plain">-e 以选项中指定的脚本来处理输入的文本文件<span class="md-softbreak"> <span class="md-plain">-f 以选项中指定的脚本文件来处理输入的文本文件</span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">动作说明：</span></p>
<p class="md-end-block md-p"><span class="md-plain">p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行<span class="md-softbreak"> <span class="md-plain">d ：删除<span class="md-softbreak"> <span class="md-plain">a ：新增，内容出现在下一行<span class="md-softbreak"> <span class="md-plain">i ：插入， 内容出现在上一行<span class="md-softbreak"> <span class="md-plain">c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行<span class="md-softbreak"> <span class="md-plain">s ：取代，可以直接进行取代的工作！通常这个 s 的动作可以搭配正规表示法！<span class="md-softbreak"> <span class="md-plain">= ：显示行号</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
</ul>
<h3 class="md-end-block md-heading"><span class="md-plain">准备数据</span></h3>
<p class="md-end-block md-p"><span class="md-plain">vim 1.txt</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>aaa java root<br /><span>bbb hello<br /><span>ccc rt<br /><span>ddd root nologin<br /><span>eee rtt<br /><span>fff ROOT nologin<br /><span>ggg rttt<br /><span><span>​</span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.9.1-n和p的组合：查找</span></h3>
<p class="md-end-block md-p"><span class="md-plain">练习1</span></p>
<p class="md-end-block md-p"><span class="md-plain">查找01.txt中包含root行</span></p>
<p class="md-end-block md-p"><span class="md-plain">&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>sed -n -e '/root/p' 01.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">练习2</span></p>
<p class="md-end-block md-p"><span class="md-plain">查找出01.txt中包含一个或多个r,r后面是t，并显示行号</span></p>
<p class="md-end-block md-p"><span class="md-plain">&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>nl 01.txt | sed -nr -e '/r+t/p'<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">或者</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>sed -nr -e '/r+t/p' -e '/r+t/=' 01.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">练习3</span></p>
<p class="md-end-block md-p"><span class="md-plain">列出01.txt的第2行数据,并显示行号</span></p>
<p class="md-end-block md-p"><span class="md-plain">&nbsp;答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>nl 01.txt | sed -n -e '2p'<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">练习4 列出01.txt的第2到第5行数据，并显示行号</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>nl 01.txt |sed -n -e '2,5p' &nbsp; &nbsp; &nbsp; &nbsp;# 显示行号<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">练习5 列出01.txt全部的数据，并显示行号</span></p>
<p class="md-end-block md-p"><span class="md-plain">&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>nl 01.txt<br /><span>cat -n 01.txt<br /><span>sed -n -e '1,$p' -e '1,$=' 01.txt<br /><span><span>​</span></span></span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">练习6&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">列出01.txt中包含root的内容，root不区分大小写,并显示行号</span></p>
<p class="md-end-block md-p"><span class="md-plain">&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>nl 01.txt | sed -n -e '/root/Ip'<br /><span><span>​<br /><span>nl 01.txt | grep -i root<br /><span><span>​<br /><span>cat -n 01.txt | grep -i root<span><span><br /></span></span></span></span></span></span></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">1.9.2 d 删除</span></h3>
<p class="md-end-block md-p"><span class="md-plain">练习1&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">删除01.txt中前3行数据，并显示行号</span></p>
<p class="md-end-block md-p"><span class="md-plain">&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>nl 01.txt | sed -e '1,3d'<br /><span><span><br /></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">练习2&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">保留01.txt中前4行数据，并显示行号</span></p>
<p class="md-end-block md-p"><span class="md-plain">&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>nl 01.txt | sed -e '5,$d'<br /><span><span><br /></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">1.9.3 a 和i 添加</span></h3>
<p class="md-end-block md-p"><span class="md-plain">&nbsp; &nbsp;&nbsp;a:在行后面插入&nbsp;(append)<span class="md-softbreak"> <span class="md-plain">&nbsp; &nbsp;&nbsp;i:在行前面插入 (insert)</span></span></span></p>
<p class="md-end-block md-p"><span class="md-plain">练习1:</span></p>
<p class="md-end-block md-p"><span class="md-plain">在01.txt的第二行后添加aaaaa,并显示行号</span></p>
<p class="md-end-block md-p"><span class="md-plain">&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>nl 01.txt | sed '2a aaaaa'<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">练习2&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">在01.txt的第1行前添加bbbbb，并显示行号</span></p>
<p class="md-end-block md-p"><span class="md-plain">&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>nl 01.txt | sed -e '1i bbbbb'<br /><span><span><br /></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">1.9.4 s和c替换</span></h3>
<p class="md-end-block md-p"><span class="md-plain">s:对字符串进入替换&nbsp; c:对行进行替换</span></p>
<p class="md-end-block md-p"><span class="md-plain">练习1&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">把01.txt中的nologin替换成为itheima,并显示行号</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>nl passwd | sed -e 's/nologin/itheima/'<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">练习2&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">把01.txt中的1,2行替换为aaa,并显示行号</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>nl passwd | sed -e '1,2c aaa'<br /><span><span><br /></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">1.9.5 对原文件进行操作</span></h3>
<p class="md-end-block md-p"><span class="md-plain">注意：在进行操作之前，最好是对数据进行备份，放置操作失误，数据无法恢复！</span></p>
<p class="md-end-block md-p"><span class="md-plain">练习1&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">删除01.txt中前2行数据，并且删除原文件中的数据</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>sed -i -e '1,2d' 01.txt<span><span><span><span><br /><span><span>​<br /><span>nl passwd 查看数据<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">练习2&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">在01.txt中把nologin替换为itheima</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>sed -i -e 's/nologin/itheima/' 01.txt<br /><span><span>​</span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">练习3&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">在01.txt文件中第2、3行替换为aaa</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>sed -i -e '2,3c aaa' 01.txt<span><span><br /></span></span></span></pre>
<h3 class="md-end-block md-heading"><span class="md-plain">1.9.6 综合练习</span></h3>
<p class="md-end-block md-p"><span class="md-plain">练习1&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">获取ip地址</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>ifconfig eth0 | grep 'inet addr:' | sed -e 's/^.addr://' | sed -e 's/Bcast.//'<br /><span><span><br /></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">练习2&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">从01.txt中提出数据，删除前5行，并把nologin替换为itheima,并显示行号</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>nl 01.txt | sed -e '1,5d' | sed -e 's/nologin/itheima/'<br /><span><span><br /></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">练习3&nbsp;</span></p>
<p class="md-end-block md-p"><span class="md-plain">从01.txt中提出数据，匹配出包含root的内容，再把nologin替换为itheima</span></p>
<p class="md-end-block md-p"><span class="md-plain">答案：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>nl 01.txt | grep 'root' | sed -e 's/nologin/itheima/'<br /><span><span>​<br /><span>或者<br /><span><span>​<br /><span>nl 01.txt | sed -n -e '/root/p' | sed -e 's/nologin/itheima/'<br /><span><span>​<br /><span>或者<br /><span><span>​<br /><span>nl 01.txt | sed -n -e '/root/{s/nologin/itheima/p}' #只显示替换内容的行</span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p><span>&nbsp;</span></p>]]></description></item><item><title>linux用户权限、系统信息相关命令（待学）</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/03/11455886.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 03 Sep 2019 13:41:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/03/11455886.html</guid><description><![CDATA[<h1 class="md-end-block md-heading"><span class="md-plain">用户权限相关命令</span></h1>
<h2 class="md-end-block md-heading"><span class="md-plain">目标</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>用户</strong><span class="md-plain"> 和 <span><strong>权限</strong><span class="md-plain"> 的基本概念</span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>用户管理</strong><span class="md-plain"> 终端命令</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>组管理</strong><span class="md-plain"> 终端命令</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>修改权限</strong><span class="md-plain"> 终端命令</span></span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">01.用户和权限的基本概念</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">1.1 基本概念</span></h3>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>用户</strong><span class="md-plain"> 是Linux系统工作中重要的一环, 用户管理包括 <span><strong>用户</strong><span class="md-plain"> 与 <span><strong>组</strong><span class="md-plain"> 管理</span></span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在Linux系统中, 不论是由本级或是远程登录系统, 每个系统都<span><strong>必须拥有一个账号</strong><span class="md-plain">, 并且<span><strong>对于不同的系统资源拥有不同的使用权限</strong></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">对 <span><strong>文件 / 目录</strong><span class="md-plain"> 的权限包括:</span></span></span></p>
</li>
</ul>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">序号</span></span></th><th><span class="td-span"><span class="md-plain">权限</span></span></th><th><span class="td-span"><span class="md-plain">英文</span></span></th><th><span class="td-span"><span class="md-plain">缩写</span></span></th><th><span class="td-span"><span class="md-plain">数字序号</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">01</span></span></td>
<td><span class="td-span"><span class="md-plain">读</span></span></td>
<td><span class="td-span"><span class="md-plain">read</span></span></td>
<td><span class="td-span"><span class="md-plain">r</span></span></td>
<td><span class="td-span"><span class="md-plain">4</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">02</span></span></td>
<td><span class="td-span"><span class="md-plain">写</span></span></td>
<td><span class="td-span"><span class="md-plain">write</span></span></td>
<td><span class="td-span"><span class="md-plain">w</span></span></td>
<td><span class="td-span"><span class="md-plain">2</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">03</span></span></td>
<td><span class="td-span"><span class="md-plain">执行</span></span></td>
<td><span class="td-span"><span class="md-plain">execute</span></span></td>
<td><span class="td-span"><span class="md-plain">x</span></span></td>
<td><span class="td-span"><span class="md-plain">1</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">04</span></span></td>
<td><span class="td-span"><span class="md-plain">无权限</span></span></td>
<td>&nbsp;</td>
<td><span class="td-span"><span class="md-plain">-</span></span></td>
<td><span class="td-span"><span class="md-plain">0</span></span></td>
</tr>
</tbody>
</table>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在 Linux中 ,可以指定 <span><strong>每一个用户</strong><span class="md-plain"> 针对 <span><strong>不同的文件或者目录</strong><span class="md-plain"> 的 <span><strong>不同权限</strong></span></span></span></span></span></span></p>
</li>
</ul>
<h3 class="md-end-block md-heading"><span class="md-plain">1.2 组</span></h3>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">为了方便用户管理, 提出了 <span><strong>组</strong><span class="md-plain"> 的概念, 如下图所示</span></span></span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.3 ls -l 扩展</span></h3>
<p class="md-end-block md-p">&nbsp;</p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>ls -l</code><span class="md-plain"> 可以查看文件夹下文件的详细信息, 从左到右 依次是:</span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>权限</strong><span class="md-plain">, 第一个字符如果是 <span><code>d</code><span class="md-plain"> 表示目录</span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>硬链接数</strong><span class="md-plain">, 通俗的讲就是有多少种方式, 可以访问当前目录和文件</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>拥有者</strong><span class="md-plain">, 家目录下 文件 / 木兰路 的拥有者通常都是 当前用户</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>组</strong><span class="md-plain">, 在linux中, 很多时候, 会出现组名 和 用户名 相同的情况, 后续会讲</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>大小</strong></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>时间</strong></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>名称</strong></span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
</li>
</ul>
<h3 class="md-end-block md-heading"><span class="md-plain md-expand">1.4 chmod 简单实用(重要)</span></h3>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>chmod</code><span class="md-plain"> 可以修改 <span><strong>用户/组</strong><span class="md-plain"> 对 <span><strong>文件/目录</strong><span class="md-plain"> 的权限 </span></span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">命令格式如下:</span></p>
</li>
</ul>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>chmod +/- rwx 文件名|目录名<br /><span><span>​</span></span></span></pre>
<blockquote>
<p class="md-end-block md-p"><span class="md-plain">提示: 已上方式会一次向修改 <span><code>拥有者</code><span class="md-plain"> / <span><code>组</code><span class="md-plain">权限, 有关 <span><code>chmod</code><span class="md-plain"> 的高级用户, 后续会讲</span></span></span></span></span></span></span></p>
</blockquote>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">1.5 超级用户 TODO</span></h3>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">linux系统中的 <span><code>root</code><span class="md-plain"> 账号通常 <span><strong>用于系统的维护和管理</strong><span class="md-plain">, 对操作系统的所有资源 <span><strong>具有访问权限</strong></span></span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在大多数版本的linux中, 都不推荐 <span><strong>直接只用 root 账号登录系统</strong></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在linux安装过程中, 系统会自动创建一个用户账号, 而这个默认的用户就称为 "标准用户"</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span><strong>sudo</strong></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>su</code><span class="md-plain"> 是 <span><code>substitute user</code><span class="md-plain"> 的缩写, 表示 <span><strong>使用另一个用户的身份</strong></span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>sudo</code><span class="md-plain"> 命令用来以其他身份来执行命令, 预设的身份为 <span><code>root</code></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">用户使用 <span><code>sudo</code><span class="md-plain"> 时, 必须先输入密码, 之后<span><strong>5分钟的有效期限</strong><span class="md-plain">, 超过期限则必须重新输入密码</span></span></span></span></span></p>
</li>
</ul>
<blockquote>
<p class="md-end-block md-p"><span class="md-plain">若其未经授权的用户企图使用 sudo, 则会发出警告邮件给管理员</span></p>
</blockquote>
<h2 class="md-end-block md-heading"><span class="md-plain">02.组管理 终端命令</span></h2>
<p class="md-end-block md-p"><span class="md-plain">提示: <span><strong>创建组 / 删除组</strong><span class="md-plain"> 的终端命令 都需要通过 <span><code>sudo</code><span class="md-plain"> 执行</span></span></span></span></span></p>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">序号</span></span></th><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">作用</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">01</span></span></td>
<td><span class="td-span"><span class="md-plain">groupadd 组名</span></span></td>
<td><span class="td-span"><span class="md-plain">添加组</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">02</span></span></td>
<td><span class="td-span"><span class="md-plain">groupdel 组名</span></span></td>
<td><span class="td-span"><span class="md-plain">删除组</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">03</span></span></td>
<td><span class="td-span"><span class="md-plain">cat /etc/group</span></span></td>
<td><span class="td-span"><span class="md-plain">确认组信息</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">04</span></span></td>
<td><span class="td-span"><span class="md-plain">chgrp 组名 文件/目录名</span></span></td>
<td><span class="td-span"><span class="md-plain">修改文件/目录的所属组</span></span></td>
</tr>
</tbody>
</table>
<blockquote>
<p class="md-end-block md-p"><span class="md-plain">提示:</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">组信息保存在 <span><code>/etc/group</code><span class="md-plain"> 文件中</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>/etc</code><span class="md-plain"> 目录是专门用来保存 <span><strong>系统配置信息</strong><span class="md-plain"> 的目录</span></span></span></span></p>
</li>
</ul>
</blockquote>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="assets/1558487176429.png"><img src="file://E:/Study/BigData/heima/stage1/Update/Linux%E5%AE%9E%E6%88%98/linux/day02_%E6%89%93%E5%8C%85%E5%8E%8B%E7%BC%A9_vim%E7%BC%96%E8%BE%91%E5%99%A8_%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86_%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/%E7%AC%94%E8%AE%B0/assets/1558487176429.png?lastModify=1567517611" alt="" data-alt="1558487176429" data-local-refresh="true" /></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在实际应用中, 可以预先针对 <span><strong>组</strong><span class="md-plain"> 设置好权限, 然后 <span><strong>将不同的用户添加到对应的组中</strong><span class="md-plain">, 从而<span><strong>不用依次为每一个用户设置权限</strong></span></span></span></span></span></span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190903214055964-1811278606.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p class="md-end-block md-p"><span><strong>演练目标</strong></span></p>
<ol class="ol-list" start="">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在 指定目录下 创建 <span><code>aaa</code><span class="md-plain"> 目录</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">新建 <span><code>dev</code><span class="md-plain"> 组</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">将 <span><code>aaa</code><span class="md-plain"> 目录的组修改为 <span><code>dev</code></span></span></span></span></p>
</li>
</ol>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">03.用户管理 终端命令</span></h2>
<p class="md-end-block md-p"><span class="md-plain">提示: <span><strong>创建用户 / 删除用户 / 修改其他用户密码</strong><span class="md-plain"> 的终端命令都需要通过 <span><code>sudo</code><span class="md-plain"> 执行</span></span></span></span></span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">3.1 创建用户 / 设置密码 / 删除用户</span></h3>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">序号</span></span></th><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">作用</span></span></th><th><span class="td-span"><span class="md-plain">说明</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">01</span></span></td>
<td><span class="td-span"><span class="md-plain">useradd -m -g 组 新建用户名</span></span></td>
<td><span class="td-span"><span class="md-plain">添加新用户</span></span></td>
<td><span class="td-span"><span class="md-plain">* -m 自动建立用户家目录<span class="md-br md-tag"> <span class="md-br md-tag"> <span class="md-plain">* -g 指定用户所在的组, 否则会建立一个和同名的组</span></span></span></span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">02</span></span></td>
<td><span class="td-span"><span class="md-plain">passwd 用户名</span></span></td>
<td><span class="td-span"><span class="md-plain">设置用户密码</span></span></td>
<td><span class="td-span"><span class="md-plain">如果是普通用户,直接用 passwd可以修改自己的账号密码</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">03</span></span></td>
<td><span class="td-span"><span class="md-plain">userdel -r 用户名</span></span></td>
<td><span class="td-span"><span class="md-plain">删除用户</span></span></td>
<td><span class="td-span"><span class="md-plain">-r 选项会自动删除用户家目录</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">04</span></span></td>
<td><span class="td-span"><span class="md-plain">cat /etc/passwd <span>|<span class="md-plain"> grep 用户名</span></span></span></span></td>
<td><span class="td-span"><span class="md-plain">确认用户信息</span></span></td>
<td><span class="td-span"><span class="md-plain">新建用户后,用户信息会保存在 /etc/passwd文件夹中</span></span></td>
</tr>
</tbody>
</table>
<blockquote>
<p class="md-end-block md-p"><span class="md-plain">提示:</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">创建用时, 如果忘记添加 <span><code>-m</code><span class="md-plain"> 选项指定新用户的家目录 -- 最简单的方式就是<span><strong>删除用户,重新创建</strong></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">创建用户时, 默认会创建一个和<span><strong>用户名</strong><span class="md-plain">同名的<span><strong>组名</strong></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">用户信息保存在 <span><strong>/etc/passwd</strong><span class="md-plain"> 文件中</span></span></span></p>
</li>
</ul>
</blockquote>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">3.2 查看用户信息</span></h3>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">序号</span></span></th><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">作用</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">01</span></span></td>
<td><span class="td-span"><span class="md-plain">id [用户名]</span></span></td>
<td><span class="td-span"><span class="md-plain">查看用户UID 和 GID 信息</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">02</span></span></td>
<td><span class="td-span"><span class="md-plain">who</span></span></td>
<td><span class="td-span"><span class="md-plain">查看当前所有登录的用户列表</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">03</span></span></td>
<td><span class="td-span"><span class="md-plain">whoami</span></span></td>
<td><span class="td-span"><span class="md-plain">查看当前登录用户的账户名</span></span></td>
</tr>
</tbody>
</table>
<p class="md-end-block md-p"><span><strong>passwd</strong><span class="md-plain">文件</span></span></p>
<p class="md-end-block md-p"><span><code>/etc/passwd</code><span class="md-plain">文件存放的是用户的信息, 由6个分好组成的7个信息, 分别是</span></span></p>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="assets/1558487197175.png"><img src="file://E:/Study/BigData/heima/stage1/Update/Linux%E5%AE%9E%E6%88%98/linux/day02_%E6%89%93%E5%8C%85%E5%8E%8B%E7%BC%A9_vim%E7%BC%96%E8%BE%91%E5%99%A8_%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86_%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/%E7%AC%94%E8%AE%B0/assets/1558487197175.png?lastModify=1567517611" alt="" data-alt="1558487197175" data-local-refresh="true" /></span></p>
<ol class="ol-list" start="">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">用户名</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">密码 (x, 表示加密的密码)</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">UID (用户标志)</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">GID(组标志)</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">用户全名或本地账号</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">家目录</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">登录使用的Shell, 就是登录之后, 使用的终端命令</span></p>
</li>
</ol>
<p class="md-end-block md-p">&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190903214002395-899477144.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p class="md-end-block md-p"><span><strong>usermod</strong></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>useradd</code><span class="md-plain"> 可以用来设置 用户 的 <span><strong>主组 / 附加组</strong><span class="md-plain"> 和 <span><strong>登录 Shell</strong><span class="md-plain">, 命令格式如下:</span></span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>主组:</strong><span class="md-plain"> 通常在新建用户是指定, 在 <span><code>/etc/passwd</code><span class="md-plain"> 的第4列 GID 对应的组</span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>附加组:</strong><span class="md-plain"> 在 /etc/group中最后一列表示改组的用户列表, 用于指定 <span><strong>用户的附加权限</strong></span></span></span></p>
</li>
</ul>
<blockquote>
<p class="md-end-block md-p"><span class="md-plain">提示 : 设置用户的附加组之后,重新重新登录才能生效</span></p>
</blockquote>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span># 修改用户的主组(passwd中的GID)<br /><span>usermod -g 组 用户名<br /><span><span>​<br /><span># 修改用户的附加组<br /><span>usermod -G 组 用户名<br /><span><span>​<br /><span># 修改用户登录 Shell<br /><span>usermod -s /bin/bash<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">注意: 默认使用 <span><code>useradd</code><span class="md-plain"> 添加的用户是没有权限使用 <span><code>sudo</code><span class="md-plain"> 以 <span><code>root</code><span class="md-plain"> 身份执行命令的, 可以使用一下命令, 将用户添加到 <span><code>sudo</code><span class="md-plain"> 附加组中 </span></span></span></span></span></span></span></span></span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>usermod -G sudo 用户名</span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span><strong>which(重要)</strong></span></p>
<blockquote>
<p class="md-end-block md-p"><span class="md-plain">提示</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>/etc/passwd</code><span class="md-plain"> 是用于保存用户信息的文件</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>/usr/bin/passwd</code><span class="md-plain"> 是用于修改用户密码的程序</span></span></p>
</li>
</ul>
</blockquote>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">which 命令可以查看执行命令所在位置, 例如</span></p>
</li>
</ul>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>which ls<br /><span># 输出<br /><span># /bin/ls<br /><span><span>​<br /><span>which useradd<br /><span># 输出<br /><span># /usr/sbin/useradd<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span><strong>bin 和 sbin</strong></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在 linux中 绝大多数可执行文件都保存在 <span><code>/bin</code><span class="md-plain">、<span><code>/sbin</code><span class="md-plain">、 <span><code>/user/bin</code><span class="md-plain">、 <span><code>/usr/sbin</code></span></span></span></span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>/bin</code><span class="md-plain"> (<span><code>binary</code><span class="md-plain">) 是二进制执行的文件目录,主要用于具体应用</span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>/sbin</code><span class="md-plain"> (<span><code>system binary</code><span class="md-plain">) 是系统管理员转换用的二进制代码存放目录, 主要用于系统管理</span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>/usr/bin</code><span class="md-plain"> (<span><code>user commands for applications</code><span class="md-plain">) 后期安装一些软件</span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>/usr/sbin</code><span class="md-plain"> (<span><code>super user commands for applications</code><span class="md-plain">) 超级用户的一些管理程序</span></span></span></span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">3.3 切换用户</span></h3>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">序号</span></span></th><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">作用</span></span></th><th><span class="td-span"><span class="md-plain">说明</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">01</span></span></td>
<td><span class="td-span"><span class="md-plain">su - 用户名</span></span></td>
<td><span class="td-span"><span class="md-plain">切换用户, 并且企划目录</span></span></td>
<td><span class="td-span"><span class="md-plain">- 可以切换到用户家目录, 否则保持位置不变</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">02</span></span></td>
<td><span class="td-span"><span class="md-plain">exit</span></span></td>
<td><span class="td-span"><span class="md-plain">退出当前登录用户</span></span></td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>su</code><span class="md-plain"> 不接用户名, 可以切换到 <span><code>root</code><span class="md-plain"> , 但是不推荐使用, 因为不安全</span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>exit</code><span class="md-plain"> 示意图如下:</span></span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="assets/1558487219340.png"><img src="file://E:/Study/BigData/heima/stage1/Update/Linux%E5%AE%9E%E6%88%98/linux/day02_%E6%89%93%E5%8C%85%E5%8E%8B%E7%BC%A9_vim%E7%BC%96%E8%BE%91%E5%99%A8_%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86_%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/%E7%AC%94%E8%AE%B0/assets/1558487219340.png?lastModify=1567517611" alt="" data-alt="1558487219340" data-local-refresh="true" /></span></p>
<p class="md-end-block md-p">&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190903213903147-1917934957.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">04.修改用户用户权限</span></h2>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">序号</span></span></th><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">作用</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">01</span></span></td>
<td><span class="td-span"><span class="md-plain">chown</span></span></td>
<td><span class="td-span"><span class="md-plain">修改拥有者</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">02</span></span></td>
<td><span class="td-span"><span class="md-plain">chgrp</span></span></td>
<td><span class="td-span"><span class="md-plain">修改组</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">03</span></span></td>
<td><span class="td-span"><span class="md-plain">chmod</span></span></td>
<td><span class="td-span"><span class="md-plain">修改权限</span></span></td>
</tr>
</tbody>
</table>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">命令格式如下</span></p>
</li>
</ul>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span># 修改文件 | 目录 的拥有者<br /><span>chown 用户名 文件名|目录名<br /><span><span>​<br /><span># 递归修改文件|目录的组<br /><span>chgrp -R 组名<span class="cm-tab"> 文件名|目录名<br /><span><span>​<br /><span># 递归修改文件权限<br /><span>chmod -R 755 文件名|目录名<br /><span><span>​</span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>chmod</code><span class="md-plain"> 在设置权限时, 可以简单的使用三个数字对应 <span><strong>拥有者 / 组 和 其他</strong><span class="md-plain"> 用户的权限</span></span></span></span></p>
</li>
</ul>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span># 直接修改文件|目录的 读|写|执行 权限, 但是不能精确到 拥有者|组|其他<br /><span>chmod +/-rwx 文件名|目录名<span><span><br /></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="assets/1558487247085.png"><img src="file://E:/Study/BigData/heima/stage1/Update/Linux%E5%AE%9E%E6%88%98/linux/day02_%E6%89%93%E5%8C%85%E5%8E%8B%E7%BC%A9_vim%E7%BC%96%E8%BE%91%E5%99%A8_%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86_%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/%E7%AC%94%E8%AE%B0/assets/1558487247085.png?lastModify=1567517611" alt="" data-alt="1558487247085" data-local-refresh="true" /></span></p>
<p class="md-end-block md-p"><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190903213822193-1835549760.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">常用数字组合有( <span><code>u</code><span class="md-plain"> 表示用户 / <span><code>g</code><span class="md-plain"> 表示组 / <span><code>o</code><span class="md-plain"> 表示其他)</span></span></span></span></span></span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>777</code><span class="md-plain"> ===&gt; <span><code>x=rwx, g=rwx, o=rwx</code></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>755</code><span class="md-plain"> ===&gt; <span><code>u=rwx, g=rw, o=rx</code></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>644</code><span class="md-plain"> ===&gt; <span><code>u=rw, g=r, o=r</code></span></span></span></p>
</li>
</ul>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<h1 class="md-end-block md-heading"><span class="md-plain">系统信息相关命令</span></h1>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">本节内容主要是为了方便通过远程终端维护服务器时, 查看服务器上当前 <span><strong>系统日期和时间 / 磁盘空间占用情况 /程序执行情况</strong></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">本小结学习终端命令都是查询命令, 通过这些命令对系统资源的使用情况有个了解</span></p>
</li>
</ul>
<h2 class="md-end-block md-heading"><span class="md-plain">目标</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">时间和日期</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>date</code></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>cal</code></span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">磁盘和目录空间</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>df</code></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>du</code></span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">进程信息</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>ps</code></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>top</code></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>kill</code></span></p>
</li>
</ul>
</li>
</ul>
<h2 class="md-end-block md-heading"><span class="md-plain">01.时间和日期</span></h2>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">序号</span></span></th><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">作用</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">01</span></span></td>
<td><span class="td-span"><span class="md-plain">cal</span></span></td>
<td><span class="td-span"><span class="md-plain">查看日历, -y选项可以查看一年的日历</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">02</span></span></td>
<td><span class="td-span"><span class="md-plain">date</span></span></td>
<td><span class="td-span"><span class="md-plain">查看系统时间</span></span></td>
</tr>
</tbody>
</table>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">02.磁盘信息</span></h2>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">序号</span></span></th><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">作用</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">01</span></span></td>
<td><span class="td-span"><span class="md-plain">df -h</span></span></td>
<td><span class="td-span"><span class="md-plain">disk free 显示磁盘剩余空间</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">02</span></span></td>
<td><span class="td-span"><span class="md-plain">du -h [目录名]</span></span></td>
<td><span class="td-span"><span class="md-plain">disk usage 显示目录下的文件大小</span></span></td>
</tr>
</tbody>
</table>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">选项说明</span></p>
</li>
</ul>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">参数</span></span></th><th><span class="td-span"><span class="md-plain">含义</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">-h</span></span></td>
<td><span class="td-span"><span class="md-plain">以人性化的方式显示文件的大小</span></span></td>
</tr>
</tbody>
</table>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">03.进程信息</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">所谓 <span><strong>进程</strong><span class="md-plain">, 通俗的说就是 <span><strong>当前正在执行的一个进程</strong></span></span></span></span></p>
</li>
</ul>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">序号</span></span></th><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">作用</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">01</span></span></td>
<td><span class="td-span"><span class="md-plain">ps aux</span></span></td>
<td><span class="td-span"><span class="md-plain">process status 查看进程的详细情况</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">02</span></span></td>
<td><span class="td-span"><span class="md-plain">top</span></span></td>
<td><span class="td-span"><span class="md-plain">动态显示运行中进程并且排序</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">03</span></span></td>
<td><span class="td-span"><span class="md-plain">kill [-9] 进程代号</span></span></td>
<td><span class="td-span"><span class="md-plain">终止指定代号的进程 -9 表示强行终止</span></span></td>
</tr>
</tbody>
</table>
<blockquote>
<p class="md-end-block md-p"><span><code>ps</code><span class="md-plain"> 默认只会显示当前用户通过终端启动的应用程序</span></span></p>
</blockquote>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>ps</code><span class="md-plain"> 选项说明功能</span></span></p>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">选项</span></span></th><th><span class="td-span"><span class="md-plain">含义</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">a</span></span></td>
<td><span class="td-span"><span class="md-plain">显示终端上的所有进程,包括其他用户的进程</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">u</span></span></td>
<td><span class="td-span"><span class="md-plain">显示进程的详细状态</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">x</span></span></td>
<td><span class="td-span"><span class="md-plain">显示没有控制终端的进程</span></span></td>
</tr>
</tbody>
</table>
<blockquote>
<p class="md-end-block md-p"><span class="md-plain">提示: 使用<span><code>kill</code><span class="md-plain">命令时, 最好只终止由当前用户开启的进程, 而不要终止<span><code>root</code><span class="md-plain">身份开启的进程, 否则可能导致系统崩溃</span></span></span></span></span></p>
</blockquote>
</li>
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-plain">要退出 <span><code>top</code><span class="md-plain"> 可以直接输入 <span><code>q</code></span></span></span></span></p>
</li>
</ul>]]></description></item><item><title>Linux：vi &amp; vim（待学）</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/09/03/11455805.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 03 Sep 2019 13:29:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/09/03/11455805.html</guid><description><![CDATA[<h1 class="md-end-block md-heading"><span class="md-plain">VI编辑器_终端编辑器</span></h1>
<h1 class="md-end-block md-heading"><span class="md-plain">目标</span></h1>
<ol class="ol-list" start="">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">vi简介</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">打开和新建文件</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">三种工作模式</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">常用命令查询</span></p>
</li>
</ol>
<h1 class="md-end-block md-heading"><span class="md-plain">1 简介</span></h1>
<h2 class="md-end-block md-heading"><span class="md-plain">1.1 学习vi的目的</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在工作中, 要对 服务器上的 <span><strong>文件</strong><span class="md-plain">进行 简单 的修改, 可以使用 ssh 登录到远程服务器上, 并且使用 vi编辑器 进行简单的编辑即可</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">需要修改的文件包括</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">源代码</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">配置文件 </span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">例如: tomcat服务器的配置文件</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">例如: 网卡信息的配置文件</span></p>
</li>
</ul>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">在没有图形界面的环境下, 要编辑文件, vi是最佳选择<span class="md-softbreak"> <span class="md-plain">每一个使用linux的程序员,都应该或多或少的学习一些vi的常用命令</span></span></span></p>
</li>
</ul>
<h2 class="md-end-block md-heading"><span class="md-plain">1.2 vi 和 vim</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在很多linux发行版中, 直接把vi做成vim的 软连接</span></p>
</li>
</ul>
<h3 class="md-end-block md-heading"><span class="md-plain md-expand">1.2.1 VI</span></h3>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">vi是 <span><code>visual interface</code><span class="md-plain">的简称, 是linux中<span><strong>最经典</strong><span class="md-plain">的文本编辑器</span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">vi 的<span><strong>核心设计思想</strong></span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>让程序员的手指始终保持在键盘的 核心区域, 就能完成所有的编辑操作</strong></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">vi的特点</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">只能是编辑 <span><strong>文本内容</strong><span class="md-plain">, 不能对 字体 段落进行排版</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>不支持鼠标操作</strong></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>没有菜单</strong></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>只有命令</strong></span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">vi编辑器在 <span><strong>系统管理 服务器管理</strong><span class="md-plain"> 编辑文件时, <span><strong>其功能永远不是图形界面的编辑器能比拟的</strong></span></span></span></span></p>
</li>
</ul>
<h3 class="md-end-block md-heading"><span class="md-plain">1.2.2 VIM</span></h3>
<p class="md-end-block md-p"><span><strong>vim = vi improved</strong><span class="md-softbreak"> <span class="md-plain">vim 是从vi发展出来的文本编辑器, 支持<span><strong>代码补全、编译 及 错误跳转</strong><span class="md-plain">等方便编程的功能提别丰富, 在程序员中被广泛使用, 被称为<span><strong>编辑器之神</strong></span></span></span></span></span></span></p>
<h1 class="md-end-block md-heading"><span class="md-plain">2 打开和新建文件</span></h1>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在终端中输入vim在后面跟上 文件名 即可</span></p>
</li>
</ul>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>vim 文件名</span></pre>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">如果文件已经存在, 会直接打开该文件</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">如果文件不存在, 保存且退出时 就会新建一个文件</span></p>
</li>
</ul>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>1 vim 没有的文件名<br /><span>2 编辑内容<br /><span><span class="cm-tab">    2.1 编写类<br /><span><span class="cm-tab">    2.2 输出一行语句<br /><span><span class="cm-tab">    2.3 复制粘贴 2.2内容 19次<br /><span><span class="cm-tab">    2.4 保存且退出<br /><span>3 查看</span></span></span></span></span></span></span></span></span></span></span></pre>
<p class="md-end-block md-p"><span class="md-plain">注意: 本节重点是 打开 和 新建文件, 其他命令后面会一一讲解</span></p>
<h2 class="md-end-block md-heading"><span class="md-plain">2.1 打开文件并且定位行</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在日常工作中, 有可能会遇到打开一个文件, 并定位到指定行的情况</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">例如: 在开发是, 知道某一行代码有错误, 可以 快速定位 到出错误代码的位置</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">这个时候, 可以使用以下命令打开文件</span></p>
</li>
</ul>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>vim 文件名 +行数</span></pre>
<blockquote>
<p class="md-end-block md-p"><span class="md-plain">提示: 如果只带上+ 而不指定行号, 会直接定位到文件末尾 </span></p>
</blockquote>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">2.2 异常处理</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">如果 vi 异常退出, 在磁盘上可能会保存有 交换文件</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">下次再使用 vi 编辑文件时, 会看到以下屏幕信息, 按下字母 d 删除交换文件即可</span></p>
</li>
</ul>
<blockquote>
<p class="md-end-block md-p"><span class="md-plain">提示: 按下键盘时, 注意关闭输入法</span></p>
</blockquote>
<p class="md-end-block md-p">&nbsp;</p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">如何产生</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">编辑文件, 没有退出, 关闭会话窗口</span></p>
</li>
</ul>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">2.3 VI三种工作模式</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">VI有三种工作模式</span></p>
</li>
</ul>
<ol class="ol-list" start="">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">命令模式</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>打开文件首先进入命令模式</strong><span class="md-plain">, 是使用vi的<span><strong>入口</strong></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">通过 <span><strong>命令</strong><span class="md-plain"> 对文件进行常规的编辑操作, 例如 <span><strong>定位 翻页 复制 粘贴 删除</strong><span class="md-plain"> ... ...</span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在其他图形编辑器下, 通过 快捷键 或者 鼠标 实现的操作, 都在 <span><strong>命令模式</strong><span class="md-plain"> 下实现</span></span></span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">末行模式 -- 执行 <span><strong>保存 退出</strong><span class="md-plain">等操作</span></span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">要退出 vi 返回到控制台, 需要在莫行模式下输入命令</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>末行模式</strong><span class="md-plain"> 是 vi 的<span><strong>出口</strong></span></span></span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>编辑模式</strong><span class="md-plain"> -- 正常的编辑文字</span></span></p>
</li>
</ol>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">工作模式切换</span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">2.4 末行模式命令</span></h2>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">英文</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">w</span></span></td>
<td><span class="td-span"><span class="md-plain">write</span></span></td>
<td><span class="td-span"><span class="md-plain">保存</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">q</span></span></td>
<td><span class="td-span"><span class="md-plain">quit</span></span></td>
<td><span class="td-span"><span class="md-plain">退出,如果没有保存,不允许退出</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">q!</span></span></td>
<td><span class="td-span"><span class="md-plain">quit</span></span></td>
<td><span class="td-span"><span class="md-plain">强行退出,不保存退出</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">wq</span></span></td>
<td><span class="td-span"><span class="md-plain">write &amp; quit</span></span></td>
<td><span class="td-span"><span class="md-plain">保存且退出</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">x</span></span></td>
<td>&nbsp;</td>
<td><span class="td-span"><span class="md-plain">保存并退出</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">ZZ</span></span></td>
<td>&nbsp;</td>
<td><span class="td-span"><span class="md-plain">保存并退出</span></span></td>
</tr>
</tbody>
</table>
<h1 class="md-end-block md-heading"><span class="md-plain">4 常用命令</span></h1>
<h2 class="md-end-block md-heading"><span class="md-plain">命令线路图</span></h2>
<ol class="ol-list" start="">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">重复次数</span></p>
</li>
</ol>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在命令模式下, <span><strong>先输入一个数字, 再加上一个命令</strong><span class="md-plain">, 可以让该命令 重复执行n次, 如: 19p</span></span></span></p>
</li>
</ul>
<ol class="ol-list" start="">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">移动和选择(<span><strong>多练</strong><span class="md-plain">)<span class="md-softbreak"> <span class="md-plain">vi之所以快, 关键在于 <span><strong>能够快速定位到要编辑的代码行</strong><span class="md-softbreak"> <span><strong>移动命令</strong><span class="md-plain"> 能够和 <span><strong>编辑操作</strong><span class="md-plain"> 组合使用</span></span></span></span></span></span></span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">编辑操作</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>删除 复制 粘贴 替换 缩排</strong></span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">撤销和重复</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">查到替换</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">编辑</span></p>
</li>
</ol>
<h2 class="md-end-block md-heading"><span class="md-plain">学习提示</span></h2>
<ol class="ol-list" start="">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">vi命令较多, <span><strong>不要期望一下子全部都记住</strong><span class="md-plain">, 个别命令忘记了, 只是会影响编辑速度而已<span class="md-softbreak"> <span class="md-plain">. 在使用vi命令时, <span><strong>注意 关闭中文输入法</strong></span></span></span></span></span></span></p>
</li>
</ol>
<h2 class="md-end-block md-heading"><span class="md-plain">4.1 移动</span></h2>
<p class="md-end-block md-p"><span class="md-plain">要熟练使用vi, 首先应该学会怎么在 命令模式下 快速移动光标<span class="md-softbreak"> <span class="md-plain">编辑操作命令 能够和移动命令一起使用</span></span></span></p>
<h3 class="md-end-block md-heading"><span class="md-plain">1) 上 下 左 右&nbsp;</span></h3>
<p class="md-end-block md-p"><span class="md-image md-img-loaded" data-src="assets/1558278451153.png"><img src="file://E:/Study/BigData/heima/stage1/Update/Linux%E5%AE%9E%E6%88%98/linux/day02_%E6%89%93%E5%8C%85%E5%8E%8B%E7%BC%A9_vim%E7%BC%96%E8%BE%91%E5%99%A8_%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86_%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/%E7%AC%94%E8%AE%B0/assets/1558278451153.png?lastModify=1567516840" alt="" data-alt="1558278451153" data-local-refresh="true" /></span></p>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th><th><span class="td-span"><span class="md-plain">手指</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">h</span></span></td>
<td><span class="td-span"><span class="md-plain">向左</span></span></td>
<td><span class="td-span"><span class="md-plain">食指</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">j</span></span></td>
<td><span class="td-span"><span class="md-plain">向下</span></span></td>
<td><span class="td-span"><span class="md-plain">食指</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">k</span></span></td>
<td><span class="td-span"><span class="md-plain">向上</span></span></td>
<td><span class="td-span"><span class="md-plain">中指</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">l</span></span></td>
<td><span class="td-span"><span class="md-plain">向右</span></span></td>
<td><span class="td-span"><span class="md-plain">无名指</span></span></td>
</tr>
</tbody>
</table>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">2) 行内移动</span></h3>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">英文</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">w</span></span></td>
<td><span class="td-span"><span class="md-plain">word</span></span></td>
<td><span class="td-span"><span class="md-plain">向后移动一个单词</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">b</span></span></td>
<td><span class="td-span"><span class="md-plain">back</span></span></td>
<td><span class="td-span"><span class="md-plain">向前移动一个单词</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">0</span></span></td>
<td>&nbsp;</td>
<td><span class="td-span"><span class="md-plain">行首</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">^</span></span></td>
<td>&nbsp;</td>
<td><span class="td-span"><span class="md-plain">行首, 第一个不是空白字符的位置</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">$</span></span></td>
<td>&nbsp;</td>
<td><span class="td-span"><span class="md-plain">行尾</span></span></td>
</tr>
</tbody>
</table>
<h3 class="md-end-block md-heading"><span class="md-plain">3) 行数移动</span></h3>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">英文</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">gg</span></span></td>
<td><span class="td-span"><span class="md-plain">go</span></span></td>
<td><span class="td-span"><span class="md-plain">文件顶部</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">G</span></span></td>
<td><span class="td-span"><span class="md-plain">go</span></span></td>
<td><span class="td-span"><span class="md-plain">文件末尾</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">数字gg</span></span></td>
<td><span class="td-span"><span class="md-plain">go</span></span></td>
<td><span class="td-span"><span class="md-plain">移动到 数字 对应行数</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">数字G</span></span></td>
<td><span class="td-span"><span class="md-plain">go</span></span></td>
<td><span class="td-span"><span class="md-plain">移动到 数字 对应行数</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">: 数字</span></span></td>
<td>&nbsp;</td>
<td><span class="td-span"><span class="md-plain">移动到数字对应的 行数</span></span></td>
</tr>
</tbody>
</table>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">4) 屏幕移动</span></h3>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">英文</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">Ctrl + b</span></span></td>
<td><span class="td-span"><span class="md-plain">back</span></span></td>
<td><span class="td-span"><span class="md-plain">向上翻页</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">Ctrl + f</span></span></td>
<td><span class="td-span"><span class="md-plain">forward</span></span></td>
<td><span class="td-span"><span class="md-plain">向下翻页</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">H</span></span></td>
<td><span class="td-span"><span class="md-plain">Head</span></span></td>
<td><span class="td-span"><span class="md-plain">屏幕顶部</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">M</span></span></td>
<td><span class="td-span"><span class="md-plain">Middle</span></span></td>
<td><span class="td-span"><span class="md-plain">屏幕中间</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">L</span></span></td>
<td><span class="td-span"><span class="md-plain">Low</span></span></td>
<td><span class="td-span"><span class="md-plain">L部</span></span></td>
</tr>
</tbody>
</table>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">4.2 移动(程序)</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">1) 段落移动</span></h3>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">vim中使用 空行 来区分段落</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">程序开发时, 通常 <span><strong>一段功能相关的代码会写在一起</strong><span class="md-plain"> -- 之间没有空行</span></span></span></p>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">{</span></span></td>
<td><span class="td-span"><span class="md-plain">上一段</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">}</span></span></td>
<td><span class="td-span"><span class="md-plain">下一段</span></span></td>
</tr>
</tbody>
</table>
</li>
</ul>
<h3 class="md-end-block md-heading"><span class="md-plain">2) 括号切换</span></h3>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在程序世界中, <span><strong>()、[]、{}</strong><span class="md-plain">使用率很高, 而且 <span><strong>都是成对出现的.</strong></span></span></span></span></p>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">%</span></span></td>
<td><span class="td-span"><span class="md-plain">括号匹配及切换</span></span></td>
</tr>
</tbody>
</table>
</li>
</ul>
<h3 class="md-end-block md-heading"><span class="md-plain">3) 标记</span></h3>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在开发时, <span><strong>某一块代码可能需要稍后处理</strong><span class="md-plain">, 例如: 编辑、查看</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">此时先试用 m 增加一个标记, 这样可以 <span><strong>在需要时快速的跳转回来</strong><span class="md-plain"> 或者 <span><strong>执行其他编辑操作</strong></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>标记名称</strong><span class="md-plain"> 可以是 a~z 或者 A~Z 之间的任意 一个 字母</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">添加了标记的 行<span><strong>如果删除</strong><span class="md-plain">, <span><strong>标记同时被删除</strong></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">如果 <span><strong>在其他行添加了相同名称的标记, 之前添加的标记也会被替换掉</strong></span></span></p>
</li>
</ul>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">英文</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">mx</span></span></td>
<td><span class="td-span"><span class="md-plain">mark</span></span></td>
<td><span class="td-span"><span class="md-plain">添加编辑x, x是a~z 或者 A~Z的任意一个字母</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">'x</span></span></td>
<td>&nbsp;</td>
<td><span class="td-span"><span class="md-plain">直接定位到标记x所在的位置</span></span></td>
</tr>
</tbody>
</table>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">4.3 选中文本(可视模式)</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">学习 复制 命令前, 应该先学会 <span><strong>怎么样选中 要复制的代码</strong></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在 vi 中要选择文本, 需要显示 visual 命令切换到 <span><strong>可视模式</strong></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">vi 中提供了 <span><strong>三种</strong><span class="md-plain"> 可视模式, 可以方便程序员的选择 <span><strong>选中文本的方式</strong></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">按 ESC 可以放弃选中, 返回到 <span><strong>命令模式</strong></span></span></p>
</li>
</ul>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">模式</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">v</span></span></td>
<td><span class="td-span"><span class="md-plain">可视模式</span></span></td>
<td><span class="td-span"><span class="md-plain">从光标位置开始按照正常模式选择文本</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">V</span></span></td>
<td><span class="td-span"><span class="md-plain">可视化模式</span></span></td>
<td><span class="td-span"><span class="md-plain">选中光标经过的完整行</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">Ctrl + v</span></span></td>
<td><span class="td-span"><span class="md-plain">可是块模式</span></span></td>
<td><span class="td-span"><span class="md-plain">垂直方向选中文本</span></span></td>
</tr>
</tbody>
</table>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">可视模式下, 可以和 移动命令 连用, 例如 ggVG 能够 选中所有的内容</span></p>
</li>
</ul>
<h2 class="md-end-block md-heading"><span class="md-plain">4.4 撤销和恢复撤销(保命指令)</span></h2>
<p class="md-end-block md-p"><span class="md-plain">在学习编辑命令之前,先要知道怎样撤销之前一次 错误的 编辑操作</span></p>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">英文</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">u</span></span></td>
<td><span class="td-span"><span class="md-plain">undo</span></span></td>
<td><span class="td-span"><span class="md-plain">撤销上次的命令(ctrl + z)</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">Ctrl + r</span></span></td>
<td><span class="td-span"><span class="md-plain">uredo</span></span></td>
<td><span class="td-span"><span class="md-plain">恢复撤销的命令</span></span></td>
</tr>
</tbody>
</table>
<h2 class="md-end-block md-heading"><span class="md-plain">4.5 删除文本</span></h2>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">英文</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">x</span></span></td>
<td><span class="td-span"><span class="md-plain">cut</span></span></td>
<td><span class="td-span"><span class="md-plain">删除光标所在的字符,或者选中的文字</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">d(移动命令)</span></span></td>
<td><span class="td-span"><span class="md-plain">delete</span></span></td>
<td><span class="td-span"><span class="md-plain">删除移动命令对应的内容</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">dd</span></span></td>
<td><span class="td-span"><span class="md-plain">delete</span></span></td>
<td><span class="td-span"><span class="md-plain">删除光标所在行, 可以ndd删除多行</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">D</span></span></td>
<td><span class="td-span"><span class="md-plain">delete</span></span></td>
<td><span class="td-span"><span class="md-plain">删除至行尾</span></span></td>
</tr>
</tbody>
</table>
<p class="md-end-block md-p"><span class="md-plain">提示: 如果使用 可视模式 已经选中了一段文本, 那么无论使用 d 还是 x, 都可以删除选中文本</span></p>
<p class="md-end-block md-p"><span class="md-plain">删除命令可以和移动命令连用, 以下是常见的组合命令:</span></p>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">作用</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">dw</span></span></td>
<td><span class="td-span"><span class="md-plain">从光标位置删除到单词末尾</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">d0</span></span></td>
<td><span class="td-span"><span class="md-plain">从光标位置删除到一行的起始位置</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">d}</span></span></td>
<td><span class="td-span"><span class="md-plain">从光标位置删除到段落末尾</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">ndd</span></span></td>
<td><span class="td-span"><span class="md-plain">从光标位置向下连续删除 n 行</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">d'a</span></span></td>
<td><span class="td-span"><span class="md-plain">从光标所在行 删除到 标记a 之间的所有代码</span></span></td>
</tr>
</tbody>
</table>
<h2 class="md-end-block md-heading"><span class="md-plain">4.6 复制和剪切</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">vi 中提供有一个 被复制文本的缓冲区</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">复制 命令会将选中的文字保存在缓冲区</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">删除 命令删除的文字会被保存在缓冲区</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在需要的位置, 使用 粘贴 命令可以将缓冲对的文字插入到光标所在的位置</span></p>
</li>
</ul>
</li>
</ul>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">英文</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">y(复制命令)</span></span></td>
<td><span class="td-span"><span class="md-plain">copy</span></span></td>
<td><span class="td-span"><span class="md-plain">复制</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">yy</span></span></td>
<td><span class="td-span"><span class="md-plain">copy</span></span></td>
<td><span class="td-span"><span class="md-plain">复制一行,可以nyy复制多行</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">d(剪切命令)</span></span></td>
<td><span class="td-span"><span class="md-plain">delete</span></span></td>
<td><span class="td-span"><span class="md-plain">剪切</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">dd(剪切)</span></span></td>
<td><span class="td-span"><span class="md-plain">delete</span></span></td>
<td><span class="td-span"><span class="md-plain">剪切一行, 可以 ndd 剪切n行</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">p</span></span></td>
<td><span class="td-span"><span class="md-plain">paste</span></span></td>
<td><span class="td-span"><span class="md-plain">粘贴</span></span></td>
</tr>
</tbody>
</table>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">提示:</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">命令 d 、x 类似于图形界面的 <span><strong>剪切操作</strong><span class="md-plain"> -- ctrl + x</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">命令 y 类似于 图形界面的 <span><strong>复制操作</strong><span class="md-plain"> -- Ctrl + C</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">命令 p 类似于图形界面的 <span><strong>粘贴操作</strong><span class="md-plain"> -- Ctrl + v</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">vi中的文本缓冲区只有一个,如果后续做过 复制、剪切操作, 之前缓冲区中的内容会被替换.</span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">注意</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">vi中的 <span><strong>文本缓冲区</strong><span class="md-plain"> 和 系统的 <span><strong>剪切板</strong><span class="md-plain"> 不是同一个</span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">所以在其他软件中使用 <span><code>Ctrl + C</code><span class="md-plain"> 复制的内容, 不能再 <span><code>vi</code><span class="md-plain"> 中通过 <span><code>p</code><span class="md-plain"> 命令粘贴</span></span></span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">可以在 <span><strong>编辑模式</strong><span class="md-plain"> 下使用 <span><strong>鼠标右键粘贴</strong></span></span></span></span></p>
</li>
</ul>
<h2 class="md-end-block md-heading"><span class="md-plain">4.7 替换</span></h2>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">英文</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th><th><span class="td-span"><span class="md-plain">工作模式</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">r</span></span></td>
<td><span class="td-span"><span class="md-plain">replace</span></span></td>
<td><span class="td-span"><span class="md-plain">替换当前字符</span></span></td>
<td><span class="td-span"><span class="md-plain">命令模式</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">R</span></span></td>
<td><span class="td-span"><span class="md-plain">replace</span></span></td>
<td><span class="td-span"><span class="md-plain">替换当前行光标后的字符</span></span></td>
<td><span class="td-span"><span class="md-plain">替换模式</span></span></td>
</tr>
</tbody>
</table>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>R</code><span class="md-plain"> 命令可以进入 <span><strong>替换模式</strong><span class="md-plain">, 替换完成后, 按下<span><code>ESC</code><span class="md-plain"> , 按下 <span><code>ESC</code><span class="md-plain"> 可以回到 <span><strong>命令模式</strong></span></span></span></span></span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>替换命令</strong><span class="md-plain"> 的作用就是不用进入 <span><strong>编辑模式</strong><span class="md-plain">, 对文件进行 <span><strong>轻量级的修改</strong></span></span></span></span></span></p>
</li>
</ul>
<h2 class="md-end-block md-heading"><span class="md-plain">4.8 缩排和重复执行</span></h2>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">&gt;&gt;</span></span></td>
<td><span class="td-span"><span class="md-plain">向右增加缩进</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">&lt;&lt;</span></span></td>
<td><span class="td-span"><span class="md-plain">向左减少缩进</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">.</span></span></td>
<td><span class="td-span"><span class="md-plain">重复上次命令</span></span></td>
</tr>
</tbody>
</table>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>缩进命令</strong><span class="md-plain"> 在开发程序时, <span><strong>统一增加代码的缩进</strong><span class="md-plain"> 比较有用!</span></span></span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">一次性 <span><strong>在选中代码前增加 4 个空格,</strong><span class="md-plain"> 就叫做 <span><strong>增加缩进</strong></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">一次性 <span><strong>在选中代码前删除 4 个空格</strong><span class="md-plain">, 就叫做 <span><strong>较少缩进</strong></span></span></span></span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在 <span><strong>可视模式</strong><span class="md-plain"> 下, 缩排命令 主需要使用 一个 <span><code>&gt;</code><span class="md-plain"> 或者 <span><code>&lt;</code></span></span></span></span></span></span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">在程序中, <span><strong>缩进</strong><span class="md-plain"> 通常用来表示代码的归属关系</span></span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>前面空格越少, 代码的级别越高</strong></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>前面空格越多, 代码的级别越低</strong></span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">4.9 查找</span></h2>
<p class="md-end-block md-p"><span class="md-plain">常规查找</span></p>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">/str</span></span></td>
<td><span class="td-span"><span class="md-plain">查找str</span></span></td>
</tr>
</tbody>
</table>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">查找到指定内容之后, 使用 <span><code>Next</code><span class="md-plain"> 查找下一个出现的位置</span></span></span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>n</code><span class="md-plain"> : 查找下一个</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>N</code><span class="md-plain"> : 查找上一个</span></span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">如果不想看到高亮显示, 可以随便查找一个文件中不存在的内容即可</span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">单词快速匹配</span></p>
</li>
</ul>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">*</span></span></td>
<td><span class="td-span"><span class="md-plain">向后查找当前光标所在单词</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">#</span></span></td>
<td><span class="td-span"><span class="md-plain">向前查找当前光标所在单词</span></span></td>
</tr>
</tbody>
</table>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在开发中, 通过单词快速匹配, 可以快速看到这个单词在其他位置使用过</span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<h2 class="md-end-block md-heading"><span class="md-plain">4.10 查找并替换</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在 <span><code>vi</code><span class="md-plain"> 中查找和替换命令需要在 <span><strong>莫行模式</strong><span class="md-plain"> 下执行</span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">记忆命令格式</span></p>
</li>
</ul>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>:%s///g</span></pre>
<p class="md-end-block md-p"><span class="md-plain">1) 全局替换</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">一次向 替换文件中的 所有出现的旧文本</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">命令格式如下</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>:%s/旧文本/新文本/g</span></pre>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">2) 可视区域替换</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>先选中</strong><span class="md-plain"> 要替换文字的 <span><strong>范围</strong></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">命令格式如下</span></p>
</li>
</ul>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>:s/旧文本/新文本/g</span></pre>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">3) 确认替换</span></p>
<p class="md-end-block md-p"><span class="md-plain">c confirm 确认</span></p>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">如果把末尾的 <span><code>g</code><span class="md-plain"> 改成 <span><code>gc</code><span class="md-plain"> 在替换的时候, 会有提示! 推荐使用</span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">命令格式如下</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>:%s/旧文本/新文本/gc</span></pre>
</li>
</ul>
<ol class="ol-list" start="">
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>y</code><span class="md-plain"> - <span><code>yes</code><span class="md-plain"> 替换</span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>n</code><span class="md-plain"> - <span><code>no</code><span class="md-plain"> 不替换</span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>a</code><span class="md-plain"> - <span><code>all</code><span class="md-plain"> 替换所有</span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>q</code><span class="md-plain"> -<span><code>quit</code><span class="md-plain"> 退出替换</span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>l</code><span class="md-plain"> - <span><code>last</code><span class="md-plain"> 最后一个, 并把光标移动到行首</span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>^E</code><span class="md-plain"> 向下滚屏</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span><code>^Y</code><span class="md-plain"> 向上滚屏</span></span></p>
</li>
</ol>
<h2 class="md-end-block md-heading"><span class="md-plain">4.11 插入命令(重要)</span></h2>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在 vi 中除了常用 <span><code>i</code><span class="md-plain"> 进入<span><strong>编辑模式</strong><span class="md-plain"> 外, 还提供了一下命令同样可以进入编辑模式</span></span></span></span></span></p>
</li>
</ul>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">英文</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th><th><span class="td-span"><span class="md-plain">常用</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">i</span></span></td>
<td><span class="td-span"><span class="md-plain">insert</span></span></td>
<td><span class="td-span"><span class="md-plain">在当前字符前插入文本</span></span></td>
<td><span class="td-span"><span class="md-plain">常用</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">I</span></span></td>
<td><span class="td-span"><span class="md-plain">insert</span></span></td>
<td><span class="td-span"><span class="md-plain">在行首插入文本</span></span></td>
<td><span class="td-span"><span class="md-plain">较常用</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">a</span></span></td>
<td><span class="td-span"><span class="md-plain">append</span></span></td>
<td><span class="td-span"><span class="md-plain">在当前字符后添加文本</span></span></td>
<td>&nbsp;</td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">A</span></span></td>
<td><span class="td-span"><span class="md-plain">append</span></span></td>
<td><span class="td-span"><span class="md-plain">在行末添加文本</span></span></td>
<td><span class="td-span"><span class="md-plain">较常用</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">o</span></span></td>
<td>&nbsp;</td>
<td><span class="td-span"><span class="md-plain">在当前行后面插入一空行</span></span></td>
<td><span class="td-span"><span class="md-plain">常用</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">O</span></span></td>
<td>&nbsp;</td>
<td><span class="td-span"><span class="md-plain">在当前行前面插入一空行</span></span></td>
<td><span class="td-span"><span class="md-plain">常用</span></span></td>
</tr>
</tbody>
</table>
<p class="md-end-block md-p">&nbsp;</p>
<p>&nbsp;<span class="md-image md-img-loaded" data-src="assets/1558543477231.png"><img src="file://E:/Study/BigData/heima/stage1/Update/Linux%E5%AE%9E%E6%88%98/linux/day02_%E6%89%93%E5%8C%85%E5%8E%8B%E7%BC%A9_vim%E7%BC%96%E8%BE%91%E5%99%A8_%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86_%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/%E7%AC%94%E8%AE%B0/assets/1558543477231.png?lastModify=1567516840" alt="" data-alt="1558543477231" data-local-refresh="true" /><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190903212950579-1869868390.png" alt="" /></span></p>
<h2 class="md-end-block md-heading"><span class="md-plain">4.12 练习</span></h2>
<h3 class="md-end-block md-heading"><span class="md-plain">演练1 -- 编辑命令 和 数字连用</span></h3>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在开发中, 可能会遇到连续输入 N 个同样的字符</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">例如: <span><code>**********</code><span class="md-plain"> 连续10个星号</span></span></span></p>
</li>
</ul>
<p class="md-end-block md-p"><span class="md-plain">要实现这个效果可以在 <span><strong>命令模式</strong><span class="md-plain"> 下</span></span></span></p>
<ol class="ol-list" start="">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">输入 <span><code>10</code><span class="md-plain">, 表示要重复10次</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">输入 <span><code>i</code><span class="md-plain"> 进入 <span><strong>编辑模式</strong></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">输入 <span><code>*</code><span class="md-plain"> 也就是重复的文字</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">按下 <span><code>ESC</code><span class="md-plain"> 返回 <span><strong>命令模式</strong><span class="md-plain">, 返回之后 <span><code>vi</code><span class="md-plain"> 就会把 第 <span><code>2、3</code><span class="md-plain"> 两步的操作重复 <span><code>10</code><span class="md-plain"> 次</span></span></span></span></span></span></span></span></span></span></span></p>
</li>
</ol>
<p class="md-end-block md-p"><span class="md-plain">提示： 正常开发时， 在 <span><strong>进入编辑模式之前，不要按数字</strong></span></span></p>
<p class="md-end-block md-p">&nbsp;</p>
<h3 class="md-end-block md-heading"><span class="md-plain">演练2 -- 利用 可视块 给多行代码增加注释</span></h3>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">在开发中， 可能会遇到一次向给多行代码 <span><strong>增加注释</strong><span class="md-plain"> 的情况</span></span></span></p>
</li>
</ul>
<blockquote>
<p class="md-end-block md-p"><span class="md-plain">在java中， 要给代码增加注释， 可以在代码前增加一个 <span><code>//</code></span></span></p>
</blockquote>
<p class="md-end-block md-p"><span class="md-plain">要实现这个效果可以在 <span><strong>命令模式</strong><span class="md-plain"> 下</span></span></span></p>
<ol class="ol-list" start="">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">移动到要添加注释的 <span><strong>第1行代码</strong><span class="md-plain">, 按 <span><code>^</code><span class="md-plain"> 来到行首</span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">按 <span><code>Ctrl + v</code><span class="md-plain"> 进入 <span><strong>可视化</strong><span class="md-plain"> 模式</span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">使用 <span><code>j</code><span class="md-plain"> 向下连续选中要添加的代码行</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">输入 <span><code>I</code><span class="md-plain"> <span><strong>进入编辑模式</strong><span class="md-plain"> , 并在 <span><strong>行首插入</strong><span class="md-plain">, 注意: 一定要使用 I</span></span></span></span></span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">输入 <span><code>//</code><span class="md-plain"> 也就是 注释符号</span></span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">按下 <span><code>ESC</code><span class="md-plain"> 返回到 命令模式, 返回之后 <span><code>vi</code><span class="md-plain"> 会在之前选中的每一行代码 前 插入 <span><code>//</code></span></span></span></span></span></span></p>
</li>
</ol>
<h3 class="md-end-block md-heading"><span class="md-plain">演练3: 坦克大战案例</span></h3>
<ul class="ul-list" data-mark="-">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">已经学习过的 <span><strong>末行命令</strong></span></span></p>
</li>
</ul>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">命令</span></span></th><th><span class="td-span"><span class="md-plain">英文</span></span></th><th><span class="td-span"><span class="md-plain">功能</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">:w 文件</span></span></td>
<td>&nbsp;</td>
<td><span class="td-span"><span class="md-plain">另存为</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">:w</span></span></td>
<td><span class="td-span"><span class="md-plain">write</span></span></td>
<td><span class="td-span"><span class="md-plain">保存(ctrl + s)</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">:q</span></span></td>
<td><span class="td-span"><span class="md-plain">quit</span></span></td>
<td><span class="td-span"><span class="md-plain">退出, 如果没有保存,不允许退出</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">:q!</span></span></td>
<td><span class="td-span"><span class="md-plain">quit</span></span></td>
<td><span class="td-span"><span class="md-plain">强行退出, 不保存退出</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">:wq</span></span></td>
<td><span class="td-span"><span class="md-plain">write &amp; quit</span></span></td>
<td><span class="td-span"><span class="md-plain">保存并退出</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">:x</span></span></td>
<td>&nbsp;</td>
<td><span class="td-span"><span class="md-plain">保存并退出</span></span></td>
</tr>
</tbody>
</table>
<p class="md-end-block md-p md-focus"><span class="md-plain">在实际开发中, 可以使用 <span><code>w</code><span class="md-plain"> 命令 <span><strong>阶段性的备份代码</strong></span></span></span></span></p>
<p class="md-end-block md-p md-focus"><span class="md-plain"><span><span class="md-plain"><span><strong>&nbsp;</strong></span></span></span></span></p>]]></description></item><item><title>sparkRDD：第4节 RDD的依赖关系；第5节 RDD的缓存机制；第6节 DAG的生成</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/29/11432298.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 29 Aug 2019 14:00:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/29/11432298.html</guid><description><![CDATA[<h2>4.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RDD的依赖关系</h2>
<h3>6.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RDD的依赖</h3>
<p>RDD和它依赖的父RDD的关系有两种不同的类型，即窄依赖（narrow dependency）和宽依赖（wide dependency）。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190829215741675-119368174.png" alt="" /></p>
<h3>6.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 窄依赖</h3>
<p>窄依赖指的是每一个父RDD的Partition最多被子RDD的一个Partition使用</p>
<p><span style="color: #ff0000;">总结：窄依赖我们形象的比喻为独生子女。</span><span style="color: #ff0000;">窄依赖不会产生shuffle，比如说：flatMap/map/filter....</span></p>
<p>&nbsp;</p>
<h3>6.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 宽依赖</h3>
<p>宽依赖指的是多个子RDD的Partition会依赖同一个父RDD的Partition</p>
<p><span style="color: #ff0000;">总结：宽依赖我们形象的比喻为超生。</span><span style="color: #ff0000;">宽依赖会产生shuffle，<em id="__mceDel">比如说：reduceByKey/groupByKey...</em></span></p>
<p>&nbsp;</p>
<h3>6.4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lineage（血统）</h3>
<p>RDD只支持粗粒度转换，即只记录单个块上执行的单个操作。将创建RDD的一系列Lineage（即血统）记录下来，以便恢复丢失的分区。RDD的Lineage会记录RDD的元数据信息和转换行为，当该RDD的部分分区数据丢失时，它可以根据这些信息来重新运算和恢复丢失的数据分区。</p>
<h2>7.&nbsp; RDD的缓存</h2>
<p>Spark速度非常快的原因之一，就是在不同操作中可以在内存中持久化或者缓存数据集。当持久化某个RDD后，每一个节点都将把计算分区结果保存在内存中，对此RDD或衍生出的RDD进行的其他动作中重用。这使得后续的动作变得更加迅速。RDD相关的持久化和缓存，是Spark最重要的特征之一。可以说，缓存是Spark构建迭代式算法和快速交互式查询的关键。</p>
<h3>7.1 RDD缓存方式</h3>
<p>RDD通过persist方法或cache方法可以将前面的计算结果缓存，但是并不是这两个方法被调用时立即缓存，而是触发后面的action时，该RDD将会被缓存在计算节点的内存中，并供后面重用。</p>
<p><span style="color: #808080;"><em>rdd1.cache</em></span><br /><span style="color: #808080;"><em>rdd2.persist(org.apache.spark.storage.StorageLevel.DISK_ONLY)</em></span></p>
<h4 class="md-end-block md-heading md-focus"><span style="color: #808080;"><em><span class="md-plain md-expand">cache和persist区别：</span></em></span></h4>
<p><span style="color: #808080;"><em>cache：默认是把数据缓存在内存中，其本质是调用了persist方法</em></span></p>
<p>eg. rdd1.cache<br /><span style="color: #808080;"><em>persist:它可以把数据缓存在磁盘中，它可以有很多丰富的缓存级别，这些缓存级别都被封装在一个object StorageLevel</em></span></p>
<p><span style="color: #000000;">eg.&nbsp;&nbsp;rdd3.persist(org.apache.spark.storage.StorageLevel.DISK_ONLY)</span></p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190829215818184-199600551.png" alt="" /></p>
<p>通过查看源码发现cache最终也是调用了persist方法，默认的存储级别都是仅在内存存储一份，Spark的存储级别还有好多种，存储级别在object StorageLevel中定义的。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190829215839620-1166406205.png" alt="" /></p>
<p>缓存有可能丢失，或者存储于内存的数据由于内存不足而被删除，RDD的缓存容错机制保证了即使缓存丢失也能保证计算的正确执行。通过基于RDD的一系列转换，丢失的数据会被重算，由于RDD的各个Partition是相对独立的，因此只需要计算丢失的部分即可，并不需要重算全部Partition。<em id="__mceDel">&nbsp;</em></p>
<h4 class="md-end-block md-heading md-focus"><em><span class="md-plain md-expand" style="color: #999999;">清除缓存数据：</span></em></h4>
<p><em><span style="color: #999999;">（1）自动清除</span></em><br /><em><span style="color: #999999;">		整个应用程序结束之后，缓存中的所有数据自动清除</span></em><br /><em><span style="color: #999999;">（2）手动清除</span></em><br /><em><span style="color: #999999;">	  手动调用rdd的unpersist(true)&nbsp; //参数true，表示阻塞整个程序，知道所有缓存都清除后，才执行后面的逻辑；false，表示边清除缓存边执行后面的逻辑。</span></em></p>
<h4 class="md-end-block md-heading md-focus"><em><span class="md-plain md-expand" style="color: #999999;">什么时候设置缓存：</span></em></h4>
<p><em><span style="color: #999999;">（1）某个rdd后期被使用了多次</span></em><br /><em><span style="color: #999999;">    val rdd2=rdd1.flatMap(_.split(" "))</span></em><br /><em><span style="color: #999999;">    val rdd3=rdd1.map((_,1))</span></em><br /><em><span style="color: #999999;">  上面rdd1被使用了多次，后期可以对rdd1的结果数据进行缓存，缓存之后后面用到了它，可以直接从缓存中获取得到。避免重新计算，浪费时间。</span></em><br />  <br /><em><span style="color: #999999;">（2）一个rdd的结果数据计算逻辑比较复杂或者是计算时间比较长-------&gt; 总之 它的数据来之不易</span></em><br /><em><span style="color: #999999;">  val rdd1=sc.textFile("/words.txt").flatMap(_.split(" ")).xxxx .xxxxx..............</span></em></p>
<h2>8.&nbsp; DAG的生成</h2>
<h3>8.1 什么是DAG</h3>
<p>DAG(Directed Acyclic Graph)叫做有向无环图，原始的RDD通过一系列的转换就形成了DAG，根据RDD之间依赖关系的不同将DAG划分成不同的Stage(调度阶段)。对于窄依赖，partition的转换处理在一个Stage中完成计算。对于宽依赖，由于有Shuffle的存在，只能在parent RDD处理完成后，才能开始接下来的计算，因此<span style="color: #ff0000;">宽依赖是划分Stage的依据</span>。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190829215926141-1737394007.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>9.&nbsp; Spark任务调度</h2>
<h3>9.1 任务调度流程图</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190829215946077-1560710648.png" alt="" /></p>
<p>各个RDD之间存在着依赖关系，这些依赖关系就形成有向无环图DAG，DAGScheduler对这些依赖关系形成的DAG进行Stage划分，划分的规则很简单，从后往前回溯，遇到窄依赖加入本stage，遇见宽依赖进行Stage切分。完成了Stage的划分。DAGScheduler基于每个Stage生成TaskSet,并将TaskSet提交给TaskScheduler。TaskScheduler 负责具体的task调度,最后在Worker节点上启动task。</p>
<h4><span style="color: #999999;"><em>任务调度的步骤详细说明：</em></span></h4>
<p><span style="color: #999999;"><em>（1）Driver会运行客户端main方法中的代码，代码就会构建SparkContext对象，在构建SparkContext对象中，会创建DAGScheduler和TaskScheduler，然后按照rdd一系列的操作生成DAG有向无环图。最后把DAG有向无环图提交给DAGScheduler。</em></span></p>
<p><span style="color: #999999;"><em>（2）DAGScheduler拿到DAG有向无环图后，按照宽依赖进行stage的划分，这个时候会产生很多个stage，每一个stage中都有很多可以并行运行的task，把每一个stage中这些task封装在一个taskSet集合中，最后提交给TaskScheduler。</em></span></p>
<p><span style="color: #999999;"><em>（3）TaskScheduler拿到taskSet集合后，依次遍历每一个task，最后提交给worker节点的exectuor进程中。task就以线程的方式运行在worker节点的executor进程中。</em></span></p>
<p>&nbsp;</p>
<h3>9.2 DAGScheduler</h3>
<p align="left">（1）DAGScheduler对DAG有向无环图进行Stage划分。</p>
<p align="left">（2）记录哪个RDD或者 Stage 输出被物化（缓存），通常在一个复杂的shuffle之后，通常物化一下(cache、persist)，方便之后的计算。</p>
<p align="left">（3）重新提交shuffle输出丢失的stage（stage内部计算出错）给TaskScheduler</p>
<p align="left">（4）将 Taskset 传给底层调度器</p>
<p align="left">a）&ndash; spark-cluster TaskScheduler</p>
<p align="left">b）&ndash; yarn-cluster YarnClusterScheduler</p>
<p align="left">c）&ndash; yarn-client YarnClientClusterScheduler</p>
<h3>9.3 TaskScheduler</h3>
<p>（1）为每一个TaskSet构建一个TaskSetManager 实例管理这个TaskSet 的生命周期</p>
<p>（2）数据本地性决定每个Task最佳位置</p>
<p>（3）提交 taskset( 一组task) 到集群运行并监控</p>
<p>（4）推测执行，碰到计算缓慢任务需要放到别的节点上重试</p>
<p>（5）重新提交Shuffle输出丢失的Stage给DAGScheduler</p>
<p>&nbsp;</p>]]></description></item><item><title>sparkRDD：第3节 RDD常用的算子操作</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/29/11432268.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 29 Aug 2019 13:55:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/29/11432268.html</guid><description><![CDATA[<h2>4.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RDD编程API</h2>
<h3>4.1 RDD的算子分类</h3>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Transformation（转换）：根据数据集创建一个新的数据集，计算后返回一个新RDD；例如：一个rdd进行map操作后生了一个新的rdd。</p>
<p>Action（动作）：对rdd结果计算后返回一个数值value给驱动程序，或者把结果存储到外部存储系统（例如HDFS）中；</p>
<p>例如：collect算子将数据集的所有元素收集完成返回给驱动程序。</p>
<p>&nbsp;</p>
<h3>4.2 Transformation</h3>
<p>RDD中的所有转换都是延迟加载的，也就是说，它们并不会直接计算结果。相反的，它们只是记住这些应用到基础数据集（例如一个文件）上的转换动作。只有当发生一个要求返回结果给Driver的动作或者将结果写入到外存储中，这些转换才会真正运行。这种设计让Spark更加有效率地运行。</p>
<p>&nbsp;</p>
<p>常用的Transformation：</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="291">
<p align="center"><strong>转换</strong></p>
</td>
<td valign="top" width="278">
<p align="center"><strong>含义</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="291">
<p><strong>map(func)</strong></p>
</td>
<td valign="top" width="278">
<p>返回一个新的RDD，该RDD由每一个输入元素经过func函数转换后组成</p>
</td>
</tr>
<tr>
<td valign="top" width="291">
<p><strong>filter(func)</strong></p>
</td>
<td valign="top" width="278">
<p>返回一个新的RDD，该RDD由经过func函数计算后返回值为true的输入元素组成</p>
</td>
</tr>
<tr>
<td valign="top" width="291">
<p><strong>flatMap(func)</strong></p>
</td>
<td valign="top" width="278">
<p>类似于map，但是每一个输入元素可以被映射为0或多个输出元素（所以func应该返回一个序列，而不是单一元素）</p>
</td>
</tr>
<tr>
<td valign="top" width="291">
<p><strong>mapPartitions(func)</strong></p>
</td>
<td valign="top" width="278">
<p>类似于map，但独立地在RDD的每一个分片上运行，因此在类型为T的RDD上运行时，func的函数类型必须是Iterator[T] =&gt; Iterator[U]</p>
</td>
</tr>
<tr>
<td valign="top" width="291">
<p><strong>mapPartitionsWithIndex(func)</strong></p>
</td>
<td valign="top" width="278">
<p>类似于mapPartitions，但func带有一个整数参数表示分片的索引值，因此在类型为T的RDD上运行时，func的函数类型必须是</p>
<p>(Int, Interator[T]) =&gt; Iterator[U]</p>
</td>
</tr>
<tr>
<td valign="top" width="291">
<p><strong>union(otherDataset)</strong></p>
</td>
<td valign="top" width="278">
<p>对源RDD和参数RDD求并集后返回一个新的RDD</p>
</td>
</tr>
<tr>
<td valign="top" width="291">
<p><strong>intersection(otherDataset)</strong></p>
</td>
<td valign="top" width="278">
<p>对源RDD和参数RDD求交集后返回一个新的RDD</p>
</td>
</tr>
<tr>
<td valign="top" width="291">
<p><strong>distinct([numTasks]))</strong></p>
</td>
<td valign="top" width="278">
<p>对源RDD进行去重后返回一个新的RDD</p>
</td>
</tr>
<tr>
<td valign="top" width="291">
<p><strong>groupByKey([numTasks])&nbsp;&nbsp; </strong></p>
</td>
<td valign="top" width="278">
<p>在一个(K,V)的RDD上调用，返回一个(K, Iterator[V])的RDD</p>
</td>
</tr>
<tr>
<td valign="top" width="291">
<p><strong>reduceByKey(func, [numTasks])</strong></p>
</td>
<td valign="top" width="278">
<p>在一个(K,V)的RDD上调用，返回一个(K,V)的RDD，使用指定的reduce函数，将相同key的值聚合到一起，与groupByKey类似，reduce任务的个数可以通过第二个可选的参数来设置</p>
</td>
</tr>
<tr>
<td valign="top" width="291">
<p><strong>sortByKey([ascending], [numTasks])</strong></p>
</td>
<td valign="top" width="278">
<p>在一个(K,V)的RDD上调用，K必须实现Ordered接口，返回一个按照key进行排序的(K,V)的RDD</p>
</td>
</tr>
<tr>
<td valign="top" width="291">
<p><strong>sortBy(func,[ascending], [numTasks])</strong></p>
</td>
<td valign="top" width="278">
<p>与sortByKey类似，但是更灵活</p>
</td>
</tr>
<tr>
<td valign="top" width="291">
<p><strong>join(otherDataset, [numTasks])</strong></p>
</td>
<td valign="top" width="278">
<p>在类型为(K,V)和(K,W)的RDD上调用，返回一个相同key对应的所有元素对在一起的(K,(V,W))的RDD</p>
</td>
</tr>
<tr>
<td valign="top" width="291">
<p><strong>cogroup(otherDataset, [numTasks])</strong></p>
</td>
<td valign="top" width="278">
<p>在类型为(K,V)和(K,W)的RDD上调用，返回一个(K,(Iterable&lt;V&gt;,Iterable&lt;W&gt;))类型的RDD</p>
</td>
</tr>
<tr>
<td valign="top" width="291">
<p><strong>coalesce(numPartitions)&nbsp; </strong></p>
</td>
<td valign="top" width="278">
<p>减少 RDD 的分区数到指定值。</p>
</td>
</tr>
<tr>
<td valign="top" width="291">
<p><strong>repartition(numPartitions)</strong></p>
</td>
<td valign="top" width="278">
<p>重新给 RDD 分区</p>
</td>
</tr>
<tr>
<td valign="top" width="291">
<p><strong>repartitionAndSortWithinPartitions(partitioner)</strong></p>
<p><strong>&nbsp;</strong></p>
</td>
<td valign="top" width="278">
<p>重新给 RDD 分区，并且每个分区内以记录的 key 排序</p>
</td>
</tr>
</tbody>
</table>
<h3>4.3 Action</h3>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="260">
<p align="center"><strong>动作</strong></p>
</td>
<td valign="top" width="308">
<p align="center"><strong>含义</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="260">
<p><strong>reduce(func)</strong></p>
</td>
<td valign="top" width="308">
<p>reduce将RDD中元素前两个传给输入函数，产生一个新的return值，新产生的return值与RDD中下一个元素（第三个元素）组成两个元素，再被传给输入函数，直到最后只有一个值为止。</p>
</td>
</tr>
<tr>
<td valign="top" width="260">
<p><strong>collect()</strong></p>
</td>
<td valign="top" width="308">
<p>在驱动程序中，以数组的形式返回数据集的所有元素</p>
</td>
</tr>
<tr>
<td valign="top" width="260">
<p><strong>count()</strong></p>
</td>
<td valign="top" width="308">
<p>返回RDD的元素个数</p>
</td>
</tr>
<tr>
<td valign="top" width="260">
<p><strong>first()</strong></p>
</td>
<td valign="top" width="308">
<p>返回RDD的第一个元素（类似于take(1)）</p>
</td>
</tr>
<tr>
<td valign="top" width="260">
<p><strong>take(n)</strong></p>
</td>
<td valign="top" width="308">
<p>返回一个由数据集的前n个元素组成的数组</p>
</td>
</tr>
<tr>
<td valign="top" width="260">
<p><strong>takeOrdered(n,&nbsp;[ordering])</strong></p>
</td>
<td valign="top" width="308">
<p>返回自然顺序或者自定义顺序的前 n 个元素</p>
</td>
</tr>
<tr>
<td valign="top" width="260">
<p><strong>saveAsTextFile(path)</strong></p>
</td>
<td valign="top" width="308">
<p>将数据集的元素以textfile的形式保存到HDFS文件系统或者其他支持的文件系统，对于每个元素，Spark将会调用toString方法，将它装换为文件中的文本</p>
</td>
</tr>
<tr>
<td valign="top" width="260">
<p><strong>saveAsSequenceFile(path)&nbsp;</strong></p>
</td>
<td valign="top" width="308">
<p>将数据集中的元素以Hadoop sequencefile的格式保存到指定的目录下，可以使HDFS或者其他Hadoop支持的文件系统。</p>
</td>
</tr>
<tr>
<td valign="top" width="260">
<p><strong>saveAsObjectFile(path)&nbsp;</strong></p>
</td>
<td valign="top" width="308">
<p>将数据集的元素，以 Java 序列化的方式保存到指定的目录下</p>
</td>
</tr>
<tr>
<td valign="top" width="260">
<p><strong>countByKey()</strong></p>
</td>
<td valign="top" width="308">
<p>针对(K,V)类型的RDD，返回一个(K,Int)的map，表示每一个key对应的元素个数。</p>
</td>
</tr>
<tr>
<td valign="top" width="260">
<p><strong>foreach(func)</strong></p>
</td>
<td valign="top" width="308">
<p>在数据集的每一个元素上，运行函数func</p>
</td>
</tr>
<tr>
<td valign="top" width="260">
<p><strong>foreachPartition(func)</strong></p>
</td>
<td valign="top" width="308">
<p>在数据集的每一个分区上，运行函数func</p>
</td>
</tr>
</tbody>
</table>
<h2>5.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RDD常用的算子操作</h2>
<p>Spark Rdd的所有算子操作，请见《sparkRDD函数详解.docx》</p>
<p>启动spark-shell 进行测试：</p>
<p>spark-shell --master spark://node1:7077</p>
<p>&nbsp;</p>
<h4>练习1：map、filter</h4>
<p>//通过并行化生成rdd</p>
<p>val rdd1 = sc.parallelize(List(5, 6, 4, 7, 3, 8, 2, 9, 1, 10))</p>
<p>//对rdd1里的每一个元素乘2然后排序</p>
<p>val rdd2 = rdd1.map(_ * 2).sortBy(x =&gt; x, true)</p>
<p>//过滤出大于等于5的元素</p>
<p>val rdd3 = rdd2.filter(_ &gt;= 5)</p>
<p>//将元素以数组的方式在客户端显示</p>
<p>rdd3.collect</p>
<p>&nbsp;</p>
<h4>练习2：flatMap</h4>
<p>val rdd1 = sc.parallelize(Array("a b c", "d e f", "h i j"))</p>
<p>//将rdd1里面的每一个元素先切分在压平</p>
<p>val rdd2 = rdd1.flatMap(_.split(" "))</p>
<p>rdd2.collect</p>
<p>&nbsp;</p>
<h4>练习3：交集、并集</h4>
<p>val rdd1 = sc.parallelize(List(5, 6, 4, 3))</p>
<p>val rdd2 = sc.parallelize(List(1, 2, 3, 4))</p>
<p>//求并集</p>
<p>val rdd3 = rdd1.union(rdd2)</p>
<p>//求交集</p>
<p>val rdd4 = rdd1.intersection(rdd2)</p>
<p>//去重</p>
<p>rdd3.distinct.collect</p>
<p>rdd4.collect</p>
<p>&nbsp;</p>
<h4>练习4：join、groupByKey</h4>
<p>val rdd1 = sc.parallelize(List(("tom", 1), ("jerry", 3), ("kitty", 2)))</p>
<p>val rdd2 = sc.parallelize(List(("jerry", 2), ("tom", 1), ("shuke", 2)))</p>
<p>//求join</p>
<p>val rdd3 = rdd1.join(rdd2)</p>
<p>rdd3.collect</p>
<p>//求并集</p>
<p>val rdd4 = rdd1.union(rdd2)</p>
<p>rdd4.collect</p>
<p>//按key进行分组</p>
<p>val rdd5=rdd4.groupByKey</p>
<p>rdd5.collect</p>
<p>&nbsp;</p>
<h4>练习5：cogroup</h4>
<p>val rdd1 = sc.parallelize(List(("tom", 1), ("tom", 2), ("jerry", 3), ("kitty", 2)))</p>
<p>val rdd2 = sc.parallelize(List(("jerry", 2), ("tom", 1), ("jim", 2)))</p>
<p>//cogroup</p>
<p>val rdd3 = rdd1.cogroup(rdd2)</p>
<p>//注意cogroup与groupByKey的区别</p>
<p>rdd3.collect</p>
<p>&nbsp;</p>
<h4>练习6：reduce</h4>
<p>val rdd1 = sc.parallelize(List(1, 2, 3, 4, 5))</p>
<p>//reduce聚合</p>
<p>val rdd2 = rdd1.reduce(_ + _)</p>
<p>rdd2.collect</p>
<p>&nbsp;</p>
<h4>练习7：reduceByKey、sortByKey</h4>
<p>val rdd1 = sc.parallelize(List(("tom", 1), ("jerry", 3), ("kitty", 2),&nbsp; ("shuke", 1)))</p>
<p>val rdd2 = sc.parallelize(List(("jerry", 2), ("tom", 3), ("shuke", 2), ("kitty", 5)))</p>
<p>val rdd3 = rdd1.union(rdd2)</p>
<p>//按key进行聚合</p>
<p>val rdd4 = rdd3.reduceByKey(_ + _)</p>
<p>rdd4.collect</p>
<p>//按value的降序排序</p>
<p>val rdd5 = rdd4.map(t =&gt; (t._2, t._1)).sortByKey(false).map(t =&gt; (t._2, t._1))</p>
<p>rdd5.collect</p>
<h4>练习8：repartition、coalesce</h4>
<p>val rdd1 = sc.parallelize(1 to 10,3)</p>
<p>//利用repartition改变rdd1分区数</p>
<p>//减少分区 结果为2</p>
<p>rdd1.repartition(2).partitions.length 或&nbsp;rdd1.repartition(2).partitions.size</p>
<p>//增加分区 结果为4</p>
<p>rdd1.repartition(4).partitions.size</p>
<p>//利用coalesce改变rdd1分区数</p>
<p>//减少分区 结果为2</p>
<p>rdd1.coalesce(2).partitions.size</p>
<p>//减少分区 结果为3，不会增加到4</p>
<p>rdd1.coalesce(4).partitions.size</p>
<p>&nbsp;注意：<span style="color: #ff0000;">repartition可以增加和减少rdd中的分区数，coalesce只能减少rdd分区数，增加rdd分区数不会生效</span>。</p>
<p>　　　<span style="color: #ff0000;">repartition实际上调用了coalesce方法，等价于coalesce(num,true), coalesce方法的第2个参数默认为false。</span></p>
<p>&nbsp;</p>
<h2>RDD编程实战:&nbsp;</h2>
<h3>一、 通过spark实现点击流日志分析案例</h3>
<p>详见代码。</p>
<h3>一、 通过Spark实现ip地址查询</h3>
<h2>1． 需求分析</h2>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在互联网中，我们经常会见到城市热点图这样的报表数据，例如在百度统计中，会统计今年的热门旅游城市、热门报考学校等，会将这样的信息显示在热点图中。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190831225054958-2122967450.png" alt="" /></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 因此，我们需要通过日志信息（运行商或者网站自己生成）和城市ip段信息来判断用户的ip段，统计热点经纬度。</p>
<h2>2． 技术调研</h2>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 因为我们的需求是完成一张报表信息，所以对程序的实时性没有要求，所以可以选择内存计算spark来实现上述功能。</p>
<h2>3． 架构设计</h2>
<p>搭建spark集群</p>
<h2>4． 开发流程</h2>
<h3>4.1． 数据准备</h3>
<h3>4.2． ip日志信息</h3>
<p>在ip日志信息中，我们只需要关心ip这一个维度就可以了，其他的不做介绍</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190831225137967-300799972.png" alt="" /></p>
<h3>4.3． 城市ip段信息</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190831225201471-1058975505.png" alt="" /></p>
<h2>5． 代码开发</h2>
<h3>5.1． 思路</h3>
<p>1、加载城市ip段信息，获取ip起始数字和结束数字，经度，维度</p>
<p>2、加载日志数据，获取ip信息，然后转换为数字，和ip段比较</p>
<p>3、比较的时候采用二分法查找，找到对应的经度和维度</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190901185009918-123728628.png" alt="" /></p>
<p>4、然后对经度和维度做单词计数</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190901184248256-73883964.png" alt="" /></p>
<p>------------------------------------</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190901185234167-771374275.png" alt="" /></p>
<h3>5.2． 代码</h3>
<p>详见代码。</p>]]></description></item><item><title>sparkRDD：第1节 RDD概述；第2节 创建RDD</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/29/11432249.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 29 Aug 2019 13:50:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/29/11432249.html</guid><description><![CDATA[<p style="text-align: left;" align="center">RDD的特点：</p>
<p style="text-align: left;" align="center">（1）rdd是数据集；</p>
<p style="text-align: left;" align="center">（2）rdd是编程模型：因为rdd有很多数据计算方法如map，flatMap，reduceByKey等；</p>
<p style="text-align: left;" align="center">（3）rdd相互之间有依赖关系；</p>
<p style="text-align: left;" align="center">（4）rdd是可以分区的，如下图所示：</p>
<p style="text-align: left;" align="center"><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190924230251410-477834483.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p style="text-align: left;" align="center">=======================================</p>
<h1 align="center">Spark计算模型RDD</h1>
<h1>一、 课程目标</h1>
<p>目标1：掌握RDD的原理</p>
<p>目标2：熟练使用RDD的算子完成计算任务</p>
<p>目标3：掌握RDD的宽窄依赖</p>
<p>目标4：掌握RDD的缓存机制</p>
<p>目标5：掌握划分stage</p>
<p>目标6：掌握spark的任务调度流程</p>
<p>&nbsp;</p>
<h1>二、 弹性分布式数据集RDD</h1>
<h2>2.&nbsp; RDD概述</h2>
<h3>2.1 什么是RDD</h3>
<p>RDD（Resilient Distributed Dataset）叫做弹性分布式数据集，是Spark中最基本的数据抽象，它代表一个不可变、可分区、里面的元素可并行计算的集合。RDD具有数据流模型的特点：自动容错、位置感知性调度和可伸缩性。RDD允许用户在执行多个查询时显式地将数据缓存在内存中，后续的查询能够重用这些数据，这极大地提升了查询速度。</p>
<p>Dataset：一个数据集合，用于存放数据的。</p>
<p>Distributed：RDD中的数据是分布式存储的，可用于分布式计算。</p>
<p>Resilient：RDD中的数据可以存储在内存中或者磁盘中。</p>
<h3>2.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RDD的属性</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190829214622133-684880842.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190829215020637-285381479.png" alt="" /></p>
<p>1） A list of partitions ：一个分区（Partition）列表，数据集的基本组成单位。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于RDD来说，每个分区都会被一个计算任务处理，并决定并行计算的粒度。用户可以在创建RDD时指定RDD的分区个数，如果没有指定，那么就会采用默认值。（比如：读取HDFS上数据文件产生的RDD分区数跟block的个数相等）</p>
<p>&nbsp;</p>
<p>2）A function for computing each split ：一个计算每个分区的函数。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Spark中RDD的计算是以分区为单位的，每个RDD都会实现compute计算函数以达到这个目的。</p>
<p>&nbsp;</p>
<p>3）A list of dependencies on other RDDs：一个RDD会依赖于其他多个RDD，RDD之间的依赖关系。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RDD的每次转换都会生成一个新的RDD，所以RDD之间就会形成类似于流水线一样的前后依赖关系。在部分分区数据丢失时，Spark可以通过这个依赖关系重新计算丢失的分区数据，而不是对RDD的所有分区进行重新计算。</p>
<p>&nbsp;</p>
<p>4）Optionally, a Partitioner for key-value RDDs (e.g. to say that the RDD is hash-partitioned)：一个Partitioner，即RDD的分区函数（可选项）。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当前Spark中实现了两种类型的分区函数，一个是基于哈希的HashPartitioner，另外一&nbsp;&nbsp;&nbsp;&nbsp; 个是基于范围的RangePartitioner。只有对于key-value的RDD，才会有Partitioner（<span style="color: #ff0000;">必须要产生shuffle</span>），非key-value的RDD的Parititioner的值是None。</p>
<p>&nbsp;</p>
<p>5）Optionally, a list of preferred locations to compute each split on (e.g. block locations for an HDFS file)：一个列表，存储每个Partition的优先位置(可选项)。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于一个HDFS文件来说，这个列表保存的就是每个Partition所在的块的位置。按照&ldquo;移动数据不如移动计算&rdquo;的理念，Spark在进行任务调度的时候，会尽可能地将计算任务分配到其所要处理数据块的存储位置（spark进行任务分配的时候尽可能选择那些存有数据的worker节点来进行任务计算）。</p>
<p class="2">&nbsp;</p>
<h3>2.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 为什么会产生RDD？</h3>
<p class="2">（1）&nbsp;&nbsp;&nbsp; 传统的MapReduce虽然具有自动容错、平衡负载和可拓展性的优点，但是其最大缺点是采用非循环式的数据流模型，使得在迭代计算中要进行大量的磁盘IO操作。RDD正是解决这一缺点的抽象方法。</p>
<p class="2">&nbsp;</p>
<p>（2）&nbsp;&nbsp;&nbsp;&nbsp; RDD是Spark提供的最重要的抽象的概念，它是一种具有容错机制的特殊集合，可以分布在集群的节点上，以函数式编程来操作集合，进行各种并行操作。可以把RDD的结果数据进行缓存，方便进行多次重用，避免重复计算。</p>
<p>&nbsp;</p>
<h3>2.4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RDD在Spark中的地位及作用</h3>
<p>&nbsp;</p>
<p class="2">（1）&nbsp;&nbsp;&nbsp; 为什么会有Spark？</p>
<p class="2">因为传统的并行计算模型无法有效的解决迭代计算（iterative）和交互式计算（interactive）；而Spark的使命便是解决这两个问题，这也是他存在的价值和理由。</p>
<p>&nbsp;</p>
<p class="2">（2）&nbsp;&nbsp;&nbsp; Spark如何解决迭代计算？</p>
<p class="2">其主要实现思想就是RDD，把所有计算的数据保存在分布式的内存中。迭代计算通常情况下都是对同一个数据集做反复的迭代计算，数据在内存中将大大提升IO操作。这也是Spark涉及的核心：内存计算。</p>
<p>&nbsp;</p>
<p class="2">（3）&nbsp;&nbsp;&nbsp; Spark如何实现交互式计算？</p>
<p class="2">因为Spark是用scala语言实现的，Spark和scala能够紧密的集成，所以Spark可以完美的运用scala的解释器，使得其中的scala可以向操作本地集合对象一样轻松操作分布式数据集。</p>
<p>&nbsp;</p>
<p class="2">（4）&nbsp;&nbsp;&nbsp; Spark和RDD的关系？</p>
<p class="2">RDD是一种具有容错性、基于内存计算的抽象方法，RDD是Spark Core的底层核心，Spark则是这个抽象方法的实现。</p>
<h2>3. 创建RDD</h2>
<p>1）由一个已经存在的Scala集合创建。</p>
<p>val rdd1 = sc.parallelize(Array(1,2,3,4,5,6,7,8))</p>
<p>&nbsp;</p>
<p>2）由外部存储系统的文件创建。包括本地的文件系统，还有所有Hadoop支持的数据集，比如HDFS、Cassandra、HBase等。</p>
<p>val rdd2 = sc.textFile("/words.txt")</p>
<p>&nbsp;</p>
<p>3）已有的RDD经过算子转换生成新的RDD</p>
<p>val rdd3=rdd2.flatMap(_.split(" "))</p>
<p>&nbsp;</p>]]></description></item><item><title>Spark程序编译报错error: object apache is not a member of package org</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/28/11427088.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 28 Aug 2019 15:01:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/28/11427088.html</guid><description><![CDATA[<p>Spark程序编译报错：</p>
<p>[INFO] Compiling 2 source files to E:\Develop\IDEAWorkspace\spark\target\classes at 1567004370534<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCount.scala:3: error: <span style="color: #ff0000;">object apache is not a member of package org</span><br />[ERROR] import org.apache.spark.rdd.RDD<br />[ERROR]            ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCount.scala:4: error: object apache is not a member of package org<br />[ERROR] import org.apache.spark.{SparkConf, SparkContext}<br />[ERROR]            ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCount.scala:12: error: not found: type SparkConf<br />[ERROR]     val sparkConf: SparkConf = new SparkConf().setAppName("WordCount").setMaster("local[2]")<br />[ERROR]                    ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCount.scala:12: error: not found: type SparkConf<br />[ERROR]     val sparkConf: SparkConf = new SparkConf().setAppName("WordCount").setMaster("local[2]")<br />[ERROR]                                    ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCount.scala:14: error: not found: type SparkContext<br />[ERROR]     val sc: SparkContext = new SparkContext(sparkConf)<br />[ERROR]             ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCount.scala:14: error: not found: type SparkContext<br />[ERROR]     val sc: SparkContext = new SparkContext(sparkConf)<br />[ERROR]                                ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCount.scala:18: error: not found: type RDD<br />[ERROR]     val data: RDD[String] = sc.textFile("E:\\Study\\BigData\\heima\\stage5\\2spark����\\words.txt")<br />[ERROR]               ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCount.scala:20: error: not found: type RDD<br />[ERROR]     val words: RDD[String] = data.flatMap(_.split(" "))<br />[ERROR]                ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCount.scala:22: error: not found: type RDD<br />[ERROR]     val wordToOne: RDD[(String, Int)] = words.map((_,1))<br />[ERROR]                    ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCount.scala:24: error: not found: type RDD<br />[ERROR]     val result: RDD[(String, Int)] = wordToOne.reduceByKey(_+_)<br />[ERROR]                 ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCount.scala:27: error: not found: type RDD<br />[ERROR]         val ascResult: RDD[(String, Int)] = result.sortBy(_._2,false)  //����<br />[ERROR]                        ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCountCluster.scala:3: error: object apache is not a member of package org<br />[ERROR] import org.apache.spark.{SparkConf, SparkContext}<br />[ERROR]            ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCountCluster.scala:4: error: object apache is not a member of package org<br />[ERROR] import org.apache.spark.rdd.RDD<br />[ERROR]            ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCountCluster.scala:12: error: not found: type SparkConf<br />[ERROR]     val sparkConf: SparkConf = new SparkConf().setAppName("WordCountCluster")<br />[ERROR]                    ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCountCluster.scala:12: error: not found: type SparkConf<br />[ERROR]     val sparkConf: SparkConf = new SparkConf().setAppName("WordCountCluster")<br />[ERROR]                                    ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCountCluster.scala:14: error: not found: type SparkContext<br />[ERROR]     val sc: SparkContext = new SparkContext(sparkConf)<br />[ERROR]             ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCountCluster.scala:14: error: not found: type SparkContext<br />[ERROR]     val sc: SparkContext = new SparkContext(sparkConf)<br />[ERROR]                                ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCountCluster.scala:18: error: not found: type RDD<br />[ERROR]     val data: RDD[String] = sc.textFile(args(0))<br />[ERROR]               ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCountCluster.scala:20: error: not found: type RDD<br />[ERROR]     val words: RDD[String] = data.flatMap(_.split(" "))<br />[ERROR]                ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCountCluster.scala:22: error: not found: type RDD<br />[ERROR]     val wordToOne: RDD[(String, Int)] = words.map((_,1))<br />[ERROR]                    ^<br />[ERROR] E:\Develop\IDEAWorkspace\spark\src\main\scala\cn\itcast\wordCount\WordCountCluster.scala:24: error: not found: type RDD<br />[ERROR]     val result: RDD[(String, Int)] = wordToOne.reduceByKey(_+_)<br />[ERROR]                 ^<br />[ERROR] 21 errors found<br />[INFO] ------------------------------------------------------------------------<br />[INFO] BUILD FAILURE</p>
<p>&nbsp;</p>
<p>原因：本地仓库有问题。很可能是<span style="color: #ff0000;">原来的本地仓库路径太长了太深了</span>，仓库本身没问题，因为我把原来的仓库拷贝到E:\Study\BigData\目录下，就能正常使用。</p>
<p>&nbsp;</p>
<p>解决方法：</p>
<p>原来spark工程的maven本地仓库是：E:\Study\BigData\heima\stage5\1scala\scala3\spark课程需要的maven仓库\SparkRepository</p>
<p>后来我修改为：E:\Study\BigData\repository&nbsp; &nbsp;就可以了。</p>
<p>&nbsp;</p>]]></description></item><item><title>导入spark程序的maven依赖包时，无法导入，报错Unable to import maven project: See logs for details</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/28/11426836.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 28 Aug 2019 14:07:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/28/11426836.html</guid><description><![CDATA[<p>问题：<br />导入spark程序的maven依赖包时，无法导入，且报错：<br />0:23	Unable to import maven project: See logs for details</p>
<p>2019-08-23 00:34:05,140 [ 747292]   WARN -      #org.jetbrains.idea.maven - Cannot reconnect. <br />java.lang.RuntimeException: Cannot reconnect.<br />	at org.jetbrains.idea.maven.server.RemoteObjectWrapper.perform(RemoteObjectWrapper.java:111)<br />	at org.jetbrains.idea.maven.server.MavenIndexerWrapper.createIndex(MavenIndexerWrapper.java:61)<br />	at org.jetbrains.idea.maven.indices.MavenIndex.createContext(MavenIndex.java:396)<br />	at org.jetbrains.idea.maven.indices.MavenIndex.access$500(MavenIndex.java:48)<br />	at org.jetbrains.idea.maven.indices.MavenIndex$IndexData.&lt;init&gt;(MavenIndex.java:703)<br />	at org.jetbrains.idea.maven.indices.MavenIndex.doOpen(MavenIndex.java:236)<br />	at org.jetbrains.idea.maven.indices.MavenIndex.open(MavenIndex.java:202)<br />	at org.jetbrains.idea.maven.indices.MavenIndex.&lt;init&gt;(MavenIndex.java:104)<br />	at org.jetbrains.idea.maven.indices.MavenIndices.add(MavenIndices.java:92)<br />	at org.jetbrains.idea.maven.indices.MavenIndicesManager.ensureIndicesExist(MavenIndicesManager.java:174)<br />	at org.jetbrains.idea.maven.indices.MavenProjectIndicesManager$3.run(MavenProjectIndicesManager.java:117)<br />	at com.intellij.util.ui.update.MergingUpdateQueue.execute(MergingUpdateQueue.java:337)<br />	at com.intellij.util.ui.update.MergingUpdateQueue.execute(MergingUpdateQueue.java:327)<br />	at com.intellij.util.ui.update.MergingUpdateQueue.lambda$flush$1(MergingUpdateQueue.java:277)<br />	at com.intellij.util.ui.update.MergingUpdateQueue.flush(MergingUpdateQueue.java:291)<br />	at com.intellij.util.ui.update.MergingUpdateQueue.run(MergingUpdateQueue.java:246)<br />	at com.intellij.util.concurrency.QueueProcessor.runSafely(QueueProcessor.java:246)<br />	at com.intellij.util.Alarm$Request.runSafely(Alarm.java:417)<br />	at com.intellij.util.Alarm$Request.access$700(Alarm.java:344)<br />	at com.intellij.util.Alarm$Request$1.run(Alarm.java:384)<br />	at com.intellij.util.Alarm$Request.run(Alarm.java:395)<br />	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)<br />	at java.util.concurrent.FutureTask.run(FutureTask.java:266)<br />	at com.intellij.util.concurrency.SchedulingWrapper$MyScheduledFutureTask.run(SchedulingWrapper.java:242)<br />	at com.intellij.util.concurrency.BoundedTaskExecutor$2.run(BoundedTaskExecutor.java:212)<br />	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)<br />	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)<br />	at java.lang.Thread.run(Thread.java:745)<br />Caused by: java.rmi.UnmarshalException: Error unmarshaling return header; nested exception is: <br />	java.net.SocketException: Connection reset</p>
<p>&nbsp;</p>
<p>原因：maven版本问题，我原来使用的是maven3.6.0，不兼容。</p>
<p>我需要导入的maven依赖如下：</p>
<p>&lt;properties&gt;<br />        &lt;scala.version&gt;2.11.8&lt;/scala.version&gt;<br />        &lt;hadoop.version&gt;2.7.4&lt;/hadoop.version&gt;<br />        &lt;spark.version&gt;2.1.3&lt;/spark.version&gt;<br />    &lt;/properties&gt;<br />    &lt;dependencies&gt;<br />        &lt;dependency&gt;<br />            &lt;groupId&gt;org.scala-lang&lt;/groupId&gt;<br />            &lt;artifactId&gt;scala-library&lt;/artifactId&gt;<br />            &lt;version&gt;${scala.version}&lt;/version&gt;<br />        &lt;/dependency&gt;<br />        &lt;dependency&gt;<br />            &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;<br />            &lt;artifactId&gt;spark-core_2.11&lt;/artifactId&gt;<br />            &lt;version&gt;${spark.version}&lt;/version&gt;<br />        &lt;/dependency&gt;</p>
<p>    &lt;/dependencies&gt;</p>
<p>    &lt;build&gt;<br />        &lt;sourceDirectory&gt;src/main/scala&lt;/sourceDirectory&gt;<br />        &lt;testSourceDirectory&gt;src/test/scala&lt;/testSourceDirectory&gt;<br />        &lt;plugins&gt;<br />            &lt;plugin&gt;<br />                &lt;groupId&gt;net.alchim31.maven&lt;/groupId&gt;<br />                &lt;artifactId&gt;scala-maven-plugin&lt;/artifactId&gt;<br />                &lt;version&gt;3.2.2&lt;/version&gt;<br />                &lt;executions&gt;<br />                    &lt;execution&gt;<br />                        &lt;goals&gt;<br />                            &lt;goal&gt;compile&lt;/goal&gt;<br />                            &lt;goal&gt;testCompile&lt;/goal&gt;<br />                        &lt;/goals&gt;<br />                        &lt;configuration&gt;<br />                            &lt;args&gt;<br />                                &lt;arg&gt;-dependencyfile&lt;/arg&gt;<br />                                &lt;arg&gt;${project.build.directory}/.scala_dependencies&lt;/arg&gt;<br />                            &lt;/args&gt;<br />                        &lt;/configuration&gt;<br />                    &lt;/execution&gt;<br />                &lt;/executions&gt;<br />            &lt;/plugin&gt;<br />            &lt;plugin&gt;<br />                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br />                &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;<br />                &lt;version&gt;2.4.3&lt;/version&gt;<br />                &lt;executions&gt;<br />                    &lt;execution&gt;<br />                        &lt;phase&gt;package&lt;/phase&gt;<br />                        &lt;goals&gt;<br />                            &lt;goal&gt;shade&lt;/goal&gt;<br />                        &lt;/goals&gt;<br />                        &lt;configuration&gt;<br />                            &lt;filters&gt;<br />                                &lt;filter&gt;<br />                                    &lt;artifact&gt;*:*&lt;/artifact&gt;<br />                                    &lt;excludes&gt;<br />                                        &lt;exclude&gt;META-INF/*.SF&lt;/exclude&gt;<br />                                        &lt;exclude&gt;META-INF/*.DSA&lt;/exclude&gt;<br />                                        &lt;exclude&gt;META-INF/*.RSA&lt;/exclude&gt;<br />                                    &lt;/excludes&gt;<br />                                &lt;/filter&gt;<br />                            &lt;/filters&gt;<br />                            &lt;transformers&gt;<br />                                &lt;transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"&gt;<br />                                    &lt;mainClass&gt;&lt;/mainClass&gt;<br />                                &lt;/transformer&gt;<br />                            &lt;/transformers&gt;<br />                        &lt;/configuration&gt;<br />                    &lt;/execution&gt;<br />                &lt;/executions&gt;<br />            &lt;/plugin&gt;<br />        &lt;/plugins&gt;<br />    &lt;/build&gt;</p>
<p>&nbsp;</p>
<p>测试步骤：</p>
<p>1.更换仓库为一个空白的repository。同时该仓库的路径比较浅，怀疑是原来的仓库的路径太深了。或者原来仓库内容有问题。没用。</p>
<p>2.pom.xml中删除一些依赖、插件，然后一个个添加，没用。</p>
<p>&nbsp;</p>
<p>解决方法：更换maven为idea自带的maven3.3.9.&nbsp;</p>
<p>&nbsp;</p>]]></description></item><item><title>hdfs dfs ls /列出了本地根目录下文件夹和文件Warning: fs.defaultFS is not set when running "ls" command</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/27/11421280.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 27 Aug 2019 14:43:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/27/11421280.html</guid><description><![CDATA[<p>[root@node01 customShells]# hdfs dfs -ls /<br /><span style="color: #ff0000;">Warning: fs.defaultFS is not set when running "ls" command.</span></p>
<p><span style="color: #000000;">原因： /usr/bin/ 下存在 hadoop和hdfs可执行文件，usr/bin 是优先查找的路径，所以先找到了 、usr/bin 下面的hdfs，直接执行了。 执行的不是你安装目录下的文件，所以读取不到你hadoop的配置。</span></p>
<p><span style="color: #000000;">可以执行&nbsp; which hadoop和which hdfs来查找这2个命令所在位置。</span></p>
<p><span style="color: #000000;">解决方法：重命名或删除/usr/bin/下的这2个命令。</span></p>
<p>&nbsp;最后，一定记得执行&nbsp;&nbsp;source /etc/profile&nbsp; 命令，否则系统会找不到hdfs命令。</p>]]></description></item><item><title>Spark入门：第4节 Spark程序：1 - 9</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/26/11414819.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 26 Aug 2019 12:46:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/26/11414819.html</guid><description><![CDATA[<h1>五、 Spark角色介绍</h1>
<p class="2">Spark是基于内存计算的大数据并行计算框架。因为其基于内存计算，比Hadoop中MapReduce计算框架具有更高的实时性，同时保证了高效容错性和可伸缩性。从2009年诞生于AMPLab到现在已经成为Apache顶级开源项目，并成功应用于商业集群中，学习Spark就需要了解其架构。</p>
<p class="2">Spark架构图如下：</p>
<p class="2">&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826203124477-1735596002.png" alt="" /></p>
<p>&nbsp;</p>
<p class="2">Spark架构使用了分布式计算中master-slave模型，master是集群中含有master进程的节点，slave是集群中含有worker进程的节点。</p>
<p>u&nbsp; Driver Program ：运⾏main函数并且新建SparkContext的程序。</p>
<p>u&nbsp; Application：基于Spark的应用程序，包含了driver程序和集群上的executor。</p>
<p>u&nbsp; Cluster Manager：指的是在集群上获取资源的外部服务。目前有三种类型</p>
<p>（1）Standalone: spark原生的资源管理，由Master负责资源的分配</p>
<p>（2）Apache Mesos:与hadoop MR兼容性良好的一种资源调度框架</p>
<p>（3）Hadoop Yarn: 主要是指Yarn中的ResourceManager</p>
<p>u&nbsp; Worker Node： 集群中任何可以运行Application代码的节点，在Standalone模式中指的是通过slaves文件配置的Worker节点，在Spark on Yarn模式下就是NodeManager节点</p>
<p>u&nbsp; Executor：是在一个worker node上为某应用启动的⼀个进程，该进程负责运行任务，并且负责将数据存在内存或者磁盘上。每个应用都有各自独立的executor。</p>
<p>u&nbsp; Task ：被送到某个executor上的工作单元。</p>
<p>&nbsp;</p>
<h1>六、 初识Spark程序</h1>
<h2>6.1 执行第一个spark程序</h2>
<p><span style="color: #ff0000;">普通模式提交任务</span>：</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p align="left">bin/spark-submit \</p>
<p align="left">--class org.apache.spark.examples.SparkPi \</p>
<p align="left">--master spark://node1:7077 \</p>
<p align="left">--executor-memory 1G \</p>
<p align="left">--total-executor-cores 2 \</p>
<p align="left">examples/jars/spark-examples_2.11-2.1.3.jar \</p>
<p align="left">10</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>--class ：指定程序的主类<br />--master：指定master地址<br />--executor-memory ：指定每一个executor需要的内存大小<br />--total-executor-cores ：执行总的cpu核数</p>
<p>&nbsp;</p>
<p>该算法是利用蒙特&middot;卡罗算法求圆周率PI，通过计算机模拟大量的随机数，最终会计算出比较精确的&pi;。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826203254619-997188543.png" alt="" /></p>
<p><span style="color: #ff0000;">高可用模式提交任务</span>：</p>
<p>在高可用模式下，因为涉及到多个Master，所以对于应用程序的提交就有了一点变化，因为应用程序需要知道当前的Master的IP地址和端口。这种HA方案处理这种情况很简单，只需要在SparkContext指向一个Master列表就可以了，</p>
<p>如<span style="color: #ff0000;">spark://host1:port1,host2:port2,host3:port3</span>，应用程序会轮询列表，找到活着的Master。</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>bin/spark-submit \</p>
<p>--class org.apache.spark.examples.SparkPi \</p>
<p>--master spark://node1:7077,node2:7077,node3:7077 \</p>
<p>--executor-memory 1G \</p>
<p>--total-executor-cores 2 \</p>
<p>examples/jars/spark-examples_2.11-2.1.3.jar \</p>
<p>10</p>


</td>


</tr>


</tbody>


</table>
<p>&nbsp;</p>
<p>在高可用模式下提交任务，需要把所有的master地址进行罗列<br />--master spark://node1:7077,node2:7077,node3:7077<br />后期程序后依次轮询整个master列表，最后找到活着的master，然后向这个活着的master去提交任务。</p>
<h2>6.2 启动Spark-Shell</h2>
<p>spark-shell是Spark自带的交互式Shell程序，方便用户进行交互式编程，用户可以在该命令行下用scala编写spark程序。</p>
<h3>6.2.1 运行spark-shell --master local[N] 读取本地文件</h3>
<p>单机模式：通过本地N个线程跑任务，只运行一个SparkSubmit进程。</p>
<ul class="ul-list" data-mark="*">
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-plain md-expand">-master local[N]</span></p>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">local表示本地运行，跟集群没有任何关系，方便做一些测试和学习</span></p>


</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">N 表示一个正整数</span></p>


</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">local[N] 表示本地采用N个线程去运行任务</span></p>


</li>


</ul>


</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">spark-shell --master local[2]</span></p>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p md-focus"><span class="md-plain">它会产生一个SparkSubmit进程</span></p>


</li>


</ul>


</li>


</ul>
<p>&nbsp;</p>
<p>（1）需求</p>
<p>读取本地文件，实现文件内的单词计数。本地文件words.txt 内容如下：</p>
<table style="width: 590px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="590">
<p>hello me</p>
<p>hello you</p>
<p>hello her</p>


</td>


</tr>


</tbody>


</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>（2）运行spark-shell --master local[2]</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826203655292-158038515.png" alt="" /></p>
<p>&nbsp;</p>
<p>观察启动的进程：</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826203740902-40493912.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>（3）编写scala代码：</p>
<p>&nbsp; &nbsp;&nbsp;sc.textFile("file:///root/words.txt").flatMap(x=&gt;x.split(" ")).map(x=&gt;(x,1)).reduceByKey((x,y)=&gt;x+y).collect</p>
<p>&nbsp; &nbsp; sc.textFile("file:///root///words.txt").flatMap(_.split(" ")).map((_,1)).reduceByKey(_+_).collect</p>
<p><span style="color: #ff0000;">代码说明</span>：</p>
<p>sc：Spark-Shell中已经默认将SparkContext类初始化为对象sc。用户代码如果需要用到，则直接应用sc即可。</p>
<p>textFile:读取数据文件</p>
<p>flatMap:对文件中的每一行数据进行压平切分,这里按照空格分隔。</p>
<p>map:对出现的每一个单词记为1（word，1）</p>
<p>reduceByKey:对相同的单词出现的次数进行累加</p>
<p>collect:触发任务执行，收集结果数据。</p>
<p>（4）观察结果：</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826203801244-802108860.png" alt="" /></p>
<h3>6.2.2 运行spark-shell --master local[N] 读取HDFS上数据</h3>
<p>(1)、整合spark和HDFS，修改配置文件</p>
<p>在spark-env.sh ，添加HADOOP_CONF_DIR配置，指明了hadoop的配置文件后，默认它就是使用的hdfs上的文件</p>
<p><span style="color: #3366ff;">export HADOOP_CONF_DIR=/export/servers/hadoop/etc/hadoop</span></p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826203823157-1032997627.png" alt="" /></p>
<p>&nbsp;</p>
<p>(2)、再启动启动hdfs，然后重启spark集群</p>
<p>(3)、向hdfs上传一个文件到hdfs://node1:9000/words.txt</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826203843520-2091835407.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>(4)、在spark shell中用scala语言编写spark程序：</p>
<p>&nbsp; &nbsp; &nbsp; sc.textFile("/words.txt").flatMap(_.split(" ")).map((_,1)).reduceByKey(_+_).collect</p>
<h3>6.2.3 运行spark-shell 指定具体的master地址</h3>
<p>（1）需求:</p>
<p>spark-shell运行时指定具体的master地址，读取HDFS上的数据，做单词计数，然后将结果保存在HDFS上。</p>
<p>&nbsp;</p>
<p>（2）执行启动命令：</p>
<p>spark-shell \</p>
<p>--master spark://node1:7077 \</p>
<p>--executor-memory 1g \</p>
<p>--total-executor-cores 2</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826203905183-2054722568.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826203918195-651213610.png" alt="" /></p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">参数说明：</span></p>
<p><span style="color: #ff0000;">--master spark://node1:7077 指定Master的地址</span></p>
<p><span style="color: #ff0000;">--executor-memory 1g 指定每个worker可用内存为1g</span></p>
<p><span style="color: #ff0000;">--total-executor-cores 2 指定整个集群使用的cup核数为2个</span></p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">注意：</span></p>
<p>如果启动spark shell时没有指定master地址，但是也可以正常启动spark shell和执行spark shell中的程序，其实是启动了spark的local模式，该模式仅在本机启动一个进程，没有与集群建立联系。</p>
<p>&nbsp;</p>
<p>（2）编写scala代码：</p>
<p>saveAsTextFile:保存结果数据到文件中：&nbsp;</p>
<p>&nbsp; &nbsp; &nbsp;sc.textFile("/words.txt").flatMap(_.split(" ")).map((_,1)).reduceByKey(_+_).saveAsTextFile("/wc")</p>
<p>（3）查看hdfs上结果：</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826203949066-1504080837.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>6.3在IDEA中编写WordCount程序</h2>
<p>spark-shell仅在测试和验证我们的程序时使用的较多，在生产环境中，通常会在IDEA中编写程序，然后打成jar包，最后提交到集群。最常用的是创建一个Maven项目，利用Maven来管理jar包的依赖。</p>
<p>&nbsp;</p>
<p>（1）.创建一个项目</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826204011221-392324744.png" alt="" /></p>
<p>（2）.选择Maven项目，然后点击next&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826204039398-243191804.png" alt="" /></p>
<p>（3）.填写maven的GAV，然后点击next</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826204111160-268226804.png" alt="" /></p>
<p>（4）填写项目名称，然后点击finish</p>
<p align="center"><img style="float: left;" src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826204124857-598229892.png" alt="" /></p>
<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>（5）.创建好maven项目后，点击Enable Auto-Import&nbsp;</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826204150882-306350950.png" alt="" /></p>
<p>（6）配置Maven的pom.xml</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;详见代码。<br />（7）添加src/main/scala和src/test/scala，与pom.xml中的配置保持一致&nbsp;</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826204212990-1857423077.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826204242818-1464689218.png" alt="" /></p>
<p>（8）新建一个scala class，类型为Object</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826204253743-2098803371.png" alt="" /></p>
<p>（9）.编写spark程序：</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;详见代码。</p>
<p>（10）.使用Maven打包：</p>
<p>点击idea右侧的Maven Project选项&nbsp;</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826204313270-1040432950.png" alt="" /></p>
<p>点击Lifecycle,选择package，然后点击<span style="color: #ff0000;">Run Maven Build&nbsp;</span></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826204421646-1731956670.png" alt="" /></p>
<p>（11）.选择编译成功的jar包，并将该jar上传到Spark集群中的某个节点上</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826204503591-1449511994.png" alt="" /></p>
<p>&nbsp;</p>
<p>（12）.首先启动hdfs和Spark集群</p>
<p>启动hdfs</p>
<p>/export/servers/hadoop/sbin/start-dfs.sh</p>
<p>&nbsp;</p>
<p>启动spark</p>
<p>/export/servers/spark/sbin/start-all.sh</p>
<p>&nbsp;</p>
<p>(13).使用spark-submit命令提交Spark应用（注意参数的顺序）</p>
<p>spark-submit \</p>
<p>--class cn.test.spark.WordCount \</p>
<p>--master spark://node1:7077 \</p>
<p>--executor-memory 1g \</p>
<p>--total-executor-cores 2 \</p>
<p>/root/spark-1.0-SNAPSHOT.jar \</p>
<p>/words.txt \</p>
<p>/spark_out</p>
<p>&nbsp;</p>
<p>这里通过spark-submit提交任务到集群上。用的是spark的Standalone模式</p>
<p>Standalone模式是Spark内部默认实现的一种集群管理模式，这种模式是通过集群中的Master来统一管理资源。</p>
<p>1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 查看Spark的web管理界面</p>
<p>地址： 192.168.200.160:8080</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826204543586-1380008991.png" alt="" /></p>
<p>&nbsp;</p>
<p>2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 查看HDFS上的结果文件</p>
<p>hdfs dfs -cat /spark_out/part*</p>
<p>(hello,4)</p>
<p>(me,2)</p>
<p>(you,3)</p>
<p>(her,1)</p>
<h2>6.4 使用java语言编写spark wordcount程序</h2>
<p>　　详见代码。</p>]]></description></item><item><title>Spark入门：第2节 Spark集群安装：1 - 3；第3节 Spark HA高可用部署：1 - 2</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/26/11414720.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 26 Aug 2019 12:28:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/26/11414720.html</guid><description><![CDATA[<h1>三、 Spark集群安装</h1>
<h2>3.1 下载spark安装包</h2>
<p class="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 下载地址spark官网：http://spark.apache.org/downloads.html</p>
<p class="2">这里我们使用&nbsp;<a href="https://d3kbcqa49mib13.cloudfront.net/spark-1.6.2-bin-hadoop2.6.tgz">spark-2.1.3-bin-hadoop2.7</a>版本.</p>
<p class="2">&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826202323206-2004555767.png" alt="" /></p>
<p>&nbsp;</p>
<h2>3.2 规划安装目录</h2>
<p class="2">/export/servers</p>
<h2>3.3 解压安装包</h2>
<p>tar -zxvf <a href="https://d3kbcqa49mib13.cloudfront.net/spark-1.6.2-bin-hadoop2.6.tgz">spark-2.1.3-bin-hadoop2.7.tgz</a></p>
<h2>3.4 重命名目录</h2>
<p>&nbsp;&nbsp;&nbsp; mv spark-2.1.3-bin-hadoop2.7 spark</p>
<h2>3.5 修改配置文件</h2>
<p class="2">配置文件目录在 /export/servers/spark/conf</p>
<p class="2">&nbsp; &nbsp;<span style="color: #ff0000;">vi&nbsp; spark-env.sh</span> 修改文件(先把spark-env.sh.template重命名为spark-env.sh)</p>
<p class="2">&nbsp;</p>
<table style="width: 590px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="590">
<p class="2">&nbsp;</p>
<p class="2">#配置java环境变量</p>
<p class="2">export JAVA_HOME=/opt/bigdata/jdk1.7.0_67</p>
<p class="2">#指定spark老大Master的IP</p>
<p class="2">export SPARK_MASTER_HOST=node1</p>
<p class="2">#指定spark老大Master的端口</p>
<p class="2">export SPARK_MASTER_PORT=7077</p>
</td>
</tr>
</tbody>
</table>
<p class="2">&nbsp; &nbsp;<span style="color: #ff0000;">vi&nbsp; slaves</span> 修改文件(先把slaves.template重命名为slaves)</p>
<table style="width: 590px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="590">
<p class="2">node2</p>
<p class="2">node3</p>
</td>
</tr>
</tbody>
</table>
<h2>3.6 拷贝配置到其他主机</h2>
<p>通过scp 命令将spark的安装目录拷贝到其他机器上</p>
<p>scp -r /export/servers/spark node2:/export/servers</p>
<p>scp -r /export/servers/spark node3:/export/servers</p>
<p>&nbsp;</p>
<h2>3.7 配置spark环境变量（3台服务器都要配置）</h2>
<p class="2">将spark添加到环境变量,添加以下内容到 /etc/profile</p>
<table style="width: 590px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="590">
<p class="2">export SPARK_HOME=/export/servers/spark</p>
<p class="2">export PATH=$PATH:$SPARK_HOME/sbin:$SPARK_HOME/bin</p>
</td>
</tr>
</tbody>
</table>
<p class="2">注意最后 source /etc/profile&nbsp; 刷新配置</p>
<h2>3.8 启动spark</h2>
<p><span style="color: #ff0000;">#在主节点上启动spark</span></p>
<table style="width: 590px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="590">
<p>/export/servers/spark/sbin/start-all.sh</p>
<p>&nbsp;</p>
</td>
</tr>
</tbody>
</table>
<p><span style="color: #ff0000;">&nbsp;注意：hadoop中也有start-all.sh 、stop-all.sh 的命令，如果仅仅写start-all.sh，会优先执行hadoop的命令，为了避免和hadoop冲突，命令前要带上路径。</span></p>
<h2>3.9 停止spark</h2>
<p><span style="color: #ff0000;">#在主节点上停止spark集群</span></p>
<table style="width: 590px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="590">
<p>/export/servers/spark/sbin/stop-all.sh</p>
<p>&nbsp;</p>
</td>
</tr>
</tbody>
</table>
<h2>3.10 spark的web界面</h2>
<p>正常启动spark集群后，可以通过访问 http://node1:8080,查看spark的web界面，查看相关信息。</p>
<p>&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">namenode: hdfs://node1:8020-----------------&gt; http://node1:50070</span></p>
<p class="md-end-block md-p md-focus"><span class="md-plain">master: spark://node1:7077 --------------------&gt; http://node1:8080</span></p>
<p class="md-end-block md-p md-focus"><span class="md-plain md-expand">访问</span></p>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">master所在的主机名或者是ip地址:8080</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">可以看到spark集群的所有信息</span></p>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">spark集群总的资源信息（有多少core 有多少内存）</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">spark集群已经使用的资源信息</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">spark集群还剩的资源信息</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">spark集群对应的worker信息</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">spark集群正在运行的任务信息</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p md-focus"><span class="md-plain">spark集群已经完成的任务信息</span></p>
</li>
</ul>
</li>
</ul>
<p>在实际工作中我们会搭建一个非常多的服务器组成一个spark集群，每一台服务器都有对应的资源信息<br />10台worker，每一个worker的cpu核数20，内存大小100G<br />worker会参与任务的计算，整个spark集群所有的资源信息就是把所有的worker节点资源信息进行累加</p>
<p>spark集群总的资源信息：<br />	内存：   10*100G=1T<br />	cpu核数：10*20=200核</p>
<p><br />后期会把大量的spark任务提交到spark集群去运行，这个时候就需要考虑spark集群还剩的资源信息，以及后面可能还会跑其他的任务，他们也需要对应的资源。资源分配的时候要合理点。</p>
<h1>四、 Spark HA高可用部署</h1>
<h2>4.1 高可用部署说明</h2>
<p>Spark Standalone集群是Master-Slaves架构的集群模式，和大部分的Master-Slaves结构集群一样，存在着Master单点故障的问题。如何解决这个单点故障的问题，Spark提供了两种方案：</p>
<p>（1）<span style="color: #ff0000;">基于文件系统的单点恢复</span>(Single-Node Recovery with Local File System)。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #ff0000;">主要用于开发或测试环境</span>。当spark提供目录保存spark Application和worker的注册信息，并将他们的恢复状态写入该目录中，这时，一旦Master发生故障，就可以通过重新启动Master进程（sbin/start-master.sh），恢复已运行的spark Application和worker的注册信息。</p>
<p>（2）<span style="color: #ff0000;">基于zookeeper的Standby Masters</span>(Standby Masters with ZooKeeper)。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #ff0000;"> 用于生产模式</span>。其基本原理是通过zookeeper来选举一个Master，其他的Master处于Standby状态。将spark集群连接到同一个ZooKeeper实例并启动多个Master，利用zookeeper提供的选举和状态保存功能，可以使一个Master被选举成活着的master，而其他Master处于Standby状态。如果现任Master死去，另一个Master会通过选举产生，并恢复到旧的Master状态，然后恢复调度。整个恢复过程可能要1-2分钟。</p>
<h2>4.2 基于zookeeper的Spark HA高可用集群部署</h2>
<p>该HA方案使用起来很简单，首先需要搭建一个zookeeper集群，然后启动zooKeeper集群，最后在不同节点上启动Master。<span style="color: #ff0000;">具体配置如下</span>：</p>
<p>(1)vim spark-env.sh</p>
<p>注释掉export SPARK_MASTER_HOST=node1</p>
<p>(2)在spark-env.sh添加SPARK_DAEMON_JAVA_OPTS，内容如下：</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>export SPARK_DAEMON_JAVA_OPTS="-Dspark.deploy.recoveryMode=ZOOKEEPER&nbsp; -Dspark.deploy.zookeeper.url=node1:2181,node2:2181,node3:2181&nbsp; -Dspark.deploy.zookeeper.dir=/spark"</p>
<p>&nbsp;</p>




</td>




</tr>




</tbody>




</table>
<p><span style="color: #ff0000;">参数说明</span></p>
<p><span style="color: #ff0000;">spark.deploy.recoveryMode</span>：恢复模式（Master重新启动的模式）</p>
<p>有三种：(1)ZooKeeper (2) FileSystem (3)NONE</p>
<p><span style="color: #ff0000;">spark.deploy.zookeeper.url</span>：ZooKeeper的Server地址</p>
<p><span style="color: #ff0000;">spark.deploy.zookeeper.dir</span>：保存集群元数据信息的文件、目录。</p>
<p>包括Worker，Driver和Application。</p>
<p><span style="color: #ff0000;">注意</span>：</p>
<p>&nbsp;&nbsp;&nbsp; 在普通模式下启动spark集群，只需要在主机上面执行start-all.sh 就可以了。</p>
<p>&nbsp;&nbsp;&nbsp; 在高可用模式下启动spark集群，先需要在任意一台节点上启动start-all.sh命令。然后在另外一台节点上单独启动master。命令start-master.sh。</p>
<p><span style="color: #ff0000;">补充说明</span>：</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p><span style="color: #ff0000;">（1）如何恢复到上一次活着master挂掉之前的状态：</span></p>
<p>在高可用模式下，整个spark集群就有很多个master，其中只有一个master被zk选举成活着的master，其他的多个master都处于standby，同时把整个spark集群的元数据信息通过zk中节点进行保存。</p>
<p>后期如果活着的master挂掉。首先zk会感知到活着的master挂掉，下面开始在多个处于standby中的master进行选举，再次产生一个活着的master，这个活着的master会读取保存在zk节点中的spark集群元数据信息，恢复到上一次master的状态。整个过程在恢复的时候经历过了很多个不同的阶段，每个阶段都需要一定时间，最终恢复到上个活着的master的转态，整个恢复过程一般需要1-2分钟。</p>
<p><span style="color: #ff0000;">（2）在master的恢复阶段对任务的影响</span></p>
<p>针对于正在运行的任务，由于它已经分配到了资源，它是不受任何影响.</p>
<p>受影响的就是在当前这个挂掉的阶段，后面提交的新的任务，由于没有活着的master分配资源，该任务是无法运行。</p>
<p><span style="color: #ff0000;">（3）在任意一台机器来执行start-all.sh脚本的前提条件：需要实现任意2台机器之间ssh免密登录。</span></p>




</td>




</tr>




</tbody>




</table>]]></description></item><item><title>Spark入门：第1节 Spark概述：1 - 4</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/25/11409947.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 25 Aug 2019 15:22:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/25/11409947.html</guid><description><![CDATA[<h4 class="md-end-block md-heading">&nbsp;<strong style="font-size: 1em;"><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190923222147435-754261050.png" alt="" /></strong></h4>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">2、spark概述</span></h4>
<h5 class="md-end-block md-heading"><span class="md-plain">2.1 什么是spark</span></h5>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p"><span><strong>Apache Spark&trade;</strong><span class="md-plain"> is a unified analytics engine for large-scale data processing.</span></span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">apache的spark是一个针对于大规模数据处理的统一分析引擎</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>spark是基于内存的计算框架，计算速度非常快，但是这里仅仅只涉及到数据的计算，并没有涉及到数据的存储。<br /><span>后期需要进行数据的计算，这里就可以对接不同的外部数据源（比如hdfs）</span></span></pre>
</li>
</ul>
<h5 class="md-end-block md-heading"><span class="md-plain">2.2 为什么要学习spark</span></h5>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">就是由于spark的处理速度比mapreduce要快很多，后期很受企业青睐。</span></p>
</li>
</ul>
<p class="md-end-block md-p">&nbsp;</p>
<p class="md-end-block md-p"><span class="md-plain">####3、spark的四大特性</span></p>
<h5 class="md-end-block md-heading"><span class="md-plain">3.1、速度快</span></h5>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">spark比mapreduce在内存中快100倍，比mapreduce在磁盘中快10倍</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">spark比mapreduce快很多的主要的2个原因：</span></p>
<pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span>（1）mapreduce在处理任务的时候，每一个job的输出结果都会落地到磁盘，后续有其他的job需要依赖于前面job的输出结果，这个时候只能够从磁盘中加载得到，需要大量的磁盘io操作；<br /><span><span class="cm-tab">    spark在处理任务的时候，每一个job的输出结果可以保存在内存中，后续有其他的job需要依赖于前面job的输出结果，这个时候就可以直接从内存获取得到，大大减少磁盘io操作，最后性能肯定是大大的提升。<br /><span class="cm-tab-wrap-hack"><span class="cm-tab">    <br /><span class="cm-tab-wrap-hack">例如：hivesql---&gt; select name,age from (select * from user where age &gt;30);<span class="cm-tab"> <br /><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  job2&lt;-------------------job1<br /><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; map 0% &nbsp;  reduce 0%<br /><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; map 10% &nbsp;  reduce 0%<br /><span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br /><span>(2) mapreduce任务是以进程的方式运行在yarn集群中。比如说一个mapreduce任务中有100个MapTask,<br /><span>后期要处理这100个MapTask就需要开启100个进程；<br /><span> &nbsp; spark任务是以线程的方式运行在spark集群中进程里面，比如说一个spark任务有100个MapTask,<br /><span> &nbsp; 这个时候可以极端一点，只需要启动一个进程，在一个进程中运行100个线程中就可以，进程的启动与线程的启动代价肯定是不一样，一个进程的启动需要的调度时间和资源远远大于一个线程。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
</li>
</ul>
<h5 class="md-end-block md-heading"><span class="md-plain">3.2、易用性</span></h5>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">可以快速写一个spark应用程序，通过java、scala、python、R、sql等不同的语言进行代码开发。</span></p>
</li>
</ul>
<h5 class="md-end-block md-heading"><span class="md-plain">3.3、通用性</span></h5>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">spark框架不再是一个简单的框架，它发展成一个生态系统</span></p>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">就包括了sparksql、sparkStreaming、Mlib、Graphx不同的子项目</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">后期按照公司当前的业务需求就可以灵活的使用到这些不同的子项目</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">一站式解决所有应用场景</span></p>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">离线</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">实时</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">机器学习算法库</span></p>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">图计算、图挖掘</span></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 class="md-end-block md-heading"><span class="md-plain">3.4、兼容性</span></h5>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">spark任务就是一个计算程序，哪里可以给当前这个任务提供计算资源，我们就可以把这个任务提交到哪里去运行。</span></p>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">standAlone</span></p>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">它是spark集群自带的模式，整个任务的资源分配由Master老大去负责</span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">yarn</span></p>
<ul class="ul-list" data-mark="*">
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">可以把spark程序提交到yarn中运行，整个任务的资源分配由ResourceManager负责</span></p>
</li>
</ul>
</li>
<li class="md-list-item">
<p class="md-end-block md-p"><span class="md-plain">mesos</span></p>
<ul class="ul-list" data-mark="*">
<li class="md-list-item md-focus-container">
<p class="md-end-block md-p md-focus"><span class="md-plain md-expand">它是一个apache开源的类似于yarn的资源调度平台</span></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p style="text-align: left;">&nbsp;</p>
<h4 style="text-align: left;">MapReduce的缺点：</h4>
<p style="text-align: left;">（1）计算过程较慢，不适应交互式计算，不适应迭代计算；</p>
<p style="text-align: left;">（2）不是所有的计算都由map和reduce两个阶段构成。</p>
<h4 style="text-align: left;">　　Spark解决了以上问题：</h4>
<p style="text-align: left;">（1）内存存储中间结果；</p>
<p style="text-align: left;">（2）提供了更好的API --&gt; 函数式。</p>
<p style="text-align: left;">&nbsp;</p>
<h4 id="_1_4_spark和hadoop的异同">Spark和Hadoop的异同：</h4>
<table id="__asciidoctor-preview-138__" class="tableblock frame-all grid-all stretch"><colgroup><col /><col /><col /></colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">&nbsp;</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Hadoop</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Spark</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><strong>类型</strong></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">基础平台, 包含计算, 存储, 调度</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">分布式计算工具</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><strong>场景</strong></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">大规模数据集上的批处理</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">迭代计算, 交互式计算, 流计算</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><strong>延迟</strong></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">大</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">小</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><strong>易用性</strong></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">API 较为底层, 算法适应性差</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">API 较为顶层, 方便使用</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><strong>价格</strong></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">对机器要求低, 便宜</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">对内存有要求, 相对较贵</p>
</td>
</tr>
</tbody>
</table>
<p style="text-align: left;">&nbsp;</p>
<h4 class="md-end-block md-heading"><span class="md-plain">小结：</span></h4>
<ul>
<li>
<p>Spark 提供了 批处理(RDDs), 结构化查询(DataFrame), 流计算(SparkStreaming), 机器学习(MLlib), 图计算(GraphX) 等组件</p>
</li>
<li>
<p>这些组件均是依托于通用的计算引擎 RDDs 而构建出的, 所以&nbsp;<code>spark-core</code>&nbsp;的 RDDs 是整个 Spark 的基础</p>
</li>
</ul>
<h4 class="md-end-block md-heading"><span class="md-plain">&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190923222005364-794564535.png" alt="" /></span></h4>
<h4 id="_2_1_spark_集群结构">Spark 集群结构：</h4>
<div id="__asciidoctor-preview-148__" class="paragraph">
<p>Spark 自身是没有集群管理工具的, 但是如果想要管理数以千计台机器的集群, 没有一个集群管理工具还不太现实, 所以 Spark 可以借助外部的集群工具来进行管理</p>
</div>
<div id="__asciidoctor-preview-149__" class="paragraph">
<p>整个流程就是使用 Spark 的 Client 提交任务, 找到集群管理工具申请资源, 后将计算任务分发到集群中运行：</p>
</div>
<p style="text-align: left;"><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190924072018755-90648845.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p style="text-align: left;"><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190924072035009-857704674.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;名词解释：（对照上图）</p>
<div id="__asciidoctor-preview-154__" class="openblock">
<div class="content">
<div id="__asciidoctor-preview-155__" class="ulist">
<ul>
<li>
<p><code>Driver</code></p>
<div id="__asciidoctor-preview-157__" class="paragraph">
<p>该进程调用 Spark 程序的 main 方法, 并且启动 SparkContext</p>
</div>
</li>
<li>
<p><code>Cluster Manager</code></p>
<div id="__asciidoctor-preview-159__" class="paragraph">
<p>该进程负责和外部集群工具打交道, 申请或释放集群资源</p>
</div>
</li>
<li>
<p><code>Worker</code></p>
<div id="__asciidoctor-preview-161__" class="paragraph">
<p>该进程是一个守护进程, 负责启动和管理 Executor</p>
</div>
</li>
<li>
<p><code>Executor</code></p>
<div id="__asciidoctor-preview-163__" class="paragraph">
<p>该进程是一个JVM虚拟机, 负责运行 Spark Task</p>
</div>
</li>
</ul>
</div>
</div>
</div>
<p style="text-align: left;">运行一个 Spark 程序大致经历如下几个步骤</p>
<div id="__asciidoctor-preview-168__" class="openblock">
<div class="content">
<div id="__asciidoctor-preview-169__" class="olist arabic"><ol class="arabic">
<li>
<p>启动 Drive, 创建 SparkContext</p>
</li>
<li>
<p>Client 提交程序给 Drive, Drive&nbsp;<strong>向 Cluster Manager 申请集群资源</strong></p>
</li>
<li>
<p>资源申请完毕,&nbsp;<strong>在 Worker 中启动 Executor</strong></p>
</li>
<li>
<p>Driver 将程序转化为 Tasks, 分发给 Executor 执行</p>
</li>
</ol></div>
</div>
</div>
<p style="text-align: left;">问题一: Spark 程序可以运行在什么地方?</p>
<div id="__asciidoctor-preview-176__" class="openblock">
<div class="content">
<div id="__asciidoctor-preview-177__" class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">&nbsp;</td>
<td class="content">
<div id="__asciidoctor-preview-178__" class="ulist">
<ul>
<li>
<p><strong>集群:</strong>&nbsp;一组协同工作的计算机, 通常表现的好像是一台计算机一样,&nbsp;<strong>所运行的任务由软件来控制和调度</strong></p>
</li>
<li>
<p><strong>集群管理工具:</strong>&nbsp;调度任务到集群的软件</p>
</li>
<li>
<p><strong>常见的集群管理工具:</strong>&nbsp;Hadoop Yarn, Apache Mesos, Kubernetes</p>
</li>
</ul>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div id="__asciidoctor-preview-182__" class="paragraph">
<p>Spark 可以将任务运行在两种模式下:</p>
</div>
<div id="__asciidoctor-preview-183__" class="ulist">
<ul>
<li>
<p><strong>单机,</strong>&nbsp;使用线程模拟并行来运行程序</p>
</li>
<li>
<p><strong>集群,</strong>&nbsp;使用集群管理器来和不同类型的集群交互, 将任务运行在集群中</p>
</li>
</ul>
</div>
<div id="__asciidoctor-preview-186__" class="paragraph">
<p>Spark 可以使用的集群管理工具有:</p>
</div>
<div id="__asciidoctor-preview-187__" class="ulist">
<ul>
<li>
<p>Spark Standalone</p>
</li>
<li>
<p>Hadoop Yarn</p>
</li>
<li>
<p>Apache Mesos</p>
</li>
<li>
<p>Kubernetes</p>
</li>
</ul>
</div>
</div>
</div>
<p style="text-align: left;">问题二: Driver 和 Worker 什么时候被启动?</p>
<div id="__asciidoctor-preview-165__" class="dlist"><dl><dd>
<div id="__asciidoctor-preview-194__" class="openblock">
<div class="content">
<div id="__asciidoctor-preview-195__" class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/cf76d1086f4a7d7e21c96ceed8bdb271.png" alt="cf76d1086f4a7d7e21c96ceed8bdb271" width="600" /></div>
</div>
<div id="__asciidoctor-preview-196__" class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/33c817e136edc008c3ef71cb6992e9a3.png" alt="33c817e136edc008c3ef71cb6992e9a3" width="800" /></div>
</div>
<div id="__asciidoctor-preview-197__" class="ulist">
<ul>
<li>
<p>Standalone 集群中, 分为两个角色: Master 和 Slave, 而 Slave 就是 Worker, 所以在 Standalone 集群中, 启动之初就会创建固定数量的 Worker</p>
</li>
<li>
<p>Driver 的启动分为两种模式: Client 和 Cluster. 在 Client 模式下, Driver 运行在 Client 端, 在 Client 启动的时候被启动. 在 Cluster 模式下, Driver 运行在某个 Worker 中, 随着应用的提交而启动</p>
</li>
</ul>
</div>
<div id="__asciidoctor-preview-200__" class="imageblock">
<div class="content"><img src="https://doc-1256053707.cos.ap-beijing.myqcloud.com/92180f4b9061374cdf3169b4bd84090e.png" alt="92180f4b9061374cdf3169b4bd84090e" width="800" /></div>
</div>
<div id="__asciidoctor-preview-201__" class="ulist">
<ul>
<li>
<p>在 Yarn 集群模式下, 也依然分为 Client 模式和 Cluster 模式, 较新的版本中已经逐渐在废弃 Client 模式了, 所以上图所示为 Cluster 模式</p>
</li>
<li>
<p>如果要在 Yarn 中运行 Spark 程序, 首先会和 RM 交互, 开启 ApplicationMaster, 其中运行了 Driver, Driver创建基础环境后, 会由 RM 提供对应的容器, 运行 Executor, Executor会反向向 Driver 反向注册自己, 并申请 Tasks 执行</p>
</li>
<li>
<p>在后续的 Spark 任务调度部分, 会更详细介绍</p>
</li>
</ul>
</div>
</div>
</div>
</dd></dl></div>
<div id="__asciidoctor-preview-205__" class="exampleblock">
<div class="title">总结</div>
<div class="content">
<div id="__asciidoctor-preview-206__" class="ulist">
<ul>
<li>
<p><code>Master</code>&nbsp;负责总控, 调度, 管理和协调 Worker, 保留资源状况等</p>
</li>
<li>
<p><code>Slave</code>&nbsp;对应 Worker 节点, 用于启动 Executor 执行 Tasks, 定期向 Master汇报</p>
</li>
<li>
<p><code>Driver</code>&nbsp;运行在 Client 或者 Slave(Worker) 中, 默认运行在 Slave(Worker) 中</p>
</li>
</ul>
</div>
</div>
</div>
<p style="text-align: left;">&nbsp;</p>
<p style="text-align: left;">==========================================</p>
<h1 style="text-align: center;">Spark入门</h1>
<h1>一、 课程目标</h1>
<p>目标1：熟悉Spark相关概念</p>
<p>目标2：搭建一个Spark集群</p>
<p>目标3：编写简单的Spark应用程序</p>
<h1>二、 Spark概述</h1>
<p>&nbsp;</p>
<h2>2.1什么是Spark（官网：<a href="http://spark.apache.org/">http://spark.apache.org</a>）</h2>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190825232058217-1140979250.png" alt="" /></p>
<p>&nbsp;</p>
<p>Spark是一种快速、通用、可扩展的大数据分析引擎，2009年诞生于加州大学伯克利分校AMPLab，2010年开源，2013年6月成为Apache孵化项目，2014年2月成为Apache顶级项目。目前，Spark生态系统已经发展成为一个包含多个子项目的集合，其中包含SparkSQL、Spark&nbsp;Streaming、GraphX、MLlib等子项目，Spark是基于内存计算的大数据并行计算框架。Spark基于内存计算，提高了在大数据环境下数据处理的实时性，同时保证了高容错性和高可伸缩性，允许用户将Spark部署在大量廉价硬件之上，形成集群。Spark得到了众多大数据公司的支持，这些公司包括Hortonworks、IBM、Intel、Cloudera、MapR、Pivotal、百度、阿里、</p>
<p>腾讯、京东、携程、优酷土豆。当前百度的Spark已应用于凤巢、大搜索、直达号、百度大数据等业务；阿里利用GraphX构建了大规模的图计算和图挖掘系统，实现了很多生产系统的推荐算法；腾讯Spark集群达到8000台的规模，是当前已知的世界上最大的Spark集群。</p>
<h2>2.2为什么要学Spark</h2>
<p>Spark是一个开源的类似于Hadoop MapReduce的通用的并行计算框架，Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；<span style="color: #ff0000;">但不同于MapReduce的是</span>Spark中的Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的map reduce的算法。</p>
<p><span style="color: #ff0000;">Spark是MapReduce的替代方案，而且兼容HDFS、Hive，可融入Hadoop的生态系统，以弥补MapReduce的不足。</span></p>
<p>&nbsp;</p>
<h2>2.3 Spark特点</h2>
<h3>2.3.1 快</h3>
<p>与Hadoop的MapReduce相比，Spark基于内存的运算要快100倍以上，基于硬盘的运算也要快10倍以上。Spark实现了高效的DAG执行引擎，可以通过基于内存来高效处理数据流。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190825232140520-2147049114.png" alt="" /></p>
<p>&nbsp;</p>
<h3>2.3.2 易用</h3>
<p>Spark支持Java、Python和Scala的API，还支持超过80种高级算法，使用户可以快速构建不同的应用。而且Spark支持交互式的Python和Scala的shell，可以非常方便地在这些shell中使用Spark集群来验证解决问题的方法。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190825232153822-80307725.png" alt="" /></p>
<p>&nbsp;</p>
<h3>2.3.3 通用</h3>
<p>Spark提供了统一的解决方案。Spark可以用于批处理、交互式查询（Spark&nbsp;SQL）、实时流处理（Spark&nbsp;Streaming）、机器学习（Spark&nbsp;MLlib）和图计算（GraphX）。这些不同类型的处理都可以在同一个应用中无缝使用。Spark统一的解决方案非常具有吸引力，毕竟任何公司都想用统一的平台去处理遇到的问题，减少开发和维护的人力成本和部署平台的物力成本。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190826194828401-1323090999.png" alt="" /></p>
<h3>2.3.4 兼容性</h3>
<p>Spark可以非常方便地与其他的开源产品进行融合。比如，Spark可以使用Hadoop的YARN和Apache&nbsp;Mesos作为它的资源管理和调度器，器，并且可以处理所有Hadoop支持的数据，包括HDFS、HBase和Cassandra等。这对于已经部署Hadoop集群的用户特别重要，因为不需要做任何数据迁移就可以使用Spark的强大处理能力。Spark也可以不依赖于第三方的资源管理和调度器，它实现了Standalone作为其内置的资源管理和调度框架，这样进一步降低了Spark的使用门槛，使得所有人都可以非常容易地部署和使用Spark。此外，Spark还提供了在EC2上部署Standalone的Spark集群的工具。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190825232200042-266177975.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>Redis操作命令</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/22/11397206.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 22 Aug 2019 14:18:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/22/11397206.html</guid><description><![CDATA[<p>1.String类型数据操作命令：</p>
<p>exists mykey</p>
<p>append a "hello" #可以不加引号</p>
<p>get a</p>
<p>set b "this is redis"</p>
<p>strlen b&nbsp;</p>
<p>incr c</p>
<p>incrby c 3</p>
<p>decr c&nbsp;</p>
<p>decrby c 3</p>
<p>del c</p>
<p>getset d "haha"</p>
<p>setex e 8 "expired after 8 s"</p>
<p>ttl e</p>
<p>setnx e "operation will success if e doesn't exist"</p>
<p>setrange f 20 ddd #替换或补0，以字节为单位，而非字符</p>
<p>getrange f 1 2&nbsp;</p>
<p>set h "7"</p>
<p>setbit h 6 1&nbsp; #设置该bit位置的值为1，并返回原来的值</p>
<p>getbit h 6 #返回1</p>
<p>get h #发现h变成了5</p>
<p>mset k "kkk" l "lll"</p>
<p>msetnx k "kkk" l "lll" #只要一个键已存在，则所有键设置失败</p>
<p>&nbsp;</p>
<p>2.List集合操作命令：</p>
<p>lpush n a b c d</p>
<p>lrange n 0 2</p>
<p>lrange n 0 -1&nbsp;</p>
<p>lpush n e #n已存在，返回n集合的长度</p>
<p>lpushx o e #o不存在，返回0</p>
<p>lpop n</p>
<p>llen n</p>
<p>lrem p 2 a</p>
<p>lindex p 0</p>
<p>lset p 0 h</p>
<p>lset p 100 h #报错： (error) ERR out of range&nbsp;</p>
<p>ltrim p 0 2</p>
<p>linsert q before a a1</p>
<p>linsert q after e e1</p>
<p>rpush r a b c d</p>
<p>rpushx r e</p>
<p>rpop r&nbsp;</p>
<p>rpoplpush r s&nbsp;</p>
<p>rpoplpush r s&nbsp;</p>
<p>rpoplpush r r</p>
<p>&nbsp;</p>
<p>3.Hash操作命令：</p>
<p>hset t key1 "value1"</p>
<p>hsetnx t key1 "value111"</p>
<p>hsetnx t key9 "value9"</p>
<p>hget t key1&nbsp;</p>
<p>hget t key2</p>
<p>hget t2 key1</p>
<p>hlen t&nbsp;</p>
<p>hexists t key1</p>
<p>hdel t key1</p>
<p>hincrby t key5 2</p>
<p>hmset u k1 "v1" k2 "v2"&nbsp;</p>
<p>hmget u k1 k2 k3&nbsp;</p>
<p>hgetall u</p>
<p>hkeys u&nbsp;</p>
<p>hvals u</p>
<p>&nbsp;</p>
<p>4.Set集合操作命令：</p>
<p>sadd v a b c&nbsp;</p>
<p>sadd v a d c #sadd 2次，为了说明set是自动去重的</p>
<p>sismember v a</p>
<p>sismember v f&nbsp;</p>
<p>smembers v</p>
<p>scard v</p>
<p>srandmember v&nbsp;</p>
<p>spop v&nbsp;</p>
<p>srem v a e f&nbsp;</p>
<p>smove v w "a"&nbsp;</p>
<p>sadd w a b c d&nbsp;</p>
<p>sadd x c&nbsp;</p>
<p>sadd y a c e&nbsp;</p>
<p>sdiff w x y&nbsp;</p>
<p>sdiffstore w x y&nbsp;</p>
<p>sinter w x y&nbsp;</p>
<p>sinterstore w x y&nbsp;</p>
<p>sunion w x y&nbsp;</p>
<p>sunionstore w x y&nbsp;</p>
<p>&nbsp;</p>]]></description></item><item><title>帆软FineReport报表由于使用HTML显示后无法控制行高</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/22/11397114.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 22 Aug 2019 13:59:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/22/11397114.html</guid><description><![CDATA[<p>问题：帆软FineReport报表由于使用HTML显示后无法控制行高。</p>
<p>原因：首先每行的第一个单元格是以HTML显示的，然后，数据库查询的数据集中，sql语句中包含这个代码：'&lt;pre&gt;' || max(a.a1)，表示该单元格中的内容是包含在&lt;pre&gt;标签中的，两者一结合，就产生这个问题了。因为单元格以HTML显示内容的话，其显示样式比如高度、宽度等，部分是有HTML的标签决定的，这里就是由&lt;pre&gt;标签决定的。</p>
<p>解决方法：</p>
<p>　　1.不要使用&lt;pre&gt;标签，用该标签的原因是为了显示文本前面的半角空格，那么可以使用全角空格代替半角空格。</p>
<p>　　2.给&lt;pre&gt;标签设置样式，'&lt;pre style='''height:5px;liine-height:5px;padding:0px;margin:0px; '' &gt;'&nbsp; （这个样式的设置是要拼接到sql语句中的，所以使用了2个单引号把style的内容包裹起来，显示到页面上就是一个单引号）</p>
<p>&nbsp;</p>]]></description></item><item><title>帆软FineReport报表使用小技巧</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/22/11397075.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 22 Aug 2019 13:48:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/22/11397075.html</guid><description><![CDATA[<p>1.IF函数写法： =IF(E3=0 &amp;&amp; F3=0 &amp;&amp; G3=0,1,0)</p>
<p>&nbsp;</p>]]></description></item><item><title>Excel使用小技巧</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/22/11397053.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 22 Aug 2019 13:46:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/22/11397053.html</guid><description><![CDATA[<p>&nbsp;</p>
<p>1.Excel随机设置单元格的内容为整数0或1：</p>
<p>　　在单元格中写公式：&nbsp; =ROUND(RAND(),0)</p>
<p>2.设置某个单元格的值为1或0，根据其他3个单元格的值为0或1来确定：</p>
<p>　　在该单元格中写公式： =IF(AND(E7=0, F7=0, G7=0),1,0)</p>
<p>&nbsp;</p>]]></description></item><item><title>03.Scala编程实战</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/21/11391868.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 21 Aug 2019 15:11:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/21/11391868.html</guid><description><![CDATA[<h1 class="TOC1" style="text-align: center;">&nbsp;Scala编程实战</h1>
<h1>1.&nbsp;&nbsp; &nbsp;课程目标</h1>
<h2>1.1.&nbsp; 目标：使用Akka实现一个简易版的spark通信框架</h2>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190821231154910-854245841.png" alt="" /></p>
<p>&nbsp;</p>
<h1>2.&nbsp;&nbsp; &nbsp;项目概述</h1>
<h2>2.1.&nbsp; &nbsp;需求</h2>
<p>Hivesql----------&gt; select count(*) from user-----&gt;整个表只有1条数据</p>
<p>&nbsp;</p>
<p>Map 0%&nbsp;&nbsp;&nbsp;&nbsp; reduce 0%</p>
<p>Map 10%&nbsp;&nbsp;&nbsp; reduce 0%</p>
<p>Map 20%&nbsp;&nbsp;&nbsp; reduce 0%</p>
<p>&nbsp;</p>
<p>目前大多数的分布式架构底层通信都是通过RPC实现的，RPC框架非常多，比如前我们学过的Hadoop项目的RPC通信框架，但是Hadoop在设计之初就是为了运行长达数小时的批量而设计的，在某些极端的情况下，任务提交的延迟很高，所以Hadoop的RPC显得有些笨重。</p>
<p>Spark 的RPC是通过Akka类库实现的，Akka用Scala语言开发，基于Actor并发模型实现，Akka具有高可靠、高性能、可扩展等特点，使用Akka可以轻松实现分布式RPC功能。</p>
<h2>2.2.&nbsp; &nbsp;Akka简介</h2>
<p>Akka基于Actor模型，提供了一个用于构建可扩展的（Scalable）、弹性的（Resilient）、快速响应的（Responsive）应用程序的平台。</p>
<p>Actor模型：在计算机科学领域，Actor模型是一个并行计算（Concurrent Computation）模型，它把actor作为并行计算的基本元素来对待：为响应一个接收到的消息，一个actor能够自己做出一些决策，如创建更多的actor，或发送更多的消息，或者确定如何去响应接收到的下一个消息。</p>
<p align="center"><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190821231243844-336571186.png" alt="" /></p>
<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p>Actor是Akka中最核心的概念，它是一个封装了状态和行为的对象，Actor之间可以通过交换消息的方式进行通信，每个Actor都有自己的收件箱（Mailbox）。通过Actor能够简化锁及线程管理，可以非常容易地开发出正确地并发程序和并行系统，Actor具有如下特性：</p>
<p>&nbsp;</p>
<p>(1)、提供了一种高级抽象，能够简化在并发（Concurrency）/并行（Parallelism）应用场景下的编程开发</p>
<p>（2）、提供了异步非阻塞的、高性能的事件驱动编程模型</p>
<p>（3）、超级轻量级事件处理（每GB堆内存几百万Actor）</p>
<p>&nbsp;</p>
<h1>3.&nbsp;&nbsp; &nbsp;项目实现</h1>
<h2>3.1.&nbsp; &nbsp;实战一：</h2>
<p><strong>利用</strong><strong>Akka</strong><strong>的</strong><strong>actor</strong><strong>编程模型，实现</strong><strong>2</strong><strong>个进程间的通信。</strong></p>
<h3>3.1.1.&nbsp;&nbsp; &nbsp;架构图</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190821231301430-1546237886.png" alt="" /></p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190822233505120-823223811.png" alt="" /></p>
<p>&nbsp;</p>
<h3>3.1.2.&nbsp;&nbsp; &nbsp;重要类介绍</h3>
<p><span style="color: #ff0000;"><strong>ActorSystem</strong></span><strong>：</strong>在Akka中，ActorSystem是一个重量级的结构，他需要分配多个线程，所以在实际应用中，ActorSystem通常是一个单例对象，我们可以使用这个ActorSystem创建很多Actor。</p>
<p><span style="color: #ff0000;"><strong>注意：</strong></span></p>
<p>（1）、ActorSystem是一个进程中的老大，它负责创建和监督actor</p>
<p>（2）、ActorSystem是一个单例对象</p>
<p>（3）、actor负责通信</p>
<p>&nbsp;</p>
<h3>3.1.3.&nbsp;&nbsp; &nbsp;Actor</h3>
<p>在Akka中，Actor负责通信，在Actor中有一些重要的生命周期方法。</p>
<p>（1）<span style="color: #ff0000;">preStart()</span>方法：该方法在Actor对象构造方法执行后执行，整个Actor生命周期中仅执行一次。</p>
<p>（2）<span style="color: #ff0000;">receive()</span>方法：该方法在Actor的preStart方法执行完成后执行，用于接收消息，会被反复执行。</p>
<h3>3.1.4.&nbsp;&nbsp; &nbsp;详见代码</h3>
<p>&nbsp;</p>
<h2>3.2.&nbsp; 实战二</h2>
<p><strong>使用</strong><strong>Akka</strong><strong>实现一个简易版的</strong><strong>spark</strong><strong>通信框架</strong></p>
<p><strong>&nbsp;</strong></p>
<h3>3.2.1.&nbsp;&nbsp; 架构图</h3>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190821231504401-71096986.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190824234345919-1651575162.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>3.2.2.&nbsp; &nbsp;详见代码</h3>
<p>&nbsp;</p>]]></description></item><item><title>02.Scala高级特性：第6节 高阶函数；第7节 隐式转换和隐式参数</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/20/11386329.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 20 Aug 2019 15:36:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/20/11386329.html</guid><description><![CDATA[<h1 class="TOC1" style="text-align: center;">Scala高级特性</h1>
<h1>1.&nbsp;&nbsp; &nbsp;课程目标</h1>
<h2>1.1.&nbsp; &nbsp;目标一：深入理解高阶函数</h2>
<h2>1.2.&nbsp; &nbsp;目标二：深入理解隐式转换</h2>
<h1>2.&nbsp;&nbsp; &nbsp;高阶函数</h1>
<h2>2.1.&nbsp; &nbsp;概念</h2>
<p>Scala混合了面向对象和函数式的特性，我们通常将<span style="color: #ff0000;">可以作为参数传递到方法中的表达式叫做函数</span>。在函数式编程语言中，函数是&ldquo;头等公民&rdquo;，高阶函数包含：作为值的函数、匿名函数、闭包、柯里化等等。</p>
<h2>2.2.&nbsp; &nbsp;作为值的函数</h2>
<p>可以像任何其他数据类型一样被传递和操作的函数，每当你想要给算法传入具体动作时这个特性就会变得非常有用。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190820233008631-1037857220.png" alt="" /></p>
<p>&nbsp;</p>
<p>定义函数时格式：val 变量名 = (输入参数类型和个数) =&gt; 函数实现和返回值类型</p>
<p>&ldquo;=&rdquo;表示将函数赋给一个变量</p>
<p>&ldquo;=&gt;&rdquo;左面表示输入参数名称、类型和个数，右边表示函数的实现和返回值类型</p>
<h2>2.3.&nbsp; &nbsp;匿名函数</h2>
<p>在Scala中，你不需要给每一个函数命名，没有将函数赋给变量的函数叫做匿名函数。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190820233027283-2025644043.png" alt="" /></p>
<p>由于Scala可以自动推断出参数的类型，所有可以写的跟精简一些</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190820233043780-294303347.png" alt="" /></p>
<p>还记得神奇的下划线吗？这才是终极方式</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190820233114380-895258074.png" alt="" /></p>
<p>&nbsp;</p>
<h2>2.4.&nbsp; &nbsp;柯里化</h2>
<h3>2.4.1.&nbsp;&nbsp; &nbsp;什么是柯里化</h3>
<p><span style="color: #ff0000;">柯里化(Currying)</span>指的是把原来接受多个参数的函数变换成接受一个参数的函数过程，并且返回接受余下的参数且返回结果为一个新函数的技术。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190820233131020-1528321801.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>2.4.2.&nbsp;&nbsp; &nbsp;例子</h3>
<p>(1)&nbsp;&nbsp;&nbsp;&nbsp; 一个普通的非柯里化的函数定义，实现一个加法函数：</p>
<p>&nbsp;</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre>scala&gt; def plainOldSum(x:Int,y:Int)=x+y</pre>
<pre>plainOldSum: (x: Int, y: Int)Int</pre>
<pre>&nbsp;</pre>
<pre>scala&gt; plainOldSum(1,2)</pre>
<pre>res0: Int = 3</pre>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>(2)&nbsp;&nbsp;&nbsp;&nbsp; 使用&ldquo;柯里化&rdquo;技术来定义这个加法函数，原来函数使用一个参数列表，&ldquo;柯里化&rdquo;，把函数定义为多个参数列表：</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre>scala&gt; def curriedSum(x:Int)(y:Int)=x+y</pre>
<pre>curriedSum: (x: Int)(y: Int)Int</pre>
<pre>&nbsp;</pre>
<pre>scala&gt; curriedSum(1)(2)</pre>
<pre>res1: Int = 3</pre>
<pre>&nbsp;</pre>
<pre><span style="color: #ff0000;">当你调用curriedSum (1)(2)时，实际上是依次调用两个普通函数（非柯里化函数）</span>，</pre>
<pre>第一次调用使用一个参数x，返回一个函数类型的值，</pre>
<pre>第二次使用参数y调用这个函数类型的值。</pre>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>(3)&nbsp;&nbsp;&nbsp;&nbsp; 使用下面两个分开的定义在模拟curriedSum柯里化函数：</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre>首先定义第一个函数：</pre>
<pre>scala&gt; def first(x:Int)=(y:Int)=&gt;x+y</pre>
<pre>first: (x: Int)Int =&gt; Int</pre>
<pre>&nbsp;</pre>
<pre>然后我们使用参数1调用这个函数来生成第二个函数：</pre>
<pre>scala&gt; val second =first(1)</pre>
<pre>second: Int =&gt; Int = &lt;function1&gt;</pre>
<pre>scala&gt; second(2)</pre>
<pre>res2: Int = 3</pre>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>(4)&nbsp;&nbsp;&nbsp;&nbsp; 使用curriedSum 来定义second</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>scala&gt; val onePlus=curriedSum(1)_</p>
<p>onePlus: Int =&gt; Int = &lt;function1&gt;</p>
<pre>&nbsp;</pre>
<pre>下划线&ldquo;_&rdquo; 作为第二参数列表的占位符， 这个定义的返回值为一个函数，当调用时会给调用的参数加一。</pre>
<pre>&nbsp;</pre>
<p>scala&gt; onePlus(2)</p>
<p>res3: Int = 3</p>
<p>调用生成的函数，给函数传入参数，即可得到我们想要的结果。</p>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>2.4.3.&nbsp;&nbsp; &nbsp;总结</h3>
<pre>scala柯里化风格的使用可以简化主函数的复杂度，提高主函数的自闭性，提高功能上的可扩张性、灵活性。可以编写出更加抽象,功能化和高效的函数式代码。</pre>
<h2>2.5.&nbsp; 闭包</h2>
<h3>2.5.1.&nbsp;&nbsp; &nbsp;什么是闭包</h3>
<pre>闭包是一个函数，返回值依赖于声明在函数外部的一个或多个变量。<br />
闭包通常来讲可以简单的认为是可以访问不在当前作用域范围内的一个函数。</pre>
<h3>2.5.2.&nbsp;&nbsp; &nbsp;例子</h3>
<pre><strong>package </strong>cn.itcast.closure<br />
<em>/**<br />
&nbsp; * scala</em><em>中的闭包<br />
&nbsp; </em><em>* </em><em>闭包是一个函数，返回值依赖于声明在函数外部的一个或多个变量。<br />
&nbsp; </em><em>*/<br />
</em><strong>object </strong>ClosureDemo {<br />
&nbsp; <strong>def </strong>main(args: Array[String]): Unit = {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>val </strong>y=10<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //变量y不处于其有效作用域时,函数还能够对变量进行访问</pre>
<pre><br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>val </strong>add=(x:Int)=&gt;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x+y<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; //在add中有两个变量：x和y。其中的一个x是函数的形式参数，<br />
&nbsp;&nbsp;&nbsp; //在add方法被调用时，x被赋予一个新的值。<br />
&nbsp;&nbsp;&nbsp; // 然而，y不是形式参数，而是自由变量<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(add(5)) // 结果15<br />
&nbsp; }<br />
}</pre>
<p>&nbsp;</p>
<h1>3.&nbsp;&nbsp; &nbsp;隐式转换和隐式参数</h1>
<h2>3.1.&nbsp; &nbsp;&nbsp;隐式转换</h2>
<p>Scala提供的隐式转换和隐式参数功能，是非常有特色的功能。是Java等编程语言所没有的功能。它可以允许你手动指定，将某种类型的对象转换成其他类型的对象或者是给一个类增加方法。通过这些功能，可以实现非常强大、特殊的功能。</p>
<p>Scala的隐式转换，其实最核心的就是定义隐式转换方法，即<span style="color: #ff0000;">implicit</span> conversion function。定义的隐式转换方法，只要在编写的程序内引入，就会被Scala自动使用。Scala会根据隐式转换方法的签名，在程序中使用到隐式转换方法接收的参数类型定义的对象时，会自动将其传入隐式转换方法，转换为另外一种类型的对象并返回。这就是&ldquo;隐式转换&rdquo;。<span style="color: #ff0000;">其中所有的隐式值和隐式方法必须放到object中</span>。</p>
<p>然而使用Scala的隐式转换是有一定的限制的，总结如下：</p>
<ul>
<li><span style="color: #ff0000;">implicit</span>关键字只能用来修饰方法、变量（参数)。</li>
<li>隐式转换的方法在当前范围内才有效。如果隐式转换不在当前范围内定义（比如定义在另一个类中或包含在某个对象中），那么必须通过import语句将其导。</li>
</ul>
<h2>3.2.&nbsp; &nbsp;&nbsp;隐式参数</h2>
<p>所谓的隐式参数，指的是在函数或者方法中，定义一个用implicit修饰的参数，此时Scala会尝试找到一个指定类型的，用<span style="color: #ff0000;">implicit</span>修饰的参数，即隐式值，并注入参数。</p>
<p><span style="color: #ff0000;">Scala会在两个范围内查找</span>：</p>
<ul>
<li>当前作用域内可见的val或var定义的隐式变量；</li>
<li>一种是隐式参数类型的伴生对象内的隐式值；</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>3.3.&nbsp; &nbsp;&nbsp;隐式转换方法作用域与导入</h2>
<h4>（1）Scala默认会使用两种隐式转换，一种是源类型或者目标类型的伴生对象内的隐式转换方法；一种是当前程序作用域内的可以用唯一标识符表示的隐式转换方法。</h4>
<h4>（2）如果隐式转换方法不在上述两种情况下的话，那么就必须手动使用import语法引入某个包下的隐式转换方法，比如import test._。通常建议，仅仅在需要进行隐式转换的地方，用import导入隐式转换方法，这样可以缩小隐式转换方法的作用域，避免不需要的隐式转换。</h4>
<h2>3.4.&nbsp; &nbsp;&nbsp;隐式转换的时机</h2>
<h4>（1）当对象调用类中不存在的方法或成员时，编译器会自动将对象进行隐式转换</h4>
<h4>（2）当方法中的参数的类型与目标类型不一致时</h4>
<p>&nbsp;</p>
<h2>3.5.&nbsp; &nbsp;&nbsp;隐式转换和隐式参数案例</h2>
<pre><span style="font-family: 'PingFang SC', 'Helvetica Neue', Helvetica, Arial, sans-serif;"><span style="font-size: 14px; white-space: normal;">详见代码</span></span><br /><br /></pre>]]></description></item><item><title>idea中scala语言自动补全变量的同时，也自动补全类型</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/20/11385910.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 20 Aug 2019 13:55:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/20/11385910.html</guid><description><![CDATA[<p>IDE是IDEA，scala中，在new一个对象时，通过快捷键ctrl + Alt + V自动补全变量，但是我还想自动补全变量的类型，就像图中所示，在Specify type前面自动帮你打勾。&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190820215226030-535247563.png" alt="" /></p>
<p>可以按照如下图设置：&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190820215118840-284090820.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第5节 Actor实战：1 - 6</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/19/11379750.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 19 Aug 2019 13:13:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/19/11379750.html</guid><description><![CDATA[<h2>10.3.&nbsp; &nbsp;Actor实战</h2>
<h3>10.3.1.&nbsp;&nbsp; &nbsp;第一个例子</h3>
<p>怎么实现actor并发编程：</p>
<p>1、定义一个class或者是object继承Actor特质，注意导包import scala.actors.Actor</p>
<p>2、重写对应的act方法</p>
<p>3、调用Actor的start方法执行Actor</p>
<p>4、当act方法执行完成，整个程序运行结束</p>
<p>详见代码。&nbsp;</p>
<p>说明：上面分别调用了两个单例对象的start()方法，他们的act()方法会被执行，相同与在java中开启了两个线程，线程的run()方法会被执行</p>
<p>注意：这两个Actor是并行执行的，act()方法中的for循环执行完成后actor程序就退出了</p>
<p>&nbsp;</p>
<h3>10.3.2.&nbsp;&nbsp; &nbsp;第二个例子</h3>
<p>怎么实现actor发送、接受消息</p>
<p>1、定义一个class或者是object继承Actor特质，注意导包import scala.actors.Actor</p>
<p>2、重写对应的act方法</p>
<p>3、调用Actor的start方法执行Actor</p>
<p>4、通过不同发送消息的方式对actor发送消息</p>
<p>5、act方法中通过receive方法接受消息并进行相应的处理</p>
<p>6、act方法执行完成之后，程序退出</p>
<p>&nbsp;详见代码。&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>10.3.3.&nbsp;&nbsp; &nbsp;第三个例子</h3>
<p>怎么实现actor可以不断地接受消息：</p>
<p>在act方法中可以使用while(true)的方式，不断的接受消息。</p>
<p>&nbsp;详见代码。&nbsp;</p>
<p>说明：在act()方法中加入了<strong>while </strong>(<strong>true</strong>) 循环，就可以不停的接收消息</p>
<p>注意：发送start消息和stop的消息是异步的，但是Actor接收到消息执行的过程是同步的按顺序执行</p>
<p>&nbsp;</p>
<h3>10.3.4.&nbsp;&nbsp; &nbsp;第四个例子</h3>
<p>使用react方法代替receive方法去接受消息</p>
<p>好处：react方式会复用线程，避免频繁的线程创建、销毁和切换。比receive更高效</p>
<p>注意:&nbsp; react 如果要反复执行消息处理，react外层要用loop，不能用while</p>
<p>&nbsp;详见代码。&nbsp;</p>
<p>&nbsp;</p>
<h3>10.3.5.&nbsp;&nbsp; &nbsp;第五个例子</h3>
<p>结合case class样例类发送消息和接受消息</p>
<p>1、将消息封装在一个样例类中</p>
<p>2、通过匹配不同的样例类去执行不同的操作</p>
<p>3、Actor可以返回消息给发送方。通过sender方法向当前消息发送方返回消息</p>
<p>&nbsp;详见代码。&nbsp;</p>
<h3>10.3.6.&nbsp;&nbsp; &nbsp;练习实战</h3>
<p>需求：</p>
<p>用actor并发编程写一个单机版的WordCount，将多个文件作为输入，计算完成后将多个任务汇总，得到最终的结果。</p>
<p>&nbsp;</p>
<p>大致的思想步骤：</p>
<p>1、通过loop +react 方式去不断的接受消息</p>
<p>2、利用case class样例类去匹配对应的操作</p>
<p>3、其中scala中提供了文件读取的接口Source,通过调用其fromFile方法去获取文件内容</p>
<p>4、将每个文件的单词数量进行局部汇总，存放在一个ListBuffer中</p>
<p>5、最后将ListBuffer中的结果进行全局汇总。</p>
<p>&nbsp;详见代码。&nbsp;</p>
<p>&nbsp;</p>]]></description></item><item><title>第4节 Scala中的actor介绍：1、actor概念介绍；2、actor执行顺序和发送消息的方式</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/18/11374505.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 18 Aug 2019 15:20:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/18/11374505.html</guid><description><![CDATA[<p>&nbsp;</p>
<h1>10.&nbsp;&nbsp; &nbsp;Scala Actor并发编程</h1>
<h2>10.1.&nbsp; &nbsp;课程目标</h2>
<h3>10.1.1.&nbsp;&nbsp; &nbsp;目标一：熟悉Scala Actor并发编程</h3>
<h3>10.1.2.&nbsp;&nbsp; &nbsp;目标二：为学习Akka做准备</h3>
<p>注：Scala Actor是scala 2.10.x版本及以前版本的Actor。</p>
<p>Scala在2.11.x版本中将Akka加入其中，作为其默认的Actor，老版本的Actor已经废弃。</p>
<h2>10.2.&nbsp; &nbsp;什么是Scala&nbsp; Actor</h2>
<h3>10.2.1.&nbsp;&nbsp; &nbsp;概念</h3>
<p>Scala中的Actor能够实现并行编程的强大功能，它是基于事件模型的并发机制，Scala是运用消息的发送、接收来实现高并发的。</p>
<p>Actor可以看作是一个个独立的实体，他们之间是毫无关联的。但是，他们可以通过消息来通信。一个Actor收到其他Actor的信息后，它可以根据需要作出各种相应。消息的类型可以是任意的，消息的内容也可以是任意的。</p>
<h3>10.2.2.&nbsp;&nbsp; &nbsp;java并发编程与Scala Actor编程的区别</h3>
<p>Extends Thread&nbsp; implement Runable 线程池</p>
<p>&nbsp;</p>
<p>对于Java，我们都知道它的多线程实现需要对共享资源（变量、对象等）使用synchronized 关键字进行代码块同步、对象锁互斥等等。而且，常常一大块的try&hellip;catch语句块中加上wait方法、notify方法、notifyAll方法是让人很头疼的。原因就在于Java中多数使用的是可变状态的对象资源，对这些资源进行共享来实现多线程编程的话，控制好资源竞争与防止对象状态被意外修改是非常重要的，而对象状态的不变性也是较难以保证的。</p>
<p>与<strong><a title="Java EE知识库" href="http://lib.csdn.net/base/javaee" target="http://blog.csdn.net/guohecang/article/details/_blank">Java</a></strong>的基于共享数据和锁的线程模型不同，<strong><a title="Scala知识库" href="http://lib.csdn.net/base/scala" target="http://blog.csdn.net/guohecang/article/details/_blank">Scala</a></strong>的actor包则提供了另外一种不共享任何数据、依赖消息传递的模型,从而进行并发编程。</p>
<p>&nbsp;</p>
<h3>10.2.3.&nbsp;&nbsp; &nbsp;Actor的执行顺序</h3>
<p>1、首先调用start()方法启动Actor</p>
<p>2、调用start()方法后其act()方法会被执行</p>
<p>3、向Actor发送消息</p>
<p>4、act方法执行完成之后，程序会调用exit方法</p>
<p>&nbsp;</p>
<h3>10.2.4.&nbsp;&nbsp; &nbsp;发送消息的方式</h3>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="284">
<p align="center">!</p>
</td>
<td valign="top" width="284">
<p>发送异步消息，没有返回值。</p>
</td>
</tr>
<tr>
<td valign="top" width="284">
<p align="center">!?</p>
</td>
<td valign="top" width="284">
<p>发送同步消息，等待返回值。</p>
</td>
</tr>
<tr>
<td valign="top" width="284">
<p align="center">!!</p>
</td>
<td valign="top" width="284">
<p>发送异步消息，返回值是 Future[Any]。</p>
</td>
</tr>
</tbody>
</table>
<p>注意：Future 表示一个异步操作的结果状态，可能还没有实际完成的异步任务的结果。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Any&nbsp; 是所有类的超类，Future[Any]的泛型是异步操作结果的类型。</p>
<p>&nbsp;</p>
<p>---------------------升级版教程--------------------------------</p>
<h2 class="md-end-block md-heading"><span class="md-plain md-expand">Java并发编程对比Actor并发编程</span></h2>
<p>在Java并发编程中，每个对象都有一个逻辑监视器（monitor），可以用来控制对象的多线程访问。我们添加sychronized关键字来标记，需要进行同步加锁访问。这样，通过加锁的机制来确保同一时间只有一个线程访问共享数据。但这种方式存在资源争夺、以及死锁问题，程序越大问题越麻烦。</p>
<p>&nbsp;</p>
<p class="md-end-block md-p md-focus"><span class="md-plain md-expand">scala的Actor并发编程模型可以用来开发<span style="color: #ff0000;">比Java线程效率更高</span>的并发程序。我们学习scala Actor的目的主要是为后续学习Akka做准备。</span></p>
<p><span class="md-plain md-expand">&nbsp;</span></p>
<table class="md-table">
<thead>
<tr class="md-end-block"><th><span class="td-span"><span class="md-plain">Java内置线程模型</span></span></th><th><span class="td-span"><span class="md-plain">scala Actor模型</span></span></th></tr>
</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">"共享数据-锁"模型 (share data and lock)</span></span></td>
<td><span class="td-span"><span class="md-plain">share nothing</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">每个object有一个monitor，监视线程对共享数据的访问</span></span></td>
<td><span class="td-span"><span class="md-plain">不共享数据，Actor之间通过Message通讯</span></span></td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">加锁代码使用synchronized标识</span></span></td>
<td>&nbsp;</td>
</tr>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">死锁问题</span></span></td>
<td>&nbsp;</td>
</tr>
<tr class="md-end-block md-focus-container">
<td><span class="td-span"><span class="md-plain">每个线程内部是顺序执行的</span></span></td>
<td><span class="td-span md-focus"><span class="md-plain">每个Actor内部是顺序执行的</span></span></td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>]]></description></item><item><title>第3节 Scala中的模式匹配：1 - 5</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/18/11373023.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 18 Aug 2019 09:08:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/18/11373023.html</guid><description><![CDATA[<h1>7.&nbsp;&nbsp; &nbsp;模式匹配和样例类</h1>
<p>Scala有一个十分强大的模式匹配机制，可以应用到很多场合：如switch语句、类型检查等。并且Scala还提供了样例类，对模式匹配进行了优化，可以快速进行匹配。</p>
<h2>7.1.&nbsp; &nbsp;匹配字符串</h2>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre><strong>package </strong>cn.itcast.cases<br />
  <strong>import </strong>scala.util.Random<br />
  <em><br />
  </em><strong>object </strong>CaseDemo01 <strong>extends </strong>App{<br />
&nbsp; <strong>val </strong><em>arr </em>= <em>Array</em>(<strong>"hadoop"</strong>, <strong>"zookeeper"</strong>, <strong>"spark"</strong>)<br />
&nbsp; <strong>val </strong><em>name </em>= <em>arr</em>(Random.nextInt(<em>arr</em>.length))<br />
&nbsp; <em>name </em><strong>match </strong>{<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong><strong>"hadoop"&nbsp;&nbsp;&nbsp; </strong>=&gt; <em>println</em>(<strong>"</strong><strong>大数据分布式存储和计算框架..."</strong>)<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong><strong>"zookeeper" </strong>=&gt; <em>println</em>(<strong>"</strong><strong>大数据分布式协调服务框架..."</strong>)</pre>
<pre><strong>&nbsp;&nbsp;&nbsp; case </strong><strong>"spark" </strong>=&gt; <em>println</em>(<strong>"</strong><strong>大数据分布式内存计算框架..."</strong>)<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong>_ =&gt; <em>println</em>(<strong>"</strong><strong>我不认识你..."</strong>)<br />
&nbsp; }<br />
}</pre>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h2>7.2.&nbsp; &nbsp;匹配类型</h2>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre><strong>package </strong>cn.itcast.cases<br />
  <strong>import </strong>scala.util.Random<br />
  <em><br />
  </em><strong>object </strong>CaseDemo01 <strong>extends </strong>App{<em><br />
&nbsp; </em><strong>val </strong><em>arr </em>= <em>Array</em>(<strong>"hello"</strong>, 1, 2.0, CaseDemo)<br />
&nbsp; <strong>val </strong><em>v </em>= <em>arr</em>(Random.nextInt(4))<br />
&nbsp; <em>println</em>(<em>v</em>)<br />
&nbsp; <em>v </em><strong>match </strong>{<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong>x: Int =&gt; <em>println</em>(<strong>"Int " </strong>+ x)<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong>y: Double <strong>if</strong>(y &gt;= 0) =&gt; <em>println</em>(<strong>"Double "</strong>+ y)<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong>z: String =&gt; <em>println</em>(<strong>"String " </strong>+ z)<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong>_ =&gt; <strong>throw new </strong>Exception(<strong>"not match exception"</strong>)<br />
&nbsp; }<br />
}</pre>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<p><strong>注意</strong><strong>：</strong>case y: Double if(y &gt;= 0) =&gt; ...</p>
<p>模式匹配的时候还可以添加守卫条件。如不符合守卫条件，将掉入case _中。</p>
<h2>7.3.&nbsp; &nbsp;匹配数组、元组、集合</h2>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre><strong>package </strong>cn.itcast.cases<br />
  <em><br />
  </em><strong>object </strong>CaseDemo03 <strong>extends </strong>App{<br />
  <br />
&nbsp; <strong>val </strong><em>arr </em>= <em>Array</em>(1, 3, 5)<br />
&nbsp; <em>arr </em><strong>match </strong>{<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong><em>Array</em>(1, x, y) =&gt; <em>println</em>(x + <strong>" " </strong>+ y)<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong><em>Array</em>(0) =&gt; <em>println</em>(<strong>"only 0"</strong>)<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong><em>Array</em>(0, _*) =&gt; <em>println</em>(<strong>"0 ..."</strong>)<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong>_ =&gt; <em>println</em>(<strong>"something else"</strong>)<br />
&nbsp; }<br />
  <br />
&nbsp; <strong>val </strong><em>lst </em>= <em>List</em>(3, -1)<br />
&nbsp; <em>lst </em><strong>match </strong>{<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong>0 <em>:: </em><em>Nil </em>=&gt; <em>println</em>(<strong>"only 0"</strong>)<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong>x <em>:: </em>y <em>:: </em><em>Nil </em>=&gt; <em>println</em>(<strong>s"x: </strong><strong>$</strong>x<strong> y: </strong><strong>$</strong>y<strong>"</strong>)<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong>0 <em>:: </em>tail =&gt; <em>println</em>(<strong>"0 ..."</strong>)<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong>_ =&gt; <em>println</em>(<strong>"something else"</strong>)<br />
&nbsp; }<br />
  <br />
&nbsp; <strong>val </strong><em>tup </em>= (1, 3, 7)<br />
&nbsp; <em>tup </em><strong>match </strong>{<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong>(1, x, y) =&gt; <em>println</em>(<strong>s"1, </strong><strong>$</strong>x<strong> , </strong><strong>$</strong>y<strong>"</strong>)<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong>(_, z, 5) =&gt; <em>println</em>(z)<br />
&nbsp;&nbsp;&nbsp; <strong>case&nbsp; </strong>_ =&gt; <em>println</em>(<strong>"else"</strong>)<br />
&nbsp; }<br />
}</pre>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<p>注意：在Scala中列表要么为空（Nil表示空列表）要么是一个head元素加上一个tail列表。</p>
<p>9 :: List(5, 2)&nbsp; :: 操作符是将给定的头和尾创建一个新的列表</p>
<p>注意：:: 操作符是右结合的，如9 :: 5 :: 2 :: Nil相当于 9 :: (5 :: (2 :: Nil))</p>
<h2>7.4.&nbsp; &nbsp;样例类</h2>
<p>在Scala中样例类是一种特殊的类，可用于模式匹配。</p>
<p>定义形式：</p>
<p>case class 类型，是多例的，后面要跟构造参数。 case class Student(name:String)</p>
<p>case object 类型，是单例的。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case object Person</p>
<p>&nbsp;</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre><strong>package </strong>cn.itcast.cases<br />
  <strong>import </strong>scala.util.Random</pre>
<pre><em><br />
  </em><strong>case class </strong>SubmitTask(id: String, name: String)<br />
  <strong>case class </strong>HeartBeat(time: Long)<br />
  <strong>case object </strong>CheckTimeOutTask<br />
  <br />
  <strong>object </strong>CaseDemo04 <strong>extends </strong>App{<br />
&nbsp; <strong>val </strong><em>arr </em>= <em>Array</em>(CheckTimeOutTask, <em>HeartBeat</em>(12333), <em>SubmitTask</em>(<strong>"0001"</strong>, <strong>"task-0001"</strong>))<br />
  <br />
&nbsp; <em>arr</em>(Random.nextInt(<em>arr</em>.length)) <strong>match </strong>{<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong><em>SubmitTask</em>(id, name) =&gt; {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>println</em>(<strong>s"</strong><strong>$</strong>id<strong>, </strong><strong>$</strong>name<strong>"</strong>)<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong><em>HeartBeat</em>(time) =&gt; {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>println</em>(time)<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong>CheckTimeOutTask =&gt; {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>println</em>(<strong>"check"</strong>)<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp; }<br />
}</pre>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<h2>7.5.&nbsp; &nbsp;Option类型</h2>
<p>在Scala中Option类型用样例类来表示可能存在或者可能不存在的值(Option的子类有Some和None)。Some包装了某个值，None表示没有值</p>
<p>&nbsp;</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre><strong>package </strong>cn.itcast.cases<br />
  <br />
  <strong>object </strong>OptionDemo {<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>map = <em>Map</em>(<strong>"a" </strong>-&gt; 1, <strong>"b" </strong>-&gt; 2)<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>v = map.get(<strong>"b"</strong>) <strong>match </strong>{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>case </strong><em>Some</em>(i) =&gt; i<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>case </strong>None =&gt; 0<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(v)<br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>更好的方式<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>v1 = map.getOrElse(<strong>"c"</strong>, 0)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(v1)<br />
&nbsp; }<br />
}</pre>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<h2>7.6.&nbsp; &nbsp;偏函数</h2>
<p>被包在花括号内没有match的一组case语句是一个偏函数，它是PartialFunction[A, B]的一个实例，A代表输入参数类型，B代表返回结果类型，常用作输入模式匹配，偏函数最大的特点就是它只接受和处理其参数定义域的一个子集。</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre><strong>package </strong>cn.itcast.cases<br />
  <em><br />
  </em><strong>object </strong>PartialFuncDemo&nbsp; {<br />
  <br />
&nbsp; valfunc1: PartialFunction[String, Int] = {<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong><strong>"one" </strong>=&gt; 1<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong><strong>"two" </strong>=&gt; 2<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong>_ =&gt; -1<br />
&nbsp; }</pre>
<pre><br />
&nbsp; <strong>def </strong>func2(num: String) : Int = num <strong>match </strong>{<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong><strong>"one" </strong>=&gt; 1<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong><strong>"two" </strong>=&gt; 2<br />
&nbsp;&nbsp;&nbsp; <strong>case </strong>_ =&gt; -1<br />
&nbsp; }</pre>
<pre><br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(<em>func1</em>(<strong>"one"</strong>))<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(<em>func2</em>(<strong>"one"</strong>))<br />
&nbsp; }<br />
}</pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h1>8.&nbsp;&nbsp; &nbsp;Scala中的协变、逆变、非变</h1>
<h2>8.1.&nbsp; &nbsp;协变、逆变、非变介绍</h2>
<p>Array[String]&nbsp;&nbsp; Array[Object]</p>
<p>协变和逆变主要是用来解决参数化类型的泛化问题。Scala的协变与逆变是非常有特色的，完全解决了Java中泛型的一大缺憾；举例来说，Java中，如果有 A是 B的子类，但 Card[A] 却不是 Card[B] 的子类；而 Scala 中，只要灵活使用协变与逆变，就可以解决此类 Java 泛型问题；</p>
<p>由于参数化类型的参数（参数类型）是可变的，当两个参数化类型的参数是继承关系（可泛化），那被参数化的类型是否也可以泛化呢？Java中这种情况下是不可泛化的，然而Scala提供了三个选择，即协变(&ldquo;+&rdquo;)、逆变（&ldquo;-&rdquo;）和非变。</p>
<p>下面说一下三种情况的含义，首先假设有参数化特征Queue，那它可以有如下三种定义。</p>
<p>(1) &nbsp;trait Queue[T] {}</p>
<p>这是非变情况。这种情况下，当类型B是类型A的子类型，则Queue[B]与Queue[A]没有任何从属关系，这种情况是和Java一样的。</p>
<p>(2) &nbsp;trait Queue[+T] {}&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这是协变情况。这种情况下，当类型B是类型A的子类型，则Queue[B]也可以认为是Queue[A]的子类型，即Queue[B]可以泛化为Queue[A]。也就是被参数化类型的泛化方向与参数类型的方向是一致的，所以称为协变。</p>
<p>(3) &nbsp; trait Queue[-T] {}&nbsp;</p>
<p>这是逆变情况。这种情况下，当类型B是类型A的子类型，则Queue[A]反过来可以认为是Queue[B]的子类型。也就是被参数化类型的泛化方向与参数类型的方向是相反的，所以称为逆变。&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>8.2.&nbsp; &nbsp;协变、逆变、非变总结</h2>
<ul>
<li>C[+T]：如果A是B的子类，那么C[A]是C[B]的子类。</li>
<li>C[-T]：如果A是B的子类，那么C[B]是C[A]的子类。</li>
<li>C[T]： 无论A和B是什么关系，C[A]和C[B]没有从属关系。</li>



</ul>
<p>&nbsp;</p>
<h2>8.3.&nbsp; &nbsp;案例</h2>
<pre><strong>package </strong>cn.itcast.scala.enhance.covariance<br />
<em><br />
</em><strong>class </strong>Super<br />
<strong>class </strong>Sub <strong>extends </strong>Super<br />
//协变<br />
<strong>class </strong>Temp1[+A](title: String)<br />
//逆变<br />
<strong>class </strong>Temp2[-A](title: String)<br />
//非变<br />
<strong>class </strong>Temp3[A](title: String)<br />
<br />
<strong>object </strong>Covariance_demo{<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; //支持协变 Temp1[Sub]还是Temp1[Super]的子类<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>t1: Temp1[Super] = <strong>new </strong>Temp1[Sub]("hello scala!!!")<br />
&nbsp;&nbsp;&nbsp; //支持逆变 Temp1[Super]是Temp1[Sub]的子类<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>t2: Temp2[Sub] = <strong>new </strong>Temp2[Super]("hello scala!!!")<br />
&nbsp;&nbsp;&nbsp; //支持非变 Temp3[Super]与Temp3[Sub]没有从属关系，如下代码会报错<br />
&nbsp;&nbsp;&nbsp; //val t3: Temp3[Sub] = new Temp3[Super]("hello scala!!!")</pre>
<pre>//val t4: Temp3[Super] = new Temp3[Sub]("hello scala!!!")<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(t1.toString)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(t2.toString)<br />
&nbsp; }<br />
}</pre>
<p>&nbsp;</p>
<h1>9.&nbsp;&nbsp; &nbsp;Scala中的上下界</h1>
<h2>9.1.&nbsp; 上界、下界介绍</h2>
<p>Java中：</p>
<p><span style="color: #ff0000;">?&nbsp; extends&nbsp; T ：上界，表示参数类型？必须是某个类型T或T的子类；</span></p>
<p><span style="color: #ff0000;">?&nbsp; super&nbsp; T ：下界，表示参数类型？必须是某个类型T或T的父类。</span></p>
<p>在指定泛型类型时，有时需要界定泛型类型的范围，而不是接收任意类型。比如，要求某个泛型类型，必须是某个类的子类，这样在程序中就可以放心的调用父类的方法，程序才能正常的使用与运行。此时，就可以使用上下边界Bounds的特性；</p>
<p>Scala的上下边界特性允许泛型类型是某个类的子类，或者是某个类的父类；</p>
<p>(1) U &gt;: T&nbsp;&nbsp;&nbsp;&nbsp; ?&nbsp; super&nbsp; T</p>
<p>这是类型下界的定义，也就是U必须是类型T的父类(或本身，自己也可以认为是自己的父类)。</p>
<p>&nbsp;</p>
<p>(2) S &lt;: T&nbsp;&nbsp;&nbsp; ?&nbsp; extends T</p>
<p>这是类型上界的定义，也就是S必须是类型T的子类（或本身，自己也可以认为是自己的子类)。</p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 Scala中面向对象编程：12、13、14、15、16、trait</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/18/11372099.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 18 Aug 2019 05:12:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/18/11372099.html</guid><description><![CDATA[<h2>6.4.&nbsp; Scala中面向对象编程之trait</h2>
<h3>6.4.1.&nbsp;&nbsp; &nbsp;将trait作为接口使用</h3>
<ul>
<li>Scala中的trait是一种特殊的概念；</li>
<li>首先先将trait作为接口使用，此时的trait就与Java中的接口 (interface)非常类似；</li>
<li>在trait中可以定义抽象方法，就像抽象类中的抽象方法一样，只要不给出方法的方法体即可；</li>
<li>类可以使用extends关键字继承trait，注意，这里不是 implement，而是extends ，在Scala中没有 implement 的概念，无论继承类还是trait，统一都是 extends；</li>
<li>类继承后，必须实现其中的抽象方法，实现时，不需要使用 override 关键字；</li>
<li>Scala不支持对类进行多继承，但是支持多重继承 trait，使用 with 关键字即可。</li>
<li>Class A extends class B</li>
<li>Class A extends class C</li>
<li>举例说明：</li>
</ul>
<pre><strong>package </strong>cn.itcast.triat<br />
<em><br />
</em><strong>trait </strong>HelloTrait {<br />
&nbsp; <strong>def </strong>sayHello(): Unit<br />
}<br />
<strong>trait </strong>MakeFriendsTrait {<br />
&nbsp; <strong>def </strong>makeFriends(c: Children): Unit<br />
}<br />
//多重继承 trait<br />
<strong>class </strong>Children(<strong>val </strong>name: String) <strong>extends </strong>HelloTrait <strong>with </strong>MakeFriendsTrait <strong>with </strong>Cloneable <strong>with </strong>Serializable{<br />
&nbsp; <strong>def </strong>sayHello() =<em>println</em>("Hello, " + <strong>this</strong>.name)<br />
&nbsp; <strong>def </strong>makeFriends(c: Children) = <em>println</em>("Hello, my name is " + <strong>this</strong>.name + ", your name is " + c.name)<br />
}<br />
<strong>object </strong>Children{<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>c1=<strong>new </strong>Children("tom")<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>c2=<strong>new </strong>Children("jim")<br />
&nbsp;&nbsp;&nbsp; c1.sayHello()//Hello, tom<br />
&nbsp;&nbsp;&nbsp; c1.makeFriends(c2)//Hello, my name is tom, your name is jim<br />
&nbsp; }<br />
}</pre>
<p>&nbsp;</p>
<h3>6.4.2.&nbsp;&nbsp; &nbsp;在trait中定义具体的方法</h3>
<ul>
<li>Scala中的trait不仅可以定义抽象方法，还可以定义具体的方法，此时 trait 更像是包含了通用方法的工具，可以认为trait还包含了类的功能。</li>
<li>举例说明：</li>
<li>Scala 中的 trait 可以定义具体的 field，此时继承 trait 的子类就自动获得了 trait 中定义的 field；</li>
<li>但是这种获取 field 的方式与继承 class 的是不同的。 如果是继承 class 获取的 field ，实际上还是定义在父类中的；而继承 trait获取的 field，就直接被添加到子类中了。</li>
<li>举例说明：</li>
</ul>
<pre><strong>package </strong>cn.itcast.triat<br />
<em>/**<br />
&nbsp;* </em><em>比如 </em><em>trait </em><em>中可以包含很多子类都通用的方法，例如打印日志或其他工具方法等等。<br />
&nbsp;</em><em>* spark</em><em>就使用</em><em>trait</em><em>定义了通用的日志打印方法；<br />
&nbsp;</em><em>*/<br />
</em><strong>trait </strong>Logger {<br />
&nbsp; <strong>def </strong>log(message: String): Unit = <em>println</em>(message)<br />
}<br />
<strong>class </strong>PersonForLog(<strong>val </strong>name: String) <strong>extends </strong>Logger {<br />
&nbsp; <strong>def </strong>makeFriends(other: PersonForLog) = {<br />
&nbsp; &nbsp;&nbsp;<em>println</em>("Hello, " + other.name + "! My name is " + <strong>this</strong>.name + ", I miss you!!")<br />
&nbsp;&nbsp;&nbsp; <strong>this</strong>.log("makeFriends method is invoked with parameter PersonForLog[name = " + other.name + "]")<br />
&nbsp; }<br />
}<br />
<strong>object </strong>PersonForLog{<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>p1=<strong>new </strong>PersonForLog("jack")<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>p2=<strong>new </strong>PersonForLog("rose")<br />
&nbsp;&nbsp;&nbsp; p1.makeFriends(p2)<br />
&nbsp;&nbsp;&nbsp; //Hello, rose! My name is jack, I miss you!!<br />
&nbsp;&nbsp;&nbsp; //makeFriens method is invoked with parameter PersonForLog[name = rose]<br />
&nbsp; }<br />
}</pre>
<h3>6.4.3.&nbsp;&nbsp; &nbsp;在trait中定义具体field</h3>
<p>&nbsp;</p>
<pre><strong>package </strong>cn.itcast.triat</pre>
<pre><em><br />
</em><strong>trait </strong>PersonForField {<br />
&nbsp; <strong>val&nbsp; </strong><em>age</em>:Int=50<br />
}</pre>
<pre><br />
//继承 trait 获取的field直接被添加到子类中<br />
<strong>class </strong>StudentForField(<strong>val </strong>name: String) <strong>extends </strong>PersonForField {<br />
&nbsp; <strong>def </strong>sayHello = <em>println</em>("Hi, I'm " + <strong>this</strong>.name + ", my&nbsp; age&nbsp; is "+ <em>age</em>)<br />
}</pre>
<pre><br />
<strong>object </strong>StudentForField{<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>s=<strong>new </strong>StudentForField("tom")<br />
&nbsp;&nbsp;&nbsp; s.sayHello<br />
&nbsp; }<br />
}</pre>
<pre>&nbsp;</pre>
<p>&nbsp;</p>
<h3>6.4.4.&nbsp;&nbsp; &nbsp;在trait中定义抽象field</h3>
<ul>
<li>Scala中的trait也能定义抽象field， 而trait中的具体方法也能基于抽象field编写；</li>
<li>继承trait的类，则必须覆盖抽象field，提供具体的值；</li>
<li>举例说明：</li>
</ul>
<pre><strong>package </strong>cn.itcast.triat<br />
<em><br />
</em><strong>trait </strong>SayHelloTrait {<br />
&nbsp; <strong>val </strong>msg:String<br />
&nbsp; <strong>def </strong>sayHello(name: String) = <em>println</em>(msg + ", " + name)<br />
}<br />
<br />
<strong>class </strong>PersonForAbstractField(<strong>val </strong>name: String) <strong>extends </strong>SayHelloTrait {<br />
&nbsp; //必须覆盖抽象 field<br />
&nbsp; <strong>val </strong><em>msg </em>= "Hello"<br />
&nbsp; <strong>def </strong>makeFriends(other: PersonForAbstractField) = {<br />
&nbsp;&nbsp;&nbsp; <strong>this</strong>.sayHello(other.name)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>("I'm " + <strong>this</strong>.name + ", I want to make friends with you!!")<br />
&nbsp; }<br />
}<br />
<strong>object </strong>PersonForAbstractField{<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>p1=<strong>new </strong>PersonForAbstractField("Tom")<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>p2=<strong>new </strong>PersonForAbstractField("Rose")<br />
&nbsp;&nbsp;&nbsp; p1.makeFriends(p2)<br />
&nbsp; }<br />
}</pre>
<p>&nbsp;</p>
<h3>6.4.5.&nbsp;&nbsp; &nbsp;在实例对象指定混入某个trait</h3>
<ul>
<li>可在创建类的对象时，为该对象指定混入某个trait，且只有混入了trait的对象才具有trait中的方法，而其他该类的对象则没有；</li>
<li>在创建对象时，使用 with 关键字指定混入某个 trait；&nbsp;</li>
<li>举例说明：</li>
<li>Scala中支持让类继承多个trait后，可依次调用多个trait中的同一个方法，只要让多个trait中的同一个方法，在最后都依次执行 super 关键字即可；</li>
<li>类中调用多个trait中都有的这个方法时，首先会从最右边的trait的方法开始执行，然后依次往左执行，形成一个调用链条；</li>
<li>这种特性非常强大，其实就是设计模式中责任链模式的一种具体实现；</li>
<li>案例说明：</li>
</ul>
<pre><strong>package </strong>cn.itcast.triat<br />
<em><br />
</em><strong>trait </strong>LoggedTrait {<br />
&nbsp; // 该方法为实现的具体方法<br />
&nbsp; <strong>def </strong>log(msg: String) = {}<br />
}<br />
<strong>trait </strong>MyLogger <strong>extends </strong>LoggedTrait{<br />
&nbsp; // 覆盖 log() 方法<br />
<strong>override def </strong>log(msg: String) = <em>println</em>("log: " + msg)<br />
}<br />
<br />
<strong>class </strong>PersonForMixTraitMethod(<strong>val </strong>name: String) <strong>extends </strong>LoggedTrait {<br />
&nbsp; <strong>def </strong>sayHello = {<br />
&nbsp;&nbsp;&nbsp; <em>println</em>("Hi, I'm " + <strong>this</strong>.name)<br />
&nbsp;&nbsp;&nbsp; log("sayHello method is invoked!")<br />
&nbsp; }<br />
}<br />
<strong>object </strong>PersonForMixTraitMethod{<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>tom= <strong>new </strong>PersonForMixTraitMethod("Tom").sayHello //结果为：Hi, I'm Tom<br />
&nbsp;&nbsp;&nbsp; // 使用 with 关键字，指定混入MyLogger trait<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>rose = <strong>new </strong>PersonForMixTraitMethod("Rose") <strong>with </strong>MyLogger<br />
&nbsp;&nbsp;&nbsp; rose.sayHello<br />
// 结果为：&nbsp;&nbsp;&nbsp;&nbsp; Hi, I'm Rose<br />
// 结果为：&nbsp;&nbsp;&nbsp;&nbsp; log: sayHello method is invoked!<br />
&nbsp; }<br />
}</pre>
<h3>6.4.6.&nbsp;&nbsp; &nbsp;trait 调用链</h3>
<pre><strong>package </strong>cn.itcast.triat<br />
<em><br />
</em><strong>trait </strong>HandlerTrait {<br />
&nbsp; <strong>def </strong>handle(data: String) = {<em>println</em>("last one")}<br />
}<br />
<strong>trait </strong>DataValidHandlerTrait <strong>extends </strong>HandlerTrait {<br />
&nbsp; <strong>override def </strong>handle(data: String) = {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>println</em>("check data: " + data)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>super</strong>.handle(data)<br />
}<br />
}<br />
<strong>trait </strong>SignatureValidHandlerTrait <strong>extends </strong>HandlerTrait {<br />
&nbsp; <strong>override def </strong>handle(data: String) = {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>println</em>("check signature: " + data)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>super</strong>.handle(data)<br />
&nbsp; }<br />
}<br />
<strong>class </strong>PersonForRespLine(<strong>val </strong>name: String) <strong>extends </strong>SignatureValidHandlerTrait <strong>with </strong>DataValidHandlerTrait {<br />
&nbsp; <strong>def </strong>sayHello = {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>println</em>("Hello, " + <strong>this</strong>.name)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>this</strong>.handle(<strong>this</strong>.name)<br />
&nbsp; }<br />
}<br />
<strong>object </strong>PersonForRespLine{<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp;&nbsp; <strong>val </strong>p=<strong>new </strong>PersonForRespLine("tom")<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p.sayHello<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //执行结果：<br />
//&nbsp;&nbsp;&nbsp; Hello, tom<br />
//&nbsp;&nbsp;&nbsp; check data: tom<br />
//&nbsp;&nbsp;&nbsp; check signature: tom<br />
//&nbsp;&nbsp;&nbsp; last one<br />
&nbsp; }<br />
}</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>6.4.7.&nbsp;&nbsp; &nbsp;trait的构造机制</h3>
<ul>
<li>在Scala中，trait也是有构造代码的，即在trait中，不包含在任何方法中的代码；</li>
<li>继承了trait的子类，其构造机制如下：</li>
<li>父类的构造函数先执行， class 类必须放在最左边；多个trait从左向右依次执行；构造trait时，先构造父 trait，如果多个trait继承同一个父trait，则父trait只会构造一次；所有trait构造完毕之后，子类的构造函数最后执行。</li>
<li>举例说明：</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<pre><strong>package </strong>cn.itcast.triat<br />
<em><br />
</em><strong>class </strong>Person_One {<br />
&nbsp; <em>println</em>("Person's constructor!")<br />
}<br />
<strong>trait </strong>Logger_One {<br />
&nbsp; <em>println</em>("Logger's constructor!")<br />
}<br />
<strong>trait </strong>MyLogger_One <strong>extends </strong>Logger_One {<br />
&nbsp; <em>println</em>("MyLogger's constructor!")<br />
}<br />
<strong>trait </strong>TimeLogger_One <strong>extends </strong>Logger_One {<br />
&nbsp; <em>println</em>("TimeLogger's contructor!")<br />
}<br />
<strong>class </strong>Student_One <strong>extends </strong>Person_One <strong>with </strong>MyLogger_One <strong>with </strong>TimeLogger_One {<br />
&nbsp; <em>println</em>("Student's constructor!")<br />
&nbsp; }<br />
<strong>object </strong>exe_one {<br />
&nbsp; <strong>def </strong>main(args: Array[String]): Unit = {<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>student = <strong>new </strong>Student_One<br />
&nbsp;&nbsp;&nbsp; //执行结果为：<br />
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Person's constructor!<br />
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Logger's constructor!<br />
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MyLogger's constructor!<br />
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TimeLogger's contructor!<br />
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Student's constructor!<br />
&nbsp; }<br />
}</pre>
<p>&nbsp;</p>
<h3>6.4.8.&nbsp;&nbsp; &nbsp;trait 继承 class</h3>
<ul>
<li>在Scala中trait 也可以继承 class，此时这个 class 就会成为所有继承该 trait 的子类的超级父类。</li>
<li>Class A</li>
<li>Trait B extends A</li>
<li>Class C extends B</li>
<li>Trait D extends B</li>
<li>举例说明：</li>
</ul>
<pre><strong>package </strong>cn.itcast.triat<br />
<em><br />
</em><strong>class </strong>MyUtil {<br />
&nbsp; <strong>def </strong>printMsg(msg: String) = <em>println</em>(msg)<br />
}<br />
<strong>trait </strong>Logger_Two <strong>extends </strong>MyUtil {<br />
&nbsp; <strong>def </strong>log(msg: String) = <strong>this</strong>.printMsg("log: " + msg)<br />
}<br />
<strong>class </strong>Person_Three(<strong>val </strong>name: String) <strong>extends </strong>Logger_Two {<br />
&nbsp;&nbsp;&nbsp; <strong>def </strong>sayHello {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>this</strong>.log("Hi, I'm " + <strong>this</strong>.name)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>this</strong>.printMsg("Hello, I'm " + <strong>this</strong>.name)<br />
&nbsp; }<br />
}<br />
<strong>object </strong>Person_Three{<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>val </strong>p=<strong>new </strong>Person_Three("Tom")<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p.sayHello<br />
&nbsp;&nbsp;&nbsp; //执行结果：<br />
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; log: Hi, I'm Tom<br />
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hello, I'm Tom<br />
&nbsp; }<br />
}</pre>
<p>&nbsp;</p>]]></description></item><item><title>scala的trait执行报错：  错误: 找不到或无法加载主类 cn.itcast.scala.`trait`</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/17/11368233.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 17 Aug 2019 04:53:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/17/11368233.html</guid><description><![CDATA[<p>scala的trait执行报错：</p>
<p><span style="color: #ff0000;">错误: 找不到或无法加载主类 cn.itcast.scala.`trait`.Children</span></p>
<p>原因：包名写成了trait，与trait关键字重名了：</p>
<pre>package cn.itcast.scala.`trait`<br /><br /><br /></pre>
<p>解决方法：将包名trait修改为其他名字，比如trait_demo</p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 Scala中面向对象编程：9、getClass和classOf；10、调用父类的constructor；11、抽象类和抽象字段；</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/17/11367071.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 16 Aug 2019 16:46:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/17/11367071.html</guid><description><![CDATA[<h3>6.3.4.&nbsp;&nbsp; &nbsp;&nbsp;Scala中getClass 和 classOf</h3>
<p>Class A extends class B</p>
<p>B b=new A&nbsp;&nbsp;&nbsp; b.getClass ==classOf[A]</p>
<p>B b=new B&nbsp;&nbsp;&nbsp; b.getClass ==classOf[B]</p>
<p>&nbsp;</p>
<ul>
<li>isInstanceOf 只能判断出对象是否为指定类以及其子类的对象，而不能精确的判断出，对象就是指定类的对象；</li>
<li>如果要求精确地判断出对象就是指定类的对象，那么就只能使用 getClass 和 classOf 了；</li>
<li>p.getClass 可以精确地获取对象的类，classOf[XX] 可以精确的获取类，然后使用 == 操作符即可判断；</li>
<li>举例说明：</li>
<li>Scala中，每个类都可以有一个主constructor和任意多个辅助constructor，而且每个辅助constructor的第一行都必须调用其他辅助constructor或者主constructor代码；因此子类的辅助constructor是一定不可能直接调用父类的constructor的；</li>
</ul>
<pre><strong>package </strong>cn.itcast.extends_demo<br />
<em><br />
</em><strong>class </strong>Person4 {}<br />
<strong>class </strong>Student4 <strong>extends </strong>Person4<br />
<strong>object </strong>Student4{<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>p:Person4=<strong>new </strong>Student4<br />
&nbsp;&nbsp;&nbsp; //判断p是否为Person4类的实例<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(p.isInstanceOf[Person4])//true<br />
&nbsp;&nbsp;&nbsp; //判断p的类型是否为Person4类<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(p.getClass == <em>classOf</em>[Person4])//false<br />
&nbsp;&nbsp;&nbsp; //判断p的类型是否为Student4类<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(p.getClass == <em>classOf</em>[Student4])//true<br />
&nbsp; }<br />
}</pre>
<pre>&nbsp;</pre>
<h3>6.3.5.&nbsp;&nbsp; &nbsp;&nbsp;Scala中调用父类的constructor</h3>
<p>&nbsp;</p>
<ul>
<li>只能在子类的主constructor中调用父类的constructor。</li>
<li>如果父类的构造函数已经定义过的 field，比如name和age，子类再使用时，就不要用 val 或 var 来修饰了，否则会被认为，子类要覆盖父类的field，且要求一定要使用 override 关键字。</li>
<li>举例说明：</li>
</ul>
<pre><strong>package </strong>cn.itcast.extends_demo<br />
<em><br />
</em><strong>class </strong>Person7(<strong>val </strong>name:String,<strong>val </strong>age:Int){<br />
&nbsp; <strong>var </strong><em>score </em>:Double=0.0<br />
&nbsp; <strong>var </strong><em>address</em>:String="beijing"<br />
&nbsp; <strong>def this</strong>(name:String,score:Double)={<br />
&nbsp;&nbsp;&nbsp; //每个辅助constructor的第一行都必须调用其他辅助constructor或者主constructor代码<br />
&nbsp;&nbsp;&nbsp; //主constructor代码<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>this</strong>(name,30)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>this</strong>.<em>score</em>=score<br />
&nbsp; }<br />
&nbsp; //其他辅助constructor<br />
&nbsp; <strong>def this</strong>(name:String,address:String)={<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>this</strong>(name,100.0)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>this</strong>.<em>address</em>=address<br />
&nbsp; }<br />
}<br />
<strong>class </strong>Student7(name:String,score:Double) <strong>extends </strong>Person7(name,score)</pre>
<p>&nbsp;</p>
<h3>6.3.6.&nbsp;&nbsp; &nbsp;&nbsp;Scala中抽象类</h3>
<ul>
<li>如果在父类中，有某些方法无法立即实现，而需要依赖不同的子类来覆盖，重写实现不同的方法。此时，可以将父类中的这些方法编写成只含有方法签名，不含方法体的形式，这种形式就叫做抽象方法;</li>
<li>一个类中，如果含有一个抽象方法或抽象field，就必须使用abstract将类声明为抽象类，该类是不可以被实例化的;</li>
<li>在子类中覆盖抽象类的抽象方法时，可以不加override关键字;</li>
<li>举例说明：</li>
</ul>
<pre><strong>package </strong>cn.itcast.extends_demo<br />
<em><br />
</em><strong>abstract class </strong>Person9(<strong>val </strong>name:String) {<br />
&nbsp; //必须指出返回类型，不然默认返回为Uni<em>t<br />
&nbsp; </em><strong><em>def </em></strong><em>sayHello</em><em>:</em><em>String</em><br />
&nbsp; <strong>def </strong>sayBye:String<br />
}<br />
<strong>class</strong>Student9(name:String) <strong>extends </strong>Person9(name){<br />
&nbsp; //必须指出返回类型，不然默认<br />
&nbsp; <strong>def </strong>sayHello: String = "Hello,"+name<br />
&nbsp; <strong>def </strong>sayBye: String ="Bye,"+name<br />
}<br />
<strong>object </strong>Student9{<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>s = <strong>new </strong>Student9("tom")<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(s.sayHello)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(s.sayBye)<br />
&nbsp; }<br />
}</pre>
<p>&nbsp;</p>
<h3>6.3.7.&nbsp;&nbsp; &nbsp;&nbsp;Scala中抽象field</h3>
<ul>
<li>如果在父类中，定义了field，但是没有给出初始值，则此field为抽象field；</li>
<li>举例说明：</li>
</ul>
<pre><strong>package </strong>cn.itcast.extends_demo<br />
<em><br />
</em><strong>abstract class </strong>Person10 (<strong>val </strong>name:String){</pre>
<pre>//抽象fields<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>age:Int<br />
}<br />
<strong>class </strong>Student10(name: String) <strong>extends </strong>Person10(name) {<br />
&nbsp;&nbsp; <strong>val </strong><em>age</em>: Int = 50<br />
}</pre>]]></description></item><item><title>FineReport帆软报表需求：根据url传递过来的参数值决定显示隐藏列</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/16/11361451.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 15 Aug 2019 17:05:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/16/11361451.html</guid><description><![CDATA[<p>&nbsp;需求：角色id传递到报表页面中，然后根据角色id，决定隐藏第1列，显示第2-4列，还是隐藏第2-4列，显示第1列。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190816005003197-1096453852.png" alt="" /></p>
<p>&nbsp;解决方法：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190816005144929-2061466435.png" alt="" /></p>
<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190816010230109-1227408056.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>JavaWeb项目http请求报错：Error parsing HTTP request header</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/16/11361429.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 15 Aug 2019 16:48:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/16/11361429.html</guid><description><![CDATA[<p>详细报错信息如下图：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190816004443997-1514666816.png" alt="" /></p>
<p>原因：一一排查后，发现是http的请求中，包含了&nbsp; &ldquo; | &rdquo; 竖线特殊符号；而并不是网上说的请求url太长了的原因。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190816004749912-1029321593.png" alt="" /></p>
<p>解决方法：把 | 替换为&nbsp; @&nbsp;</p>
<p>&nbsp;</p>]]></description></item><item><title>scala命令行界面:help</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/16/11361398.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 15 Aug 2019 16:29:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/16/11361398.html</guid><description><![CDATA[<p>:help 查看所有可用命令</p>
<p>scala&gt; :help<br />All commands can be abbreviated, e.g., :he instead of :help.<br />:edit &lt;id&gt;|&lt;line&gt;        edit history<br />:help [command]          print this summary or command-specific help<br />:history [num]           show the history (optional num is commands to show)<br />:h? &lt;string&gt;             search the history<br />:imports [name name ...] show import history, identifying sources of names<br />:implicits [-v]          show the implicits in scope<br />:javap &lt;path|class&gt;      disassemble a file or class name<br />:line &lt;id&gt;|&lt;line&gt;        place line(s) at the end of history<br />:load &lt;path&gt;             interpret lines in a file<br />:paste [-raw] [path]     enter paste mode or paste a file<br />:power                   enable power user mode<br />:quit                    exit the interpreter<br />:replay [options]        reset the repl and replay all previous commands<br />:require &lt;path&gt;          add a jar to the classpath<br />:reset [options]         reset the repl to its initial state, forgetting all session entries<br />:save &lt;path&gt;             save replayable session to a file<br />:sh &lt;command line&gt;       run a shell command (result is implicitly =&gt; List[String])<br />:settings &lt;options&gt;      update compiler options, if possible; see reset<br />:silent                  disable/enable automatic printing of results<br />:type [-v] &lt;expr&gt;        display the type of an expression without evaluating it<br />:kind [-v] &lt;expr&gt;        display the kind of expression's type<br />:warnings                show the suppressed warnings from the most recent line which had any</p>]]></description></item><item><title>第2节 Scala中面向对象编程：7、继承的概念以及override和super关键字；8、isInstanceOf 和 asInstanceOf关键字</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/16/11361390.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 15 Aug 2019 16:23:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/16/11361390.html</guid><description><![CDATA[<h2>6.3.&nbsp; &nbsp;Scala面向对象编程之继承</h2>
<h3>6.3.1.&nbsp;&nbsp; &nbsp;&nbsp;Scala中继承(extends)的概念</h3>
<ul>
<li>Scala 中，让子类继承父类，与 Java 一样，也是使用 extends 关键字；</li>
<li>继承就代表，子类可继承父类的 field 和 method ，然后子类还可以在自己的内部实现父类没有的，子类特有的 field 和method，使用继承可以有效复用代码；</li>
<li>子类可以覆盖父类的 field 和 method，但是如果父类用 final 修饰，或者 field 和 method 用 final 修饰，则该类是无法被继承的，或者 field 和 method 是无法被覆盖的。</li>
<li>private 修饰的 field 和 method 不可以被子类继承，只能在类的内部使用；</li>
<li>field 必须要被定义成 val 的形式才能被继承，并且还要使用 override 关键字。 因为 var 修饰的 field 是可变的，在子类中可直接引用被赋值，不需要被继承；即 val 修饰的才允许被继承，var 修饰的只允许被引用。继承就是改变、覆盖的意思。（注意：子类和父类中都要用val修饰）</li>
<li>Java 中的访问控制权限，同样适用于 Scala</li>
</ul>
<table style="height: 214px; width: 379px;" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="bottom" width="159">
<p>&nbsp;</p>
</td>
<td valign="bottom" width="85">
<p>类内部</p>
</td>
<td valign="bottom" width="68">
<p>本包</p>
</td>
<td valign="bottom" width="84">
<p>子类</p>
</td>
<td valign="bottom" width="93">
<p>外部包</p>
</td>
</tr>
<tr>
<td valign="bottom" width="159">
<p>public</p>
</td>
<td valign="bottom" width="85">
<p>&radic;</p>
</td>
<td valign="bottom" width="68">
<p>&radic;</p>
</td>
<td valign="bottom" width="84">
<p>&radic;</p>
</td>
<td valign="bottom" width="93">
<p>&radic;</p>
</td>
</tr>
<tr>
<td valign="bottom" width="159">
<p>protected</p>
</td>
<td valign="bottom" width="85">
<p>&radic;</p>
</td>
<td valign="bottom" width="68">
<p>&radic;</p>
</td>
<td valign="bottom" width="84">
<p>&radic;</p>
</td>
<td valign="bottom" width="93">
<p>&times;</p>
</td>
</tr>
<tr>
<td valign="bottom" width="159">
<p>default</p>
</td>
<td valign="bottom" width="85">
<p>&radic;</p>
</td>
<td valign="bottom" width="68">
<p>&radic;</p>
</td>
<td valign="bottom" width="84">
<p>&times;</p>
</td>
<td valign="bottom" width="93">
<p>&times;</p>
</td>
</tr>
<tr>
<td valign="bottom" width="159">
<p>private</p>
</td>
<td valign="bottom" width="85">
<p>&radic;</p>
</td>
<td valign="bottom" width="68">
<p>&times;</p>
</td>
<td valign="bottom" width="84">
<p>&times;</p>
</td>
<td valign="bottom" width="93">
<p>&times;</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<ul>
<li>举例说明：</li>
</ul>
<pre><strong>package </strong>cn.itcast.extends_demo<br />
<em><br />
</em><strong>class </strong>Person1 {<br />
&nbsp; <strong>val </strong><em>name</em>="super"<br />
&nbsp; <strong>def </strong>getName=<strong>this</strong>.<em>name<br />
</em>}<br />
<strong>class </strong>Student1 <strong>extends </strong>Person1{<br />
&nbsp; //继承加上关键字<br />
&nbsp; <strong>override<br />
&nbsp; val </strong><em>name</em>="sub"<br />
&nbsp; //子类可以定义自己的field和method<br />
&nbsp; <strong>val </strong><em>score</em>="A"<br />
&nbsp; <strong>def </strong>getScore=<strong>this</strong>.<em>score<br />
</em>}</pre>
<p>&nbsp;</p>
<h3>6.3.2.&nbsp;&nbsp; &nbsp;&nbsp;Scala中override 和 super 关键字</h3>
<ul>
<li>Scala中，如果子类要覆盖父类中的一个非抽象方法，必须要使用 override 关键字；子类可以覆盖父类的 val 修饰的field，只要在子类中使用 override 关键字即可。</li>
<li>override 关键字可以帮助开发者尽早的发现代码中的错误，比如， override 修饰的父类方法的方法名拼写错误。</li>
<li>此外，在子类覆盖父类方法后，如果在子类中要调用父类中被覆盖的方法，则必须要使用 super 关键字，显示的指出要调用的父类方法。</li>
<li>举例说明：</li>
</ul>
<pre><strong>package </strong>cn.itcast.extends_demo<br />
<em><br />
</em><strong>class </strong>Person2 {<br />
&nbsp; <strong>private val </strong><em>name </em>= "leo"<br />
&nbsp; <strong>val </strong><em>age</em>=50<br />
&nbsp; <strong>def </strong>getName = <strong>this</strong>.<em>name<br />
</em>}<br />
<strong>class </strong>Student2 <strong>extends </strong>Person2{<br />
&nbsp; <strong>private val </strong><em>score </em>= "A"<br />
&nbsp; //子类可以覆盖父类的 val field,使用override关键字<br />
&nbsp; <strong>override<br />
&nbsp; val </strong><em>age</em>=30<br />
&nbsp; <strong>def </strong>getScore = <strong>this</strong>.<em>score<br />
&nbsp; </em>//覆盖父类非抽象方法，必须要使用 override 关键字<br />
&nbsp; //同时调用父类的方法，使用super关键字<br />
&nbsp;&nbsp;<strong>override def </strong>getName = "your name is " + <strong>super</strong>.getName<br />
}<br /><br /></pre>
<h3>6.3.3.&nbsp;&nbsp; &nbsp;&nbsp;Scala中isInstanceOf 和 asInstanceOf</h3>
<p>如果实例化了子类的对象，但是将其赋予了父类类型的变量，在后续的过程中，又需要将父类类型的变量转换为子类类型的变量，应该如何做？</p>
<p>Class A extends class B</p>
<p>B b=new A</p>
<p>&nbsp;</p>
<ul>
<li>首先，需要使用 isInstanceOf 判断对象是否为指定类的对象，如果是的话，则可以使用 asInstanceOf 将对象转换为指定类型；</li>
<li><span style="color: #ff0000;">注意</span>： p.isInstanceOf[XX] 判断 p 是否为 XX 对象的实例；p.asInstanceOf[XX] 把 p 转换成 XX 对象的实例</li>
<li><span style="color: #ff0000;">注意</span>：如果没有用 isInstanceOf 先判断对象是否为指定类的实例，就直接用 asInstanceOf 转换，则可能会抛出异常；</li>
<li><span style="color: #ff0000;">注意</span>：如果对象是 null，则 isInstanceOf 一定返回 false， asInstanceOf 一定返回 null；</li>
<li><span style="color: #ff0000;">Scala与Java类型检查和转换</span></li>
</ul>
<p>&nbsp;</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="284">
<p align="center"><strong>Scala</strong></p>
</td>
<td valign="top" width="284">
<p align="center"><strong>Java</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="284">
<p>obj.isInstanceOf[C]</p>
</td>
<td valign="top" width="284">
<p>obj instanceof C</p>
</td>
</tr>
<tr>
<td valign="top" width="284">
<p>obj.asInstanceOf[C]</p>
</td>
<td valign="top" width="284">
<p>(C)obj</p>
</td>
</tr>
<tr>
<td valign="top" width="284">
<p>classOf[C]</p>
</td>
<td valign="top" width="284">
<p>C.class</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<ul>
<li>举例说明：</li>
</ul>
<pre><strong>package </strong>cn.itcast.extends_demo<br />
<em><br />
</em><strong>class </strong>Person3 {}<br />
<strong>class </strong>Student3 <strong>extends </strong>Person3<br />
<strong>object </strong>Student3{<br />
&nbsp;&nbsp;&nbsp; <strong>def </strong>main (args: Array[String] ) {<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>p: Person3 = <strong>new </strong>Student3<br />
&nbsp;&nbsp;&nbsp; <strong>var </strong>s: Student3 = <strong>null<br />
&nbsp;&nbsp;&nbsp; </strong>//如果对象是 null，则 isInstanceOf 一定返回 false<br />
&nbsp;&nbsp;&nbsp; <em>println </em>(s.isInstanceOf[Student3])<br />
&nbsp;&nbsp;&nbsp; // 判断 p 是否为 Student3 对象的实例<br />
&nbsp; <strong>if </strong>(p.isInstanceOf[Student3] ) {<br />
&nbsp;&nbsp;&nbsp; //把 p 转换成 Student3 对象的实例<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s = p.asInstanceOf[Student3]<br />
&nbsp; }<br />
&nbsp; <em>println </em>(s.isInstanceOf[Student3] )<br />
&nbsp; }<br />
}</pre>
<p>&nbsp;</p>
<pre>&nbsp;</pre>
<p>&nbsp;</p>]]></description></item><item><title>第1节 Scala基础语法：scala中的方法源码分析</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/15/11361164.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 15 Aug 2019 15:08:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/15/11361164.html</guid><description><![CDATA[<p> val list=List(1,2,3,4)<br />    list.reduce((x:Int,y:Int)=&gt;x+y)---&gt;list.reduceLeft((x:Int,y:Int)=&gt;x+y)<br />	<br />	var first = true<br />    var acc:Int = 0<br />	op=(x:Int,y:Int)=&gt;x+y</p>
<p>for循环<br />第一次循环：acc=1	 first = false<br />第二次循环：acc=op(1,2)=1+2=3<br />第三次循环：acc=op(3,3)=3+3=6<br />第四次循环：acc=op(6,4)=6+4=10<br />======================================================================<br />     val list=List(1,2,3,4)<br /> list.reduceRight((x:Int,y:Int)=&gt;x-y)<br /> <br />  op(head, tail.reduceRight(op))---》op(1,List(2,3,4).reduceRight(op)----&gt;op(2,List(3,4).reduceRight(op)--&gt;op(3,List(4).reduceRight(op)=4)=3-4=-1)=2-(-1)=3)=1-3=-2<br />  <br /> ========================================================================<br />     val list=List(1,2,3,4)<br /> list.foldRight(0)(_-_) ---&gt;reverse.foldLeft(z)((right, left) =&gt; op(left, right))<br /> <br />  List(4,3,2,1).foldLeft(z)((right, left) =&gt; op(left, right))<br />  <br />  <br />    var acc = 0<br />    var these =  List(4,3,2,1)<br />    while (!these.isEmpty) {<br />      acc = op(acc, these.head)<br />      these = these.tail<br />    }<br />	<br />while循环<br />第一次while：	acc=op(0,4)=&gt;op(4,0)=4-0=4        these=List(3,2,1)<br />第二次while：   acc=op(4,3)=&gt;op(3,4)=3-4=-1       these=List(2,1)<br />第三次while：   acc=op(-1,2)=&gt;op(2,-1)=2-(-1)=3   these=List(1)<br />第四次while：   acc=op(3,1)=&gt;op(1,3)=1-3=-2       these=List()</p>
<p>=========================================================================<br />val array=Array(1,2,3,4)------&gt;其本质是调用了Array这个object的apply方法</p>
<p>  def apply(x: Int, xs: Int*): Array[Int] = {<br />    //构建了一个跟目标数组长度一致的空的数组<br />    val array = new Array[Int](xs.length + 1)<br />	//把参数中的第一个元素赋值给空的数组的0下标<br />    array(0) = x<br />    var i = 1<br />    for (x &lt;- xs.iterator) { array(i) = x; i += 1 }<br />	// array(1)=2 i=2<br />	// array(2)=3 i=3<br />	// array(3)=4 i=4<br />    array---&gt;Array(1,2,3,4)<br />  }<br />  <br />  import scala.collection.mutable._<br />  Array(1,2,3,4).map(_+_)<br />  <br /> import scala.collection.mutable.A<br /> import scala.collection.mutable.B<br /> import scala.collection.mutable.C<br /> import scala.collection.mutable.D</p>]]></description></item><item><title>第2节 Scala中面向对象编程：1、类的定义；2、类的构造器；3、object和伴生对象；4、apply和main方法</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/15/11360319.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 15 Aug 2019 12:21:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/15/11360319.html</guid><description><![CDATA[<h1>6.&nbsp;&nbsp; &nbsp;类、对象、继承、特质</h1>
<p>Scala的类与Java、C++的类比起来更简洁，学完之后你会更爱Scala！！！</p>
<h2>6.1.&nbsp; &nbsp;类</h2>
<h3>6.1.1.&nbsp;&nbsp; &nbsp;类的定义</h3>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre><strong>package </strong>cn.itcast.class_demo<br />
  <br />
  <em>/**<br />
* </em><em>在</em><em>Scala</em><em>中，类并不用声明为</em><em>public</em><em>类型的。<br />
  </em><em>* Scala</em><em>源文件中可以包含多个类，所有这些类都具有共有可见性。<br />
  </em><em>*/<br />
  </em><strong>class </strong>Person {<br />
&nbsp; //用val修饰的变量是可读属性，有getter但没有setter（相当与Java中用final修饰的变量）<br />
&nbsp; <strong>val </strong><em>id</em>="9527"<br />
  <br />
&nbsp; //用var修饰的变量都既有getter，又有setter<br />
&nbsp; <strong>var </strong><em>age</em>:Int=18<br />
  <br />
&nbsp; //类私有字段，只能在类的内部使用或者伴生对象中访问<br />
&nbsp; <strong>private var </strong><em>name </em>: String = "唐伯虎"<br />
  <br />
&nbsp; //类私有字段，访问权限更加严格的，该字段在当前类中被访问<br />
&nbsp; //在伴生对象里面也不可以访问<br />
&nbsp; <strong>private</strong>[<strong>this</strong>] <strong>var </strong><em>pet </em>= "小强"<br />
  <br />
  }<br />
  <br />
  //伴生对象（这个名字和类名相同，叫伴生对象）<br />
  <strong>object </strong>Person{<br />
&nbsp; <strong>def </strong>main(args: Array[String]): Unit = {<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>p=<strong>new </strong>Person<br />
  <br />
&nbsp;&nbsp;&nbsp; //如果是下面的修改，发现下面有红线，说明val类型的不支持重新赋值，但是可以获取到值<br />
&nbsp;&nbsp;&nbsp; //p.id = "123"<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(p.<em>id</em>)<br />
&nbsp;&nbsp;&nbsp; //打印age<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(p.<em>age</em>)<br />
&nbsp;&nbsp;&nbsp; //打印name,伴生对象中可以在访问private变量<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(p.<em>name</em>)<br />
&nbsp;&nbsp;&nbsp; //由于pet字段用private[this]修饰，伴生对象中访问不到pet变量<br />
&nbsp;&nbsp;&nbsp; //p.pet(访问不到)<br />
  <br />
&nbsp; }<br />
}</pre>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h3>6.1.2.&nbsp;&nbsp; &nbsp;构造器</h3>
<p>Scala中的每个类都有主构造器，主构造器的参数直接放置类名后面，与类交织在一起。</p>
<p><span style="color: #ff0000;">注意：主构造器会执行类定义中的所有语句。</span></p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre><strong>package </strong>cn.itcast.class_demo<br />
  <br />
  <em>/**<br />
&nbsp; *</em><em>每个类都有主构造器，主构造器的参数直接放置类名后面，与类交织在一起<br />
&nbsp; </em><em>*/<br />
  </em><strong>class </strong>Student(<strong>val </strong>name:String,<strong>var </strong>age:Int) {<br />
&nbsp; //主构造器会执行类定义的所有语句<br />
&nbsp; <em>println</em>("执行主构造器")<br />
&nbsp; <strong>private&nbsp; var </strong><em>gender</em>="male"<br />
&nbsp; <strong>def this</strong>(name:String,age:Int,gender:String){<br />
&nbsp;&nbsp;&nbsp; //每个辅助构造器执行必须以主构造器或者其他辅助构造器的调用开始<br />
&nbsp;&nbsp;&nbsp; <strong>this</strong>(name,age)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>("执行辅助构造器")<br />
&nbsp;&nbsp;&nbsp; <strong>this</strong>.<em>gender</em>=gender<br />
&nbsp; }<br />
}<br />
  <br />
  <strong>object </strong>Student {<br />
&nbsp; <strong>def </strong>main(args: Array[String]): Unit = {<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>s1=<strong>new </strong>Student("zhangsan",20)<br />
&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>s2=<strong>new </strong>Student("zhangsan",20,"female")<br />
&nbsp; }<br />
}</pre>
</td>
</tr>
</tbody>
</table>
<h2>6.2.&nbsp; &nbsp;Scala面向对象编程之对象</h2>
<h3>6.2.1.&nbsp;&nbsp; &nbsp;&nbsp;Scala中的object</h3>
<ul>
<li>object 相当于 class 的单个实例，通常在里面放一些静态的 field 或者 method；</li>
</ul>
<p>在Scala中没有静态方法和静态字段，但是可以使用object这个语法结构来达到同样的目的。</p>
<p><span style="color: #ff0000;">object作用：</span></p>
<p><span style="color: #ff0000;">1.存放工具方法和常量</span></p>
<p><span style="color: #ff0000;">2.高效共享单个不可变的实例</span></p>
<p><span style="color: #ff0000;">3.单例模式</span></p>
<ul>
<li>举例说明：</li>
</ul>
<pre><strong>package </strong>cn.itcast.object_demo<br />
<strong>import </strong>scala.collection.mutable.ArrayBuffer</pre>
<pre><br />
<strong>class </strong>Session{}</pre>
<pre><strong>object </strong>SessionFactory{<br />
&nbsp; //该部分相当于java中的静态块<br />
&nbsp;&nbsp; <strong>val </strong><em>session</em>=<strong>new </strong>Session<br />
&nbsp; //在object中的方法相当于java中的静态方法<br />
&nbsp; <strong>def </strong>getSession(): Session ={<br />
&nbsp;&nbsp;&nbsp; <em>session<br />
&nbsp; </em>}<br />
}<br />
<strong>object </strong>SingletonDemo {<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; //单例对象，不需要new，用【单例对象名称.方法】调用对象中的方法<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>session1 = SessionFactory.<em>getSession</em>()<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(session1)<br />
&nbsp;&nbsp;&nbsp; //单例对象，不需要new，用【单例对象名称.变量】调用对象中成员变量</pre>
<pre><strong>val </strong>session2=SessionFactory.<em>session</em><br />
&nbsp;&nbsp;&nbsp; <em>println</em>(session2)<br />
&nbsp; }<br />
}<br />
<br />
<br />
</pre>
<pre>&nbsp;</pre>
<h3>6.2.2.&nbsp;&nbsp; &nbsp;&nbsp;Scala中的伴生对象</h3>
<ul>
<li>如果有一个class文件，还有一个与class同名的object文件，那么就称这个object是class的伴生对象，class是object的伴生类；</li>
<li>伴生类和伴生对象必须存放在一个.scala文件中；</li>
<li>伴生类和伴生对象的<span style="color: #ff0000;">最大特点是，可以相互访问</span>；</li>
<li>举例说明：</li>
</ul>
<pre><strong>package </strong>cn.itcast.object_demo<br />
<em><br />
</em>//伴生类<br />
<strong>class </strong>Dog {<br />
&nbsp; <strong>val </strong><em>id </em>= 1<br />
&nbsp; <strong>private var </strong><em>name </em>= "itcast"<br />
&nbsp; <strong>def </strong>printName(): Unit ={<br />
&nbsp;&nbsp;&nbsp; //在Dog类中可以访问伴生对象Dog的私有属性<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(Dog.<em>CONSTANT </em>+ <em>name </em>)<br />
&nbsp; }<br />
}<br />
//伴生对象<br />
<strong>object </strong>Dog {<br />
&nbsp; //伴生对象中的私有属性<br />
&nbsp; <strong>private val </strong><em>CONSTANT </em>= "汪汪汪 : "<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>p = <strong>new </strong>Dog<br />
&nbsp;&nbsp;&nbsp; //访问私有的字段name<br />
&nbsp;&nbsp;&nbsp; p.<em>name </em>= "123"<br />
&nbsp;&nbsp;&nbsp; p.printName()<br />
&nbsp; }<br />
}<br />
//执行结果 汪汪汪 : 123</pre>
<p>&nbsp;</p>
<h3>6.2.3.&nbsp;&nbsp; &nbsp;&nbsp;Scala中的apply方法</h3>
<ul>
<li>object 中非常重要的一个特殊方法，就是apply方法；</li>
<li>apply方法通常是在伴生对象中实现的，其目的是，通过伴生类的构造函数功能，来实现伴生对象的构造函数功能；</li>
<li>通常我们会在类的伴生对象中定义apply方法，当遇到类名(参数1,...参数n)时apply方法会被调用；</li>
<li>在创建伴生对象或伴生类的对象时，通常不会使用new class/class() 的方式，而是直接使用 class()，隐式的调用伴生对象的 apply 方法，这样会让对象创建的更加简洁；</li>
<li>举例说明：</li>
</ul>
<pre><strong>package </strong>cn.itcast.object_demo<br />
<em>/**<br />
&nbsp;*&nbsp; Array </em><em>类的伴生对象中，就实现了可接收变长参数的 </em><em>apply </em><em>方法，<br />
&nbsp;</em><em>* </em><em>并通过创建一个 </em><em>Array </em><em>类的实例化对象，实现了伴生对象的构造函数功能<br />
&nbsp;</em><em>*/<br />
</em>// 指定 T 泛型的数据类型，并使用变长参数 xs 接收传参，返回 Array[T] 数组<br />
// 通过 new 关键字创建 xs.length 长的 Array 数组<br />
// 其实就是调用Array伴生类的 constructor进行 Array对象的初始化<br />
//&nbsp; def apply[T: ClassTag](xs: T*): Array[T] = {<br />
//&nbsp;&nbsp;&nbsp; val array = new Array[T](xs.length)<br />
//&nbsp;&nbsp;&nbsp; var i = 0<br />
//&nbsp;&nbsp;&nbsp; for (x &lt;- xs.iterator) { array(i) = x; i += 1 }<br />
//&nbsp;&nbsp;&nbsp; array<br />
//&nbsp; }<br />
<br />
<strong>object </strong>ApplyDemo {<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; //调用了Array伴生对象的apply方法<br />
&nbsp;&nbsp;&nbsp; //def apply(x: Int, xs: Int*): Array[Int]<br />
&nbsp;&nbsp;&nbsp; //arr1中只有一个元素5<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>arr1 = <em>Array</em>(5)</pre>
<pre><br />
&nbsp;&nbsp;&nbsp; //new了一个长度为5的array，数组里面包含5个null<br />
&nbsp;&nbsp;&nbsp; <strong>var </strong>arr2 = <strong>new </strong>Array(5)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(arr1.toBuffer)<br />
&nbsp; }<br />
}</pre>
<p>&nbsp;</p>
<h3>6.2.4.&nbsp;&nbsp; &nbsp;&nbsp;Scala中的main方法</h3>
<ul>
<li>同Java一样，如果要运行一个程序，必须要编写一个包含 main 方法的类；</li>
<li>在 Scala 中，也必须要有一个 main 方法，作为入口；</li>
<li>Scala 中的 main 方法定义为 def main(args: Array[String])，而且必须定义在 object 中；</li>
<li>除了自己实现 main 方法之外，还可以继承 App Trait，然后，将需要写在 main 方法中运行的代码，直接作为 object 的 constructor 代码即可，而且还可以使用 args 接收传入的参数；</li>
<li>案例说明：</li>
</ul>
<p>&nbsp;</p>
<pre><strong>package </strong>cn.itcast.object_demo<br />
<em><br />
</em>//1.在object中定义main方法<br />
<strong>object </strong>Main_Demo1 {<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; <strong>if</strong>(args.length &gt; 0){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>println</em>("Hello, " + args(0))<br />
&nbsp;&nbsp;&nbsp; }<strong>else</strong>{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>println</em>("Hello World!")<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp; }<br />
}<br />
//2.使用继承App Trait ,将需要写在 main 方法中运行的代码<br />
// 直接作为 object 的 constructor 代码即可，<br />
// 而且还可以使用 args 接收传入的参数。<br />
<br />
<strong>object </strong>Main_Demo2 <strong>extends </strong>App{<br />
&nbsp;&nbsp;&nbsp; <strong>if</strong>(args.length &gt; 0){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>println</em>("Hello, " + args(0))<br />
&nbsp;&nbsp;&nbsp; }<strong>else</strong>{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>println</em>("Hello World!")<br />
&nbsp;&nbsp;&nbsp; }<br />
}</pre>]]></description></item><item><title>第1节 Scala基础语法：14、15、list集合练习</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/11/11334274.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 11 Aug 2019 03:08:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/11/11334274.html</guid><description><![CDATA[<p>package cn.itcast.collect</p>
<p>/**<br />  *作业题<br />  */<br />object ListTest {<br />  def main(args: Array[String]): Unit = {<br />    //创建一个List<br />    val list0=List(1,7,9,8,0,3,5,4,6,2)</p>
<p>    //将list0中的每一个元素乘以10后生成一个新的集合<br />    val list1=list0.map(x=&gt;x*10)<br />    println("list1==== "+list1)</p>
<p>    //将list0中的偶数取出来生成一个新的集合<br />    val list2=list0.filter(x=&gt;x%2==0)<br />    println("list2==== "+list2)</p>
<p>    //将list0排序后生成一个新的集合<br />    val list3=list0.sorted<br />    val list4=list0.sortBy(x=&gt;x)<br />    val list5=list0.sortWith((x,y)=&gt;x&lt;y)<br />    println("list3==== "+list3)<br />    println("list4==== "+list4)<br />    println("list5==== "+list5)</p>
<p>    //反转顺序<br />    val list6=list3.reverse<br />    println("list6==== "+list6)</p>
<p>    //将list0中的元素4个一组,类型为Iterator[List[Int]]<br />    val list7=list0.grouped(4)<br />    println("list7==== "+list7)</p>
<p>    //将Iterator转换成List<br />    val list8=list7.toList<br />    println("list8==== "+list8)</p>
<p>    //将多个list压扁成一个List<br />    val list9=list8.flatten<br />    println("list9==== "+list9)</p>
<p>    val lines = List("hello tom hello jerry", "hello jerry", "hello kitty")<br />    //先按空格切分，在压平<br />    val result1=lines.flatMap(_.split(" "))<br />    println("result1==== "+result1)</p>
<p>    //并行计算求和<br />    val result2=list0.par.sum<br />    println("result2==== "+result2)</p>
<p>    //化简：reduce<br />    //将非特定顺序的二元操作应用到所有元素<br />    val result3=list0.reduce((x,y) =&gt; x + y)<br />	还可以这么写： val result3=list0.reduce(_+_) 第一个下划线表示累加后的结果，第二个表示集合中的下一个元素<br />    println("result3==== "+result3)</p>
<p>    //按照特定的顺序<br />    val result4 = list0.reduceLeft(_+_)<br />    val result5= list0.reduceRight(_+_)<br />    println("result4==== "+result4)<br />    println("result5==== "+result5)</p>
<p>    //折叠：有初始值（无特定顺序）<br />    val result6 = list0.fold(100)((x,y)=&gt;x+y)<br />    println("result6==== "+result6)</p>
<p>    //折叠：有初始值（有特定顺序）<br />    val result7 = list0.foldLeft(100)((x,y)=&gt;x+y)<br />    println("result7==== "+result7)</p>
<p>    //聚合<br />    val  list10= List(List(1, 2, 3), List(4, 5, 6), List(7,8), List(9,0))<br />    val  result8 = list10.par.aggregate(10)(_+_.sum,_+_)<br />    println("result8==== "+result8)</p>
<p>    //获取到参与并行计算的线程<br />    println(list10.par.collect{<br />      case _=&gt;Thread.currentThread().getName<br />    }.distinct)</p>
<p>    val l1 = List(5,6,4,7)<br />    val l2 = List(1,2,3,4)<br />    //求并集<br />    val r1=l1.union(l2)<br />    println("r1=== "+r1)</p>
<p>    //求交集<br />    val r2=l1.intersect(l2)<br />    println("r1=== "+r2)</p>
<p>    //求差集<br />    val r3=l1.diff(l2)<br />    println("r3=== "+r3)</p>
<p>	reduceLeft(op), reduceLeft(op),<br />	foldLeft(init)(op), foldRight(init)(op)<br />	是将操作应用到同一集合的相邻元素<br />	定义  val list = List(1,2,3,4)<br />	运算 list.reduceLeft(_-_)       <br />	运算 list.reduceRight(_-_)&nbsp; &nbsp;// 源码中的运算步骤为： 1-(2-(3-4)) = -2<br />	运算 list.foldLeft(0)(_-_)<br />	运算 list.foldRight(0)(_-_)&nbsp;&nbsp;// 源码中的运算步骤为： 1-(2-(3-(4-0))) = -2</p>
<p>  }</p>
<p>}</p>]]></description></item><item><title>第1节 Scala基础语法：13、list集合的定义和操作；16、set集合；17、map集合</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/11/11334266.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 11 Aug 2019 03:07:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/11/11334266.html</guid><description><![CDATA[<p>list.+:5 , list.::5： 在list集合头部添加单个元素5 ；</p>
<p>li1.:+(5)：在list集合尾部添加单个元素5；</p>
<p>li1++li2，li1:::li2：在li1集合尾部添加il2集合；</p>
<p>li1.:::(li2)：在li1集合头部添加li2集合。</p>
<p>li1--=li2：可变list集合li1中，减去li2集合中的元素，li1中的元素为减少后的元素。</p>
<p>&nbsp;</p>
<p>List：可重复、有序（注意，这里的有序不是指它里面的元素从小到大排序，而是指它里面的元素的位置不会改变，每个元素都有自己的位置序号）、可保证插入顺序；</p>
<p>Set：不可重复、有序、但不保证插入顺序（即插入元素时是乱序的，随机插到一个位置）；</p>
<p>Map：不可重复、有序、但不保证插入顺序。</p>
<p><span style="color: #ff0000;">========================================</span></p>
<h2>5.4.&nbsp; &nbsp;集合</h2>
<p>Scala的集合有三大类：序列Seq、Set、映射Map，所有的集合都扩展自Iterable特质，在Scala中集合有可变（mutable）和不可变（immutable）两种类型，immutable类型的集合初始化后就不能改变了（注意与val修饰的变量进<strong>行区别）。</strong></p>
<h3>5.4.1.&nbsp;&nbsp; &nbsp;List</h3>
<p>(1)不可变的序列 import scala.collection.immutable._</p>
<p>&nbsp;</p>
<p>在Scala中列表要么为空（Nil表示空列表）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 要么是一个head元素加上一个tail列表。</p>
<p>9 :: List(5, 2)&nbsp; :: 操作符是将给定的头和尾创建一个新的列表&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>注意：:: 操作符是右结合的，如9 :: 5 :: 2 :: Nil相当于 9 :: (5 :: (2 :: Nil))</p>
<p>&nbsp;</p>
<p>list常用的操作符：</p>
<p>+: (elem: A): List[A] 在列表的头部添加一个元素</p>
<p>:: (x: A): List[A]&nbsp;&nbsp;&nbsp;&nbsp; 在列表的头部添加一个元素</p>
<p>:+ (elem: A): List[A] 在列表的尾部添加一个元素</p>
<p>++[B](that: GenTraversableOnce[B]): List[B] 从列表的尾部添加&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 另外一个列表</p>
<p>::: (prefix: List[A]): List[A] 在列表的头部添加另外一个列表</p>
<p>val left = List(1,2,3)</p>
<p>val right = List(4,5,6)</p>
<p>//以下操作等价</p>
<p>left ++ right&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;// List(1,2,3,4,5,6)</p>
<p>right.:::(left)&nbsp; &nbsp;&nbsp;&nbsp;// List(1,2,3,4,5,6)</p>
<p>//以下操作等价</p>
<p>0 +: left&nbsp;&nbsp;&nbsp; //List(0,1,2,3)</p>
<p>left.+:(0)&nbsp;&nbsp; //List(0,1,2,3)</p>
<p>//以下操作等价</p>
<p>left :+ 4&nbsp;&nbsp;&nbsp; //List(1,2,3,4)</p>
<p>left.:+(4)&nbsp;&nbsp; //List(1,2,3,4)</p>
<p>//以下操作等价</p>
<p>0 :: left&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //List(0,1,2,3)</p>
<p>left.::(0)&nbsp;&nbsp;&nbsp;&nbsp; //List(0,1,2,3)</p>
<p>例子:</p>
<pre><strong>package </strong>cn.itcast.collect<br />
<em>/**</em></pre>
<pre><em> * </em><em>不可变</em><em>List</em><em>集合操作</em><em><br />
&nbsp;*/<br />
</em><strong>object </strong>ImmutListDemo {<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; //创建一个不可变的集合<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>lst1 = <em>List</em>(1,2,3)<br />
&nbsp;&nbsp;&nbsp; //补充：另一种定义list方法<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>other_lst=2::<em>Nil<br />
&nbsp;&nbsp;&nbsp; </em>//获取集合的第一个元素<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>first=lst1.head<br />
&nbsp;&nbsp;&nbsp; //获取集合中除第一个元素外的其他元素集合,<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>tail=lst1.tail<br />
&nbsp;&nbsp;&nbsp; //补充：其中如果 List 中只有一个元素，那么它的 head 就是这个元素，它的 tail 就是 Nil；<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(other_lst.head+"----"+other_lst.tail)<br />
&nbsp;&nbsp;&nbsp; //将0插入到lst1的前面生成一个新的List<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>lst2 = 0 :: lst1<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>lst3 = lst1.::(0)<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>lst4 = 0 +: lst1<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>lst5 = lst1.+:(0)<br />
&nbsp;&nbsp;&nbsp; </pre>
<pre>//将一个元素添加到lst1的后面产生一个新的集合<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>lst6 = lst1 :+ 3<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>lst0 = <em>List</em>(4,5,6)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />
&nbsp;&nbsp;&nbsp; //将2个list合并成一个新的List<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>lst7 = lst1 ++ lst0<br />
&nbsp;&nbsp;&nbsp; //将lst0插入到lst1前面生成一个新的集合<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>lst8 = lst1 ++: lst0<br />
&nbsp;&nbsp;&nbsp; //将lst0插入到lst1前面生成一个新的集合<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>lst9 = lst1.:::(lst0)<br />
<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(other_lst)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(lst1)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(first)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(tail)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(lst2)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(lst3)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(lst4)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(lst5)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(lst6)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(lst7)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(lst8)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(lst9)<br />
&nbsp; }<br />
}</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>(2)可变的序列 import scala.collection.mutable._</p>
<pre><strong>ackage </strong>cn.itcast.collect<br />
<strong>import </strong>scala.collection.mutable.ListBuffer<br />
<em><br />
</em><strong>object </strong>MutListDemo <strong>extends </strong>App{<br />
&nbsp; //构建一个可变列表，初始有3个元素1,2,3<br />
&nbsp; <strong>val </strong><em>lst0 </em>= ListBuffer[Int](1,2,3)<br />
&nbsp; //创建一个空的可变列表<br />
&nbsp; <strong>val </strong><em>lst1 </em>= <strong>new </strong>ListBuffer[Int]<br />
&nbsp; //向lst1中追加元素，注意：没有生成新的集合<br />
&nbsp; <em>lst1 </em>+= 4<br />
&nbsp; <em>lst1</em>.append(5)</pre>
<pre><br />
&nbsp; //将lst1中的元素添加到lst0中， 注意：没有生成新的集合<br />
&nbsp; <em>lst0 </em>++= <em>lst1</em></pre>
<pre><em><br />
&nbsp; </em>//将lst0和lst1合并成一个新的ListBuffer 注意：生成了一个集合<br />
&nbsp; <strong>val </strong><em>lst2</em>= <em>lst0 </em>++ <em>lst1</em></pre>
<pre><em><br />
&nbsp; </em>//将元素追加到lst0的后面生成一个新的集合<br />
&nbsp; <strong>val </strong><em>lst3 </em>= <em>lst0 </em>:+ 5</pre>
<pre><br />
&nbsp; //删除元素,注意：没有生成新的集合<br />
&nbsp; <strong>val </strong><em>lst4 </em>= ListBuffer[Int](1,2,3,4,5)<br />
&nbsp; <em>lst4 </em>-= 5</pre>
<pre><br />
&nbsp; //删除一个集合列表,生成了一个新的集合<br />
&nbsp; <strong>val </strong><em>lst5</em>=<em>lst4</em>--<em>List</em>(1,2)</pre>
<pre><br />
&nbsp; //把可变list 转换成不可变的list 直接加上toList<br />
&nbsp; <strong>val </strong><em>lst6</em>=<em>lst5</em>.toList</pre>
<pre><br />
&nbsp; //把可变list 转变数组用toArray<br />
&nbsp; <strong>val </strong><em>lst7</em>=<em>lst5</em>.toArray</pre>
<pre><br />
&nbsp; <em>println</em>(<em>lst0</em>)<br />
&nbsp; <em>println</em>(<em>lst1</em>)<br />
&nbsp; <em>println</em>(<em>lst2</em>)<br />
&nbsp; <em>println</em>(<em>lst3</em>)<br />
&nbsp; <em>println</em>(<em>lst4</em>)<br />
&nbsp; <em>println</em>(<em>lst5</em>)<br />
&nbsp; <em>println</em>(<em>lst6</em>)<br />
&nbsp; <em>println</em>(<em>lst7</em>)<br />
<br />
}<br /><br /></pre>
<h3>5.4.2.&nbsp;&nbsp; &nbsp;Set</h3>
<p>(1)不可变的Set&nbsp;&nbsp;&nbsp; import scala.collection.immutable._</p>
<p>Set代表一个没有重复元素的集合；将重复元素加入Set是没有用的，而且 Set 是不保证插入顺序的，即 Set 中的元素是乱序的。</p>
<p>定义：val set=Set(元素,元素,.....)</p>
<p>&nbsp;</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>//定义一个不可变的Set集合</p>
<p>scala&gt; val set =Set(1,2,3,4,5,6,7)</p>
<p>set: scala.collection.immutable.Set[Int] = Set(5, 1, 6, 2, 7, 3, 4)</p>
<p>&nbsp;</p>
<p>//元素个数</p>
<p>scala&gt; set.size</p>
<p>res0: Int = 7</p>
<p>&nbsp;</p>
<p>//取集合最小值</p>
<p>scala&gt; set.min</p>
<p>res1: Int = 1</p>
<p>&nbsp;</p>
<p>//取集合最大值</p>
<p>scala&gt; set.max</p>
<p>res2: Int = 7</p>
<p>&nbsp;</p>
<p>//将元素和set1合并生成一个新的set，原有set不变</p>
<p>scala&gt; set + 8</p>
<p>res3: scala.collection.immutable.Set[Int] = Set(5, 1, 6, 2, 7, 3, 8, 4)</p>
<p>&nbsp;</p>
<p>scala&gt; val set1=Set(7,8,9)</p>
<p>set1: scala.collection.immutable.Set[Int] = Set(7, 8, 9)</p>
<p>&nbsp;</p>
<p>//两个集合的交集</p>
<p>scala&gt; set &amp; set1</p>
<p>res4: scala.collection.immutable.Set[Int] = Set(7)</p>
<p>&nbsp;</p>
<p>//两个集合的并集</p>
<p>scala&gt; set ++ set1</p>
<p>res5: scala.collection.immutable.Set[Int] = Set(5, 1, 6, 9, 2, 7, 3, 8, 4)</p>
<p>&nbsp;</p>
<p>//在第一个set基础上去掉第二个set中存在的元素</p>
<p>scala&gt; set -- set1</p>
<p>res6: scala.collection.immutable.Set[Int] = Set(5, 1, 6, 2, 3, 4)</p>
<p>&nbsp;</p>
<p>//返回第一个不同于第二个set的元素集合</p>
<p>scala&gt; set &amp;~ set1</p>
<p>res7: scala.collection.immutable.Set[Int] = Set(5, 1, 6, 2, 3, 4)</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>//计算符合条件的元素个数</p>
<p>scala&gt; set.count(_ &gt;5)</p>
<p>res8: Int = 2</p>
<p>&nbsp;</p>
<p>/返回第一个不同于第二个的元素集合</p>
<p>scala&gt; set.diff(set1)</p>
<p>res9: scala.collection.immutable.Set[Int] = Set(5, 1, 6, 2, 3, 4)</p>
<p>&nbsp;</p>
<p>/返回第一个不同于第二个的元素集合</p>
<p>scala&gt; set1.diff(set)</p>
<p>res10: scala.collection.immutable.Set[Int] = Set(8, 9)</p>
<p>&nbsp;</p>
<p>//取子set(2,5为元素位置, 从0开始，包含头不包含尾)</p>
<p>scala&gt; set.slice(2,5)</p>
<p>res11: scala.collection.immutable.Set[Int] = Set(6, 2, 7)</p>
<p>&nbsp;</p>
<p>//迭代所有的子set，取指定的个数组合</p>
<p>scala&gt; set1.subsets(2).foreach(x=&gt;println(x))</p>
<p>Set(7, 8)</p>
<p>Set(7, 9)</p>
<p>Set(8, 9)</p>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>(2)可变的Set&nbsp; import scala.collection.mutable._</p>
<p>&nbsp;</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>//导入包</p>
<p>scala&gt; import scala.collection.mutable.HashSet</p>
<p>import scala.collection.mutable.HashSet</p>
<p>//定义一个可变的Set</p>
<p>scala&gt; val set1=new HashSet[Int]()</p>
<p>set1: scala.collection.mutable.HashSet[Int] = Set()</p>
<p>&nbsp;</p>
<p>//添加元素</p>
<p>scala&gt; set1 += 1</p>
<p>res1: set1.type = Set(1)</p>
<p>&nbsp;</p>
<p>//添加元素&nbsp; add等价于+=</p>
<p>scala&gt; set1.add(2)</p>
<p>res2: Boolean = true</p>
<p>scala&gt; set1</p>
<p>res3: scala.collection.mutable.HashSet[Int] = Set(1, 2)</p>
<p>&nbsp;</p>
<p>//向集合中添加元素集合</p>
<p>scala&gt; set1 ++=Set(1,4,5)</p>
<p>res5: set1.type = Set(1, 5, 2, 4)</p>
<p>&nbsp;</p>
<p>//删除一个元素</p>
<p>scala&gt; set1 -=5</p>
<p>res6: set1.type = Set(1, 2, 4)</p>
<p>&nbsp;</p>
<p>//删除一个元素</p>
<p>scala&gt; set1.remove(1)</p>
<p>res7: Boolean = true</p>
<p>scala&gt; set1</p>
<p>res8: scala.collection.mutable.HashSet[Int] = Set(2, 4)</p>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h3>5.4.3.&nbsp; &nbsp; Map</h3>
<p>(1)不可变的Map&nbsp;&nbsp; import scala.collection.immutable._</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>定义Map集合</p>
<p>1.val map=Map(键 -&gt; 值 , 键 -&gt; 值...)</p>
<p>2.利用元组构建&nbsp; val map=Map((键，值), (键，值) , (键，值)....)</p>
<p>展现形式：</p>
<p>val&nbsp; map = Map(&ldquo;zhangsan&rdquo;-&gt;30,&rdquo;lisi&rdquo;-&gt;40)</p>
<p>val&nbsp; map = Map((&ldquo;zhangsan&rdquo;,30),(&ldquo;lisi&rdquo;,40))</p>
<p>&nbsp;</p>
<p>3.操作map集合</p>
<p>获取值： 值=map(键)</p>
<p>原则：通过先获取键，在获取键对应值。</p>
<p>&nbsp;</p>
<p>4.遍历map集合</p>
<p>scala&gt; val imap=Map("zhangsan" -&gt; 20,"lisi" -&gt;30)</p>
<p>imap: scala.collection.immutable.Map[String,Int] = Map(zhangsan -&gt; 20, lisi -&gt; 30)</p>
<p>//方法一：显示所有的key</p>
<p>scala&gt; imap.keys</p>
<p>res0: Iterable[String] = Set(zhangsan, lisi)</p>
<p>&nbsp;</p>
<p>//方法二：显示所有的key</p>
<p>scala&gt; imap.keySet</p>
<p>res1: scala.collection.immutable.Set[String] = Set(zhangsan, lisi)</p>
<p>&nbsp;</p>
<p>//通过key获取value</p>
<p>scala&gt; imap("lisi")</p>
<p>res2: Int = 30</p>
<p>&nbsp;</p>
<p>//通过key获取value 有key对应的值则返回，没有就返回默认值0，</p>
<p>scala&gt; imap.getOrElse("zhangsan",0)</p>
<p>res4: Int = 20</p>
<p>&nbsp;</p>
<p>//没有对应的key，返回默认0</p>
<p>scala&gt; imap.getOrElse("zhangsan1",0)</p>
<p>res5: Int = 0</p>
<p>//由于是不可变map,故不能向其添加、删除、修改键值对</p>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>(2)可变的Map&nbsp; import scala.collection.mutable._</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre>//导包</pre>
<pre>import scala.collection.mutable</pre>
<pre>//声明一个可变集合</pre>
<pre>scala&gt; val user =mutable.HashMap("zhangsan"-&gt;50,"lisi" -&gt; 100)</pre>
<pre>user: scala.collection.mutable.HashMap[String,Int] = Map(lisi -&gt; 100, zhangsan -&gt; 50)</pre>
<pre>&nbsp;</pre>
<pre>//添加键值对</pre>
<pre>scala&gt; user +=("wangwu" -&gt; 30)</pre>
<pre>res0: user.type = Map(lisi -&gt; 100, zhangsan -&gt; 50, wangwu -&gt; 30)</pre>
<pre>&nbsp;</pre>
<pre>//添加多个键值对</pre>
<pre>scala&gt; user += ("zhangsan0" -&gt; 30,"lisi0" -&gt; 20)</pre>
<pre>res1: user.type = Map(zhangsan0 -&gt; 30, lisi -&gt; 100, zhangsan -&gt; 50, lisi0 -&gt; 20,wangwu -&gt; 30)</pre>
<pre>&nbsp;</pre>
<pre>//方法一：显示所有的key</pre>
<pre>scala&gt; user.keys</pre>
<pre>res2: Iterable[String] = Set(zhangsan0, lisi, zhangsan, lisi0, wangwu)</pre>
<pre>&nbsp;</pre>
<pre>//方法二：显示所有的key</pre>
<pre>scala&gt; user.keySet</pre>
<pre>res3: scala.collection.Set[String] = Set(zhangsan0, lisi, zhangsan, lisi0, wangwu)</pre>
<pre>&nbsp;</pre>
<pre>//通过key获取value</pre>
<pre>scala&gt; user("zhangsan")</pre>
<pre>res4: Int = 50</pre>
<pre>&nbsp;</pre>
<pre>//通过key获取value 有key对应的值则返回，没有就返回默认值0，</pre>
<pre>scala&gt; user.getOrElse("zhangsan",0)</pre>
<pre>res5: Int = 50</pre>
<pre>&nbsp;</pre>
<pre>//没有对应的key，返回默认0</pre>
<pre>scala&gt; user.getOrElse("zhangsan1",0)</pre>
<pre>res6: Int = 0</pre>
<pre>&nbsp;</pre>
<pre>//更新键值对</pre>
<pre>scala&gt; user("zhangsan") = 55</pre>
<pre>scala&gt; user("zhangsan")</pre>
<pre>res8: Int = 55</pre>
<pre>&nbsp;</pre>
<pre>//更新多个键值对</pre>
<pre>scala&gt; user += ("zhangsan" -&gt; 60, "lisi" -&gt; 50)</pre>
<pre>res9: user.type = Map(zhangsan0 -&gt; 30, lisi -&gt; 50, zhangsan -&gt; 60, lisi0 -&gt; 20,wangwu -&gt; 30)</pre>
<pre>&nbsp;</pre>
<pre>//删除key</pre>
<pre>scala&gt; user -=("zhangsan")</pre>
<pre>res14: user.type = Map(zhangsan0 -&gt; 30, lisi -&gt; 50, lisi0 -&gt; 20, wangwu -&gt; 30)</pre>
<pre>&nbsp;</pre>
<pre>//删除key</pre>
<pre>scala&gt;user.remove("zhangsan0")</pre>
<pre>&nbsp;</pre>
<pre>//遍历map 方法一：通过key值</pre>
<pre>scala&gt; for(x&lt;- user.keys) println(x+" -&gt; "+user(x))</pre>
<pre>lisi -&gt; 50</pre>
<pre>lisi0 -&gt; 20</pre>
<pre>wangwu -&gt; 30</pre>
<pre>&nbsp;</pre>
<pre>//遍历map 方法二：模式匹配</pre>
<pre>scala&gt; for((x,y) &lt;- user) println(x+" -&gt; "+y)</pre>
<pre>lisi -&gt; 50</pre>
<pre>lisi0 -&gt; 20</pre>
<pre>wangwu -&gt; 30</pre>
<pre>&nbsp;</pre>
<pre>//遍历map 方法三：通过foreach</pre>
<pre>scala&gt;&nbsp; user.foreach{case (x,y) =&gt; println(x+" -&gt; "+y)}</pre>
<pre>lisi -&gt; 50</pre>
<pre>lisi0 -&gt; 20</pre>
<pre>wangwu -&gt; 30</pre>
</td>
</tr>
</tbody>
</table>]]></description></item><item><title>第1节 Scala基础语法：11、映射；12、元组</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/10/11330876.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 10 Aug 2019 03:05:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/10/11330876.html</guid><description><![CDATA[<h2>5.2.&nbsp; &nbsp;映射</h2>
<p>在Scala中，把哈希表这种数据结构叫做映射。</p>
<h3>1.1.1.&nbsp;&nbsp; &nbsp;构建映射</h3>
<p>（1）构建映射格式<br />
1、val map=Map(键 -&gt; 值，键 -&gt; 值....)</p>
<p>2、利用元组构建&nbsp; val map=Map((键，值),(键，值),(键，值)....)</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190810110604852-1553086487.png" alt="" /></p>
<p>&nbsp;</p>
<h3>1.1.2.&nbsp;&nbsp;
&nbsp;获取和修改映射中的值</h3>
<p>（1）获取映射中的值：</p>
<p>值=map(键)</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190810110625734-304456615.png" alt="" /></p>
<p>好用的getOrElse</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190810110647942-726359817.png" alt="" /></p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">注意：在Scala中，有两种Map，一个是immutable包下的Map，该Map中的内容不可变；另一个是mutable包下的Map，该Map中的内容可变</span></p>
<p>例子：</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190810110703336-2116300781.png" alt="" /></p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">注意：通常我们在创建一个集合是会用val这个关键字修饰一个变量（相当于java中的final），那么就意味着该变量的引用不可变，该引用中的内容是不是可变，取决于这个引用指向的集合的类型</span></p>
<h2>5.3.&nbsp; &nbsp;元组</h2>
<p>映射是K/V对偶的集合，对偶是元组的最简单形式，元组可以装着多个不同类型的值。</p>
<h3>1.1.1.&nbsp;&nbsp; &nbsp;创建元组</h3>
<p>（1）元组是不同类型的值的聚集；对偶是最简单的元组。</p>
<p>（2）元组表示通过将不同的值用小括号括起来，即表示元组。</p>
<p>&nbsp;</p>
<p>创建元组格式：</p>
<p>val tuple=(元素,元素...)</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190810110741906-881990426.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>1.1.2.&nbsp;&nbsp; &nbsp;获取元组中的值</h3>
<p>(1) 获取元组中的值格式：</p>
<p>使用下划线加脚标 ，例如 t._1&nbsp; t._2&nbsp; t._3</p>
<p>注意：元组中的元素脚标是从1开始的</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190810110801600-1274417169.png" alt="" /></p>
<p>&nbsp;</p>
<h3>1.1.3.&nbsp;&nbsp; &nbsp;将对偶的集合转换成映射</h3>
<p>将对偶的集合转换成映射：</p>
<p>调用其toMap 方法</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190810110816477-2128157793.png" alt="" /></p>
<p>&nbsp;</p>
<h3>1.1.4.&nbsp;&nbsp; &nbsp;拉链操作</h3>
<p><strong>1.</strong><strong>使用zip</strong>命令可以将多个值绑定在一起</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190810110835368-2058681235.png" alt="" /></p>
<p><span style="color: #ff0000;">注意：如果两个数组的元素个数不一致，拉链操作后生成的数组的长度为较小的那个数组的元素个数</span></p>
<p>&nbsp;</p>
<p><strong>2.</strong><strong>如果其中一个元素的个数比较少，可以使用zipAll</strong><strong>用默认的元素填充</strong></p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190810110901153-1919234124.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 Scala基础语法：9、10、数组</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/09/11329911.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 09 Aug 2019 14:30:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/09/11329911.html</guid><description><![CDATA[<p>1. 定义数组时，没有new和有new是有区别的：&nbsp;</p>
<p>scala&gt; val arr3 = Array[Int](2)&nbsp; &nbsp; 此时，arr3中仅包含1个元素2<br />arr3: Array[Int] = Array(2)</p>
<p>scala&gt; val arr6 =<span style="color: #ff0000;">new</span> Array[Int](2)&nbsp; &nbsp;&nbsp;<span style="color: #ff0000;"><em>如果<span lang="EN-US">new，相当于调用了数组的<span lang="EN-US">apply方法，直接为数组赋值</span></span></em></span><br />arr6: Array[Int] = Array(0, 0)&nbsp; &nbsp;&nbsp; 此时，指定该数组类型为Int，则arr6中包含2个元素0,0</p>
<p>scala&gt; arr7<br />res519: Array[Nothing] = Array(null, null, null)&nbsp; &nbsp; &nbsp;此时，未指定数组类型，则其包含3个元素，均为null</p>
<p>&nbsp;</p>
<p>2. 数组转换：</p>
<p>scala&gt; val f1=(x:Int) =&gt; x%2==0　　　　　　　　f1: Int =&gt; Boolean = &lt;function1&gt;&nbsp;</p>
<p>scala&gt; arr8.filter(f1)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;res96: Array[Int] = Array(2, 4, 6, 8)&nbsp;</p>
<p>scala&gt; arr8.filter((x:Int) =&gt; x%2==0)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; res97: Array[Int] = Array(2, 4, 6, 8)&nbsp;</p>
<p>scala&gt; arr8.filter(x =&gt; x%2==0)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; res99: Array[Int] = Array(2, 4, 6, 8)</p>
<p>scala&gt; arr8.filter(_ %2==0)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; res100: Array[Int] = Array(2, 4, 6, 8)</p>
<p>&nbsp;</p>
<p>scala&gt; val f2=(x:Int) =&gt; x*10&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f2: Int =&gt; Int = &lt;function1&gt;&nbsp;</p>
<p>scala&gt; arr8.filter(_ %2==0).map(f2)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; res104: Array[Int] = Array(2, 4, 6, 8)&nbsp;&nbsp;</p>
<p>scala&gt; arr8.filter(_ %2==0).map(_ * 10)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; res106: Array[Int] = Array(20, 40, 60, 80)&nbsp;&nbsp;</p>
<p>&nbsp;</p>
<p>======================================================</p>
<h1>5.&nbsp;&nbsp; &nbsp;数组、映射、元组、集合</h1>
<h2>5.1.&nbsp; &nbsp;数组</h2>
<h3>5.1.1.&nbsp;&nbsp; &nbsp;定长数组和变长数组</h3>
<p>（1）定长数组定义格式：</p>
<p>&nbsp;val arr=new Array[T](数组长度)</p>
<p>val arr=Array(1,2,3,4,5)</p>
<p>&nbsp;</p>
<p>（2）变长数组定义格式：</p>
<p>&nbsp;valarr = ArrayBuffer[T]()</p>
<p>&nbsp;</p>
<p>注意需要导包：<strong>import </strong>scala.collection.mutable.ArrayBuffer</p>
<p>&nbsp;</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre><strong>package </strong>cn.itcast.scala<br />
  <strong>import </strong>scala.collection.mutable.ArrayBuffer<em><br />
  </em><strong>object </strong>ArrayDemo {<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
  <br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>初始化一个长度为8的定长数组，其所有元素均为0<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>arr1 = <strong>new </strong>Array[Int](8)<br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>直接打印定长数组，内容为数组的hashcode值<br />
&nbsp;&nbsp;&nbsp; </em><em>println</em>(arr1)<br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>将数组转换成数组缓冲，就可以看到原数组中的内容了<br />
&nbsp;&nbsp;&nbsp; //toBuffer会将数组转换长数组缓冲<br />
&nbsp;&nbsp;&nbsp; </em><em>println</em>(arr1.toBuffer)<br />
  <br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>注意：如果new，相当于调用了数组的apply方法，直接为数组赋值<br />
&nbsp;&nbsp;&nbsp; //初始化一个长度为1的定长数组<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>arr2 = <em>Array</em>[Int](10)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(arr2.toBuffer)<br />
  <br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>定义一个长度为3的定长数组<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>arr3 = <em>Array</em>(<strong>"hadoop"</strong>, <strong>"storm"</strong>, <strong>"spark"</strong>)<br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>使用()来访问元素<br />
&nbsp;&nbsp;&nbsp; </em><em>println</em>(arr3(2))<br />
  <em><br />
&nbsp;&nbsp;&nbsp; //</em><em>变长数组（数组缓冲）<br />
&nbsp;&nbsp;&nbsp; //如果想使用数组缓冲，需要导入import scala.collection.mutable.ArrayBuffer包<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>ab = ArrayBuffer[Int]()<br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>向数组缓冲的尾部追加一个元素<br />
&nbsp;&nbsp;&nbsp; //+=尾部追加元素<br />
&nbsp;&nbsp;&nbsp; </em>ab += 1<br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>追加多个元素<br />
&nbsp;&nbsp;&nbsp; </em>ab += (2, 3, 4, 5)<br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>追加一个数组++=<br />
&nbsp;&nbsp;&nbsp; </em>ab ++= <em>Array</em>(6, 7)<br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>追加一个数组缓冲<br />
&nbsp;&nbsp;&nbsp; </em>ab ++= ArrayBuffer(8,9)<br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>打印数组缓冲ab<br />
  <br />
&nbsp;&nbsp;&nbsp; //在数组某个位置插入元素用insert，从某下标插入<br />
&nbsp;&nbsp;&nbsp; </em>ab.insert(0, -1, 0)<br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>删除数组某个位置的元素用remove&nbsp; 按照下标删除<br />
&nbsp;&nbsp;&nbsp; </em>ab.remove(0)</pre>
<pre>ab -=3</pre>
<pre>ab --=Array(1,2)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(ab)<br />
  <br />
&nbsp; }<br />
}</pre>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<h3>5.1.2.&nbsp;&nbsp; &nbsp;遍历数组</h3>
<p>1.增强for循环</p>
<p>2.好用的until会生成脚标，0 until 10 包含0不包含10</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190810090704064-2120129445.png" alt="" /></p>
<p>&nbsp;</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre><strong>package </strong>cn.itcast.scala<em><br />
  </em><strong>object </strong>ForArrayDemo {<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>初始化一个数组<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>arr = <em>Array</em>(1,2,3,4,5,6,7,8)<br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>增强for循环<br />
&nbsp;&nbsp;&nbsp; </em><strong>for</strong>(i &lt;- arr)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>println</em>(i)<br />
  <br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>好用的until会生成一个Range<br />
&nbsp;&nbsp;&nbsp; //reverse是将前面生成的Range反转<br />
&nbsp;&nbsp;&nbsp; </em><strong>for</strong>(i &lt;- (0 until arr.length).reverse)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>println</em>(arr(i))<br />
&nbsp; }<br />
}</pre>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<p><strong>&nbsp;</strong></p>
<h3>5.1.3.&nbsp;&nbsp; &nbsp;数组转换</h3>
<p>yield关键字将原始的数组进行转换会产生一个新的数组，原始的数组不变</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190810090722580-1584828350.png" alt="" /></p>
<p>&nbsp;</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre><strong>package </strong>cn.itcast.scala<br />
  <em><br />
  </em><strong>object </strong>ArrayYieldDemo {<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>定义一个数组<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>arr = <em>Array</em>(1, 2, 3, 4, 5, 6, 7, 8, 9)<br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>将偶数取出乘以10后再生成一个新的数组<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>res = <strong>for </strong>(e &lt;- arr <strong>if </strong>e % 2 == 0) <strong>yield </strong>e * 10<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(res.toBuffer)<br />
  <br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>更高级的写法,用着更爽<br />
&nbsp;&nbsp;&nbsp; //filter是过滤，接收一个返回值为boolean的函数<br />
&nbsp;&nbsp;&nbsp; //map相当于将数组中的每一个元素取出来，应用传进去的函数<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>r = arr.filter(_ % 2 == 0).map(_ * 10)</pre>
<pre><br />
&nbsp;&nbsp;&nbsp; <em>println</em>(r.toBuffer)<br />
  <br />
&nbsp; }<br />
}</pre>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<h3>5.1.4.&nbsp;&nbsp; &nbsp;数组常用算法</h3>
<p>在Scala中，数组上的某些方法对数组进行相应的操作非常方便！</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190810090741573-1639211665.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 Scala基础语法：5、6、7、8、基础-申明变量和常用类型，表达式，循环，定义方法和函数</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/08/11324532.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 08 Aug 2019 15:31:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/08/11324532.html</guid><description><![CDATA[<h1>4.&nbsp;&nbsp; &nbsp;Scala基础</h1>
<h2>4.1.&nbsp; &nbsp;声明变量</h2>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre><strong>package </strong>cn.itcast.scala<em><br />
  </em><strong>object </strong>VariableDemo {<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; <em>//使用val定义的变量值是不可变的，相当于java里用final修饰的变量<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>i = 1<br />
&nbsp;&nbsp;&nbsp; <em>//使用var定义的变量是可变得，在Scala中鼓励使用val<br />
&nbsp;&nbsp;&nbsp; </em><strong>var </strong>s = <strong>"hello"<br />
&nbsp;&nbsp;&nbsp; </strong><em>//Scala编译器会自动推断变量的类型，必要的时候可以指定类型</em></pre>
<pre><em>&nbsp;&nbsp;&nbsp; //变量名在前，类型在后<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>str: String = <strong>"itcast"<br />
&nbsp; </strong>}<br />
}</pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h2>4.2.&nbsp; &nbsp;常用类型</h2>
<p>Scala和Java一样，有7种数值类型Byte、Char、Short、Int、Long、Float、Double类型和1个Boolean类型。</p>
<h2>4.3.&nbsp; &nbsp;条件表达式</h2>
<p>Scala的条件表达式比较简洁，定义变量时加上if else判断条件。例如：</p>
<p>&nbsp;</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre><strong>package </strong>cn.itcast.scala<br />
  <em><br />
  </em><strong>object </strong>ConditionDemo {<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>x = 1<br />
&nbsp;&nbsp;&nbsp; <em>//判断x的值，将结果赋给y<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>y = <strong>if </strong>(x &gt; 0) 1 <strong>else </strong>-1<br />
&nbsp;&nbsp;&nbsp; <em>//打印y的值<br />
&nbsp;&nbsp;&nbsp; println</em>(y)<br />
  <br />
&nbsp;&nbsp;&nbsp; <em>//支持混合类型表达式<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>z = <strong>if </strong>(x &gt; 1) 1 <strong>else "error"<br />
&nbsp;&nbsp;&nbsp; </strong><em>//打印z的值<br />
&nbsp;&nbsp;&nbsp; println</em>(z)<br />
  <br />
&nbsp;&nbsp;&nbsp; <em>//如果缺失else，相当于if (x &gt; 2) 1 else ()<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>m = <strong>if </strong>(x &gt; 2) 1<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(m)<br />
  <br />
&nbsp;&nbsp;&nbsp; <em>//在scala中每个表达式都有值，scala中有个Unit类，用作不返回任何结果的方法的结果类型,相当于Java中的void，Unit只有一个实例值，写成()。<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>n = <strong>if </strong>(x &gt; 2) 1 <strong>else </strong>()<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(n)<br />
  <br />
&nbsp;&nbsp;&nbsp; <em>//if和else if<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>k = <strong>if </strong>(x &lt; 0) 0<br />
&nbsp;&nbsp;&nbsp; <strong>else if </strong>(x &gt;= 1) 1 <strong>else </strong>-1<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(k)<br />
&nbsp; }<br />
}</pre>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>4.4.&nbsp; &nbsp;块表达式</h2>
<p>定义变量时用 {} 包含一系列表达式，其中块的最后一个表达式的值就是块的值。</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre><strong>package </strong>cn.itcast.scala<br />
  <em><br />
  </em><strong>object </strong>BlockExpressionDemo {<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; <strong>val </strong>a = 10</pre>
<pre><strong>val </strong>b = 20<br />
&nbsp;&nbsp;&nbsp; <em>//在scala中{}中包含一系列表达式，块中最后一个表达式的值就是块的值<br />
&nbsp;&nbsp;&nbsp; //下面就是一个块表达式<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>result = {</pre>
<pre><strong>val</strong> c=b-a<br />
  <strong>val</strong> d=b-c</pre>
<pre>d&nbsp;&nbsp; //块中最后一个表达式的值</pre>
<pre>}<br />
&nbsp;<em>//result的值就是块表达式的结果<br />
&nbsp; println</em>(result)</pre>
<pre>}<br />
}</pre>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<h2>4.5.&nbsp; &nbsp;循环</h2>
<p>在scala中有for循环和while循环，用for循环比较多</p>
<pre>for循环语法结构：<strong>for </strong>(i &lt;- 表达式/数组/集合)</pre>
<pre>while循环语法结构：<strong>while </strong>(返回值类型是boolean)</pre>
<pre>&nbsp;</pre>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre><strong>package </strong>cn.itcast.scala<em><br />
  </em><strong>object </strong>ForDemo {<br />
&nbsp; <strong>def </strong>main(args: Array[String]) {<br />
&nbsp;&nbsp;&nbsp; <em>//for(i &lt;- 表达式),表达式1 to 10返回一个Range（区间）</em></pre>
<pre><em>&nbsp;&nbsp;&nbsp; //每次循环将区间中的一个值赋给i<br />
&nbsp;&nbsp;&nbsp; </em><strong>for </strong>(i &lt;- 1 to 10)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>println</em>(i)<br />
  <br />
&nbsp;&nbsp;&nbsp; <em>//for(i &lt;- 数组)<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>arr = <em>Array</em>(<strong>"a"</strong>, <strong>"b"</strong>, <strong>"c"</strong>)<br />
&nbsp;&nbsp;&nbsp; <strong>for </strong>(i &lt;- arr)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>println</em>(i)<br />
  <br />
&nbsp;&nbsp;&nbsp; <em>//高级for循环<br />
&nbsp;&nbsp;&nbsp; //每个生成器都可以带一个条件，注意：if前面没有分号<br />
&nbsp;&nbsp;&nbsp; </em><strong>for</strong>(i &lt;- 1 to 3; j &lt;- 1 to 3 <strong>if </strong>i != j)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>print</em>((10 * i + j) + <strong>" "</strong>)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>()<br />
  <br />
&nbsp;&nbsp;&nbsp; <em>//for推导式：如果for循环的循环体以yield开始，则该循环会构建出一个集合</em></pre>
<pre><em>&nbsp;&nbsp;&nbsp; //每次迭代生成集合中的一个值<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>v = <strong>for </strong>(i &lt;- 1 to 10) <strong>yield </strong>i * 10<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(v)<br />
  <br />
&nbsp; }<br />
  <br />
}</pre>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h2>4.6.&nbsp; &nbsp;调用方法和函数</h2>
<p>Scala中的+ - * / %等操作符的作用与Java一样，位操作符 &amp; | ^ &gt;&gt; &lt;&lt;也一样。只是有一点特别的：这些操作符实际上是方法。例如：</p>
<p>a + b</p>
<p>是如下方法调用的简写：</p>
<p>a.+(b)</p>
<p>a 方法 b可以写成 a.方法(b)</p>
<h2>4.7.&nbsp; 定义方法和函数</h2>
<h3>1.7.1.&nbsp;&nbsp; &nbsp;定义方法</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190809214614218-1750083847.png" alt="" /></p>
<p>&nbsp;</p>
<p>方法的返回值类型可以不写，编译器可以自动推断出来，<span style="color: #ff0000;">但是对于递归函数，必须指定返回类型</span></p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190809214604062-1020696330.png" alt="" /></p>
<p>&nbsp;</p>
<h3>1.7.2.&nbsp;&nbsp; &nbsp;定义函数</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190809214533054-1823750437.png" alt="" /></p>
<h3>1.7.3.&nbsp;&nbsp; &nbsp;方法和函数的区别</h3>
<p>在函数式编程语言中，函数是&ldquo;头等公民&rdquo;，它可以像任何其他数据类型一样被传递和操作，函数是一个对象，继承自FuctionN。</p>
<p>函数对象有apply、curried、toString、tupled这些方法。而方法不具有这些特性。</p>
<p>如果想把方法转换成一个函数，可以用方法名跟上下划线的方式。</p>
<p><strong>&nbsp;</strong></p>
<p>案例：首先定义一个方法，再定义一个函数，然后将函数传递到方法里面</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190809214509098-1873988366.png" alt="" /></p>
<p>&nbsp;</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<pre><strong>package </strong>cn.itcast.scala<br />
  <em><br />
  </em><strong>object </strong>MethodAndFunctionDemo {<br />
&nbsp; <em>//</em><em>定义一个方法<br />
&nbsp; //方法m2参数要求是一个函数，函数的参数必须是两个Int类型</em></pre>
<pre><em>&nbsp; //</em><em>返回值类型也是Int类型<br />
&nbsp; </em><strong>def </strong>m1(f: (Int, Int) =&gt; Int) : Int = {<br />
&nbsp;&nbsp;&nbsp; f(2, 6)<br />
&nbsp; }<br />
  <br />
&nbsp; <em>//</em><em>定义一个函数f1，参数是两个Int类型，返回值是一个Int类型<br />
&nbsp; </em><strong>val </strong><em>f1 </em>= (x: Int, y: Int) =&gt; x + y<br />
&nbsp; <em>//</em><em>再定义一个函数f2<br />
&nbsp; </em><strong>val </strong><em>f2 </em>= (m: Int, n: Int) =&gt; m * n<br />
  <br />
&nbsp; <em>//main</em><em>方法<br />
&nbsp; </em><strong>def </strong>main(args: Array[String]) {<br />
  <br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>调用m1方法，并传入f1函数<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>r1 = <em>m1</em>(<em>f1</em>)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(r1)<br />
  <br />
&nbsp;&nbsp;&nbsp; <em>//</em><em>调用m1方法，并传入f2函数<br />
&nbsp;&nbsp;&nbsp; </em><strong>val </strong>r2 = <em>m1</em>(<em>f2</em>)<br />
&nbsp;&nbsp;&nbsp; <em>println</em>(r2)<br />
&nbsp; }<br />
}</pre>
<pre>&nbsp;</pre>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h3>1.7.4.&nbsp;&nbsp; &nbsp;将方法转换成函数（神奇的下划线）</h3>
<p>将方法转换成函数，只需要在方法的后面加上一个下划线</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190809214423916-2018719032.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 Scala基础语法：3、环境；4、插件</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/08/11324526.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 08 Aug 2019 15:30:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/08/11324526.html</guid><description><![CDATA[<h1>1.&nbsp;&nbsp; &nbsp;Scala编译器安装</h1>
<h2>1.1.&nbsp; &nbsp;安装JDK</h2>
<p><span style="color: #ff0000;">因为Scala是运行在JVM平台上的，所以安装Scala之前要安装JDK。</span></p>
<h2>1.2.&nbsp; &nbsp;安装Scala</h2>
<h3>1.2.1.&nbsp;&nbsp; &nbsp;Windows安装Scala编译器</h3>
<p>访问Scala官网http://www.scala-lang.org/下载Scala编译器安装包，目前最新版本是2.12.x，这里下载scala-2.11.8.msi后点击下一步就可以了（自动配置上环境变量）。也可以下载<a href="https://downloads.lightbend.com/scala/2.11.8/scala-2.11.8.zip">scala-2.11.8.zip</a>，解压后配置上环境变量就可以了。</p>
<h3>1.2.2.&nbsp;&nbsp; &nbsp;Linux安装Scala编译器</h3>
<p>下载Scala地址<span style="color: #ff0000;">https://www.scala-lang.org/download/2.11.8.html</span></p>
<p>然后解压Scala到指定目录</p>
<p><span style="color: #ff0000;">tar -zxvf scala-2.11.8.tgz -C /usr/java</span></p>
<p>配置环境变量，将scala加入到PATH中</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>vi /etc/profile</p>
<p>export JAVA_HOME=/usr/java/jdk1.8</p>
<p>export PATH=$PATH:$JAVA_HOME/bin:/usr/java/scala-2.11.8/bin</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h3>1.2.3.&nbsp;&nbsp; &nbsp;Scala开发工具安装</h3>
<p>目前Scala的开发工具主要有两种：Eclipse和IDEA，这两个开发工具都有相应的Scala插件，如果使用Eclipse，直接到Scala官网下载即可http://scala-ide.org/download/sdk.html。</p>
<p>由于IDEA的Scala插件更优秀，大多数Scala程序员都选择IDEA，可以到http://www.jetbrains.com/idea/download/下载，点击下一步安装即可，安装时如果有网络可以选择在线安装Scala插件。</p>
<p>这里我们使用<span style="color: #ff0000;">离线安装</span>Scala插件：</p>
<p>1.安装IDEA，点击下一步即可。</p>
<p>2.下载IEDA的scala插件</p>
<p>插件地址： https://plugins.jetbrains.com/plugin/1347-scala</p>
<p>3.安装Scala插件：<span style="color: #ff0000;">Configure -&gt; Plugins -&gt; Install plugin from disk -&gt; 选择Scala插件 -&gt; OK -&gt; 重启IDEA</span></p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190808232805259-1596592221.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190808232910566-1443627356.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190808232920629-528085559.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190808232934192-1795642177.png" alt="" /></p>
<p>&nbsp;</p>
<p>也可以在打开某个project的情况下，安装插件：</p>
<p>1.点击File --- Settings，或直接按快捷键Ctrl+Alt+S，打开设置窗口：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190822212629866-1678887670.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 Scala基础语法：1、2、概述，什么是scala</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/08/11323833.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 08 Aug 2019 13:04:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/08/11323833.html</guid><description><![CDATA[<p>Scala编程</p>
<h1>1.&nbsp;&nbsp; &nbsp;课程目标</h1>
<h2>1.1.&nbsp; 目标1：熟练使用scala编写Spark程序</h2>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190808232135597-2046832614.png" alt="" /></p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190808232242499-1038334948.png" alt="" /></p>
<p>&nbsp;</p>
<h2>1.2.&nbsp; 目标2：动手编写一个简易版的Spark通信框架</h2>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190808232302699-1285831088.png" alt="" /></p>
<p>&nbsp;</p>
<h2>1.3.&nbsp; 目标3：为阅读Spark内核源码做准备</h2>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190808232402710-1702666645.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>2.&nbsp;&nbsp; &nbsp;Scala概述</h1>
<h2>2.1.&nbsp; &nbsp;什么是Scala</h2>
<p>Scala是一种多范式的编程语言，其设计的初衷是要集成面向对象编程和函数式编程的各种特性。Scala运行于Java平台（Java虚拟机），并兼容现有的Java程序。http://www.scala-lang.org</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190808232430030-382462865.png" alt="" /></p>
<p>&nbsp;</p>
<h2>2.2.&nbsp; &nbsp;为什么要学Scala</h2>
<p>1、<span style="color: #ff0000;">优雅</span>：这是框架设计师第一个要考虑的问题，框架的用户是应用开发程序员，API是否优雅直接影响用户体验。</p>
<p>2、<span style="color: #ff0000;">速度快</span>：Scala语言表达能力强，一行代码抵得上Java多行，开发速度快；Scala是静态编译的，所以和JRuby,Groovy比起来速度会快很多。</p>
<p>3、<span style="color: #ff0000;">能融合到Hadoop生态圈</span>：Hadoop现在是大数据事实标准，Spark并不是要取代Hadoop，而是要完善Hadoop生态。JVM语言大部分可能会想到Java，但Java做出来的API太丑，或者想实现一个优雅的API太费劲。&nbsp;</p>
<p align="center"><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190808232510906-1821099972.png" alt="" /></p>
<p>&nbsp;</p>
<p align="center">&nbsp;</p>]]></description></item><item><title>删除hdfs上的内容报错：rm: Cannot delete /wxcm/ Name node is in safe mode.</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/08/11323463.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 08 Aug 2019 12:01:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/08/11323463.html</guid><description><![CDATA[<p>问题：在执行删除hdfs上的内容时（hdfs dfs -rm -f -r -skipTrash /wxcm）报错：<span style="color: #ff0000;">rm: Cannot delete /wxcm/ Name node is in safe mode.</span></p>
<p>原因：这是因为在分布式文件系统启动的时候，开始的时候会有安全模式，当分布式文件系统处于安全模式的情况下，文件系统中的内容不允许修改也不允许删除，直到安全模式结束。安全模式主要是为了系统启动的时候检查各个DataNode上数据块的有效性，同时根据策略必要的复制或者删除部分数据块。运行期通过命令也可以进入安全模式。在实践过程中，系统启动的时候去修改和删除文件也会有安全模式不允许修改的出错提示，只需要等待一会儿即可。</p>
<p>&nbsp;</p>
<p>解决方法：</p>
<p>（1）只需要等待一会儿即可；</p>
<p>（2）可以通过以下命令来手动离开安全模式：hdfs dfsadmin -safemode leave</p>
<p>&nbsp;</p>
<p>用户可以通过hdfs dfsadmin -safemode value 来操作安全模式，参数value的说明如下：<br />hdfs dfsadmin -safemode enter - 进入安全模式<br />hdfs dfsadmin -safemode&nbsp;leave - 强制NameNode离开安全模式<br />hdfs dfsadmin -safemode&nbsp;get - 返回安全模式是否开启的信息<br />hdfs dfsadmin -safemode&nbsp;wait - 等待，一直到安全模式结束。</p>
<p>&nbsp;</p>
<p>但是这次即使执行了hdfs dfsadmin -safemode leave也无法退出安全模式。</p>
<p>运行df -lh 发现三个节点的磁盘几乎都满了，于是清理不必要的文件释放磁盘空间。再次运行hdfs dfsadmin -safemode leave</p>
<p>成功退出。</p>
<p>&nbsp;</p>
<p>然后可以成功的执行hdfs的删除操作了：hdfs dfs -rm -f -r -skipTrash /wxcm。</p>
<p>&nbsp;</p>
<p>但是，删除hdfs上的目录/wxcm，并清空垃圾桶（hdfs dfs -expunge） 之后，检查vmwareMachines文件夹，就是存放虚拟机的文件夹，发现占用的空间还是没有减少。</p>
<p>原来vmware的虚拟机磁盘只会越来越大，而不会随着文件的删除而自动减少。需要手动压缩磁盘。具体是右击某个虚拟机，选择&ldquo;设置&rdquo;，选中硬盘，到右侧找到&ldquo;压缩&rdquo;，点击压缩按钮，还可以点击&ldquo;碎片整理&rdquo;。不过这个方法效果一般。vmware的虚拟机的物理磁盘文件增大后，没法减小，不过打开虚拟机后，里面显示的已使用磁盘空间确实减少了。</p>
<p>&nbsp;</p>]]></description></item><item><title>notepad++一次去掉所有空行，然后加上2个空行</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/07/11313336.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 07 Aug 2019 01:49:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/07/11313336.html</guid><description><![CDATA[<p>打开替换窗口，查找我的目标中填写： ^\r\n</p>
<p>替换为中不填，空着，</p>
<p>点击全部替换按钮。</p>
<p>&nbsp;</p>
<p>如何给所有行添加2行空行：</p>
<p>打开替换窗口，查找目标中填写： \r\n</p>
<p>替换为中填写： \r\n\r\n\r\n</p>
<p>点击全部替换。</p>
<p>&nbsp;</p>]]></description></item><item><title>（未解决）flume监控目录，抓取文件内容推送给kafka，报错</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/06/11312529.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 06 Aug 2019 15:25:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/06/11312529.html</guid><description><![CDATA[<p>flume监控目录，抓取文件内容推送给kafka，报错：</p>
<p><span style="color: #ff0000;">/export/datas/destFile/220104_YT1013_8c5f13f33c299316c6720cc51f94f7a0_2016101912_318.txt</span><br /><span style="color: #ff0000;">2019-08-06 23:04:31,434 (pool-3-thread-1) [ERROR - org.apache.flume.source.SpoolDirectorySource$SpoolDirectoryRunnable.run(SpoolDirectorySource.java:280)] FATAL: Spool Directory source r1: { spoolDir: /export/datas/destFile }: Uncaught exception in SpoolDirectorySource thread. Restart or reconfigure Flume to continue processing.</span><br /><span style="color: #ff0000;">java.nio.charset.MalformedInputException: Input length = 1</span><br />	at java.nio.charset.CoderResult.throwException(CoderResult.java:281)<br />	at org.apache.flume.serialization.ResettableFileInputStream.readChar(ResettableFileInputStream.java:283)<br />	at org.apache.flume.serialization.LineDeserializer.readLine(LineDeserializer.java:132)<br />	at org.apache.flume.serialization.LineDeserializer.readEvent(LineDeserializer.java:70)<br />	at org.apache.flume.serialization.LineDeserializer.readEvents(LineDeserializer.java:89)<br />	at org.apache.flume.client.avro.ReliableSpoolingFileEventReader.readDeserializerEvents(ReliableSpoolingFileEventReader.java:343)<br />	at org.apache.flume.client.avro.ReliableSpoolingFileEventReader.readEvents(ReliableSpoolingFileEventReader.java:331)<br />	at org.apache.flume.source.SpoolDirectorySource$SpoolDirectoryRunnable.run(SpoolDirectorySource.java:250)<br />	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)<br />	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)<br />	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)<br />	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)<br />	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)<br />	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)<br />	at java.lang.Thread.run(Thread.java:748)</p>
<p>&nbsp;</p>
<p>正常处理完文件后，应该删除该文件，应该提示这个信息：<span style="color: #ff0000;">2019-08-06 23:04:31,412 (pool-3-thread-1) [INFO - org.apache.flume.client.avro.ReliableSpoolingFileEventReader.deleteCurrentFile(ReliableSpoolingFileEventReader.java:492)] Preparing to delete file&nbsp;</span></p>
<p>&nbsp;</p>
<p>问题原因：文件的字符集编码是UTF-8，要手动设置一下字符集编码。</p>
<p>解决方案：a1.sources.r1.inputCharset = UTF-8&nbsp; //将server.properties配置文件中的 inputCharset&nbsp;设置为&nbsp;UTF-8</p>
<p>还是没用，未解决。</p>
<p>&nbsp;</p>
<p>&nbsp;貌似修复了程序的bug，这个问题就没再发生了，不过又有新的问题出现了：</p>
<p><span style="color: #ff0000;">2019-08-07 01:41:45,377 (pool-3-thread-1) [ERROR - org.apache.flume.source.SpoolDirectorySource$SpoolDirectoryRunnable.run(SpoolDirectorySource.java:280)] FATAL: Spool Directory source r1: { spoolDir: /export/datas/destFile }: Uncaught exception in SpoolDirectorySource thread. Restart or reconfigure Flume to continue processing.</span><br /><span style="color: #ff0000;">java.lang.IllegalStateException: File has been modified since being read: /export/datas/destFile/220605_YT1013_ba701bb6bf74afb2f14a92de320bc023_2016101808_113.txt</span><br /><span style="color: #ff0000;">	at org.apache.flume.client.avro.ReliableSpoolingFileEventReader.retireCurrentFile(ReliableSpoolingFileEventReader.java:406)</span><br /><span style="color: #ff0000;">	at org.apache.flume.client.avro.ReliableSpoolingFileEventReader.readEvents(ReliableSpoolingFileEventReader.java:326)</span><br /><span style="color: #ff0000;">	at org.apache.flume.source.SpoolDirectorySource$SpoolDirectoryRunnable.run(SpoolDirectorySource.java:250)</span><br /><span style="color: #ff0000;">	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)</span><br /><span style="color: #ff0000;">	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)</span><br /><span style="color: #ff0000;">	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)</span><br /><span style="color: #ff0000;">	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)</span><br /><span style="color: #ff0000;">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br /><span style="color: #ff0000;">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br /><span style="color: #ff0000;">	at java.lang.Thread.run(Thread.java:748)</span><br /><span style="color: #ff0000;">^C2019-08-07 01:42:11,310 (agent-shutdown-hook) [INFO - org.apache.flume.lifecycle.LifecycleSupervisor.stop(LifecycleSupervisor.java:78)] Stopping lifecycle supervisor 10</span><br /><span style="color: #ff0000;">2019-08-07 01:42:11,320 (agent-shutdown-hook) [INFO - org.apache.flume.instrumentation.MonitoredCounterGroup.stop(MonitoredCounterGroup.java:149)] Component type: CHANNEL, name: c1 stopped</span></p>
<p>&nbsp;</p>]]></description></item><item><title>kafka在zookeeper默认使用/为根目录，将/更换为/kafka</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/06/11311998.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 06 Aug 2019 13:33:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/06/11311998.html</guid><description><![CDATA[<p>需求：kafka在zookeeper默认使用/为根目录，将/更换为/kafka</p>
<p>&nbsp;</p>
<p>步骤：<br />1、进入kafka的根目录： [root@node01 kafka_2.11-1.0.0]# cd /export/servers/kafka_2.11-1.0.0/</p>
<p>2、3个节点都要：参照图1，编辑server.properties</p>
<p>3、3个节点都要：进行图2的设置。保存。</p>
<p>4、然后关闭kafka，再关闭zookeeper（可能不一定要关zk，我没试过不关行不行），然后在启动zk，再启动kafka。</p>
<p>5、参照图3，创建topic：kafka-topics.sh --create --partitions 3 --replication-factor 2 --topic kafka1 --zookeeper node01:2181,node02:2181,node03:2181/kafka<br />6、参照图4，启动生产者：kafka-console-producer.sh --broker-list node01:9092,node02:9092,node03:9092 --topic kafka1<br />7、参照图5，启动消费者：kafka-console-consumer.sh --from-beginning --topic kafka1 --zookeeper node01:2181,node02:2181,node03:2181/kafka</p>
<p>8、参照图4、图5，生产一些数据，并查看消费者是否能消费到该数据。</p>
<p>9、参照图6，启动zk客户端，zkCli.sh， 验证kafka在zk上的根目录是否存在。</p>
<p>&nbsp;</p>
<p>注意：当kafka在zk中的根目录变为/kafka后，kafka-topics.sh 和&nbsp;kafka-console-consumer.sh 的 --zookeeper参数的要写成 node01:2181,node02:2181,node03:2181<span style="color: #ff0000;">/kafka</span></p>
<p>　　而&nbsp;kafka-console-producer.sh 的 --broker-list 参数 仍然是 node01:9092,node02:9092,node03:9092</p>
<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190806213210363-1782928748.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 storm路由器项目开发：8 - 9、集群监控软件ganglia的安装和使用</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/04/11300362.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 04 Aug 2019 14:55:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/04/11300362.html</guid><description><![CDATA[<h1 align="center">Ganglia监控Hadoop集群的安装部署</h1>
<p><strong>详情请参见</strong><strong> http://boendev.iteye.com/blog/1750615</strong></p>
<h2>一、 安装环境</h2>
<ul>
<li>CentOS6.5x86_64</li>
<li>安装gmetad的机器：10.2.6.250 (服务端)</li>
<li>安装gmond的机器：10.2.6.250，10.2.6.246，10.2.6.248，10.2.6.249</li>
<li>浏览监控web页面的机器：10.2.6.250</li>
<li>Ganglia 监控套件包括三个主要部分 gmond ，gmetad，和网页接口，通常被称为ganglia-web。<br />
gmond 是一个守护进程，他运行在每一个需要监测的节点上，收集监测统计，发送和接受在同一个组播或单播通道上的统计信息。</li>
<li>gmetad 也是一个守护进程，他定期检查gmonds ，从那里拉取数据，并将他们的指标存储在RRD存储引擎中。它可以查询多个集群并聚合指标。RRD也被用于生成用户界面的web前端。</li>
<li>ganglia-web 顾名思义，他应该安装在有gmetad运行的机器上，以便读取RRD文件。</li>

</ul>
<h2>二、 介绍 </h2>
<p>&nbsp;&nbsp;&nbsp; 一般来说一个集群的每台机器上都需要安装gmond，只要负责展示web界面的机器安装了gmetad即可。</p>
<p>&nbsp;</p>
<h3>1.ganglia规划</h3>
<p>&nbsp;</p>
<p>&nbsp;&nbsp; <strong>&nbsp;</strong><strong>主机名</strong>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <strong>ip
</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>&nbsp;</strong><strong>规划</strong>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装</p>
<p>&nbsp;&nbsp; hadoop1&nbsp;
 10.2.6.250  &nbsp;&nbsp;&nbsp;服务端&nbsp; &nbsp;ganglia-gmond、ganglia-gmetad、ganglia-web</p>
<p>&nbsp;&nbsp; hadoop2 &nbsp; 10.2.6.246
 &nbsp;&nbsp;&nbsp;客户端&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ganglia-gmond</p>
<p>&nbsp;&nbsp; hadoop3 &nbsp; 10.2.6.248
 &nbsp;&nbsp;&nbsp;客户端&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ganglia-gmond</p>
<p>&nbsp;&nbsp; hadoop4&nbsp;
&nbsp;10.2.6.249  &nbsp;&nbsp;&nbsp;客户端&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ganglia-gmond</p>
<p>&nbsp;</p>
<p>安装前确保iptables关闭.</p>
<p>&nbsp;</p>
<h3>2.安装前的准备工作</h3>
<p>2.1加载yum源，在每一台机器上面执行下面两个命令</p>
<p>rpm -Uvh <a href="http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm">http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm</a></p>
<p>yum &nbsp;-y &nbsp;install &nbsp;httpd-devel &nbsp;automake &nbsp;autoconf &nbsp;libtool &nbsp;ncurses-devel &nbsp;libxslt &nbsp;groff &nbsp;pcre-devel &nbsp;pkgconfig</p>
<p>&nbsp;</p>
<h3>3.主节点服务安装配置</h3>
<h4>3.1主节点的服务安装（hadoop1上面的安装配置）安装ganglia-gmetad&nbsp;和&nbsp;ganglia-web</h4>
<div><ol>
<li>#yum&nbsp;search&nbsp;ganglia&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;------------------查看ganglia在epel的安装包,复制进行安装&nbsp;&nbsp;</li>
<li>#yum&nbsp;-y&nbsp;install&nbsp;ganglia-web.x86_64&nbsp;ganglia-gmond.x86_64&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>#yum&nbsp;-y&nbsp;install&nbsp;ganglia-gmetad.x86_64&nbsp;----------------------(如果上一步执行了这步不用执行,web包会自动下载该依赖)&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>#rpm&nbsp;-qa&nbsp;|grep&nbsp;ganglia&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--------------------查看安装情况&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>#&nbsp;rpm&nbsp;-ql&nbsp;ganglia-gmetad.x86_64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-------------&nbsp;复制上面命令执行结果的安装名,可查看安装路径&nbsp;&nbsp;</li>

</ol>















</div>
<p><strong>&nbsp;</strong></p>
<h5>3.1.1配置gmetad&nbsp;</h5>
<p align="left"><strong>Shell</strong><strong>代码</strong><strong>&nbsp;</strong><strong>&nbsp;</strong></p>
<div><ol>
<li>#&nbsp;vi&nbsp;/etc/ganglia/gmetad.conf&nbsp;&nbsp;</li>
<li>data_source
"my cluster" 10.2.6.250:8649&nbsp;&nbsp;----&nbsp;Hadoop为cluster名称,后面是需要监控的主机名&nbsp;&nbsp;</li>

</ol>



</div>
<p align="left">&nbsp;</p>
<h5>3.1.2修改apache设置</h5>
<p align="left"><strong>Shell</strong><strong>代码</strong><strong>&nbsp;</strong><strong>&nbsp;</strong></p>
<div><ol>
<li>#&nbsp;vi&nbsp;/etc/httpd/conf.d/ganglia.conf&nbsp;&nbsp;</li>
<li>文件内容Deny&nbsp;from&nbsp;all&nbsp;为&nbsp;allow&nbsp;from&nbsp;all&nbsp;</li>
<li>修改后配置如下</li>
<li>&lt;Location
/ganglia&gt;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;Order deny,allow</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;Allow from all</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;Allow from 127.0.0.1</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;Allow from ::1</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;# Allow from .example.com</li>
<li>&nbsp;&nbsp;&lt;/Location&gt;</li>

</ol>



















</div>
<p>&nbsp;</p>
<h5>3.1.3设置启动&nbsp;</h5>
<p align="left"><strong>Shell</strong><strong>代码</strong><strong>&nbsp;</strong><strong>&nbsp;</strong></p>
<div><ol>
<li>#&nbsp;chkconfig&nbsp;--add&nbsp;gmetad&nbsp;&nbsp;</li>
<li>#&nbsp;chkconfig&nbsp;--add&nbsp;gmond&nbsp;&nbsp;</li>
<li>#&nbsp;chkconfig&nbsp;--add&nbsp;httpd&nbsp;&nbsp;</li>

</ol>





</div>
<p>&nbsp;</p>
<h5>3.1.4打开端口/关闭防火墙</h5>
<p># /etc/init.d/iptables
stop&nbsp;-------------------关闭防火墙,用于测试时,线上最好用打开端口方式</p>
<p>&nbsp;</p>
<h5>3.1.5关闭SELinux&nbsp;</h5>
<p>1 永久方法 &ndash; 需要重启服务器</p>
<p>修改/etc/selinux/config文件中设置SELINUX=disabled ，然后重启服务器。</p>
<p>2 临时方法 &ndash; 设置系统参数</p>
<p>使用命令setenforce 0</p>
<p>附：</p>
<p>setenforce 1 设置SELinux 成为enforcing模式</p>
<p>setenforce 0 设置SELinux 成为permissive模式</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>4.监控节点的安装（每个监控节点，hadoop2，hadoop3，</h3>
<h3>hadoop4都要安装）</h3>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>4.1安装ganglia-gmond</h4>
<p align="left"><strong>Shell</strong><strong>代码</strong><strong>&nbsp;</strong><strong>&nbsp;</strong></p>
<div><ol>
<li>#yum&nbsp;search&nbsp;ganglia&nbsp;&nbsp;</li>
<li>#yum&nbsp;install&nbsp;ganglia-gmond.x86_64&nbsp;&nbsp;</li>

</ol>



</div>
<h4>4.2配置gmond</h4>
<p align="left"><strong>Shell</strong><strong>代码</strong><strong>&nbsp;</strong><strong>&nbsp;</strong></p>
<div><ol>
<li>#vi&nbsp;/etc/ganglia/gmond.conf&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;</li>
<li>cluster
{</li>
<li>&nbsp;&nbsp;name = "my cluster"&nbsp;
&nbsp;&nbsp;------&nbsp;cluster名称,是你在gmetad.conf里配置的data_source名称&nbsp;</li>
<li>&nbsp;&nbsp;owner = "root"</li>
<li>&nbsp;&nbsp;latlong = "unspecified"</li>
<li>&nbsp;&nbsp;url = "unspecified"</li>
<li>}&nbsp;&nbsp;</li>
<li>udp_send_channel
{</li>
<li>&nbsp;#
mcast_join = 239.2.11.71&nbsp; -----&nbsp;组播&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;host=10.2.6.250&nbsp;&nbsp; &nbsp;--------------&nbsp;单播&nbsp;gmeta主机的ip/主机名或者主机ip地址&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;port
= 8649</li>
<li>&nbsp;&nbsp;ttl =
1</li>
<li>}&nbsp;&nbsp;</li>
<li>udp_recv_channel {</li>
<li>&nbsp;&nbsp;#mcast_join = 239.2.11.71&nbsp; </li>
<li>&nbsp;&nbsp;port
= 8649</li>
<li>&nbsp;&nbsp;bind =
10.2.6.246</li>
<li>}</li>

</ol>





































</div>
<h4>4.3配置启动</h4>
<p><code>#&nbsp;</code>chkconfig
&nbsp;--add &nbsp;gmond</p>
<p><code>#&nbsp;</code>chkconfig
&nbsp;--list &nbsp;gmond</p>
<p>此时，如果正确安装，会出现gmond &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; 0:off &nbsp; 1:off &nbsp; 2:off &nbsp; 3:off &nbsp; 4:off
&nbsp; 5:off &nbsp; 6:off</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>4.4配置hosts</h4>
<p># vi /etc/hosts</p>
<p>10.2.6.250&nbsp;hadoop1</p>
<p>10.2.6.246&nbsp;hadoop2</p>
<p>10.2.6.248 hadoop3</p>
<p>10.2.6.249 hadoop4</p>
<p>&nbsp;</p>
<h2>全部安装完毕后</h2>
<p><strong>在主机上</strong></p>
<p># service gmetad start</p>
<p>#&nbsp;service gmond start</p>
<p># service httpd start</p>
<p># service gmetad status&nbsp;
&nbsp; -------------------验证是否启动成功</p>
<p>#&nbsp;service gmond status&nbsp;&nbsp; -------------------验证是否启动成功</p>
<p>&nbsp;</p>
<p><strong>在监控节点上</strong><strong>&nbsp;</strong></p>
<p># service gmond start &nbsp;</p>
<p>#&nbsp;service gmond status&nbsp;&nbsp; -------------------验证是否启动成功</p>
<p>&nbsp;</p>
<p>访问<a href="http://10.2.6.250/ganglia">http://10.2.6.250/ganglia</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>常见问题</h2>
<p>&nbsp;</p>
<p><strong>Forbidden</strong><strong>错误时</strong><strong>,</strong><strong>因为对</strong><strong>apache</strong><strong>有一个设置</strong></p>
<p>修改&nbsp;/etc/httpd/conf.d/ganglia.conf文件内容Deny from all&nbsp;为&nbsp;allow from all</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>There was an error collecting ganglia data
(127.0.0.1:8652):fsockopen error: Permission denied </strong><strong>解决方法</strong></p>
<p>&nbsp;</p>
<p>1 永久方法 &ndash; 需要重启服务器</p>
<p>修改/etc/selinux/config文件中设置SELINUX=disabled ，然后重启服务器。</p>
<p>&nbsp;</p>
<p>2 临时方法 &ndash; 设置系统参数</p>
<p>使用命令setenforce 0</p>
<p>附：</p>
<p>setenforce 1 设置SELinux 成为enforcing模式</p>
<p>setenforce 0 设置SELinux 成为permissive模式</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>There was an error collecting ganglia data
(127.0.0.1:8652):fsockopen error: Connection refused </strong><strong>解决办法</strong></p>
<p>卸载yum remove ganglia-web
ganglia-gmetad</p>
<p>重新安装yum install ganglia-web
&nbsp; &nbsp;----- ganglia-web本身有引用gmetad</p>
<p>重启即可</p>
<p>&nbsp;</p>
<p>http://redhatdebian.blog.51cto.com/1197273/828992</p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 storm路由器项目开发：1 - 7、网络路由器项目</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/04/11298129.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 04 Aug 2019 06:22:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/04/11298129.html</guid><description><![CDATA[<p>网安需求：</p>
<p>1：IFTTT：随着物联网的兴起，if this then that 。如果出现这种情况，那么及时反映做出对应的操作。<br />          判断手机号黑白名单，mac地址黑白名单。如果是碰到手机号或者mac地址黑名单，需要立即报警，通知当地网安部门。实现实时的黑白名单过滤。<br />2:路由器数据上报的方式：每三分钟上报一次，将最近三分钟所有人上网的情况以txt格式的形势进行上报。因为上传比较频繁，所以上传的数据全部都是以小文件的形势进行上传的，基本上不会有超过1M的文件。<br />  且要保证做到所有的数据不丢不漏，不重不错。所有上报的数据需要能够做到立即查询。<br />3：所有的历史数据保存两年，且可供两年查询</p>
<p>商用路由器商户业务需求（新增）<br />1.	实时查看附近的人流量有多少（实时处理任务。）<br />2.	每天每小时入店上网人数有多少，统计出哪几个小时属于人流量高峰期（批量处理任务）<br />3.	实时查看路由器周边一百米，三百米，五百米，一千米，三千米，五千米的人流量  （路由器周边人流量，实时处理任务。）</p>
<p>&nbsp;</p>
<p>数据查询部分：使用的是mongoDB+ES的形式做数据查询。</p>
<p>&nbsp;</p>
<p>数据平台架构：<br />          需要考虑的地方：1.每天的数据量有多少<br />	                  2.服务器的配置，包括网卡，CPU，内存，硬盘。<br />			  3.数据实时处理，选用哪种技术(考虑低成本，可维护)<br />			  4.数据批量处理，选用哪种技术（考虑低成本，可维护）</p>
<p>数据量情况：每天数据量大概在100G左右，全部都是以FTP小文件的形式进行上传。线上大概有8000台路由器（包括商户上网路由器+mac嗅探设备）<br />嗅探功能：以低于时速120KM/h   +   开启移动端无线网  ==》可以获取到你的手机mac</p>
<p><br />大数据平台的架构设计：<br />一共七台机器：<br />	两台主节点：64G内存+12T硬盘+内网千兆网卡。<br />	五台从节点配置： 32G内存+12T硬盘+内网千兆网卡。</p>
<p>&nbsp;</p>
<p>指定一台机器开通FTP，路由器以FTP方式上报小文件到服务器上面。启动一个Java线程实时读取目录下面上传的文件。<br />问题一：如何确认文件已经上传完成<br />问题二：文件的合并过程。</p>
<p>问题三：错误数据过滤。硬件上报的数据，很多都可能会出现错误数据的情况。</p>
<p>问题四： 每天晚上十二点的时候，不管合并数据量多大，都要上传</p>
<p><span style="color: #ff0000;">=======================================================</span></p>
<h1 align="center">Storm第三天路由器数据监控</h1>
<h1>1、项目背景介绍：</h1>
<p>随着路由器上网的普及，越来越多的人在各个场合选择使用路由器上网，特别是在一些公共场所，例如网吧，酒店，饭店，旅馆，宾馆，洗浴中心等。这些公共场所的网络安全也日益受到各地网安的关注，各种问题也日益凸显。</p>
<div>
<p class="a">如何鉴别上网人员的身份问题？</p>
<p class="a">如何通过路由器来解决人群聚集的问题？</p>
<p class="a">如何对上网人员的身份进行追踪？</p>
<p class="a">如何通过公共路由器来获取指定人员的行动轨迹？</p>
<p class="a">如何获取上网人员的网络内容？</p>





</div>
<p>等等这些问题都困扰着各地的网安部门。为此我司特为各地网安推出定制化的路由器，在网安指定的公共地点安装我司的路由器，可以追踪每个人的上网情况，通过路由器或者嗅探设备的mac地址以及经纬度的追踪，可以定位每个人员的上网大致方位，了解每个人的上网内容，做到实时的网页内容监控，地理位置的监控，上网设备的mac地址追踪，通过嗅探设备，实现上网设备的实时路线追踪，为各地网安解决各种定制化的任务。</p>
<p>时速小于90KM/小时，并且开着无线网，嗅探设备就能抓到你的mac地址</p>
<p>&nbsp;</p>
<h1>2、项目数据处理流程</h1>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190805205329673-736488172.png" alt="" /></p>
<h1><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190805220916094-2035085750.png" alt="" /></h1>
<p>&nbsp;</p>
<h1>3、数据类型梳理</h1>
<p>1、终端mac记录：</p>
<p>YT1013 MAC地址抓取记录表&nbsp; "audit_mac_detail_" 表&nbsp; length&nbsp; 25</p>
<p>获取到的所有的mac地址都会存入这种类型的文件中</p>
<p>YT1013=<span style="color: #ff0000;">iumac,idmac</span>,area_code,policeid,<span style="color: #ff0000;">sumac,sdmac</span>,datasource,netsite_type, capture_time,&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; netbar_wacode,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; brandid, cache_ssid,terminal_filed_strength,ssid_position,access_ap_mac,access_ap_channel,access_ap_encryption_type,collection_equipment_id,<span style="color: #ff0000;">collection_equipment_longitude,collection_equipment_latitude</span>,wxid,province_code,city_code,typename,security_software_orgcode</p>
<p>&nbsp;&nbsp;</p>
<p>2、虚拟身份记录</p>
<p>YT1020 虚拟身份抓取记录表&nbsp; virtual_detail表&nbsp; length 22</p>
<p>获取到所有的虚拟身份都会存入这种类型的文件中</p>
<p>YT1020=<span style="color: #ff0000;">mobile,iumac,idmac</span>,area_code,policeid,netsite_type,sumac,account_type,soft_type,sdmac,netbar_wacode,sessionid,ip_address,<span style="color: #ff0000;">account</span>,capture_time,collection_equipment_id,wxid,province_code,city_code,datasource,typename,security_software_orgcode</p>
<p>&nbsp;</p>
<p>3、终端上下线记录</p>
<p>YT1023 终端上下线记录表&nbsp; wifi_online表&nbsp;&nbsp; length 51</p>
<p>获取到所有的终端上下线的记录都会存入到这种类型的文件中</p>
<p>YT1023=<span style="color: #ff0000;">iumac,idmac</span>,area_code,policeid,netsite_type,capture_time,<span style="color: #ff0000;">sumac, sdmac</span>, netbar_wacode,auth_type,auth_account, collection_equipment_id,datafrom,&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; start_time,end_time,ip_address,src_ip,src_port_start,src_port_end,src_port_start_v6,src_port_end_v6,dst_ip,dst_ip_ipv6,dst_port,dst_port_v6,certificate_type,certificate_code,app_company_name,app_software_name,app_version,appid,src_ipv6,<span style="color: #ff0000;">longitude,latitude</span>,sessionid,terminal_fieldstregth,x_coordinate,y_coordinate,name,imsi,imei_esn_meid,os_name,brand,model,network_app,port,wxid,province_code,city_code,typename,security_software_orgcode</p>
<p>&nbsp;</p>
<p>4、搜索关键字记录</p>
<p>YT1033 搜索关键字记录表&nbsp; searchkey_detail表&nbsp;&nbsp; length&nbsp; 21</p>
<p>获取到所有的搜索记录关键字都会存入到这种类型的文件中</p>
<p>YT1033=<span style="color: #ff0000;">iumac,idmac</span>,area_code,policeid,netsite_type,capture_time,<span style="color: #ff0000;">sumac,sdmac</span>,netbar_wacode,src_ip,src_port,dst_ip,dst_port,search_groupid,http_domain,<span style="color: #ff0000;">search_keyword</span>,wxid,province_code,city_code,typename,security_software_orgcode</p>
<p>&nbsp;</p>
<p>5、网页访问记录</p>
<p>YT1034 网页访问记录表 webpage_detail 表&nbsp; length 24</p>
<p>获取到所有的网页访问记录都会存入到这种类型的文件中</p>
<p>YT1034=<span style="color: #ff0000;">iumac,idmac</span>,area_code,policeid,netsite_type,capture_time,<span style="color: #ff0000;">sumac,sdmac</span>,netbar_wacode,src_ip,src_port,dst_ip,dst_port,http_method,http_domain,http_action_match,<span style="background-color: #ffff00;">web_url</span>,http_categoryid,web_title,wxid,province_code,city_code,typename,security_software_orgcode</p>
<h1>4、模拟数据产生</h1>
<p>创建两个文件夹</p>
<p>mkdir&nbsp; -p&nbsp; /export/datas/destFile&nbsp;&nbsp; # 拷贝后的文件</p>
<p>mkdir&nbsp; -p /export/datas/sourceFile&nbsp;&nbsp;&nbsp; #源文件</p>
<p>详见资料当中的filegenerate.jar</p>
<p>java -jar filegenerate.jar /export/datas/sourceFile/&nbsp; /export/datas/destFile 1000</p>
<h1>5、创建kafka的topic</h1>
<div>
<p class="a">bin/kafka-topics.sh --create&nbsp; --replication-factor 2 --topic wifidata --zookeeper node01:2181,node02:2181,node03:2181 --partitions 6</p>





</div>
<p>&nbsp;</p>
<h1>6、定义flume配置文件并启动flume</h1>
<p>配置kafka配置文件wifi.conf</p>
<div>
<p class="a">#为我们的source channel&nbsp; sink起名</p>
<p class="a">a1.sources = r1</p>
<p class="a">a1.channels = c1</p>
<p class="a">a1.sinks = k1</p>
<p class="a">#指定我们的source收集到的数据发送到哪个管道</p>
<p class="a">a1.sources.r1.channels = c1</p>
<p class="a">#指定我们的source数据收集策略</p>
<p class="a">a1.sources.r1.type = spooldir</p>
<p class="a">a1.sources.r1.spoolDir = /export/datas/destFile</p>
<p class="a">a1.sources.r1.deletePolicy = immediate</p>
<p class="a">a1.sources.r1.ignorePattern = ^(.)*\\.tmp$</p>
<p class="a">#指定我们的channel为memory,即表示所有的数据都装进memory当中</p>
<p class="a">a1.channels.c1.type = memory</p>
<p class="a">#指定我们的sink为kafka&nbsp; sink，并指定我们的sink从哪个channel当中读取数据</p>
<p class="a">a1.sinks.k1.channel = c1</p>
<p class="a">a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink</p>
<p class="a">a1.sinks.k1.kafka.topic = wifidata</p>
<p class="a">a1.sinks.k1.kafka.bootstrap.servers = node01:9092,node02:9092,node03:9092</p>
<p class="a">a1.sinks.k1.kafka.flumeBatchSize = 20</p>
<p class="a">a1.sinks.k1.kafka.producer.acks = 1</p>





</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>启动flume程序</p>
<div>
<p class="a">bin/flume-ng agent -n a1 -c conf -f /export/servers/apache-flume-1.8.0-bin/conf/wifi.conf -Dflume.root.logger=INFO,console</p>





</div>
<p>&nbsp;&nbsp;</p>
<h1>7、创建maven工程并导入相应的jar包</h1>
<h1>8、开发我们的WifiTypeBolt</h1>
<p>过滤掉字段不同的一些脏数据</p>
<h1>9、开发我们的WifiWarningBolt</h1>
<p>实时告警我们的mac黑名单，手机号码黑名单等</p>
<p>&nbsp;</p>
<h1>10、开发我们的WriteFileBolt</h1>
<p>文件合并到本地一定大小之后，就将数据上传到hdfs上面去</p>
<h1>11、程序main函数入口</h1>
<p>&nbsp;</p>
<p>详见代码。</p>]]></description></item><item><title>kafka-console-consumer接收不到flume推送过来的消息</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/04/11297450.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 04 Aug 2019 02:37:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/04/11297450.html</guid><description><![CDATA[<p>原因和解决方法：需要先启动kafka，再启动flume，两者启动有先后顺序。</p>]]></description></item><item><title>启动kafka报错</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/04/11297393.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 04 Aug 2019 02:23:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/04/11297393.html</guid><description><![CDATA[<p>&nbsp;</p>
<p>启动kafka时 报错：</p>
<p>kafka-console-consumer.sh --from-beginning --zookeeper node01:8121,node02:8121,node03:8121 --topic log_monitor<br />Using the ConsoleConsumer with old consumer is deprecated and will be removed in a future major release. Consider using the new consumer by passing [bootstrap-server] instead of [zookeeper].<br />[2019-08-04 10:03:45,906] <span style="color: #ff0000;">WARN Session 0x0 for server null, unexpected error, closing socket connection and attempting reconnect (org.apache.zookeeper.ClientCnxn)</span><br /><span style="color: #ff0000;">java.net.ConnectException: Connection refused</span></p>
<p>将zk端口号修改为9092，报另一个错误：</p>
<p><span style="color: #ff0000;">[2019-08-04 10:04:17,647] WARN Client session timed out, have not heard from server in 10006ms for sessionid 0x0 (org.apache.zookeeper.ClientCnxn)</span><br /><span style="color: #ff0000;">[2019-08-04 10:04:28,461] WARN Client session timed out, have not heard from server in 10004ms for sessionid 0x0 (org.apache.zookeeper.ClientCnxn)</span><br /><span style="color: #ff0000;">[2019-08-04 10:04:39,418] WARN Client session timed out, have not heard from server in 10001ms for sessionid 0x0 (org.apache.zookeeper.ClientCnxn)</span><br /><span style="color: #ff0000;">No brokers found in ZK.</span></p>
<p>&nbsp;</p>
<p>原因：检查发现是zk的端口号写错了，写成了8121，或者 9092。</p>
<p>解决方法：将端口号修改为2181.&nbsp;</p>
<p>&nbsp;</p>]]></description></item><item><title>mysql设置timpstamp的默认值为 '0000-00-00 00:00:00' 时报错</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/03/11294412.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 03 Aug 2019 04:10:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/03/11294412.html</guid><description><![CDATA[<p>问题：mysql设置timpstamp的默认值为 '0000-00-00 00:00:00' 时报错：</p>
<p><span style="color: #ff0000;">ERROR 1067 (42000): Invalid default value for 'updateaDate'</span></p>
<p>原因和解决方法：</p>
<p># sql-mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE<br />,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION 默认是<br />这个配置，这个配置不允许日期字段的默认值为'0000-00-00 00:00:00'，所以改成了下面的配置：</p>
<p>sql-mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_<br />AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</p>
<p>&nbsp;</p>
<p>记得修改完后，重启mysql服务：&nbsp;&nbsp;/etc/init.d/mysqld restart&nbsp; &nbsp; &nbsp;或者&nbsp;&nbsp;service mysqld restart。 两个命令的效果一样。</p>
<p>&nbsp;</p>
<p>注：一般在my.ini或my.cnf下配置该sql-mode，</p>
<p>linux下的为my.cnf，其路径一般为&nbsp;/etc/my.cnf&nbsp; 或&nbsp;/etc/mysql/my.cnf 或 /usr/my.cnf</p>
<p>win下的是my.ini，一般会在安装目录的根目录.&nbsp;</p>]]></description></item><item><title>第1节 storm日志告警：1、 - 5、日志监控告警业务需求、代码、集群运行、总结</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/02/11290923.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 02 Aug 2019 11:57:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/02/11290923.html</guid><description><![CDATA[<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190803003323198-270793410.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>如何解决短信或者邮件频繁发送的问题：每次发送的时候都先查询数据库记录，看一下有没有给这个人发送消息，上一次发送消息的时间是什么时候，如果发送时间间隔小于半个小时，就不要再发了</p>
<p><span style="color: #ff0000; background-color: #ffffff;">==========================================</span></p>
<h1>6、日志监控告警系统</h1>
<h2>6.1需求分析：</h2>
<p>实现项目中日志监控的功能，需要做到日志监控实时告警，例如系统中出现任何异常，触发任何的告警规则，都可以实时通过短信或者邮件告知相关系统负责人</p>
<h2>6.2 案例：实现实时监控文件变化，通过自定义flume拦截器，实现文件内容添加标识（详见代码）</h2>
<h3>6.2.1 错误日志生成</h3>
<p>错误日志生成，直接运行loggen.sh这个脚本，就会在</p>
<p>/export/data/flume/click_log&nbsp; 这个目录下生成一个文件叫做error.log的日志文件</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190802235449840-379398271.png" alt="" /></p>
<p>参见资料当中的</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190802235440804-89344330.png" alt="" /></p>
<p>注意：资料中已经提供好打包运行的jar包以及运行脚本，直接运行脚本即可</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190802235431306-893809518.png" alt="" /></p>
<h3>6.2.2 创建kafka的对应的topic</h3>
<div>
<p class="a">bin/kafka-topics.sh --create&nbsp; --partitions 6 --replication-factor 1 --topic log_monitor --zookeeper node01:2181,node02:2181,node03:2181</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>6.2.3&nbsp; flume自定义拦截器开发</h3>
<p>注意：一定要将flume的自定义拦截器单独放一个项目，单独进行打包，不然与其他的代码会有冲突</p>
<p>功能需求：实现在每条日志前面加上一个appId来做唯一标识</p>
<p>第一步：创建maven项目并导入jar包；</p>
<p>第二步：开发我们自定义拦截器；</p>
<p>第三步：将我们自定义的拦截器打包成jar，放入到flume的lib目录下</p>
<p>注意，这里打包不需要任何的打包插件，将maven项目中的打包插件都注释掉</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190802235355475-235472096.png" alt="" /></p>
<p>注意：资料当中已经提供好了的jar包，直接放到flume的lib目录下即可</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190802235343158-1704154457.png" alt="" /></p>
<p>第四步：配置flume的配置文件app_interceptor.conf</p>
<div>
<p class="a">a1.sources = r1</p>
<p class="a">a1.channels = c1</p>
<p class="a">a1.sinks = k1</p>
<p class="a">&nbsp;</p>
<p class="a">a1.sources.r1.type = exec</p>
<p class="a">a1.sources.r1.command = tail -F /export/data/flume/click_log/error.log</p>
<p class="a">a1.sources.r1.channels = c1</p>
<p class="a">a1.sources.r1.interceptors = i1</p>
<p class="a">a1.sources.r1.interceptors.i1.type = cn.itcast.flume.interceptor.AppInterceptor$AppInterceptorBuilder</p>
<p class="a">a1.sources.r1.interceptors.i1.appId = 1</p>
<p class="a">&nbsp;</p>
<p class="a">a1.channels.c1.type=memory</p>
<p class="a">a1.channels.c1.capacity=10000</p>
<p class="a">a1.channels.c1.transactionCapacity=100</p>
<p class="a">&nbsp;</p>
<p class="a">a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink</p>
<p class="a">a1.sinks.k1.topic = log_monitor</p>
<p class="a">a1.sinks.k1.brokerList = kafka01:9092</p>
<p class="a">a1.sinks.k1.requiredAcks = 1</p>
<p class="a">a1.sinks.k1.batchSize = 20</p>
<p class="a">a1.sinks.k1.channel = c1</p>
</div>
<p>&nbsp;</p>
<p>第五步：启动flume</p>
<div>
<p class="a">bin/flume-ng agent -n a1 -c conf -f /export/servers/apache-flume-1.6.0-cdh5.14.0-bin/conf/app_interceptor.conf -Dflume.root.logger=INFO,console</p>
</div>
<p>&nbsp;</p>
<p>第六步：使用kafka自带的console消费我们生产的信息，查看msgId是否成功带上了</p>
<p>bin/kafka-console-consumer.sh&nbsp; --topic log_monitor --zookeeper node01:2181,node02:2181,node03:2181</p>
<p>&nbsp;</p>
<h2>6.3 storm消费kafka中的数据，实现日志监控告警</h2>
<h3>第一步：导入jar包</h3>
<p>注意：打包的时候，打包插件一定要使用这个：</p>
<div>
<p class="a">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;version&gt;1.4&lt;/version&gt;</p>
</div>
<h3>第二步：创建数据库表</h3>
<h3>&nbsp;</h3>
<h3>第三步：开发我们的定时任务</h3>
<p>&nbsp;</p>
<h3>第四步：开发我们的规则匹配bolt</h3>
<p>&nbsp;</p>
<h3>第五步：开发我们的短信与邮件通知bolt</h3>
<p>&nbsp;</p>
<h3>第六步：开发我们的数据库保存bolt</h3>
<p>&nbsp;</p>
<h3>第七步：程序入口主函数</h3>
<p>&nbsp;</p>
<p>以上所有，详见代码。</p>
<p>&nbsp;</p>
<p>kafkaSpout的更多说明：</p>
<p><a href="https://github.com/apache/storm/blob/caeaf255b7c20009d36c39bc2999c205082c63aa/docs/storm-kafka-client.md">https://github.com/apache/storm/blob/caeaf255b7c20009d36c39bc2999c205082c63aa/docs/storm-kafka-client.md</a></p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">=======================================================</span></p>
<p>&nbsp;</p>
<h1>课程总结：</h1>
<p>1、storm的源码托管地址</p>
<p>2、storm的任务提交的过程 本地创建目录树，zk创建目录树</p>
<p>3、storm与hdfs的整合使用&nbsp;</p>
<p>4、storm的ack机制&nbsp; 要知道是什么玩意儿&nbsp; 消息确认机制</p>
<p>5、storm的定时器以及与mysql的整合&nbsp; 搞定</p>
<p>6、日志监控告警系统&nbsp;</p>
<p>问题分析思路的整个过程</p>
<p>&nbsp;</p>]]></description></item><item><title>storm正常任务数据量过大时造成定时任务不执行的问题</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/01/11285177.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 01 Aug 2019 12:40:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/01/11285177.html</guid><description><![CDATA[<p>在执行storm的定时任务时，发现storm普通任务数据量过大时造成定时任务不执行，</p>
<p>同时设置了storm的普通任务和定时任务，定时任务设置5秒执行1次。</p>
<p>普通任务的数据时从spout中不停发射字符串到包含定时任务的bolt中。</p>
<p>实际运行时，发现全部是普通任务打印出的消息，定时任务打印的消息压根就没有。</p>
<p>&nbsp;</p>
<p>原因：普通任务的数据量过大。？？？还是有点不理解。</p>
<p>解决方法：</p>
<p>1.把所有的非定时任务的sout注释掉，只打印定时任务的sout消息。</p>
<p>2.在上游的spout中，设置Thread.sleep(3000); 减少上游spout发射过来的数据。</p>
<p>&nbsp;</p>
<p>写了几行代码，计算CPU在1秒钟内执行的次数，即CPU的频率，不知道这么算对不对：</p>
<pre>long l = System.currentTimeMillis();<br />long c = 0;<br />while(System.currentTimeMillis() &lt;= l + 1000l){<br />    c++;<br />}<br />System.out.println("CPU一秒钟执行的次数：" + c); //154563242,152381064，158432901，144697167<br />System.out.println(Long.MAX_VALUE); //9223372036854775807</pre>]]></description></item><item><title>启动storm任务时，异常提示</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/08/01/11285098.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 01 Aug 2019 12:26:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/08/01/11285098.html</guid><description><![CDATA[<p>启动storm任务时，异常提示：</p>
<p><span style="color: #ff0000;">14182 [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:2000] WARN o.a.s.s.o.a.z.s.NIOServerCnxn - caught end of stream exception</span><br /><span style="color: #ff0000;">org.apache.storm.shade.org.apache.zookeeper.server.ServerCnxn$EndOfStreamException: Unable to read additional data from client sessionid 0x16c298d9b93000d, likely client has closed socket</span><br /><span style="color: #ff0000;">	at org.apache.storm.shade.org.apache.zookeeper.server.NIOServerCnxn.doIO(NIOServerCnxn.java:228) [storm-core-1.1.1.jar:1.1.1]</span><br /><span style="color: #ff0000;">	at org.apache.storm.shade.org.apache.zookeeper.server.NIOServerCnxnFactory.run(NIOServerCnxnFactory.java:208) [storm-core-1.1.1.jar:1.1.1]</span><br /><span style="color: #ff0000;">	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_144]</span></p>
<p>首先，该异常只是一个警告，不是错误，不影响程序的执行。</p>
<p>原因：在执行过程中 多次连接zk，有些连接被干掉了。</p>
<p>解决方法：不用管它。</p>
<p>&nbsp;</p>]]></description></item><item><title>Xshell 5的快捷键</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/31/11278852.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 31 Jul 2019 12:22:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/31/11278852.html</guid><description><![CDATA[<p>&nbsp;　　　　　　　　　　　　　　Xshell 5的快捷键</p>
<p>1. 点击下图中的按钮查看快捷键：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190731202400551-636173120.png" alt="" /></p>
<p>&nbsp;</p>
<p>2. 快捷键备忘录：</p>
<p>&nbsp;</p>
<table style="background-color: #c9cecb;" border="1" data-mce-="">
<tbody>
<tr>
<td data-mce-=""><span data-mce-=""><strong>序号</strong></span></td>
<td data-mce-=""><span data-mce-=""><strong>功能</strong></span></td>
<td data-mce-=""><span data-mce-=""><strong>快捷键</strong></span></td>
<td data-mce-=""><strong>备注</strong></td>
</tr>
<tr>
<td data-mce-="">1</td>
<td>在窗口和撰写栏之间切换</td>
<td>Alt+I</td>
<td>&nbsp;</td>
</tr>
<tr>
<td data-mce-="">2</td>
<td>全屏</td>
<td>Alt+Enter</td>
<td>&nbsp;</td>
</tr>
<tr>
<td data-mce-="">3</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td data-mce-="">4</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td data-mce-="">5</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td data-mce-="">6</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td data-mce-="">7</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td data-mce-="">8</td>
<td>&nbsp;</td>
<td rowspan="2">&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td data-mce-="">9</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td data-mce-="">10</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td data-mce-="">11</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td data-mce-="">12</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>]]></description></item><item><title>第3节 storm高级应用：6、定时器任务；7、与jdbc的整合使用；8、与jdbc整合打包集群运行</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/30/11273557.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 30 Jul 2019 15:45:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/30/11273557.html</guid><description><![CDATA[<h1><span lang="EN-US"><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190731014221128-1719447493.png" alt="" /></span></h1>
<p><span style="color: #ff0000;" lang="EN-US">=======================================</span></p>
<h1><span lang="EN-US">5、<span lang="EN-US">storm的定时器以及与<span lang="EN-US">mysql的整合使用</span></span></span></h1>
<p>功能需求：实现每五秒钟打印出当前时间，并将发送出来的数据存入到<span lang="EN-US">mysql数据库当中。</span></p>
<p>&nbsp;</p>
<p><span lang="EN-US">详见代码。</span></p>
<p>&nbsp;</p>
<p><span lang="EN-US">打包到集群上运行，</span></p>
<p><span lang="EN-US">打包成jar包，选择4M的那个带依赖的jar包，上传到node02上，所在路径为：&nbsp;/export/stormTickTimeMysql.jar&nbsp;</span></p>
<p><span lang="EN-US">执行storm命令运行jar包： &nbsp;</span></p>
<p><span lang="EN-US">cd&nbsp;/export/servers/apache-storm-1.1.1</span></p>
<p><span lang="EN-US">bin/storm jar /export/stormTickTimeMysql.jar&nbsp; cn.itcast.storm.ticktime.TickTimeMain stormtoMysql</span></p>]]></description></item><item><title>第3节 storm高级应用：4、5、ack机制，以及其验证超时</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/30/11272656.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 30 Jul 2019 12:46:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/30/11272656.html</guid><description><![CDATA[<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190730210909525-1525513106.png" alt="" /></p>
<h1>4、&nbsp; 消息不丢失机制</h1>
<h2 align="left">4.1、ack是什么</h2>
<p>ack 机制是storm整个技术体系中非常闪亮的一个创新点。</p>
<p>通过Ack机制，spout发送出去的每一条消息，都可以确定是被成功处理或失败处理， 从而可以让开发者采取动作。比如在Meta中，成功被处理，即可更新偏移量，当失败时，重复发送数据。</p>
<p>因此，通过Ack机制，很容易做到保证所有数据均被处理，一条都不漏。</p>
<p><strong>另外需要注意的，当spout</strong><strong>触发fail</strong><strong>动作时，不会自动重发失败的tuple</strong><strong>，需要spout</strong><strong>自己重新获取数据，手动重新再发送一次</strong></p>
<p>ack机制即， spout发送的每一条消息，</p>
<p>l&nbsp; 在规定的时间内，spout收到Acker的ack响应，即认为该tuple 被后续bolt成功处理</p>
<p>l&nbsp; 在规定的时间内，没有收到Acker的ack响应tuple，就触发fail动作，即认为该tuple处理失败，</p>
<p>l&nbsp; 或者收到Acker发送的fail响应tuple，也认为失败，触发fail动作</p>
<p>另外Ack机制还常用于限流作用： 为了避免spout发送数据太快，而bolt处理太慢，常常设置pending数，当spout有等于或超过pending数的tuple没有收到ack或fail响应时，跳过执行nextTuple， 从而限制spout发送数据。</p>
<p>通过conf.put(Config.TOPOLOGY_MAX_SPOUT_PENDING, pending);设置spout pend数。</p>
<p>&nbsp;</p>
<p><strong>这个timeout</strong><strong>时间可以通过Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS</strong><strong>来设定。Timeout</strong><strong>的默认时长为30</strong><strong>秒</strong></p>
<h2 align="left">&nbsp;4.2、如何使用Ack机制</h2>
<p>spout 在发送数据的时候带上msgid</p>
<p>设置acker数至少大于0；Config.setNumAckers(conf, ackerParal);</p>
<p>在bolt中完成处理tuple时，执行OutputCollector.ack(tuple), 当失败处理时，执行OutputCollector.fail(tuple);</p>
<p>推荐使用IBasicBolt， 因为IBasicBolt 自动封装了OutputCollector.ack(tuple), 处理失败时，抛出FailedException，则自动执行OutputCollector.fail(tuple)</p>
<h2 align="left">4.3、如何关闭Ack机制</h2>
<p>有2种途径</p>
<p>spout发送数据是不带上msgid</p>
<p>设置acker数等于0</p>
<p>&nbsp;</p>
<h2 align="left">&nbsp;4.4、基本实现</h2>
<p>Storm 系统中有一组叫做"acker"的特殊的任务，它们负责跟踪DAG（有向无环图）中的每个消息。</p>
<p>acker任务保存了spout id到一对值的映射。第一个值就是spout的任务id，通过这个id，acker就知道消息处理完成时该通知哪个spout任务。第二个值是一个64bit的数字，我们称之为"ack val"， 它是树中所有消息的随机id的异或计算结果。</p>
<p>&nbsp;</p>
<p>&lt;TaskId,&lt;RootId,ackValue&gt;&gt;</p>
<p>Spoutid,&lt;系统生成的id,ackValue&gt;</p>
<p>Task-0,64bit,0</p>
<p>&nbsp;</p>
<p>ack val表示了整棵树的的状态，无论这棵树多大，只需要这个固定大小的数字就可以跟踪整棵树。当消息被创建和被应答的时候都会有相同的消息id发送过来做异或。&nbsp;每当acker发现一棵树的ack val值为0的时候，它就知道这棵树已经被完全处理了</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190730204209267-2042083969.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190730204228814-254211887.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190730204247001-173695707.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190730204336971-1396427764.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>4.5、spout与bolt的其他开发方式</h2>
<p>对于spout，有ISpout，IRichSpout，BaseRichSpout</p>
<p>对于bolt，有IBolt，IRichBolt，BaseRichBolt，IBasicBolt，BaseBasicBolt</p>
<p>IBasicBolt，BaseBasicBolt不用每次execute完成都写ack/fail，因为已经帮你实现好了。</p>
<p>&nbsp;</p>
<p>wordCount案例，验证超时调用fail方法，详见代码。</p>
<p>&nbsp;</p>]]></description></item><item><title>第3节 storm高级应用：2、storm与hdfs的整合工程环境准备；3、整合代码开发</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/28/11261537.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 28 Jul 2019 15:35:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/28/11261537.html</guid><description><![CDATA[<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190729215605222-1339960547.png" alt="" /></p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">========================================</span></p>
<h1>3、&nbsp; storm与hdfs的整合使用</h1>
<h2>3.1、功能需求：</h2>
<p>实现随机发送订单数据，从计算订单的总金额，然后将订单中的数据写入到hdfs永久保存。</p>
<p>&nbsp;</p>
<p>详见代码。</p>
<p>&nbsp;</p>]]></description></item><item><title>第3节 storm高级应用：1、上次课程回顾，今日课程大纲，storm下载地址、运行过程等</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/28/11261410.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 28 Jul 2019 15:00:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/28/11261410.html</guid><description><![CDATA[<p><span style="color: #005500;">上次课程内容回顾：<br /></span></p>
<div><span style="color: #005500;">ConcurrentHashMap是线程安全的，为什么多线程的时候还不好使，为什么还要加static关键字</span></div>
<div><span style="color: #005500;"><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190730194718112-807158644.png" alt="" /><br />1、storm的基本介绍：strom是twitter公司开源提供给apache的一个实时处理的框架<br />2、storm的架构模型：主从架构：<br />&nbsp;nimbus：主节点&nbsp; 接收客户端提交的任务，以及任务的分发<br />&nbsp;supervisor：从节点，主要用于处理nimbus分配的任务<br />3、storm的安装 yaml的配置文件比较严格<br />4、strom的UI管理界面：记得更改ui的端口，默认8088已经被占用了<br />5、strom的编程模型：<br />&nbsp;spout：接收数据源<br />&nbsp;bolt：处理我们的数据的组件<br />6、storm的入门程序：wordCount<br />7、storm的并行度。调整进程和线程的数量 <br />8、storm的分发策略<br />9、storm与kafka的集成&nbsp;&nbsp; KafkaSpout去消费kafka当中的数据就行了<br />10、实时看板综合案例</span></div>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">==========================================</span></p>
<p><span style="color: #ff0000;"><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190728232424400-829059369.png" alt="" /></span></p>
<p><span style="color: #ff0000;">==========================================</span></p>
<h1 align="center">&nbsp;</h1>
<p>&nbsp;

</p>
<h1 style="text-align: center;" align="center"><span lang="EN-US">Storm</span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">实时处理第二天</span></h1>
<p>&nbsp;</p>
<h1><span lang="EN-US">1</span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">、</span><span lang="EN-US">Storm</span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">源码下载及目录熟悉</span></h1>
<p>&nbsp;</p>
<h3><span lang="EN-US">1.1</span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">、在</span><span lang="EN-US">Storm</span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">官方网站上寻找源码地址</span></h3>
<p>&nbsp;</p>
<p style="text-align: left; line-height: 14.25pt; mso-pagination: widow-orphan; background: white;" align="left"><span lang="EN-US">&nbsp;
&nbsp;&nbsp;<a href="http://storm.apache.org/downloads.html"><span style="color: windowtext; text-decoration: none; text-underline: none;">http://storm.apache.org/downloads.html</span></a></span></p>
<p style="text-align: left; line-height: 14.25pt; mso-pagination: widow-orphan; background: white;" align="left"><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190728230943601-1281010827.png" alt="" /></p>
<p>&nbsp;</p>
<h3><span lang="EN-US">1.2 </span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">点击文字标签进入</span><span lang="EN-US">github</span></h3>
<p>&nbsp;</p>
<p style="text-indent: 21.0pt;"><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">点击</span><span lang="EN-US">Apache/storm</span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">文字标签，进入</span><span lang="EN-US">github</span></p>
<p>&nbsp;</p>
<p style="text-align: left; line-height: 14.25pt; mso-pagination: widow-orphan; background: white;" align="left"><span lang="EN-US">&nbsp; <span style="mso-tab-count: 1;">&nbsp;&nbsp; </span>&nbsp;&nbsp;<a href="https://github.com/apache/storm"><span style="color: windowtext; text-decoration: none; text-underline: none;">https://github.com/apache/storm</span></a></span></p>
<p>&nbsp;</p>
<h3><span lang="EN-US">1.3 </span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">拷贝</span><span lang="EN-US">storm</span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">源码地址</span></h3>
<p>&nbsp;</p>
<p style="text-indent: 21.0pt;"><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-font-kerning: 0pt;">在网页右侧，拷贝</span><span style="mso-font-kerning: 0pt;" lang="EN-US">storm</span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-font-kerning: 0pt;">源码地址</span></p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190728231121720-1147071896.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3><span lang="EN-US">1.4 </span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">使用</span><span lang="EN-US">Subversion</span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">客户端下载</span></h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190728231146921-1875538265.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p style="text-align: left; text-indent: 21.0pt; line-height: 14.25pt; mso-pagination: widow-orphan; background: white;" align="left"><span lang="EN-US"><a href="https://github.com/apache/storm/tags/v0.9.5"><span style="font-size: 9.5pt; mso-bidi-font-size: 10.0pt; font-family: '微软雅黑','sans-serif'; mso-bidi-font-family: 宋体; color: blue; mso-font-kerning: 0pt;">https://github.com/apache/storm/tags/v0.9.5</span></a></span></p>
<p>&nbsp;</p>
<h3><span lang="EN-US">1.5 Storm</span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">源码目录分析</span></h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190728231329743-785109186.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p style="text-align: left; line-height: 14.25pt; mso-pagination: widow-orphan; background: white;" align="left"><span style="font-size: 9.5pt; font-family: '微软雅黑','sans-serif'; mso-bidi-font-family: 宋体; color: black; mso-font-kerning: 0pt;">扩展包中的三个项目，使<span lang="EN-US">storm</span>能与<span lang="EN-US">hbase</span>、<span lang="EN-US">hdfs</span>、<span lang="EN-US">kafka</span>交互</span></p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190728231345550-1234824494.png" alt="" /></p>
<p>&nbsp;</p>
<h3><span lang="EN-US">1.6 Storm</span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">源码编译</span></h3>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190728231432092-1898154372.png" alt="" /></p>
<p>&nbsp;</p>
<h1>2、Storm原理</h1>
<p>&nbsp;</p>
<h3>2.1&nbsp; Storm 任务提交的过程</h3>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190728231753441-793984876.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>TopologyMetricsRunnable.TaskStartEvent[oldAssignment=&lt;null&gt;,newAssignment=Assignment[masterCodeDir=C:\Users\MAOXIA~1\AppData\Local\Temp\\e73862a8-f7e7-41f3-883d-af494618bc9f\nimbus\stormdist\double11-1-1458909887,nodeHost={61ce10a7-1e78-4c47-9fb3-c21f43a331ba=192.168.1.106},taskStartTimeSecs={1=1458909910, 2=1458909910, 3=1458909910, 4=1458909910, 5=1458909910, 6=1458909910, 7=1458909910, 8=1458909910},workers=[ResourceWorkerSlot[hostname=192.168.1.106,memSize=0,cpu=0,tasks=[1, 2, 3, 4, 5, 6, 7, 8],jvm=&lt;null&gt;,nodeId=61ce10a7-1e78-4c47-9fb3-c21f43a331ba,port=6900]],timeStamp=1458909910633,type=Assign],task2Component=&lt;null&gt;,clusterName=&lt;null&gt;,topologyId=double11-1-1458909887,timestamp=0]</p>








</td>








</tr>








</tbody>








</table>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190728232014524-1525789169.png" alt="" /></p>
<p>&nbsp;</p>
<table border="1" cellspacing="0" cellpadding="0" data-mce-="">
<tbody>
<tr data-mce-="">
<td valign="top" width="568" data-mce-="">
<p><span style="font-size: 14px;">TopologyMetricsRunnable.TaskStartEvent[oldAssignment=&lt;null&gt;,newAssignment=Assignment[masterCodeDir=C:\Users\MAOXIA~1\AppData\Local\Temp\\e73862a8-f7e7-41f3-883d-af494618bc9f\nimbus\stormdist\double11-1-1458909887,nodeHost={61ce10a7-1e78-4c47-9fb3-c21f43a331ba=192.168.1.106},taskStartTimeSecs={1=1458909910, 2=1458909910, 3=1458909910, 4=1458909910, 5=1458909910, 6=1458909910, 7=1458909910, 8=1458909910},workers=[ResourceWorkerSlot[hostname=192.168.1.106,memSize=0,cpu=0,tasks=[1, 2, 3, 4, 5, 6, 7, 8],jvm=&lt;null&gt;,nodeId=61ce10a7-1e78-4c47-9fb3-c21f43a331ba,port=6900]],timeStamp=1458909910633,type=Assign],task2Component=&lt;null&gt;,clusterName=&lt;null&gt;,topologyId=double11-1-1458909887,timestamp=0]</span></p>





</td>





</tr>





</tbody>





</table>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190728232038683-7664557.png" alt="" /></p>
<p>&nbsp;</p>
<h3>2.2&nbsp; Storm组件本地目录树</h3>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190728232600697-1060157242.png" alt="" /></p>
<h3>2.3&nbsp; Storm zookeeper目录树</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190728232902932-574817337.png" alt="" /></p>
<h3>2.4&nbsp; Storm启动流程分析</h3>
<p>&nbsp;</p>
<p>------------程序员client------------------</p>
<p>&nbsp;</p>
<p>1、客户端运行storm nimbus时，会调用storm的python脚本，该脚本中为每个命令编写一个方法，每个方法都可以生成一条相应的java命令。</p>
<p>&nbsp;&nbsp; 命令格式如下：java -server xxxx.ClassName -args</p>
<p>&nbsp;&nbsp; nimbus---&gt; Running: /export/servers/jdk/bin/java -server&nbsp; backtype.storm.daemon.nimbus</p>
<p>&nbsp;&nbsp; supervisor---&gt; Running: /export/servers/jdk/bin/java -server&nbsp; backtype.storm.daemon.supervisor</p>
<p>&nbsp;</p>
<p>--------------nimbus---------------------&nbsp;&nbsp;</p>
<p>&nbsp;&nbsp;</p>
<p>2、nibums启动之后，接受客户端提交任务</p>
<p>&nbsp;&nbsp; 命令格式：storm jar xxx.jar&nbsp;&nbsp; xxx驱动类&nbsp; 参数</p>
<p>&nbsp;&nbsp; Running: /export/servers/jdk/bin/java -client -Dstorm.jar=/export/servers/storm/examples/storm-starter/storm-starter-topologies-0.9.6.jar storm.starter.WordCountTopology wordcount-28</p>
<p>&nbsp;&nbsp;</p>
<p>&nbsp;&nbsp; 该命令会执行 storm-starter-topologies-0.9.6.jar 中的storm-starter-topologies-0.9.6.jar的main方法，main方法中会执行以下代码：</p>
<p>&nbsp;&nbsp;&nbsp; StormSubmitter.submitTopology("mywordcount",config,topologyBuilder.createTopology());</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; topologyBuilder.createTopology()，会将程序猿编写的spout对象和bolt对象进行序列化。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 会将用户的jar上传到 nimbus物理节点的 /export/data/storm/workdir/nimbus/inbox目录下。并且改名，改名的规则是添加了一个UUID字符串。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在nimbus物理节点的 /export/data/storm/workdir/nimbus/stormdist目录下。有当前正在运行的topology的jar包和配置文件，序列化对象文件。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>&nbsp;&nbsp;</p>
<p>3、nimbus接受到任务之后，会将任务进行分配，分配会产生一个assignment对象，该对象会保存到zk中，目录是/storm/assignments ，该目录只保存正在运行的topology任务。</p>
<p>&nbsp;</p>
<p>--------supervisor------------------</p>
<p>&nbsp;</p>
<p>4、supervisor通过watch机制，感知到nimbus在zk上的任务分配信息，从zk上拉取任务信息，分辨出属于自己任务。</p>
<p>&nbsp;&nbsp;&nbsp; ResourceWorkerSlot[hostname=192.168.1.106,memSize=0,cpu=0,tasks=[1, 2, 3, 4, 5, 6, 7, 8],jvm=&lt;null&gt;,nodeId=61ce10a7-1e78-4c47-9fb3-c21f43a331ba,port=6900]</p>
<p>&nbsp;</p>
<p>5、supervisor 根据自己的任务信息，启动自己的worker，并分配一个端口。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '/export/servers/jdk/bin/java' '-server' '-Xmx768m' export/data/storm/workdir/supervisor/stormdist/wordcount1-3-1461683066/stormjar.jar' 'backtype.storm.daemon.worker' 'wordcount1-3-1461683066' 'a69bb8fc-e08e-4d55-b51f-e539b066f90b' '6701' '9fac2805-7d2b-4e40-aabc-1c85c9856d64'</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>---------worker----------------------</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>6、worker启动之后，连接zk，拉取任务</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ResourceWorkerSlot[hostname=192.168.1.106,memSize=0,cpu=0,tasks=[1, 2, 3, 4, 5, 6, 7, 8],jvm=&lt;null&gt;,nodeId=61ce10a7-1e78-4c47-9fb3-c21f43a331ba,port=6900]</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 假设任务信息：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1---&gt;spout---type:spout</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2---&gt;bolt ---type:bolt</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3---&gt;acker---type:bolt</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 得到对象有几种方式？ new ClassName 创建对象、class.forName 反射对象、clone 克隆对象、序列化反序列化</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; worker通过反序列化，得到程序员自己定义的spout和bolt对象。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>7、worker根据任务类型，分别执行spout任务或者bolt任务。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; spout的声明周期是：open、nextTuple、outPutFiled</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bolt的生命周期是：prepare、execute(tuple)、outPutFiled</p>
<p>&nbsp;</p>
<h3>2.5&nbsp; 启动流程代码说明</h3>
<p>jstorm supervisor如何启动worker，worker如何启动task</p>
<p>&nbsp;</p>
<p>1、下载Jstorm源码，在源码包下找到 daemon包，在这个包下有三个子包，分别是nimbus，supervisor，worker。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>2、通过架构图，我们已知nimbus分配任务，并将任务信息写入到zk上，supervisor读取zk上的任务后启动自己的worker。所以我们分析supervisor如何启动worker，worker如何启动task。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>3、supervisor如何启动worker。打开 com.alibaba.jstorm.daemon.supervisor.Supervisor 发现supervisor有几个方法，方法中有个mkSupervisor方法。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>4、进去Supervisor中的mkSupervisor方法，在第144行有以下的代码，改代码创建了SyncSupervisorEvent 对象。</p>
<p>&nbsp;</p>
<p>SyncSupervisorEvent syncSupervisorEvent =</p>
<p>new SyncSupervisorEvent(supervisorId, conf, syncSupEventManager, stormClusterState, localState, syncProcessEvent, hb);</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>5、SyncSupervisorEvent对象实现了RunnableCallback接口，该接口有个run方法会被定时执行。在run方法的191行，有代码如下，主要是要supervisor获取到任务信息，要开始准备启动worker了。</p>
<p>&nbsp;</p>
<p>syncProcesses.run(zkAssignment, downloadFailedTopologyIds);</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>6、syncProcesses是com.alibaba.jstorm.daemon.supervisor.SyncProcessEvent的</p>
<p>&nbsp;</p>
<p>引用变量，该类中有个自定义的run方法中有段代码如下，调用的startNewWorkers方法</p>
<p>&nbsp;</p>
<p>startNewWorkers(keepPorts, localAssignments, downloadFailedTopologyIds);</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>7、SyncProcessEvent的startNewWorkers方法有代码片段如下，主要是根据集群模式启动不同模式下的worker。我们跟踪分布式集群模式下的worker启动。</p>
<p>&nbsp;</p>
<p>for (Entry&lt;Integer, LocalAssignment&gt; entry : newWorkers.entrySet()) {</p>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp; if (clusterMode.equals(&ldquo;distributed&rdquo;)) {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; launchWorker(conf, sharedContext, assignment.getTopologyId(), supervisorId, port, workerId, assignment);</p>
<p>&nbsp;&nbsp;&nbsp; } else if (clusterMode.equals(&ldquo;local&rdquo;)) {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; launchWorker(conf, sharedContext, assignment.getTopologyId(), supervisorId, port, workerId, workerThreadPids);</p>
<p>&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;</p>
<p>}</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>8、在分布式模式下worker启动最终会调用一个类似于java -server xxx.worker 启动worker。由于第7步中，有个for循环，该for循环会迭代出属于当前supervisor的所有worker任务并启动。</p>
<p>&nbsp;</p>
<p>JStormUtils.launchProcess(cmd, environment, true);</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>9、java -server xxx.worker，命令执行之后，会执行Worker的mian方法。worker的main方法有代码如下，其实调用了worker自己内部的静态方法，叫做mk_worker方法。</p>
<p>&nbsp;</p>
<p>WorkerShutdown sd = mk_worker(conf, null, topology_id, supervisor_id, Integer.parseInt(port_str), worker_id, jar_path);</p>
<p>sd.join();</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>10、mk_worker静态方法，会执行以下代码，创建一个worker的实例，并立即执行execute方法。</p>
<p>&nbsp;</p>
<p>Worker w = new Worker(conf, context, topology_id, supervisor_id, port, worker_id, jar_path);</p>
<p>&nbsp;</p>
<p>return w.execute();</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>11、execute方法会执行以下代码创建一个RefreshConnections 的实例。</p>
<p>&nbsp;</p>
<p>RefreshConnections refreshConn = makeRefreshConnections();</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>12、makeRefreshConnections 方法会执行以下代码创建一个RefreshConnections 实例。</p>
<p>&nbsp;</p>
<p>RefreshConnections refresh_connections = new RefreshConnections(workerData);</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>13、RefreshConnections 是继承了 RunnableCallback，该实例的会有一个run方法会被定时执行。run方法中有以下代码，其中createTasks(addedTasks)方法用来创建Task任务。</p>
<p>&nbsp;</p>
<p>shutdownTasks(removedTasks);</p>
<p>createTasks(addedTasks);</p>
<p>updateTasks(updatedTasks);</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>14、createTasks方法有代码如下，循环启动属于该worker的Task任务，启动Task任务主要调用Task.mk_task(workerData, taskId);</p>
<p>&nbsp;</p>
<p>for (Integer taskId : tasks) {</p>
<p>try {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TaskShutdownDameon shutdown = Task.mk_task(workerData, taskId);</p>
<p>workerData.addShutdownTask(shutdown);</p>
<p>&nbsp;&nbsp;&nbsp; } catch (Exception e) {</p>
<p>LOG.error(&ldquo;Failed to create task-&rdquo; + taskId, e);</p>
<p>throw new RuntimeException(e);</p>
<p>&nbsp;&nbsp;&nbsp; }</p>
<p>}</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>15、Task.mk_task(workerData, taskId)方法实现如下，创建一个Task对象并立即调用execute方法。</p>
<p>&nbsp;</p>
<p>Task t = new Task(workerData, taskId);</p>
<p>return t.execute();</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>16、execute方法实现如下,用来初始化一个Executor，我们知道在默认情况下一个task等于一个executor。</p>
<p>&nbsp;</p>
<p>RunnableCallback baseExecutor = prepareExecutor();</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>17、进入prepareExecutor()方法，代码如下，发现代码调用了mkExecutor方法。</p>
<p>&nbsp;</p>
<p>final BaseExecutors baseExecutor = mkExecutor();</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>18、mkExecutor方法，代码如下，如果当前taskObj是Bolt就创建Bolt的executor，如果当前taskObj是Spout就创建相应的Spout executor。</p>
<p>&nbsp;</p>
<p>public BaseExecutors mkExecutor() {</p>
<p>&nbsp;&nbsp; BaseExecutors baseExecutor = null;</p>
<p>if (taskObj instanceof IBolt) {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; baseExecutor = new BoltExecutors(this);</p>
<p>&nbsp;&nbsp;&nbsp; } else if (taskObj instanceof ISpout) {</p>
<p>if (isSingleThread(stormConf) == true) {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; baseExecutor = new SingleThreadSpoutExecutors(this);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; baseExecutor = new MultipleThreadSpoutExecutors(this);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp; }</p>
<p>return baseExecutor;</p>
<p>}</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>19、创建完了executor，现在有两条线，分别是bolt executor和spout executor。以</p>
<p>&nbsp;</p>
<p>bolt executor 为例，这个executor会实现Disruptor的EventHandler接口。 接口onevent方法需要实现，实现代码中会调用processTupleEvent()方法。下面节选onevent中的部分代码。</p>
<p>&nbsp;</p>
<p>if (event instanceof Tuple) {</p>
<p>&nbsp;&nbsp;&nbsp; processControlEvent();</p>
<p>&nbsp;&nbsp;&nbsp; processTupleEvent((Tuple) event);</p>
<p>} else if (event instanceof BatchTuple) {</p>
<p>for (Tuple tuple : ((BatchTuple) event).getTuples()) {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; processControlEvent();</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; processTupleEvent((Tuple) tuple);</p>
<p>&nbsp;&nbsp;&nbsp; }</p>
<p>}</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>20、进入processTupleEvent方法，发现有代码如下，其实最终是调用了bolt.execute()方法。</p>
<p>&nbsp;</p>
<p>private void processTupleEvent(Tuple tuple) {</p>
<p>try {</p>
<p>if (xxx) {</p>
<p>backpressureTrigger.handle(tuple);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {</p>
<p>bolt.execute(tuple);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp; } catch (Throwable e) {</p>
<p>error = e;</p>
<p>LOG.error(&ldquo;bolt execute error &ldquo;, e);</p>
<p>report_error.report(e);</p>
<p>&nbsp;&nbsp;&nbsp; }</p>
<p>}</p>
<p>&nbsp;</p>]]></description></item><item><title>启动kafka报错</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/28/11261357.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 28 Jul 2019 14:47:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/28/11261357.html</guid><description><![CDATA[<p>执行启动kafka服务的命令时报错：nohup bin/kafka-server-start.sh config/server.properties 2&gt;&amp;1 &amp;</p>
<p>[2019-07-28 12:58:44,760] <span style="color: #ff0000;">ERROR [ReplicaManager broker=1] Error while making broker the follower for partition Topic: __consumer_offsets; Partition: 41; Leader: None; AssignedReplicas: ; InSyncReplicas:&nbsp; in dir None (kafka.server.ReplicaManager)</span><br />org.apache.kafka.common.errors.KafkaStorageException: Error while reading checkpoint file /export/servers/kafka_2.11-1.0.0/logs/replication-offset-checkpoint<br />Caused by: java.io.IOException: Malformed line in checkpoint file (/export/servers/kafka_2.11-1.0.0/logs/replication-offset-checkpoint): '<br />&nbsp;at kafka.server.checkpoints.CheckpointFile.malformedLineException$1(CheckpointFile.scala:84)<br />&nbsp;at kafka.server.checkpoints.CheckpointFile.liftedTree2$1(CheckpointFile.scala:117)<br />&nbsp;at kafka.server.checkpoints.CheckpointFile.read(CheckpointFile.scala:86)<br />&nbsp;at kafka.server.checkpoints.OffsetCheckpointFile.read(OffsetCheckpointFile.scala:61)<br />&nbsp;at kafka.cluster.Partition$$anonfun$getOrCreateReplica$1.apply(Partition.scala:147)<br />&nbsp;at kafka.cluster.Partition$$anonfun$getOrCreateReplica$1.apply(Partition.scala:142)<br />&nbsp;at kafka.utils.Pool.getAndMaybePut(Pool.scala:65)<br />&nbsp;at kafka.cluster.Partition.getOrCreateReplica(Partition.scala:141)<br />&nbsp;at kafka.server.ReplicaManager$$anonfun$makeFollowers$3.apply(ReplicaManager.scala:1227)<br />&nbsp;at kafka.server.ReplicaManager$$anonfun$makeFollowers$3.apply(ReplicaManager.scala:1204)<br />&nbsp;at scala.collection.mutable.HashMap$$anonfun$foreach$1.apply(HashMap.scala:130)<br />&nbsp;at scala.collection.mutable.HashMap$$anonfun$foreach$1.apply(HashMap.scala:130)<br />&nbsp;at scala.collection.mutable.HashTable$class.foreachEntry(HashTable.scala:236)<br />&nbsp;at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:40)<br />&nbsp;at scala.collection.mutable.HashMap.foreach(HashMap.scala:130)<br />&nbsp;at kafka.server.ReplicaManager.makeFollowers(ReplicaManager.scala:1204)<br />&nbsp;at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1065)<br />&nbsp;at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:173)<br />&nbsp;at kafka.server.KafkaApis.handle(KafkaApis.scala:103)<br />&nbsp;at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:65)<br />&nbsp;at java.lang.Thread.run(Thread.java:748)<br />[2019-07-28 12:58:44,764]<span style="color: #ff0000;"> ERROR Error while reading checkpoint file /export/servers/kafka_2.11-1.0.0/logs/replication-offset-checkpoint (kafka.server.LogDirFailureChannel)</span><br /><span style="color: #ff0000;">java.io.IOException: Malformed line in checkpoint file (/export/servers/kafka_2.11-1.0.0/logs/replication-offset-checkpoint): '</span><br />&nbsp;at kafka.server.checkpoints.CheckpointFile.malformedLineException$1(CheckpointFile.scala:84)<br />&nbsp;at kafka.server.checkpoints.CheckpointFile.liftedTree2$1(CheckpointFile.scala:117)<br />&nbsp;at kafka.server.checkpoints.CheckpointFile.read(CheckpointFile.scala:86)<br />&nbsp;at kafka.server.checkpoints.OffsetCheckpointFile.read(OffsetCheckpointFile.scala:61)<br />&nbsp;at kafka.cluster.Partition$$anonfun$getOrCreateReplica$1.apply(Partition.scala:147)<br />&nbsp;at kafka.cluster.Partition$$anonfun$getOrCreateReplica$1.apply(Partition.scala:142)<br />&nbsp;at kafka.utils.Pool.getAndMaybePut(Pool.scala:65)<br />&nbsp;at kafka.cluster.Partition.getOrCreateReplica(Partition.scala:141)<br />&nbsp;at kafka.server.ReplicaManager$$anonfun$makeFollowers$3.apply(ReplicaManager.scala:1227)<br />&nbsp;at kafka.server.ReplicaManager$$anonfun$makeFollowers$3.apply(ReplicaManager.scala:1204)<br />&nbsp;at scala.collection.mutable.HashMap$$anonfun$foreach$1.apply(HashMap.scala:130)<br />&nbsp;at scala.collection.mutable.HashMap$$anonfun$foreach$1.apply(HashMap.scala:130)<br />&nbsp;at scala.collection.mutable.HashTable$class.foreachEntry(HashTable.scala:236)<br />&nbsp;at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:40)<br />&nbsp;at scala.collection.mutable.HashMap.foreach(HashMap.scala:130)<br />&nbsp;at kafka.server.ReplicaManager.makeFollowers(ReplicaManager.scala:1204)<br />&nbsp;at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1065)<br />&nbsp;at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:173)<br />&nbsp;at kafka.server.KafkaApis.handle(KafkaApis.scala:103)<br />&nbsp;at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:65)<br />&nbsp;at java.lang.Thread.run(Thread.java:748)<br />[2019-07-28 12:58:44,765] ERROR [ReplicaManager broker=1] Error while making broker the follower for partition Topic: __consumer_offsets; Partition: 32; Leader: None; AssignedReplicas: ; InSyncReplicas:&nbsp; in dir None (kafka.server.ReplicaManager)<br /><span style="color: #ff0000;">org.apache.kafka.common.errors.KafkaStorageException: Error while reading checkpoint file /export/servers/kafka_2.11-1.0.0/logs/replication-offset-checkpoint</span><br />Caused by: java.io.IOException:<span style="color: #ff0000;"> Malformed line in checkpoint file (/export/servers/kafka_2.11-1.0.0/logs/replication-offset-checkpoint):</span> '<br />&nbsp;at kafka.server.checkpoints.CheckpointFile.malformedLineException$1(CheckpointFile.scala:84)<br />&nbsp;at kafka.server.checkpoints.CheckpointFile.liftedTree2$1(CheckpointFile.scala:117)<br />&nbsp;at kafka.server.checkpoints.CheckpointFile.read(CheckpointFile.scala:86)<br />&nbsp;at kafka.server.checkpoints.OffsetCheckpointFile.read(OffsetCheckpointFile.scala:61)<br />&nbsp;at kafka.cluster.Partition$$anonfun$getOrCreateReplica$1.apply(Partition.scala:147)<br />&nbsp;at kafka.cluster.Partition$$anonfun$getOrCreateReplica$1.apply(Partition.scala:142)<br />&nbsp;at kafka.utils.Pool.getAndMaybePut(Pool.scala:65)<br />&nbsp;at kafka.cluster.Partition.getOrCreateReplica(Partition.scala:141)<br />&nbsp;at kafka.server.ReplicaManager$$anonfun$makeFollowers$3.apply(ReplicaManager.scala:1227)<br />&nbsp;at kafka.server.ReplicaManager$$anonfun$makeFollowers$3.apply(ReplicaManager.scala:1204)<br />&nbsp;at scala.collection.mutable.HashMap$$anonfun$foreach$1.apply(HashMap.scala:130)<br />&nbsp;at scala.collection.mutable.HashMap$$anonfun$foreach$1.apply(HashMap.scala:130)<br />&nbsp;at scala.collection.mutable.HashTable$class.foreachEntry(HashTable.scala:236)<br />&nbsp;at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:40)<br />&nbsp;at scala.collection.mutable.HashMap.foreach(HashMap.scala:130)<br />&nbsp;at kafka.server.ReplicaManager.makeFollowers(ReplicaManager.scala:1204)<br />&nbsp;at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1065)<br />&nbsp;at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:173)<br />&nbsp;at kafka.server.KafkaApis.handle(KafkaApis.scala:103)<br />&nbsp;at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:65)<br />&nbsp;at java.lang.Thread.run(Thread.java:748)<br />[2019-07-28 12:58:44,766] INFO [ReplicaFetcherManager on broker 1] Removed fetcher for partitions&nbsp; (kafka.server.ReplicaFetcherManager)<br />[2019-07-28 12:58:44,774] INFO [ReplicaFetcherManager on broker 1] Added fetcher for partitions List() (kafka.server.ReplicaFetcherManager)<br />[2019-07-28 12:58:44,785] INFO [ReplicaManager broker=1] Partitions&nbsp; are offline due to failure on log directory /export/servers/kafka_2.11-1.0.0/logs (kafka.server.ReplicaManager)<br />[2019-07-28 12:58:44,804] INFO [ReplicaFetcherManager on broker 1] Removed fetcher for partitions&nbsp; (kafka.server.ReplicaFetcherManager)<br />[2019-07-28 12:58:44,812] INFO [ReplicaManager broker=1] Broker 1 stopped fetcher for partitions&nbsp; because they are in the failed log dir /export/servers/kafka_2.11-1.0.0/logs (kafka.server.ReplicaManager)<br />[2019-07-28 12:58:44,820] INFO Stopping serving logs in dir /export/servers/kafka_2.11-1.0.0/logs (kafka.log.LogManager)<br />[2019-07-28 12:58:44,824] <span style="color: #ff0000;">FATAL Shutdown broker because all log dirs in /export/servers/kafka_2.11-1.0.0/logs have failed (kafka.log.LogManager)</span></p>
<p>原因：kill -9 强制杀掉kafka进程，导致停止kafka时某些步骤没有处理，比如replication-offset-checkpoint文件没有处理好。</p>
<p>解决方法：备份/export/servers/kafka_2.11-1.0.0/logs/replication-offset-checkpoint文件，删掉该文件，然后重启kafka，就好了。</p>
<p>&nbsp;</p>]]></description></item><item><title>java的浅拷贝和深拷贝（待解决）</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/28/11261314.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 28 Jul 2019 14:38:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/28/11261314.html</guid><description><![CDATA[<p>1.什么是浅拷贝，什么是深拷贝？</p>
<p>&nbsp;</p>
<p>2.storm的并行度问题，需要使用全局变量static ConcorrentHashMap，因为加了static，所有的线程只能拷贝该全局变量的一个唯一的副本，进行操作，其他线程只能等待该线程操作完成才能处理该副本，即实现了单线程操作该副本，线程是安全的；不加static，可以拷贝多个副本，每个线程拷贝一个副本，操作完该副本后，再把该副本的数据赋值给原始的对象。&nbsp;</p>
<p>这个拷贝是深拷贝还是浅拷贝？</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190728225618162-830708261.png" alt="" /></p>
<p>&nbsp;</p>
<p>待解决。。。</p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 storm实时看板案例：12、实时看板综合案例代码完善；13、今日课程总结</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/28/11258740.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 28 Jul 2019 05:49:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/28/11258740.html</guid><description><![CDATA[<p>详见代码</p>
<p>&nbsp;</p>
<p>将任务提交到集群上面去运行</p>
<p><span lang="EN-US">apache-storm-1.1.1/bin/storm jar cn.itcast.storm.kafkaAndStorm.KafkTopology kafkaStorm</span></p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">=========================================</span></p>
<p>storm的介绍&nbsp; 了解</p>
<p>storm的架构模型：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nimbus：主节点，主要用于我们提交任务，分配任务的执行等等</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; supervisor：从节点，主要用于执行我们的任务</p>
<p>&nbsp;</p>
<p>storm的集群安装&nbsp; 搞定</p>
<p>storm的UI管理界面 了解</p>
<p>strom的入门案例wordcount&nbsp;&nbsp; 搞定</p>
<p>storm的并行度&nbsp; 要知道怎么调整并行度</p>
<p>storm的分发策略&nbsp; 了解一下</p>
<p>storm与kafka的整合&nbsp; 搞定&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bolt当中取下标4就是我们的数据</p>
<p>&nbsp;</p>
<p>实时看板综合案例以及redis的使用回顾&nbsp; 尽量的搞定</p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 storm实时看板案例：11、实时看板综合案例工程构建，redis的专业术语</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/28/11257439.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 27 Jul 2019 16:35:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/28/11257439.html</guid><description><![CDATA[<p>redis当中的一些专业术语：</p>
<p>redis缓存击穿</p>
<p>redis缓存雪崩</p>
<p>redis的缓存淘汰</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190728100329885-1931174044.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">===========================================</span></p>
<p>&nbsp;</p>
<p>详见代码</p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 storm实时看板案例：10、redis的安装使用回顾</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/26/11247920.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 25 Jul 2019 18:11:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/26/11247920.html</guid><description><![CDATA[<p>2、redis的持久化机制：</p>
<p>redis支持两种持久化机制：RDB&nbsp; AOF</p>
<p>RDB：多少秒之内，有多少个key放生变化，将redis当中的数据dump到磁盘保存，保存成一个文件，下次再恢复的时候，首先读取文件当中的数据到内存来</p>
<p>AOF：日志文件的操作记录&nbsp;&nbsp; 记录了我们操作redis的所有的步骤</p>
<p>&nbsp;</p>
<p>默认开启RDB，没有开启AOF，一般实现线上环境，都要开启AOF</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>如果开启了aof持久化机制，那么日志文件就会越写越大，如何控制日志文件不会膨胀太大：</p>
<p>rewrite&nbsp; 操作&nbsp;&nbsp; 每隔一段时间，合并日志当中的记录与redis数据库当中的数据</p>
<p>&nbsp;</p>
<p>&nbsp; &nbsp; lpush + lpop ：先进后出，栈模型。</p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">==============================================</span></p>
<h2>10.5 &nbsp;redis安装使用回顾</h2>
<p>&nbsp;</p>
<h3>第一步：下载redis安装包</h3>
<div>
<p class="a">wget http://download.redis.io/releases/redis-3.2.8.tar.gz</p>
</div>
<h3>第二步：解压redis压缩包到指定目录</h3>
<div>
<p class="a">tar -zxvf redis-3.2.8.tar.gz -C ../servers/</p>
</div>
<h3>第三步：安装C程序运行环境</h3>
<div>
<p class="a">yum -y install gcc-c++</p>
</div>
<h3>第四步：安装较新版本的tcl</h3>
<p>下载tcl</p>
<div>
<p class="a">wget <a href="http://downloads.sourceforge.net/tcl/tcl8.6.1-src.tar.gz">http://downloads.sourceforge.net/tcl/tcl8.6.1-src.tar.gz</a></p>
</div>
<p>解压tcl</p>
<div>
<p class="a">tar -zxvf tcl8.6.1-src.tar.gz -C ../servers/</p>
</div>
<p>进入指定目录</p>
<div>
<p class="a">cd ../servers/tcl8.6.1/unix/</p>
</div>
<p>执行./configure进行配置</p>
<div>
<p class="a">./configure</p>
<p class="a">make&nbsp; &amp;&amp; make&nbsp; install</p>
</div>
<p>第二种方式，在线安装tcl</p>
<div>
<p class="a">yum&nbsp; -y&nbsp; install&nbsp; tcl</p>
</div>
<h3>第五步：进行编译redis</h3>
<p>进行编译：</p>
<div>
<p class="a">cd ../servers/redis-3.2.8/</p>
<p class="a">make&nbsp;MALLOC=libc&nbsp;&nbsp; 或者仅使用命令&nbsp; make&nbsp; 进行编译</p>
<p class="a">make test &amp;&amp; make install</p>
</div>
<h3>第六步：修改redis配置文件</h3>
<p class="code"><span lang="EN-US">cd /export/servers/redis-3.2.8/</span></p>
<p class="code"><span lang="EN-US">mkdir -p /export/servers/redis-3.2.8/logs</span></p>
<p class="code"><span lang="EN-US">mkdir -p /export/servers/redis-3.2.8/redisdata</span></p>
<p class="code">&nbsp;</p>
<p>vim redis.conf</p>
<div>
<p class="a">bind 192.168. 8.110</p>
<p class="a">daemonize yes</p>
<p class="a">pidfile /var/run/redis_6379.pid</p>
<p class="a">logfile "/export/servers/redis-3.2.8/logs/redis.log"</p>
<p class="a">dir /export/servers/redis-3.2.8/redisdata</p>
</div>
<p>requirepass redis&nbsp; &nbsp; #设置密码，不需要的话也可以不设置&nbsp;</p>
<p>&nbsp;</p>
<h3>第七步：启动redis</h3>
<p>启动redis</p>
<div>
<p class="a">cd&nbsp; /export/servers/redis-3.2.8</p>
<p class="a">src/redis-server redis.conf</p>
</div>
<p>&nbsp;</p>
<h3>第八步：连接redis客户端</h3>
<div>
<p class="a">cd /export/servers/redis-3.2.8/src</p>
<p class="a">redis-cli -h 192.168.8.110</p>
</div>
<p>&nbsp; &nbsp; &nbsp;&nbsp;<span style="color: #4b4b4b; font-family: Verdana, Geneva, Arial, Helvetica, sans-serif; font-size: 13px;">redis-cli -h localhost -p 6379 monitor -a 123456&nbsp; &nbsp;#连接时指定主机名、端口、密码</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>redis的持久化</p>
<h3>第八步：如何配置redis&nbsp; RDB的持久化机制</h3>
<p>修改redis的配置文件</p>
<div>
<p class="a">vim /etc/redis/6379.conf</p>
<p class="a">save 900 1</p>
<p class="a">save 300 10</p>
<p class="a">save 60 10000<a href="file:///E:/Study/BigData/heima/stage3/2%E3%80%81storm%E7%AC%AC%E4%B8%80%E5%A4%A9/Storm%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%95%99%E6%A1%88.docx#_msocom_1">[a1]</a>&nbsp;</p>
<p class="a">save 5 1<a href="file:///E:/Study/BigData/heima/stage3/2%E3%80%81storm%E7%AC%AC%E4%B8%80%E5%A4%A9/Storm%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%95%99%E6%A1%88.docx#_msocom_2">[a2]</a>&nbsp;</p>
</div>
<p>&nbsp;</p>
<p>重新启动redis服务</p>
<p>每次生成新的dump.rdb都会覆盖掉之前的老的快照</p>
<p>如果使用kill&nbsp; -9&nbsp; 来杀死redis进程，下次启动redis的时候，就会发现redis启动不了，提示还有pid文件，需要将redis的pid文件删除掉，然后再启动即可</p>
<div>
<p class="a">cd&nbsp; /var/run</p>
<p class="a">rm -rf redis_6379.pid</p>
<p class="a">/etc/init.d/redis_6379 start</p>
</div>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190903235715605-1060129944.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>redis的数据类型：</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201909/1325651-20190903235826521-1698307223.png" alt="" /></p>
<p>redis当中一共支持五种数据类型，分别是string字符串类型，list列表类型，集合set类型，hash表类型以及有序集合zset类型，通过这五种不同的数据类型，我们可以实现各种不同的功能，也可以应用与各种不同的场景，接下来我们来看看五种数据类型的操作语法。</p>
<p>&nbsp;</p>
<h3>第九步：如何配置redis AOF的持久化机制</h3>
<p>在redis中，aof的持久化机制默认是关闭的</p>
<p>AOF持久化，默认是关闭的，默认是打开RDB持久化</p>
<p>&nbsp;</p>
<p>appendonly yes，可以打开AOF持久化机制，在生产环境里面，一般来说AOF都是要打开的，除非你说随便丢个几分钟的数据也无所谓</p>
<p>打开AOF持久化机制之后，redis每次接收到一条写命令，就会写入日志文件中，当然是先写入os cache的，然后每隔一定时间再fsync一下</p>
<p>而且即使AOF和RDB都开启了，redis重启的时候，也是优先通过AOF进行数据恢复的，因为aof数据比较完整</p>
<p>可以配置AOF的fsync策略，有三种策略可以选择，一种是每次写入一条数据就执行一次fsync; 一种是每隔一秒执行一次fsync; 一种是不主动执行fsync</p>
<p>always: 每次写入一条数据，立即将这个数据对应的写日志fsync到磁盘上去，性能非常非常差，吞吐量很低; 确保说redis里的数据一条都不丢，那就只能这样了</p>
<p>在redis当中默认的AOF持久化机制都是关闭的</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>配置redis的AOF持久化机制方式</h4>
<div>
<p class="a">appendonly yes</p>
<p class="a"># appendfsync always<a href="file:///E:/Study/BigData/heima/stage3/2%E3%80%81storm%E7%AC%AC%E4%B8%80%E5%A4%A9/Storm%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%95%99%E6%A1%88.docx#_msocom_3">[a3]</a>&nbsp;</p>
<p class="a">appendfsync everysec<a href="file:///E:/Study/BigData/heima/stage3/2%E3%80%81storm%E7%AC%AC%E4%B8%80%E5%A4%A9/Storm%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%95%99%E6%A1%88.docx#_msocom_4">[a4]</a>&nbsp;</p>
<p class="a"># appendfsync no<a href="file:///E:/Study/BigData/heima/stage3/2%E3%80%81storm%E7%AC%AC%E4%B8%80%E5%A4%A9/Storm%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%95%99%E6%A1%88.docx#_msocom_5">[a5]</a>&nbsp;</p>
</div>
<h4>Redis当中的rewrite操作</h4>
<p>redis中的数据其实有限的，很多数据可能会自动过期，可能会被用户删除，可能会被redis用缓存清除的算法清理掉</p>
<p>&nbsp;</p>
<p>redis中的数据会不断淘汰掉旧的，就一部分常用的数据会被自动保留在redis内存中</p>
<p>&nbsp;</p>
<p>所以可能很多之前的已经被清理掉的数据，对应的写日志还停留在AOF中，AOF日志文件就一个，会不断的膨胀，到很大很大</p>
<p>&nbsp;</p>
<p>所以AOF会自动在后台每隔一定时间做rewrite操作，比如日志里已经存放了针对100w数据的写日志了; redis内存只剩下10万; 基于内存中当前的10万</p>
<p>数据构建一套最新的日志，到AOF中; 覆盖之前的老日志; 确保AOF日志文件不会过大，保持跟redis内存数据量一致</p>
<p>&nbsp;</p>
<p>redis 2.4之前，还需要手动，开发一些脚本，crontab，通过BGREWRITEAOF命令去执行AOF rewrite，但是redis 2.4之后，会自动进行rewrite操作</p>
<p>在redis.conf中，可以配置rewrite策略</p>
<p>auto-aof-rewrite-percentage 100</p>
<p>auto-aof-rewrite-min-size 64mb</p>
<p>比如说上一次AOF rewrite之后，是128mb</p>
<p>然后就会接着128mb继续写AOF的日志，如果发现增长的比例，超过了之前的100%，256mb，就可能会去触发一次rewrite</p>
<p>但是此时还要去跟min-size，64mb去比较，256mb &gt; 64mb，才会去触发rewrite</p>
<p>&nbsp;</p>
<p>（1）redis fork一个子进程</p>
<p>（2）子进程基于当前内存中的数据，构建日志，开始往一个新的临时的AOF文件中写入日志</p>
<p>（3）redis主进程，接收到client新的写操作之后，在内存中写入日志，同时新的日志也继续写入旧的AOF文件</p>
<p>（4）子进程写完新的日志文件之后，redis主进程将内存中的新日志再次追加到新的AOF文件中</p>
<p>（5）用新的日志文件替换掉旧的日志文件</p>
<p>&nbsp;</p>
<h3>第九步：redis的操作回顾</h3>
<p>redis当中各种数据类型的操作：&nbsp;<a href="https://www.runoob.com/redis/redis-keys.html">https://www.runoob.com/redis/redis-keys.html</a></p>
<h4>String类型数据操作</h4>
<div>
<p class="a">redis 127.0.0.1:6379&gt; exists mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #判断该键是否存在，存在返回1，否则返回0。</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 0</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; append mykey "hello"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #该键并不存在，因此append命令返回当前Value的长度。</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 5</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; append mykey " world"&nbsp;&nbsp;&nbsp; #该键已经存在，因此返回追加后Value的长度。</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 11</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; get mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #通过get命令获取该键，以判断append的结果。</p>
<p class="a">&nbsp;&nbsp;&nbsp; "hello world"</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; set mykey "this is a test" #通过set命令为键设置新值，并覆盖原有值。</p>
<p class="a">&nbsp;&nbsp;&nbsp; OK</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; get mykey</p>
<p class="a">&nbsp;&nbsp;&nbsp; "this is a test"</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; strlen mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #获取指定Key的字符长度，等效于C库中strlen函数。</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 14</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2. INCR/DECR/INCRBY/DECRBY:</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; set mykey 20&nbsp;&nbsp;&nbsp;&nbsp; #设置Key的值为20</p>
<p class="a">&nbsp;&nbsp;&nbsp; OK</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; incr mykey &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#该Key的值递增1</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 21</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; decr mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #该Key的值递减1</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 20</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; del mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #删除已有键。</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; decr mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #对空值执行递减操作，其原值被设定为0，递减后的值为-1</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) -1</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; del mykey&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; incr mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #对空值执行递增操作，其原值被设定为0，递增后的值为1</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; set mykey hello #将该键的Value设置为不能转换为整型的普通字符串。</p>
<p class="a">&nbsp;&nbsp;&nbsp; OK</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; incr mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #在该键上再次执行递增操作时，Redis将报告错误信息。</p>
<p class="a">&nbsp;&nbsp;&nbsp; (error) ERR value is not an integer or out of range</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; set mykey 10</p>
<p class="a">&nbsp;&nbsp;&nbsp; OK</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; decrby mykey 5</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 5</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; incrby mykey 10</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 15</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3. GETSET：</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; incr mycounter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #将计数器的值原子性的递增1</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; #在获取计数器原有值的同时，并将其设置为新值，这两个操作原子性的同时完成。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; getset mycounter 0&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; "1"</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; get mycounter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #查看设置后的结果。</p>
<p class="a">&nbsp;&nbsp;&nbsp; "0"</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; 4. SETEX:</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; setex mykey 10 "hello"&nbsp;&nbsp; #设置指定Key的过期时间为10秒。</p>
<p class="a">&nbsp;&nbsp;&nbsp; OK&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; #通过ttl命令查看一下指定Key的剩余存活时间(秒数)，0表示已经过期，-1表示永不过期。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; ttl mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 4</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; get mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #在该键的存活期内我们仍然可以获取到它的Value。</p>
<p class="a">&nbsp;&nbsp;&nbsp; "hello"</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; ttl mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #该ttl命令的返回值显示，该Key已经过期。</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 0</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; get mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #获取已过期的Key将返回nil。</p>
<p class="a">&nbsp;&nbsp;&nbsp; (nil)</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp; 5. SETNX:</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; del mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #删除该键，以便于下面的测试验证。</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; setnx mykey "hello"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #该键并不存在，因此该命令执行成功。</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; setnx mykey "world"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #该键已经存在，因此本次设置没有产生任何效果。</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 0</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; get mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #从结果可以看出，返回的值仍为第一次设置的值。</p>
<p class="a">&nbsp;&nbsp;&nbsp; "hello"</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; 6. SETRANGE/GETRANGE:</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; set mykey "hello world"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #设定初始值。</p>
<p class="a">&nbsp;&nbsp;&nbsp; OK</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; setrange mykey 6 dd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #从第六个字节开始替换2个字节(dd只有2个字节)</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 11</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; get mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #查看替换后的值。</p>
<p class="a">&nbsp;&nbsp;&nbsp; "hello ddrld"</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; setrange mykey 20 dd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #offset已经超过该Key原有值的长度了，该命令将会在末尾补0。</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 22</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; get mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #查看补0后替换的结果。</p>
<p class="a">&nbsp;&nbsp;&nbsp; "hello ddrld\x00\x00\x00\x00\x00\x00\x00\x00\x00dd"</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; del mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #删除该Key。</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp; &nbsp;&nbsp;redis 127.0.0.1:6379&gt; setrange mykey 2 dd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #替换空值。</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 4</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; get mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #查看替换空值后的结果。</p>
<p class="a">&nbsp;&nbsp;&nbsp; "\x00\x00dd"&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; set mykey "0123456789"&nbsp;&nbsp; #设置新值。</p>
<p class="a">&nbsp;&nbsp;&nbsp; OK</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; getrange mykey 1 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #截取该键的Value，从第一个字节开始，到第二个字节结束。</p>
<p class="a">&nbsp;&nbsp;&nbsp; "12"</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; getrange mykey 1 20&nbsp;&nbsp; #20已经超过Value的总长度，因此将截取第一个字节后面的所有字节。</p>
<p class="a">&nbsp;&nbsp;&nbsp; "123456789"</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; 7. SETBIT/GETBIT:</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; del mykey</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; setbit mykey 7 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #设置从0开始计算的第七位BIT值为1，返回原有BIT值0</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 0</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; get mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #获取设置的结果，二进制的0000 0001的十六进制值为0x01</p>
<p class="a">&nbsp;&nbsp;&nbsp; "\x01"</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; setbit mykey 6 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #设置从0开始计算的第六位BIT值为1，返回原有BIT值0</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 0</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; get mykey&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #获取设置的结果，二进制的0000 0011的十六进制值为0x03</p>
<p class="a">&nbsp;&nbsp;&nbsp; "\x03"</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; getbit mykey 6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #返回了指定Offset的BIT值。</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; getbit mykey 10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #Offset已经超出了value的长度，因此返回0。</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 0</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp; 8. MSET/MGET/MSETNX:</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; mset key1 "hello" key2 "world"&nbsp;&nbsp; #批量设置了key1和key2两个键。</p>
<p class="a">&nbsp;&nbsp;&nbsp; OK</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; mget key1 key2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #批量获取了key1和key2两个键的值。</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "hello"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "world"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #批量设置了key3和key4两个键，因为之前他们并不存在，所以该命令执行成功并返回1。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; msetnx key3 "stephen" key4 "liu"</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; mget key3 key4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "stephen"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "liu"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #批量设置了key3和key5两个键，但是key3已经存在，所以该命令执行失败并返回0。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; msetnx key3 "hello" key5 "world"</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 0</p>
<p class="a">&nbsp;&nbsp;&nbsp; #批量获取key3和key5，由于key5没有设置成功，所以返回nil。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; mget key3 key5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "stephen"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) (nil)</p>
</div>
<h4>List集合操作命令</h4>
<div>
<p class="a">1. LPUSH/LPUSHX/LRANGE:</p>
<p class="a">&nbsp;&nbsp;&nbsp; /&gt; redis-cli&nbsp;&nbsp;&nbsp; #在Shell提示符下启动redis客户端工具。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; del mykey</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; #mykey键并不存在，该命令会创建该键及与其关联的List，之后在将参数中的values从左到右依次插入。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lpush mykey a b c d</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 4</p>
<p class="a">&nbsp;&nbsp;&nbsp; #取从位置0开始到位置2结束的3个元素。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lrange mykey 0 2</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3) "b"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #取链表中的全部元素，其中0表示第一个元素，-1表示最后一个元素。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lrange mykey 0 -1</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3) "b"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 4) "a"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #mykey2键此时并不存在，因此该命令将不会进行任何操作，其返回值为0。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lpushx mykey2 e</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 0</p>
<p class="a">&nbsp;&nbsp;&nbsp; #可以看到mykey2没有关联任何List Value。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lrange mykey2 0 -1</p>
<p class="a">&nbsp;&nbsp;&nbsp; (empty list or set)</p>
<p class="a">&nbsp;&nbsp;&nbsp; #mykey键此时已经存在，所以该命令插入成功，并返回链表中当前元素的数量。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lpushx mykey e</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 5</p>
<p class="a">&nbsp;&nbsp;&nbsp; #获取该键的List Value的头部元素。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lrange mykey 0 0</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "e"</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2. LPOP/LLEN:</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lpush mykey a b c d</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 4</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lpop mykey</p>
<p class="a">&nbsp;&nbsp;&nbsp; "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lpop mykey</p>
<p class="a">&nbsp;&nbsp;&nbsp; "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #在执行lpop命令两次后，链表头部的两个元素已经被弹出，此时链表中元素的数量是2</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; llen mykey</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 2</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp; 3. LREM/LSET/LINDEX/LTRIM:</p>
<p class="a">&nbsp;&nbsp;&nbsp; #为后面的示例准备测试数据。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lpush mykey a b c d a c</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 6</p>
<p class="a">&nbsp;&nbsp;&nbsp; #从头部(left)向尾部(right)变量链表，删除2个值等于a的元素，返回值为实际删除的数量。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lrem mykey 2 a</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 2</p>
<p class="a">&nbsp;&nbsp;&nbsp; #看出删除后链表中的全部元素。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lrange mykey 0 -1</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3) "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 4) "b"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #获取索引值为1(头部的第二个元素)的元素值。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lindex mykey 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #将索引值为1(头部的第二个元素)的元素值设置为新值e。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lset mykey 1 e</p>
<p class="a">&nbsp;&nbsp;&nbsp; OK</p>
<p class="a">&nbsp;&nbsp;&nbsp; #查看是否设置成功。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lindex mykey 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; "e"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #索引值6超过了链表中元素的数量，该命令返回nil。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lindex mykey 6</p>
<p class="a">&nbsp;&nbsp;&nbsp; (nil)</p>
<p class="a">&nbsp;&nbsp;&nbsp; #设置的索引值6超过了链表中元素的数量，设置失败，该命令返回错误信息。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lset mykey 6 hh</p>
<p class="a">&nbsp;&nbsp;&nbsp; (error) ERR index out of range</p>
<p class="a">&nbsp;&nbsp;&nbsp; #仅保留索引值0到2之间的3个元素，注意第0个和第2个元素均被保留。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; ltrim mykey 0 2</p>
<p class="a">&nbsp;&nbsp;&nbsp; OK</p>
<p class="a">&nbsp;&nbsp;&nbsp; #查看trim后的结果。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lrange mykey 0 -1</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "e"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3) "c"</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; 4. LINSERT:</p>
<p class="a">&nbsp;&nbsp;&nbsp; #删除该键便于后面的测试。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; del mykey</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; #为后面的示例准备测试数据。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lpush mykey a b c d e</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 5</p>
<p class="a">&nbsp;&nbsp;&nbsp; #在a的前面插入新元素a1。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; linsert mykey before a a1</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 6</p>
<p class="a">&nbsp;&nbsp;&nbsp; #查看是否插入成功，从结果看已经插入。注意lindex的index值是0-based。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lindex mykey 0</p>
<p class="a">&nbsp;&nbsp;&nbsp; "e"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #在e的后面插入新元素e2，从返回结果看已经插入成功。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; linsert mykey after e e2</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 7</p>
<p class="a">&nbsp;&nbsp;&nbsp; #再次查看是否插入成功。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lindex mykey 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; "e2"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #在不存在的元素之前或之后插入新元素，该命令操作失败，并返回-1。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; linsert mykey after k a</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) -1</p>
<p class="a">&nbsp;&nbsp;&nbsp; #为不存在的Key插入新元素，该命令操作失败，返回0。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; linsert mykey1 after a a2</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 0</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; 5. RPUSH/RPUSHX/RPOP/RPOPLPUSH:</p>
<p class="a">&nbsp;&nbsp;&nbsp; #删除该键，以便于后面的测试。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; del mykey</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; #从链表的尾部插入参数中给出的values，插入顺序是从左到右依次插入。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; rpush mykey a b c d</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 4</p>
<p class="a">&nbsp;&nbsp;&nbsp; #通过lrange的可以获悉rpush在插入多值时的插入顺序。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lrange mykey 0 -1</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "a"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "b"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3) "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 4) "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #该键已经存在并且包含4个元素，rpushx命令将执行成功，并将元素e插入到链表的尾部。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; rpushx mykey e</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 5</p>
<p class="a">&nbsp;&nbsp;&nbsp; #通过lindex命令可以看出之前的rpushx命令确实执行成功，因为索引值为4的元素已经是新元素了。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lindex mykey 4</p>
<p class="a">&nbsp;&nbsp;&nbsp; "e"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #由于mykey2键并不存在，因此该命令不会插入数据，其返回值为0。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; rpushx mykey2 e</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 0</p>
<p class="a">&nbsp;&nbsp;&nbsp; #在执行rpoplpush命令前，先看一下mykey中链表的元素有哪些，注意他们的位置关系。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lrange mykey 0 -1</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "a"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "b"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3) "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 4) "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 5) "e"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #将mykey的尾部元素e弹出，同时再插入到mykey2的头部(原子性的完成这两步操作)。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; rpoplpush mykey mykey2</p>
<p class="a">&nbsp;&nbsp;&nbsp; "e"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #通过lrange命令查看mykey在弹出尾部元素后的结果。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lrange mykey 0 -1</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "a"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "b"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3) "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 4) "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #通过lrange命令查看mykey2在插入元素后的结果。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lrange mykey2 0 -1</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "e"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #将source和destination设为同一键，将mykey中的尾部元素移到其头部。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; rpoplpush mykey mykey</p>
<p class="a">&nbsp;&nbsp;&nbsp; "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #查看移动结果。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; lrange mykey 0 -1</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "a"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3) "b"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 4) "c"</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>Hash操作命令集合</h4>
<div>
<p class="a">1. HSET/HGET/HDEL/HEXISTS/HLEN/HSETNX:</p>
<p class="a">&nbsp;&nbsp;&nbsp; #在Shell命令行启动Redis客户端程序</p>
<p class="a">&nbsp;&nbsp;&nbsp; /&gt; redis-cli</p>
<p class="a">&nbsp;&nbsp;&nbsp; #给键值为myhash的键设置字段为field1，值为stephen。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hset myhash field1 "stephen"</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; #获取键值为myhash，字段为field1的值。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hget myhash field1</p>
<p class="a">&nbsp;&nbsp;&nbsp; "stephen"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #myhash键中不存在field2字段，因此返回nil。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hget myhash field2</p>
<p class="a">&nbsp;&nbsp;&nbsp; (nil)</p>
<p class="a">&nbsp;&nbsp;&nbsp; #给myhash关联的Hashes值添加一个新的字段field2，其值为liu。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hset myhash field2 "liu"</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; #获取myhash键的字段数量。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hlen myhash</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 2</p>
<p class="a">&nbsp;&nbsp;&nbsp; #判断myhash键中是否存在字段名为field1的字段，由于存在，返回值为1。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hexists myhash field1</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; #删除myhash键中字段名为field1的字段，删除成功返回1。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hdel myhash field1</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; #再次删除myhash键中字段名为field1的字段，由于上一条命令已经将其删除，因为没有删除，返回0。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hdel myhash field1</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 0</p>
<p class="a">&nbsp;&nbsp;&nbsp; #判断myhash键中是否存在field1字段，由于上一条命令已经将其删除，因为返回0。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hexists myhash field1</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 0</p>
<p class="a">&nbsp;&nbsp;&nbsp; #通过hsetnx命令给myhash添加新字段field1，其值为stephen，因为该字段已经被删除，所以该命令添加成功并返回1。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hsetnx myhash field1 stephen</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; #由于myhash的field1字段已经通过上一条命令添加成功，因为本条命令不做任何操作后返回0。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hsetnx myhash field1 stephen</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 0</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp; 2. HINCRBY：</p>
<p class="a">&nbsp;&nbsp;&nbsp; #删除该键，便于后面示例的测试。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; del myhash</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; #准备测试数据，该myhash的field字段设定值1。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hset myhash field 5</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; #给myhash的field字段的值加1，返回加后的结果。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hincrby myhash field 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 6</p>
<p class="a">&nbsp;&nbsp;&nbsp; #给myhash的field字段的值加-1，返回加后的结果。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hincrby myhash field -1</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 5</p>
<p class="a">&nbsp;&nbsp;&nbsp; #给myhash的field字段的值加-10，返回加后的结果。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hincrby myhash field -10</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) -5&nbsp;&nbsp;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3. HGETALL/HKEYS/HVALS/HMGET/HMSET:</p>
<p class="a">&nbsp;&nbsp;&nbsp; #删除该键，便于后面示例测试。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; del myhash</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; #为该键myhash，一次性设置多个字段，分别是field1 = "hello", field2 = "world"。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hmset myhash field1 "hello" field2 "world"</p>
<p class="a">&nbsp;&nbsp;&nbsp; OK</p>
<p class="a">&nbsp;&nbsp;&nbsp; #获取myhash键的多个字段，其中field3并不存在，因为在返回结果中与该字段对应的值为nil。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hmget myhash field1 field2 field3</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "hello"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "world"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3) (nil)</p>
<p class="a">&nbsp;&nbsp;&nbsp; #返回myhash键的所有字段及其值，从结果中可以看出，他们是逐对列出的。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hgetall myhash</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "field1"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "hello"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3) "field2"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 4) "world"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #仅获取myhash键中所有字段的名字。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hkeys myhash</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "field1"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "field2"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #仅获取myhash键中所有字段的值。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; hvals myhash</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "hello"</p>
<p class="a">2) "world"</p>
</div>
<p>&nbsp;</p>
<h4>Set集合操作命令</h4>
<div>
<p class="a">1. SADD/SMEMBERS/SCARD/SISMEMBER:</p>
<p class="a">&nbsp;&nbsp;&nbsp; #在Shell命令行下启动Redis的客户端程序。</p>
<p class="a">&nbsp;&nbsp;&nbsp; /&gt; redis-cli</p>
<p class="a">&nbsp;&nbsp;&nbsp; #插入测试数据，由于该键myset之前并不存在，因此参数中的三个成员都被正常插入。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; sadd myset a b c</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 3</p>
<p class="a">&nbsp;&nbsp;&nbsp; #由于参数中的a在myset中已经存在，因此本次操作仅仅插入了d和e两个新成员。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; sadd myset a d e</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 2</p>
<p class="a">&nbsp;&nbsp;&nbsp; #判断a是否已经存在，返回值为1表示存在。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; sismember myset a</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; #判断f是否已经存在，返回值为0表示不存在。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; sismember myset f</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 0</p>
<p class="a">&nbsp;&nbsp;&nbsp; #通过smembers命令查看插入的结果，从结果可以，输出的顺序和插入顺序无关。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; smembers myset</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3) "a"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 4) "b"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 5) "e"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #获取Set集合中元素的数量。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; scard myset</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 5</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2. SPOP/SREM/SRANDMEMBER/SMOVE:</p>
<p class="a">&nbsp;&nbsp;&nbsp; #删除该键，便于后面的测试。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; del myset</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; #为后面的示例准备测试数据。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; sadd myset a b c d</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 4</p>
<p class="a">&nbsp;&nbsp;&nbsp; #查看Set中成员的位置。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; smembers myset</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3) "a"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 4) "b"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #从结果可以看出，该命令确实是随机的返回了某一成员。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; srandmember myset</p>
<p class="a">&nbsp;&nbsp;&nbsp; "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #Set中尾部的成员b被移出并返回，事实上b并不是之前插入的第一个或最后一个成员。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; spop myset</p>
<p class="a">&nbsp;&nbsp;&nbsp; "b"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #查看移出后Set的成员信息。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; smembers myset</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3) "a"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #从Set中移出a、d和f三个成员，其中f并不存在，因此只有a和d两个成员被移出，返回为2。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; srem myset a d f</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 2</p>
<p class="a">&nbsp;&nbsp;&nbsp; #查看移出后的输出结果。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; smembers myset</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #为后面的smove命令准备数据。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; sadd myset a b</p>
<p class="a">&nbsp; &nbsp;&nbsp;(integer) 2</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; sadd myset2 c d</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 2</p>
<p class="a">&nbsp;&nbsp;&nbsp; #将a从myset移到myset2，从结果可以看出移动成功。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; smove myset myset2 a</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; #再次将a从myset移到myset2，由于此时a已经不是myset的成员了，因此移动失败并返回0。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; smove myset myset2 a</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 0</p>
<p class="a">&nbsp;&nbsp;&nbsp; #分别查看myset和myset2的成员，确认移动是否真的成功。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; smembers myset</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "b"</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; smembers myset2</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3) "a"</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp; 3. SDIFF/SDIFFSTORE/SINTER/SINTERSTORE:</p>
<p class="a">&nbsp;&nbsp;&nbsp; #为后面的命令准备测试数据。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; sadd myset a b c d</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 4</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; sadd myset2 c</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; sadd myset3 a c e</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 3</p>
<p class="a">&nbsp;&nbsp;&nbsp; #myset和myset2相比，a、b和d三个成员是两者之间的差异成员。再用这个结果继续和myset3进行差异比较，b和d是myset3不存在的成员。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; sdiff myset myset2 myset3</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "b"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #将3个集合的差异成员存在在diffkey关联的Set中，并返回插入的成员数量。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; sdiffstore diffkey myset myset2 myset3</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 2</p>
<p class="a">&nbsp;&nbsp;&nbsp; #查看一下sdiffstore的操作结果。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; smembers diffkey</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "b"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #从之前准备的数据就可以看出，这三个Set的成员交集只有c。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; sinter myset myset2 myset3</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #将3个集合中的交集成员存储到与interkey关联的Set中，并返回交集成员的数量。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; sinterstore interkey myset myset2 myset3</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 1</p>
<p class="a">&nbsp;&nbsp;&nbsp; #查看一下sinterstore的操作结果。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; smembers interkey</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; #获取3个集合中的成员的并集。&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; sunion myset myset2 myset3</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "b"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3) "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 4) "e"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 5) "a"</p>
<p class="a">&nbsp;&nbsp; &nbsp;#将3个集合中成员的并集存储到unionkey关联的set中，并返回并集成员的数量。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; sunionstore unionkey myset myset2 myset3</p>
<p class="a">&nbsp;&nbsp;&nbsp; (integer) 5</p>
<p class="a">&nbsp;&nbsp;&nbsp; #查看一下suiionstore的操作结果。</p>
<p class="a">&nbsp;&nbsp;&nbsp; redis 127.0.0.1:6379&gt; smembers unionkey</p>
<p class="a">&nbsp;&nbsp;&nbsp; 1) "b"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 2) "c"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 3) "d"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 4) "e"</p>
<p class="a">&nbsp;&nbsp;&nbsp; 5) "a"</p>
</div>
<div><hr align="left" size="1" width="33%" />
<div>
<div>
<p>&nbsp;<a href="file:///E:/Study/BigData/heima/stage3/2%E3%80%81storm%E7%AC%AC%E4%B8%80%E5%A4%A9/Storm%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%95%99%E6%A1%88.docx#_msoanchor_1">[a1]</a>这三个选项是redis的配置文件默认自带的存储机制。表示每隔多少秒，有多少个key发生变化就生成一份dump.rdb文件，作为redis的快照文件</p>
<p>例如：save&nbsp; 60&nbsp; 10000 表示在60秒内，有10000个key发生变化，就会生成一份redis的快照</p>
</div>
</div>
<div>
<div>
<p>&nbsp;<a href="file:///E:/Study/BigData/heima/stage3/2%E3%80%81storm%E7%AC%AC%E4%B8%80%E5%A4%A9/Storm%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%95%99%E6%A1%88.docx#_msoanchor_2">[a2]</a>我自己修改的配置，表示每隔五秒钟，有一条数据发生变化都需要重新生成redis的快照</p>
</div>
</div>
<div>
<p>&nbsp;<a href="file:///E:/Study/BigData/heima/stage3/2%E3%80%81storm%E7%AC%AC%E4%B8%80%E5%A4%A9/Storm%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%95%99%E6%A1%88.docx#_msoanchor_3">[a3]</a>always: 每次写入一条数据，立即将这个数据对应的写日志fsync到磁盘上去，性能非常非常差，吞吐量很低; 确保说redis里的数据一条都不丢，那就只能这样了</p>
</div>
<div>
<div>
<p>&nbsp;<a href="file:///E:/Study/BigData/heima/stage3/2%E3%80%81storm%E7%AC%AC%E4%B8%80%E5%A4%A9/Storm%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%95%99%E6%A1%88.docx#_msoanchor_4">[a4]</a>每秒将os cache中的数据fsync到磁盘，这个最常用的，生产环境一般都这么配置，性能很高，QPS还是可以上万的</p>
</div>
</div>
<div>
<div>
<p>&nbsp;<a href="file:///E:/Study/BigData/heima/stage3/2%E3%80%81storm%E7%AC%AC%E4%B8%80%E5%A4%A9/Storm%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%95%99%E6%A1%88.docx#_msoanchor_5">[a5]</a>仅仅redis负责将数据写入os cache就撒手不管了，然后后面os自己会时不时有自己的策略将数据刷入磁盘，不可控了</p>
</div>
</div>
</div>
<p>&nbsp;</p>]]></description></item><item><title>第2节 storm实时看板案例：9、实时看板综合案例</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/26/11247918.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 25 Jul 2019 18:10:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/26/11247918.html</guid><description><![CDATA[<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190727230941530-1734965206.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">===================================</span></p>
<h1>10、实时看板案例</h1>
<h2>10.1 项目需求梳理</h2>
<p>根据订单mq，快速计算双11当天的订单量、销售金额。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190726020924065-1671529440.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190726020929724-2107761183.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 storm编程：9、storm与kafka的整合</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/24/11241612.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 24 Jul 2019 15:38:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/24/11241612.html</guid><description><![CDATA[<p>详见代码。</p>
<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190725214257913-1608097246.png" alt="" /></p>
<p>&nbsp;下图，为设置kafka的首次消费策略，即首次消费的偏移量的示例：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190725220516072-282091164.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 storm编程：8、storm的分发策略</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/24/11241539.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 24 Jul 2019 15:20:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/24/11241539.html</guid><description><![CDATA[<h1>8. Storm的分发策略</h1>
<p>Storm当中的分组策略，一共有八种：</p>
<p>所谓的grouping策略就是在Spout与Bolt、Bolt与Bolt之间传递Tuple的方式。总共有八种方式：</p>
<p>&nbsp;1）shuffleGrouping（随机分组）随机分组；将tuple随机分配到bolt中，能够保证各task中处理的数据均衡；</p>
<p>&nbsp;2）fieldsGrouping（按照字段分组，在这里即是同一个单词只能发送给一个Bolt）</p>
<p>按字段分组； 根据设定的字段相同值得tuple被分配到同一个bolt进行处理；</p>
<p>举例：builder.setBolt("mybolt", new MyStoreBolt(),5).fieldsGrouping("checkBolt",new Fields("uid"));</p>
<p>说明：该bolt由5个任务task执行，相同uid的元组tuple被分配到同一个task进行处理；该task接收的元祖字段是mybolt发射出的字段信息，不受uid分组的影响。</p>
<p>&nbsp; &nbsp; 该分组不仅方便统计而且还可以通过该方式保证相同uid的数据保存不重复（uid信息写入数据库中唯一）；</p>
<p>&nbsp;</p>
<p>&nbsp;3）allGrouping（广播发送，即每一个Tuple，每一个Bolt都会收到）广播发送：所有bolt都可以收到该tuple</p>
<p>&nbsp;4）globalGrouping（全局分组，将Tuple分配到task id值最低的task里面）全局分组：tuple被发送给bolt的同一个并且最小task_id的任务处理，实现事务性的topology</p>
<p>&nbsp;5）noneGrouping（随机分派）不分组：效果等同于shuffle Grouping.</p>
<p>&nbsp;6）directGrouping（直接分组，指定Tuple与Bolt的对应发送关系）</p>
<p>直接分组：由tuple的发射单元直接决定tuple将发射给那个bolt，一般情况下是由接收tuple的bolt决定接收哪个bolt发射的Tuple。这是一种比较特别的分组方法，用这种分组意味着消息的发送者指定由消息接收者的哪个task处理这个消息。 只有被声明为Direct Stream的消息流可以声明这种分组方法。而且这种消息tuple必须使用emitDirect方法来发射。消息处理者可以通过TopologyContext来获取处理它的消息的taskid (OutputCollector.emit方法也会返回taskid)。</p>
<p>&nbsp;7）Local or shuffle Grouping本地或者随机分组，优先将数据发送到本机的处理器executor，如果本机没有对应的处理器，那么再发送给其他机器的executor，避免了网络资源的拷贝，减轻网络传输的压力</p>
<p>&nbsp;8）customGrouping （自定义的Grouping）</p>
<p>&nbsp;</p>]]></description></item><item><title>idea中的Storm1.1.1工程自定义日志级别</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/24/11241276.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 24 Jul 2019 14:21:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/24/11241276.html</guid><description><![CDATA[<p>在idea中跑storm工程时，因为Storm中的日志级级别默认为INFO，控制台总是打印出很多没用的INFO级别的日志，导致我自己在代码中的sout内容看不清楚。</p>
<p>于是想着自定义日志的打印级别为WARN或ERROR。</p>
<p>网上查找了很多资料，有的说修改logback.xml, 有的说修改logback下的cluster.xml。但都没用。</p>
<p>后来终于找到了方法，在resources资源文件夹下，添加log4j2.xml （该文件是日志的配置文件，存在于storm-core-1.1.1.jar包中，用来进行日志的相关配置。）</p>
<p>如果手动添加了log4j2.xml，则程序会优先使用手动设置的resources下的这个log4j2.xml。</p>
<p>该文件的内容如下，只要拷贝该文件到resources目录下，然后修改其中的日志级别即可：</p>
<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;!--<br /> Licensed to the Apache Software Foundation (ASF) under one or more<br /> contributor license agreements.  See the NOTICE file distributed with<br /> this work for additional information regarding copyright ownership.<br /> The ASF licenses this file to You under the Apache License, Version 2.0<br /> (the "License"); you may not use this file except in compliance with<br /> the License.  You may obtain a copy of the License at<br /><br />     http://www.apache.org/licenses/LICENSE-2.0<br /><br /> Unless required by applicable law or agreed to in writing, software<br /> distributed under the License is distributed on an "AS IS" BASIS,<br /> WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br /> See the License for the specific language governing permissions and<br /> limitations under the License.<br />--&gt;<br /><br />&lt;configuration monitorInterval="60"&gt;<br />  &lt;Appenders&gt;<br />    &lt;Console name="Console" target="SYSTEM_OUT"&gt;<br />     &lt;PatternLayout pattern="%-4r [%t] %-5p %c{1.} - %msg%n"/&gt;<br />    &lt;/Console&gt;<br />  &lt;/Appenders&gt;<br />  &lt;Loggers&gt;<br />    &lt;Logger name="org.apache.zookeeper" level="WARN"/&gt;<br />    &lt;Root level="info"&gt;<br />      &lt;AppenderRef ref="Console"/&gt;<br />    &lt;/Root&gt;<br />  &lt;/Loggers&gt;<br />&lt;/configuration&gt;</pre>
<p>&nbsp;</p>
<h3><strong><span style="color: #ff0000;">未完。。。</span></strong></h3>
<p>下面说一下日志级别：</p>
<p><strong>日志信息的优先级</strong></p>
<p>org.apache.log4j.Level类提供以下级别，但也可以通过Level类的子类自定义级别。</p>
<table class="src">
<tbody>
<tr><th>Level</th><th>描述</th></tr>
<tr>
<td>ALL</td>
<td>各级包括自定义级别</td>
</tr>
<tr>
<td>DEBUG</td>
<td>指定细粒度信息事件是最有用的应用程序调试</td>
</tr>
<tr>
<td>ERROR</td>
<td>错误事件可能仍然允许应用程序继续运行</td>
</tr>
<tr>
<td>FATAL</td>
<td>指定非常严重的错误事件，这可能导致应用程序中止</td>
</tr>
<tr>
<td>INFO</td>
<td>指定能够突出在粗粒度级别的应用程序运行情况的信息的消息</td>
</tr>
<tr>
<td>OFF</td>
<td>这是最高等级，为了关闭日志记录</td>
</tr>
<tr>
<td>TRACE</td>
<td>指定细粒度比DEBUG更低的信息事件</td>
</tr>
<tr>
<td>WARN</td>
<td>指定具有潜在危害的情况</td>
</tr>
</tbody>
</table>
<h2>日志级别是如何工作的？</h2>
<p>级别p的级别使用q，在记录日志请求时，如果p&gt;=q启用。这条规则是log4j的核心。它假设级别是有序的。对于标准级别它们关系如下：ALL &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF。越往右，级别越高，错误越严重。</p>
<p>设置其中某个日志级别，则其左侧的日志类型都不会输出，相反，其右侧的日志类型都会输出。</p>
<p>比如设置ERROR，则all,debug,info,warn级别的日志都不会输出；error,fatal,off级别的日志都会输出。</p>
<p>&nbsp;</p>
<p>trace： 是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出。</p>
<p>debug： 调试。</p>
<p>info： 输出一下你感兴趣的或者重要的信息。</p>
<p>warn： 有些信息不是错误信息，但是也要给程序员的一些提示，类似于eclipse中代码的验证不是有error 和warn（不算错误但是也请注意，比如以下depressed的方法）。</p>
<p>error： 错误信息。用的也比较多。</p>
<p>fatal： 级别比较高了。重大错误，这种级别你可以直接停止程序了，是不应该出现的错误。</p>
<p>&nbsp;</p>
<h3><strong><span style="color: #ff0000;">还未完。。。</span></strong></h3>
<p>最后的最后，发现不用自定义日志级别，也能关闭打印INFO级别的日志。</p>
<p>原来我在main函数中设置了&nbsp;config.setDebug(true);&nbsp;</p>
<p>只要在main函数中，设置，config.setDebug(false); 默认就是false。&nbsp;</p>
<p>&nbsp;</p>]]></description></item><item><title>IDEA中maven工程打包时使用跳过test模式</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/24/11240906.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 24 Jul 2019 13:16:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/24/11240906.html</guid><description><![CDATA[<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190724211527501-1270518162.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>storm的JavaAPI运行报错</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/24/11240852.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 24 Jul 2019 13:05:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/24/11240852.html</guid><description><![CDATA[<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190724210233207-754204303.png" alt="" /></p>
<p>报错：<span style="color: #ff0000;">java.lang.NoClassDefFoundError: org/apache/storm/topology/IRichSpout</span></p>
<p>原因：idea的bug：本地运行时设置scope为provided，则会导致找不到依赖包。</p>
<pre>&lt;!--<br /> test<br /> provided  编译的时候需要，打包的时候不要,<br />            IDEA的bug：运行的时候也找不到这个包下面的所有的类<br /> compile<br /> 默认<br /> --&gt;<br />&lt;!-- 本地运行注释掉，打包集群运行打开--&gt;<br />&lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</pre>
<p>&nbsp;</p>]]></description></item><item><title>第1节 storm编程：7、并行度分析以及如何解决线程安全问题</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/24/11235388.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 23 Jul 2019 16:52:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/24/11235388.html</guid><description><![CDATA[<p>storm其实就是一个多进程与多线程的框架</p>
<p>开多个进程：分配到的资源更多</p>
<p>开多个线程：执行的速度更快</p>
<p>设置进程个数以及线程个数</p>
<p><span style="color: #ff0000;">============================================</span></p>
<h1>7. storm的并行度</h1>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190724231413520-876517398.png" alt="" /></p>
<p>&nbsp;</p>
<div>
<p class="a">config.setNumWorkers(1);</p>
<p class="a">topologyBuilder.setSpout("mySpout", new RandomSpout(),3);</p>
<p class="a">topologyBuilder.setBolt("splitBolt", <strong>new</strong> SplitBolt(),3).shuffleGrouping("mySpout");</p>
<p class="a">topologyBuilder.setBolt("countBolt", <strong>new</strong> CountBolt(),3).setNumTasks(4).shuffleGrouping("splitBolt");</p>
</div>
<p>Storm当中的worker，executor，task之间的相互关系</p>
<p>Worker：表示一个进程</p>
<p>Executor：表示由worker启动的线程</p>
<p>一个worker只会负责一个topology任务，不会出现一个worker负责多个topology任务的情况。</p>
<p>一个worker进程当中，可以启动多个线程executor，也就是说，一个worker进程可以对应多个executor线程</p>
<p>task 是实际执行数据处理的最小工作单元（注意，task 并不是线程） &mdash;&mdash; 在你的代码中实现的每个 spout 或者 bolt 都会在集群中运行很多个 task。在拓扑的整个生命周期中每个组件的 task 数量都是保持不变的，不过每个组件的 executor 数量却是有可能会随着时间变化。在默认情况下 task 的数量是和 executor 的数量一样的，也就是说，默认情况下 Storm 会在每个线程上运行一个 task</p>
<p>注：调整task的数量，并不能够实际上提高storm的并行度，因为storm不管是spout还是bolt当中的代码都是串行执行的，就算一个executor对应多个task，这多个task也是串行去执行executor当中的代码，所以这个调整task的个数，实际上并不能提高storm的并行度</p>
<p>在实际工作当中，由于spout与bolt的数量不能够精准确定，所以需要随时调整spout与bolt的数量，所以在storm当中，我们可以通过命令来动态的进行调整</p>
<p>storm rebalance mytopo -n 3 -e mySpout=5 -e splitBolt=6 -e countBolt=8</p>
<p>一定要注意：重新调整的时候=号两边不要有空格</p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 storm编程：5、6、入门案例wordcount</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/24/11235387.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 23 Jul 2019 16:51:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/24/11235387.html</guid><description><![CDATA[<p>详见代码</p>]]></description></item><item><title>第1节 storm编程：4、storm环境安装以及storm编程模型介绍</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/23/11229385.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 22 Jul 2019 16:41:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/23/11229385.html</guid><description><![CDATA[<p>dataSource：数据源，生产数据的东西</p>
<p>spout：接收数据源过来的数据，然后将数据往下游发送</p>
<p>bolt：数据的处理逻辑单元。可以有很多个，基本上每个bolt都处理一部分工作，然后将数据继续往下游的bolt发送</p>
<p>&nbsp;</p>
<p>storm不会保存数据，也不会生产数据，只是一个数据的搬运工</p>
<p>tuple：元组的概念，可以理解为一个数组，或者一个集合，里面可以封装很多东西，数据从上游往下游发送，都是封装在tuple里面了</p>
<p>topology：spout与bolt组织到一起，形成一个topology&nbsp;</p>
<p>注意，配置文件比较严格，直接拷贝，尽量不要去手写！</p>
<p><span style="color: #ff0000;">===========================================</span></p>
<h1>1、&nbsp; storm的安装</h1>
<p>三台机器运行服务规划</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="138">
<p>运行服务\机器规划</p>
</td>
<td valign="top" width="138">
<p>Node01</p>
</td>
<td valign="top" width="138">
<p>Node02</p>
</td>
<td valign="top" width="138">
<p>Node03</p>
</td>
</tr>
<tr>
<td valign="top" width="138">
<p>Zookeeper版本</p>
</td>
<td colspan="3" valign="top" width="415">
<p align="center">3.4.5</p>
</td>
</tr>
<tr>
<td valign="top" width="138">
<p>Zookeeper服务</p>
</td>
<td valign="top" width="138">
<p>是</p>
</td>
<td valign="top" width="138">
<p>是</p>
</td>
<td valign="top" width="138">
<p>是</p>
</td>
</tr>
<tr>
<td valign="top" width="138">
<p>Storm版本</p>
</td>
<td colspan="3" valign="top" width="415">
<p align="center">Apache-storm-1.1.1</p>
</td>
</tr>
<tr>
<td valign="top" width="138">
<p>Nimbus服务</p>
</td>
<td valign="top" width="138">
<p>是（leader）</p>
</td>
<td valign="top" width="138">
<p>是</p>
</td>
<td valign="top" width="138">
<p>是</p>
</td>
</tr>
<tr>
<td valign="top" width="138">
<p>Supervisor服务</p>
</td>
<td valign="top" width="138">
<p>是</p>
</td>
<td valign="top" width="138">
<p>是</p>
</td>
<td valign="top" width="138">
<p>是</p>
</td>
</tr>
<tr>
<td valign="top" width="138">
<p>IP地址规划</p>
</td>
<td valign="top" width="138">
<p>192.168.52.100</p>
</td>
<td valign="top" width="138">
<p>192.168.52.110</p>
</td>
<td valign="top" width="138">
<p>192.168.52.120</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>3.1三台机器安装zookeeper服务</h2>
<p>Node01配置文件修改</p>
<p>修改zoo.cfg</p>
<div>
<p class="a">dataDir=/export/servers/zookeeper-3.4.9/zkData/data</p>
<p class="a">dataLogDir=/export/servers/zookeeper-3.4.9/zkData/log</p>
<p class="a">autopurge.snapRetainCount=3</p>
<p class="a">autopurge.purgeInterval=1</p>
<p class="a">server.1=node01:2888:3888</p>
<p class="a">server.2=node02:2888:3888</p>
<p class="a">server.3=node03:2888:3888</p>
</div>
<p>修改myid</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190723204903316-2116448457.png" alt="" /></p>
<p>&nbsp;</p>
<p>Node02 修改配置文件</p>
<p>修改zoo.cfg</p>
<div>
<p class="a">dataDir=/export/servers/zookeeper-3.4.9/zkData/data</p>
<p class="a">dataLogDir=/export/servers/zookeeper-3.4.9/zkData/log</p>
<p class="a">autopurge.snapRetainCount=3</p>
<p class="a">autopurge.purgeInterval=1</p>
<p class="a">server.1=node01:2888:3888</p>
<p class="a">server.2=node02:2888:3888</p>
<p class="a">server.3=node03:2888:3888</p>
</div>
<p>&nbsp;</p>
<p>修改myid</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Node03修改配置文件</p>
<p>修改zoo.cfg</p>
<div>
<p class="a">dataDir=/export/servers/zookeeper-3.4.9/zkData/data</p>
<p class="a">dataLogDir=/export/servers/zookeeper-3.4.9/zkData/log</p>
<p class="a">autopurge.snapRetainCount=3</p>
<p class="a">autopurge.purgeInterval=1</p>
<p class="a">server.1=node01:2888:3888</p>
<p class="a">server.2=node02:2888:3888</p>
<p class="a">server.3=node03:2888:3888</p>
</div>
<p>修改myid</p>
<p>&nbsp;</p>
<p>三台服务器启动zookeeper服务</p>
<p>bin/zkServer.sh&nbsp; start&nbsp;</p>
<p>三台机器查看zookeeper服务状态</p>
<p>bin/zkServer.sh status</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>3.2、三台机器安装storm集群</h2>
<p>1、上传storm压缩包</p>
<p>2、解压</p>
<p>tar -zxvf apache-storm-1.1.1.tar.gz -C ../servers/</p>
<p>&nbsp;</p>
<p>3、修改配置文件</p>
<div>
<p class="a">storm.zookeeper.servers:</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp; - "node01"</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp; - "node02"</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp; - "node03"</p>
<p class="a">#</p>
<p class="a">nimbus.seeds: ["node01", "node02", "node03"]</p>
<p class="a">&nbsp;</p>
<p class="a">storm.local.dir: "/export/servers/apache-storm-1.1.1/stormdata"</p>
<p class="a">ui.port: 8088 #修改为8089，因为和kafka的8088冲突了</p>
<p class="a">supervisor.slots.ports:</p>
<p class="a">&nbsp;&nbsp;&nbsp; - 6700</p>
<p class="a">&nbsp;&nbsp;&nbsp; - 6701</p>
<p class="a">&nbsp;&nbsp;&nbsp; - 6702</p>
<p class="a">&nbsp;&nbsp;&nbsp; - 6703</p>
</div>
<p>&nbsp;</p>
<p>4、将storm安装程序分发拷贝到另外两台机器上</p>
<p>scp -r apache-storm-1.1.1/ node02:/export/servers/</p>
<p>scp -r apache-storm-1.1.1/ node03:$PWD</p>
<p>&nbsp;</p>
<p>2、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 三台机器启动storm服务</p>
<p>Node01 启动相关服务</p>
<p>启动 nimbus进程</p>
<p>nohup bin/storm nimbus &gt;/dev/null 2&gt;&amp;1 &amp;</p>
<p>启动web&nbsp; UI</p>
<p>nohup bin/storm ui &gt;/dev/null 2&gt;&amp;1 &amp;</p>
<p>启动logViewer</p>
<p>nohup bin/storm logviewer &gt;/dev/null 2&gt;&amp;1 &amp;&nbsp;</p>
<p>启动supervisor</p>
<p>nohup bin/storm supervisor &gt;/dev/null 2&gt;&amp;1 &amp;</p>
<p>&nbsp;</p>
<p>Node02启动相关服务</p>
<p>nimbus：nohup bin/storm nimbus &gt;/dev/null 2&gt;&amp;1 &amp;&nbsp;<br />
logviewer：nohup bin/storm
logviewer &gt;/dev/null 2&gt;&amp;1 &amp;&nbsp;<br />
supervisor：nohup bin/storm
supervisor &gt;/dev/null 2&gt;&amp;1 &amp;</p>
<p>&nbsp;</p>
<p>node03启动相关服务</p>
<p>nimbus：nohup bin/storm
nimbus &gt;/dev/null 2&gt;&amp;1 &amp;&nbsp;<br />
logviewer：nohup bin/storm
logviewer &gt;/dev/null 2&gt;&amp;1 &amp;&nbsp;<br />
supervisor：nohup bin/storm
supervisor &gt;/dev/null 2&gt;&amp;1 &amp;</p>
<p>&nbsp;</p>
<h1>4、&nbsp; storm的UI界面管理</h1>
<p>访问地址</p>
<p>http://192.168.8.100:8089/index.html&nbsp; &nbsp; 或者&nbsp;&nbsp;</p>
<p>http://node01:8089/</p>
<h1>2.
storm的编程模型</h1>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190723205037516-582117110.png" alt="" /></p>
<p>DataSource：外部数据源</p>
<p>Spout：接受外部数据源的组件，将外部数据源转化成Storm内部的数据，以Tuple为基本的传输单元下发给Bolt</p>
<p>Bolt:接受Spout发送的数据，或上游的bolt的发送的数据。根据业务逻辑进行处理。发送给下一个Bolt或者是存储到某种介质上。介质可以是mongodb或mysql，或者其他。</p>
<p>Tuple：Storm内部中数据传输的基本单元，里面封装了一个List对象，用来保存数据。</p>
<p>StreamGrouping:数据分组策略&nbsp;<br />
7种：shuffleGrouping(Random函数),</p>
<p>Non Grouping(Random函数),</p>
<p>FieldGrouping(Hash取模)、</p>
<p>Local or ShuffleGrouping 本地或随机，优先本地。</p>
<p>其中Local or
ShuffleGrouping 是如果分组的时候接收bolt的线程和发送者在一个JVM中默认优先选择一个JVM中的bolt就是local，否则和ShuffleGrouping效果一样。</p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 storm编程：3、storm的架构模型的介绍</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11223345.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 21 Jul 2019 15:23:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11223345.html</guid><description><![CDATA[<p>nimbus：主节点，接收客户端提交的任务，并且分配任务，新的版本当中nimbus已经可以有多个了</p>
<p>zookeeper集群：storm依靠zk来保存一些节点信息，nimbus将分配的任务信息都写入到zk当中</p>
<p>supervisor：从节点，主要是我们的任务执行的节点，两个作用，接收任务，负责管理worker进程</p>
<p>worker：进程的概念，资源分配的单位<br />
executor：线程的概念，CPU调度执行的单位</p>
<p>task：任务的执行，新的版本里面已经没了</p>
<p><span style="color: #ff0000;">================================================</span></p>
<h1>1、&nbsp; storm的架构模型</h1>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190723000645358-1888450823.png" alt="" /></p>
<p>&nbsp;</p>
<ol>
<li>Nimbus：负责资源分配和任务调度。新版本中的nimbus节点可以有多个，做主备</li>
<li>Supervisor：负责接受nimbus分配的任务，启动和停止属于自己管理的worker进程。</li>
<li>Worker：运行具体处理组件逻辑的进程。</li>
<li>Task：worker中每一个spout/bolt的线程称为一个task. 在storm0.8之后，task不再与物理线程对应，同一个spout/bolt的task可能会共享一个物理线程，该线程称为executor。最新版本的Jstorm已经废除了task的概念</li>
</ol>]]></description></item><item><title>第1节 storm编程：2、storm的基本介绍</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11223342.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 21 Jul 2019 15:22:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11223342.html</guid><description><![CDATA[<h1>课程大纲：</h1>
<p>1、storm的基本介绍</p>
<p>2、storm的架构模型</p>
<p>3、storm的安装</p>
<p>4、storm的UI管理界面</p>
<p>5、storm的编程模型</p>
<p>6、storm的入门程序</p>
<p>7、storm的并行度</p>
<p>8、storm的消息的分发策略</p>
<p>9、strom与kafka的集成&nbsp; 搞定</p>
<p>10、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实时看板综合案例</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>1、 storm的基本介绍</h1>
<p>storm的官网：<a href="http://storm.apache.org/">http://storm.apache.org/</a></p>
<p>&nbsp;</p>
<p>twitter公司开源提供的，最早的一个版本是0.8.0，处理速度比较快</p>
<p>认知的海岛越大，无知的海岸线越长</p>
<p>&nbsp;</p>
<p align="left">Storm是一个开源的分布式实时计算系统，可以简单、可靠的处理大量的数据流。Storm有很多使用场景：如实时分析，在线机器学习，持续计算，分布式RPC，ETL等等。Storm支持水平扩展，具有高容错性，保证每个消息都会得到处理，而且处理速度很快（在一个小集群中，每个结点每秒可以处理数以百万计的消息）。Storm的部署和运维都很便捷，而且更为重要的是可以使用任意编程语言来开发应用。<br />
Storm有如下特点：<br />
<br />
</p>
<ul>
<li>编程模型简单</li>

</ul>
<p align="left">在大数据处理方面相信大家对hadoop已经耳熟能详，基于Google Map/Reduce来实现的Hadoop为开发者提供了map、reduce原语，使并行批处理程序变得非常地简单和优美。同样，Storm也为大数据的实时计算提供了一些简单优美的原语，这大大降低了开发并行实时处理的任务的复杂性，帮助你快速、高效的开发应用。<br />
<br />
</p>
<ul>
<li>可扩展</li>

</ul>
<p align="left">在Storm集群中真正运行topology的主要有三个实体：工作进程、线程和任务。Storm集群中的每台机器上都可以运行多个工作进程，每个工作进程又可创建多个线程，每个线程可以执行多个任务，任务是真正进行数据处理的实体，我们开发的spout、bolt就是作为一个或者多个任务的方式执行的。<br />
因此，计算任务在多个线程、进程和服务器之间并行进行，支持灵活的水平扩展。<br />
<br />
</p>
<ul>
<li>高可靠性</li>

</ul>
<p align="left">Storm可以保证spout发出的每条消息都能被&ldquo;完全处理&rdquo;，这也是直接区别于其他实时系统的地方，如S4。<br />
请注意，spout发出的消息后续可能会触发产生成千上万条消息，可以形象的理解为一棵消息树，其中spout发出的消息为树根，Storm会跟踪这棵消息树的处理情况，只有当这棵消息树中的所有消息都被处理了，Storm才会认为spout发出的这个消息已经被&ldquo;完全处理&rdquo;。如果这棵消息树中的任何一个消息处理失败了，或者整棵消息树在限定的时间内没有&ldquo;完全处理&rdquo;，那么spout发出的消息就会重发。<br />
考虑到尽可能减少对内存的消耗，Storm并不会跟踪消息树中的每个消息，而是采用了一些特殊的策略，它把消息树当作一个整体来跟踪，对消息树中所有消息的唯一id进行异或计算，通过是否为零来判定spout发出的消息是否被&ldquo;完全处理&rdquo;，这极大的节约了内存和简化了判定逻辑，后面会对这种机制进行详细介绍。<br />
这种模式，每发送一个消息，都会同步发送一个ack/fail，对于网络的带宽会有一定的消耗，如果对于可靠性要求不高，可通过使用不同的emit接口关闭该模式。<br />
上面所说的，Storm保证了每个消息至少被处理一次，但是对于有些计算场合，会严格要求每个消息只被处理一次，幸而Storm的0.7.0引入了事务性拓扑，解决了这个问题，后面会有详述。<br />
<br />
</p>
<ul>
<li>高容错性</li>

</ul>
<p align="left">如果在消息处理过程中出了一些异常，Storm会重新安排这个出问题的处理单元。Storm保证一个处理单元永远运行（除非你显式杀掉这个处理单元）。<br />
当然，如果处理单元中存储了中间状态，那么当处理单元重新被Storm启动的时候，需要应用自己处理中间状态的恢复。<br />
<br />
</p>
<ul>
<li>支持多种编程语言</li>

</ul>
<p align="left">除了用java实现spout和bolt，你还可以使用任何你熟悉的编程语言来完成这项工作，这一切得益于Storm所谓的多语言协议。多语言协议是Storm内部的一种特殊协议，允许spout或者bolt使用标准输入和标准输出来进行消息传递，传递的消息为单行文本或者是json编码的多行。<br />
Storm支持多语言编程主要是通过ShellBolt, ShellSpout和ShellProcess这些类来实现的，这些类都实现了IBolt
和 ISpout接口，以及让shell通过java的ProcessBuilder类来执行脚本或者程序的协议。<br />
可以看到，采用这种方式，每个tuple在处理的时候都需要进行json的编解码，因此在吞吐量上会有较大影响。<br />
<br />
</p>
<ul>
<li>支持本地模式</li>

</ul>
<p align="left">Storm有一种&ldquo;本地模式&rdquo;，也就是在进程中模拟一个Storm集群的所有功能，以本地模式运行topology跟在集群上运行topology类似，这对于我们开发和测试来说非常有用。<br />
<br />
</p>
<ul>
<li>高效</li>

</ul>
<p>&nbsp;</p>
<p>与mapreduce相比较：</p>
<p>storm比较快，mapreduce比较慢</p>
<p>strom是流式处理 ，mapreduce是一堆数据处理一次</p>
<p>&nbsp;</p>
<p>最终要的特点：流式处理，处理速度快</p>]]></description></item><item><title>第1节 storm编程：1、storm第一天上次课程内容回顾</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11223289.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 21 Jul 2019 15:08:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11223289.html</guid><description><![CDATA[<p>上次课程内容回顾：<br />1、kafka的基本介绍：kafka是一个消息队列<br />2、消息队列的作用：解耦<br />3、kafka与传统消息队列的对比：<br />	传统消息队列：支持事务<br />	kafka的特点：比较快，比较快的两个原因：顺序读写磁盘，pageCache页缓存机制<br />4、kafka的架构模型：<br />	producer：消息的生产者，主要就是用于生产数据<br />	topic：消息的主题，可以理解为一类消息的高度抽象的集合<br />	broker：服务器<br />	partition：一个topic下面有多个partition，分区，一个partition保存了一个topic的部分消息，为了防止消息不丢失，引入副本备份机制<br />		   partition究竟应该创建多少个合适？？？根据实际情况而定<br />	segment：一个partition下面有多个segement，把一个partiton当中的数据，切成了多个segment段，一个segment下面由两个文件构成<br />	.log：我们的日志数据  hello   world  hadoop<br />	.index：存储的我们的索引数据   hello  1  world  2   hadoop 3 便于我们快速的查找  使用的是二分查找法<br />	0000000000.log<br />	0000000000.index</p>
<p>	0000000100.log<br />	0000000100.index</p>
<p>	zookeeper：保存了我们topic的一些数据信息，比如说topic有多少个partition，partition有多少个副本等等<br />	consumer：消费者，主要用于消费我们kafka当中的数据<br />	offset：记录消费的偏移量    2  也就是记录了我们下次的消费数据的条数<br />	group：消费组的概念，设置不同的组，就是不同的消费者。如果A组消费了第一条数据，那么A组就再消费不到第一条数据了，但是B组还可以从第一条开始消费<br />	<br />5、kafka的安装：<br />	依赖zk，需要提前安装好zk<br />	kafka的解压，修改配置，安装包分发，启动<br />6、kafka的命令行的管理使用<br />	第一个：创建topic<br />	第二个：模拟生产者<br />	第三个：模拟消费者<br />7、kafka的javaAPI的开发<br />	<br />8、kafka的分区策略：四种<br />	1、指定分区号<br />	2、没有分区号，有数据的key，按照key取上hashCode来进行分区<br />	3、没有分区号，也没有数据的key，轮循分发数据<br />	4、自定义分区  properties.put("partitioner.class","xxx.xxxx.xxx")</p>
<p>9、flume与kafka的整合<br />	<br />10、kafka的配置文件的说明<br />	server.properties<br />	consumer.properties<br />	producer.properties</p>
<p>11、kafka如何保证数据不丢失<br />	producer：消息的ack确认机制   1:leader保存好了数据  0：没有任何保证  -1 ：leader以及follower都保存好了数据<br />	consumer：消息的offset偏移量的记录<br />	broker：备份机制<br />12、kafka-manager监控工具的使用</p>]]></description></item><item><title>第1节 kafka消息队列：11、kafka的数据不丢失机制，以及kafka-manager监控工具的使用；12、课程总结</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11221090.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 21 Jul 2019 06:19:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11221090.html</guid><description><![CDATA[<h1>12、kafka如何保证数据的不丢失</h1>
<h2>12.1生产者如何保证数据的不丢失</h2>
<p>kafka的ack机制：在kafka发送数据的时候，每次发送消息都会有一个确认反馈机制，确保消息正常的能够被收到</p>
<p>如果是同步模式：ack机制能够保证数据的不丢失，如果ack设置为0，风险很大，一般不建议设置为0</p>
<p>producer.type=sync&nbsp;<br />
request.required.acks=1</p>
<p>&nbsp;</p>
<p>如果是异步模式：通过buffer来进行控制数据的发送，有两个值来进行控制，时间阈值与消息的数量阈值，如果buffer满了数据还没有发送出去，如果设置的是立即清理模式，风险很大，一定要设置为阻塞模式</p>
<p>结论：producer有丢数据的可能，但是可以通过配置保证消息的不丢失</p>
<p>producer.type=async&nbsp;<br />
request.required.acks=1&nbsp;<br />
queue.buffering.max.ms=5000&nbsp;<br />
queue.buffering.max.messages=10000&nbsp;<br />
queue.enqueue.timeout.ms = -1&nbsp;<br />
batch.num.messages=200</p>
<p>&nbsp;</p>
<h2>12.2 消费者如何保证数据的不丢失</h2>
<p>通过offset&nbsp; commit&nbsp;
来保证数据的不丢失，kafka自己记录了每次消费的offset数值，下次继续消费的时候，接着上次的offset进行消费即可</p>
<p>&nbsp;</p>
<h2>12.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; broker如何保证数据的不丢失：</h2>
<p>partition的副本机制</p>
<p>&nbsp;</p>
<h1>13、kafkaManager监控工具的安装与使用</h1>
<h2>第一步：下载kafkaManager</h2>
<p>源码下载地址：</p>
<p><a href="https://github.com/yahoo/kafka-manager/">https://github.com/yahoo/kafka-manager/</a></p>
<p>下载源码，然后上传解压准备编译</p>
<p>&nbsp;</p>
<div>
<p class="a">cd /export/servers/kafka-manager-1.3.3.15</p>
<p class="a">unzip kafka-manager-1.3.3.15.zip -d&nbsp; ../servers/</p>
<p class="a">./sbt clean dist</p>





</div>
<p>编译完成之后，我们需要的安装包就在这个路径之下</p>
<div>
<p class="a">/export/servers/kafka-manager-1.3.3.15/target/universal</p>





</div>
<p>需要下载源码进行自己编译，比较麻烦，不要自己编译，已经有编译好的版本可以拿过来直接使用即可</p>
<p>&nbsp;</p>
<h2>第二步：上传编译好的压缩包并解压</h2>
<p>将我们编译好的kafkamanager的压缩包上传到服务器并解压</p>
<div>
<p class="a">cd&nbsp; /export/softwares</p>
<p class="a">unzip kafka-manager-1.3.3.15.zip -d
/export/servers/</p>





</div>
<p>&nbsp;</p>
<h2>第三步：修改配置文件</h2>
<div>
<p class="a">cd /export/servers/kafka-manager-1.3.3.15/</p>
<p class="a">vim&nbsp; conf/application.conf</p>





</div>
<p>&nbsp;</p>
<p>kafka-manager.zkhosts="node01:2181,node02:2181,node03:2181"</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>第四步：为kafkamanager的启动脚本添加执行权限</h2>
<div>
<p class="a">cd /export/servers/kafka-manager-1.3.3.15/bin</p>
<p class="a">chmod u+x ./*</p>





</div>
<p>&nbsp;</p>
<h2>第五步：启动kafkamanager进程</h2>
<div>
<p class="a">cd /export/servers/kafka-manager-1.3.3.15</p>
<p class="a">nohup bin/kafka-manager&nbsp; -Dconfig.file=/export/servers/kafka-manager-1.3.3.15/conf/application.conf
-Dhttp.port=8070&nbsp;&nbsp; 2&gt;&amp;1 &amp;</p>





</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>第六步：浏览器页面访问</h2>
<p><a href="http://node03:8070/">http://node01:8070/</a></p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">==================================================</span></p>
<p>课程总结：</p>
<p>1、kafka的基本介绍</p>
<p>2、kafka与传统消息队列的比较</p>
<p>为什么业务系统用activeMQ：基于事务的保证</p>
<p>为什么大数据平台用kafka：吞吐量大，速度快</p>
<p>&nbsp;</p>
<p>3、kafka的组件模型的介绍：&nbsp; 搞定</p>
<p>producer：消息的生产者</p>
<p>topic：一类消息的集合</p>
<p>broker：服务器</p>
<p>consumer：消费者，消费topic当中的数据</p>
<p>partition：分区，一个topic由多个partition组成</p>
<p>segment：一个partition由多个segment组成</p>
<p>.log：数据文件</p>
<p>.index：数据的索引数据</p>
<p>&nbsp;</p>
<p>4、kafka的安装：搞定</p>
<p>&nbsp;</p>
<p>5、kakfa命令行的使用&nbsp;&nbsp; 搞定</p>
<p>创建topic&nbsp; 模拟生产者&nbsp; 模拟消费者</p>
<p>&nbsp;</p>
<p>6、kafka的java API&nbsp;&nbsp; 跑通就行</p>
<p>&nbsp;</p>
<p>7、kafka的数据的分区策略：知道</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第一种：指定分区号</p>
<p>第二种：没有分区号，有了数据的key值，直接按照key取hashCode进行分区</p>
<p>第三种：没有分区号，也没有key值，轮循发送</p>
<p>第四种：自定义分区</p>
<p>&nbsp;</p>
<p>8、kafka的配置文件的说明 了解</p>
<p>&nbsp;</p>
<p>9、flume与kafka的整合&nbsp; 搞定</p>
<p>10、kakfa的监控工具的使用&nbsp; 尽量安装成功</p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 kafka消息队列：10、flume与kafka的整合使用</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11220728.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 21 Jul 2019 05:55:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11220728.html</guid><description><![CDATA[<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190721135806605-1863907425.png" alt="" /></p>
<p>&nbsp;</p>
<h1>11、flume与kafka的整合</h1>
<p>实现flume监控某个目录下面的所有文件，然后将文件收集发送到kafka消息系统中</p>
<p>第一步：flume下载地址</p>
<p><a href="http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.6.0-cdh5.14.0.tar.gz">http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.6.0-cdh5.14.0.tar.gz</a></p>
<p>&nbsp;</p>
<p>第二步：上传解压flume</p>
<p>&nbsp;</p>
<p>第三步：配置flume.conf</p>
<div>
<p class="a">#为我们的source channel&nbsp; sink起名</p>
<p class="a">a1.sources = r1</p>
<p class="a">a1.channels = c1</p>
<p class="a">a1.sinks = k1</p>
<p class="a">#指定我们的source收集到的数据发送到哪个管道</p>
<p class="a">a1.sources.r1.channels = c1</p>
<p class="a">#指定我们的source数据收集策略</p>
<p class="a">a1.sources.r1.type = spooldir</p>
<p class="a">a1.sources.r1.spoolDir = /export/servers/flumedata</p>
<p class="a">a1.sources.r1.deletePolicy = never</p>
<p class="a">a1.sources.r1.fileSuffix = .COMPLETED</p>
<p class="a">a1.sources.r1.ignorePattern = ^(.)*\\.tmp$</p>
<p class="a">a1.sources.r1.inputCharset = GBK</p>
<p class="a">#指定我们的channel为memory,即表示所有的数据都装进memory当中</p>
<p class="a">a1.channels.c1.type = memory</p>
<p class="a">#指定我们的sink为kafka&nbsp; sink，并指定我们的sink从哪个channel当中读取数据</p>
<p class="a">a1.sinks.k1.channel = c1</p>
<p class="a">a1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSink</p>
<p class="a">a1.sinks.k1.kafka.topic = test</p>
<p class="a">a1.sinks.k1.kafka.bootstrap.servers = node01:9092,node02:9092,node03:9092</p>
<p class="a">a1.sinks.k1.kafka.flumeBatchSize = 20</p>
<p class="a">a1.sinks.k1.kafka.producer.acks = 1</p>
</div>
<p>&nbsp;</p>
<p>启动flume</p>
<div>
<p class="a">bin/flume-ng agent --conf conf --conf-file conf/flume.conf --name a1 -Dflume.root.logger=INFO,console</p>
</div>]]></description></item><item><title>、第1节 kafka消息队列：8、9、kafka的配置文件server.properties的说明</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11220516.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 21 Jul 2019 03:01:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11220516.html</guid><description><![CDATA[<h1>10、kafka的配置文件说明</h1>
<p>Server.properties配置文件说明</p>
<div>
<p class="a">#broker的全局唯一编号，不能重复</p>
<p class="a">broker.id=0</p>
<p class="a">&nbsp;</p>
<p class="a">#用来监听链接的端口，producer或consumer将在此端口建立连接</p>
<p class="a">port=9092</p>
<p class="a">&nbsp;</p>
<p class="a">#处理网络请求的线程数量</p>
<p class="a">num.network.threads=3</p>
<p class="a">&nbsp;</p>
<p class="a">#用来处理磁盘IO的线程数量</p>
<p class="a">num.io.threads=8</p>
<p class="a">&nbsp;</p>
<p class="a">#发送套接字的缓冲区大小</p>
<p class="a">socket.send.buffer.bytes=102400</p>
<p class="a">&nbsp;</p>
<p class="a">#接受套接字的缓冲区大小</p>
<p class="a">socket.receive.buffer.bytes=102400</p>
<p class="a">&nbsp;</p>
<p class="a">#请求套接字的缓冲区大小</p>
<p class="a">socket.request.max.bytes=104857600</p>
<p class="a">&nbsp;</p>
<p class="a">#kafka运行日志存放的路径，确定磁盘的路径 df &ndash;lh&nbsp; 多个磁盘路径用逗号隔开</p>
<p class="a">log.dirs=/export/data/kafka/</p>
<p class="a">&nbsp;</p>
<p class="a">#topic在当前broker上的分片个数，一般都是在创建topic时手动指定好了分区的个数</p>
<p class="a">num.partitions=2</p>
<p class="a">&nbsp;</p>
<p class="a">#用来恢复和清理data下数据的线程数量</p>
<p class="a">num.recovery.threads.per.data.dir=1</p>
<p class="a">&nbsp;</p>
<p class="a">#segment文件保留的最长时间，超时将被删除</p>
<p class="a">log.retention.hours=1</p>
<p class="a">&nbsp;</p>
<p class="a">#新的segment文件生成策略：（1）时间长短：默认1个小时生成一个新的；（2）文件大小：segment文件默认达到1G也生成新的文件。</p>
<p class="a">#滚动生成新的segment文件的最大时间</p>
<p class="a">log.roll.hours=1</p>
<p class="a">&nbsp;</p>
<p class="a">#日志文件中每个segment的大小，默认为1G</p>
<p class="a">log.segment.bytes=1073741824</p>
<p class="a">&nbsp;</p>
<p class="a">#周期性检查文件大小的时间</p>
<p class="a">log.retention.check.interval.ms=300000</p>
<p class="a">&nbsp;</p>
<p class="a">#日志清理是否打开</p>
<p class="a">log.cleaner.enable=true</p>
<p class="a">&nbsp;</p>
<p class="a">#broker需要使用zookeeper保存meta数据</p>
<p class="a">zookeeper.connect=zk01:2181,zk02:2181,zk03:2181</p>
<p class="a">&nbsp;</p>
<p class="a">#zookeeper链接超时时间</p>
<p class="a">zookeeper.connection.timeout.ms=6000</p>
<p class="a">&nbsp;</p>
<p class="a">#partion buffer中，消息的条数达到阈值，将触发flush到磁盘</p>
<p class="a">log.flush.interval.messages=10000</p>
<p class="a">&nbsp;</p>
<p class="a">#消息buffer的时间，达到阈值，将触发flush到磁盘</p>
<p class="a">log.flush.interval.ms=3000</p>
<p class="a">&nbsp;</p>
<p class="a">#删除topic需要server.properties中设置delete.topic.enable=true否则只是标记删除</p>
<p class="a">delete.topic.enable=true</p>
<p class="a">&nbsp;</p>
<p class="a">#此处的host.name为本机IP(重要),如果不改,则客户端会抛出:Producer connection to localhost:9092 unsuccessful 错误!</p>
<p class="a">host.name=kafka01</p>
<p class="a">#一般用不到，如果用到，就改为自己机器的IP</p>
<p class="a">advertised.host.name=192.168.140.128</p>
</div>
<p>&nbsp;</p>
<p>producer生产者配置文件说明</p>
<p>生产数据的时候，尽量使用异步模式，可以提高数据生产的效率</p>
<div>
<p class="a">#指定kafka节点列表，用于获取metadata，不必全部指定</p>
<p class="a">metadata.broker.list=node01:9092,node02:9092,node03:9092</p>
<p class="a"># 指定分区处理类。默认kafka.producer.DefaultPartitioner，表通过key哈希到对应分区</p>
<p class="a">#partitioner.class=kafka.producer.DefaultPartitioner</p>
<p class="a"># 是否压缩，默认0表示不压缩，1表示用gzip压缩，2表示用snappy压缩。压缩后消息中会有头来指明消息压缩类型，故在消费者端消息解压是透明的无需指定。</p>
<p class="a">compression.codec=none</p>
<p class="a"># 指定序列化处理类</p>
<p class="a">serializer.class=kafka.serializer.DefaultEncoder</p>
<p class="a"># 如果要压缩消息，这里指定哪些topic要压缩消息，默认empty，表示不压缩。</p>
<p class="a">#compressed.topics=</p>
<p class="a">&nbsp;</p>
<p class="a"># 设置发送数据是否需要服务端的反馈,有三个值0,1,-1</p>
<p class="a"># 0: producer不会等待broker发送ack</p>
<p class="a"># 1: 当leader接收到消息之后发送ack</p>
<p class="a"># -1: 当所有的follower都同步消息成功后发送ack.</p>
<p class="a">request.required.acks=0</p>
<p class="a">&nbsp;</p>
<p class="a"># 在向producer发送ack之前,broker允许等待的最大时间 ，如果超时,broker将会向producer发送一个error ACK.意味着上一次消息因为某种原因未能成功(比如follower未能同步成功)</p>
<p class="a">request.timeout.ms=10000</p>
<p class="a">&nbsp;</p>
<p class="a"># 同步还是异步发送消息，默认&ldquo;sync&rdquo;表同步，"async"表异步。异步可以提高发送吞吐量,</p>
<p class="a">也意味着消息将会在本地buffer中,并适时批量发送，但是也可能导致丢失未发送过去的消息</p>
<p class="a">producer.type=sync</p>
<p class="a">&nbsp;</p>
<p class="a"># 在async模式下,当message被缓存的时间超过此值后,将会批量发送给broker,默认为5000ms</p>
<p class="a"># 此值和batch.num.messages协同工作.</p>
<p class="a">queue.buffering.max.ms = 5000</p>
<p class="a">&nbsp;</p>
<p class="a"># 在async模式下,producer端允许buffer的最大消息量</p>
<p class="a"># 无论如何,producer都无法尽快的将消息发送给broker,从而导致消息在producer端大量沉积</p>
<p class="a"># 此时,如果消息的条数达到阀值,将会导致producer端阻塞或者消息被抛弃，默认为10000</p>
<p class="a">queue.buffering.max.messages=20000</p>
<p class="a">&nbsp;</p>
<p class="a"># 如果是异步，指定每次批量发送数据量，默认为200</p>
<p class="a">batch.num.messages=500</p>
<p class="a">&nbsp;</p>
<p class="a"># 当消息在producer端沉积的条数达到"queue.buffering.max.meesages"后</p>
<p class="a"># 阻塞一定时间后,队列仍然没有enqueue(producer仍然没有发送出任何消息)</p>
<p class="a"># 此时producer可以继续阻塞或者将消息抛弃,此timeout值用于控制"阻塞"的时间</p>
<p class="a"># -1: 无阻塞超时限制,消息不会被抛弃</p>
<p class="a"># 0:立即清空队列,消息被抛弃</p>
<p class="a">queue.enqueue.timeout.ms=-1</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;</p>
<p class="a"># 当producer接收到error ACK,或者没有接收到ACK时,允许消息重发的次数</p>
<p class="a"># 因为broker并没有完整的机制来避免消息重复,所以当网络异常时(比如ACK丢失)</p>
<p class="a"># 有可能导致broker接收到重复的消息,默认值为3.</p>
<p class="a">message.send.max.retries=3</p>
<p class="a">&nbsp;</p>
<p class="a"># producer刷新topic metada的时间间隔,producer需要知道partition leader的位置,以及当前topic的情况</p>
<p class="a"># 因此producer需要一个机制来获取最新的metadata,当producer遇到特定错误时,将会立即刷新</p>
<p class="a"># (比如topic失效,partition丢失,leader失效等),此外也可以通过此参数来配置额外的刷新机制，默认值600000</p>
<p class="a">topic.metadata.refresh.interval.ms=60000</p>
</div>
<p>&nbsp;</p>
<p>consumer消费者配置详细说明</p>
<p>消费的时候尽量设置成手动提交offset可以避免数据的丢失问题，以及数据的重复消费问题。</p>
<div>
<p class="a"># zookeeper连接服务器地址</p>
<p class="a">zookeeper.connect=zk01:2181,zk02:2181,zk03:2181</p>
<p class="a"># zookeeper的session过期时间，默认5000ms，用于检测消费者是否挂掉</p>
<p class="a">zookeeper.session.timeout.ms=5000</p>
<p class="a">#当消费者挂掉，其他消费者要等该指定时间才能检查到并且触发重新负载均衡</p>
<p class="a">zookeeper.connection.timeout.ms=10000</p>
<p class="a"># 指定多久消费者更新offset到zookeeper中。注意offset更新时基于time而不是每次获得的消息。一旦在更新zookeeper发生异常并重启，将可能拿到已拿到过的消息</p>
<p class="a">zookeeper.sync.time.ms=2000</p>
<p class="a">#指定消费</p>
<p class="a">group.id=itcast</p>
<p class="a"># 当consumer消费一定量的消息之后,将会自动向zookeeper提交offset信息</p>
<p class="a"># 注意offset信息并不是每消费一次消息就向zk提交一次,而是现在本地保存(内存),并定期提交,默认为true</p>
<p class="a">auto.commit.enable=true</p>
<p class="a"># 自动更新时间。默认60 * 1000</p>
<p class="a">auto.commit.interval.ms=1000</p>
<p class="a"># 当前consumer的标识,可以设定,也可以有系统生成,主要用来跟踪消息消费情况,便于观察</p>
<p class="a">conusmer.id=xxx</p>
<p class="a"># 消费者客户端编号，用于区分不同客户端，默认客户端程序自动产生</p>
<p class="a">client.id=xxxx</p>
<p class="a"># 最大取多少块缓存到消费者(默认10)</p>
<p class="a">queued.max.message.chunks=50</p>
<p class="a"># 当有新的consumer加入到group时,将会reblance,此后将会有partitions的消费端迁移到新&nbsp; 的consumer上,如果一个consumer获得了某个partition的消费权限,那么它将会向zk注册 "Partition Owner registry"节点信息,但是有可能此时旧的consumer尚没有释放此节点, 此值用于控制,注册节点的重试次数.</p>
<p class="a">rebalance.max.retries=5</p>
<p class="a">&nbsp;</p>
<p class="a"># 获取消息的最大尺寸,broker不会像consumer输出大于此值的消息chunk 每次feth将得到多条消息,此值为总大小,提升此值,将会消耗更多的consumer端内存</p>
<p class="a">fetch.min.bytes=6553600</p>
<p class="a">&nbsp;</p>
<p class="a"># 当消息的尺寸不足时,server阻塞的时间,如果超时,消息将立即发送给consumer</p>
<p class="a">fetch.wait.max.ms=5000</p>
<p class="a">socket.receive.buffer.bytes=655360</p>
<p class="a"># 如果zookeeper没有offset值或offset值超出范围。那么就给个初始的offset。有smallest、largest、anything可选，分别表示给当前最小的offset、当前最大的offset、抛异常。 默认largest</p>
<p class="a">auto.offset.reset=smallest</p>
<p class="a"># 指定序列化处理类</p>
<p class="a">derializer.class=kafka.serializer.DefaultDecoder</p>
<p class="a">图1：</p>
<p class="a"><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190721114156782-1208105005.jpg" alt="" /></p>
<p>图2：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190721114624362-1522017863.jpg" alt="" /></p>
<p>图3：</p>
<p class="a"><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190721114738219-1796433149.jpg" alt="" /></p>
<p>&nbsp;</p>
</div>]]></description></item><item><title>第1节 kafka消息队列：7、kafka的消费模型</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11220511.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 21 Jul 2019 03:00:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11220511.html</guid><description><![CDATA[<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190721110005236-271754772.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 kafka消息队列：6、kafka分区的四种策略</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11220413.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 21 Jul 2019 02:35:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11220413.html</guid><description><![CDATA[<p>详见代码</p>]]></description></item><item><title>第1节 kafka消息队列：5、javaAPI操作</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11219970.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 20 Jul 2019 17:05:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/21/11219970.html</guid><description><![CDATA[<h1>8、kafka的API</h1>
<p>详见代码</p>
<div>&nbsp;</div>
<p class="MsoNormal"><span style="mso-bidi-font-size: 15.0pt; font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">第一步：导入</span><span style="mso-bidi-font-size: 15.0pt;" lang="EN-US">kafka</span><span style="mso-bidi-font-size: 15.0pt; font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">的开发</span><span style="mso-bidi-font-size: 15.0pt;" lang="EN-US">jar</span><span style="mso-bidi-font-size: 15.0pt; font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">包</span></p>
<p class="MsoNormal"><span style="mso-bidi-font-size: 15.0pt;" lang="EN-US">Kafka</span><span style="mso-bidi-font-size: 15.0pt; font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">生产者</span></p>
<p class="MsoNormal"><span style="mso-bidi-font-size: 15.0pt;" lang="EN-US">Kafka</span><span style="mso-bidi-font-size: 15.0pt; font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';">消费者</span></p>]]></description></item><item><title>第1节 kafka消息队列：3、4、kafka的安装以及命令行的管理使用</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/19/11210897.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 18 Jul 2019 16:39:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/19/11210897.html</guid><description><![CDATA[<h1>6、kafka的安装</h1>
<h2>5.1三台机器安装zookeeper</h2>
<p>注意：安装zookeeper之前一定要确保三台机器时钟同步</p>
<p>*/1 * * * * /usr/sbin/ntpdate us.pool.ntp.org;</p>
<p>三台机器配置文件修改配置文件：</p>
<p>vim /export/servers/zookeeper-3.4.5-cdh5.14.0/conf/zoo.cfg：</p>
<div>
<p class="a">tickTime=2000</p>
<p class="a">initLimit=10</p>
<p class="a">syncLimit=5</p>
<p class="a">dataDir=/export/servers/zookeeper-3.4.5-cdh5.14.0/zkData/data</p>
<p class="a">dataLogDir=/export/servers/zookeeper-3.4.5-cdh5.14.0/zkData/log</p>
<p class="a">clientPort=2181</p>
<p class="a">autopurge.purgeInterval=1</p>
<p class="a">autopurge.snapRetainCount=3</p>
<p class="a">server.1=node01:2888:3888</p>
<p class="a">server.2=node02:2888:3888</p>
<p class="a">server.3=node03:2888:3888</p>
</div>
<p>&nbsp;</p>
<p>三台机器分别在/export/servers/zookeeper-3.4.9/zkData/data 目录下添加文件myid,并编辑每个文件中的内容</p>
<p>node01 机器myid内容为1</p>
<p>node02机器myid内容为</p>
<p>node03机器myid内容为3</p>
<p>&nbsp;</p>
<p>三台机器启动zookeeper</p>
<div>
<p class="a">bin/zkServer.sh&nbsp; start</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>5.2 三台机器安装kafka集群</h2>
<h3>5.2.1 下载kafka安装压缩包</h3>
<p><a href="http://archive.apache.org/dist/kafka/">http://archive.apache.org/dist/kafka/</a></p>
<p>&nbsp;</p>
<h3>5.2.2 上传压缩包并解压</h3>
<p>这里统一使用&nbsp; kafka_2.11-1.0.0.tgz 这个版本</p>
<h3>5.2.3 修改kafka配置文件</h3>
<p>第一台机器修改kafka配置文件server.properties</p>
<div>
<p class="a">broker.id=0</p>
<p class="a">num.network.threads=3</p>
<p class="a">num.io.threads=8</p>
<p class="a">socket.send.buffer.bytes=102400</p>
<p class="a">socket.receive.buffer.bytes=102400</p>
<p class="a">socket.request.max.bytes=104857600</p>
<p class="a">log.dirs=/export/servers/kafka_2.11-1.0.0/logs</p>
<p class="a">num.partitions=2</p>
<p class="a">num.recovery.threads.per.data.dir=1</p>
<p class="a">offsets.topic.replication.factor=1</p>
<p class="a">transaction.state.log.replication.factor=1</p>
<p class="a">transaction.state.log.min.isr=1</p>
<p class="a">log.flush.interval.messages=10000</p>
<p class="a">log.flush.interval.ms=1000</p>
<p class="a">log.retention.hours=168</p>
<p class="a">log.segment.bytes=1073741824</p>
<p class="a">log.retention.check.interval.ms=300000</p>
<p class="a">zookeeper.connect=node01:2181,node02:2181,node03:2181</p>
<p class="a">zookeeper.connection.timeout.ms=6000</p>
<p class="a">group.initial.rebalance.delay.ms=0</p>
<p class="a">delete.topic.enable=true</p>
<p class="a">host.name=node01</p>
</div>
<p>&nbsp;</p>
<p>第二台机器修改kafka配置文件server.properties</p>
<div>
<p class="a">broker.id=1</p>
<p class="a">num.network.threads=3</p>
<p class="a">num.io.threads=8</p>
<p class="a">socket.send.buffer.bytes=102400</p>
<p class="a">socket.receive.buffer.bytes=102400</p>
<p class="a">socket.request.max.bytes=104857600</p>
<p class="a">log.dirs=/export/servers/kafka_2.11-1.0.0/logs</p>
<p class="a">num.partitions=2</p>
<p class="a">num.recovery.threads.per.data.dir=1</p>
<p class="a">offsets.topic.replication.factor=1</p>
<p class="a">transaction.state.log.replication.factor=1</p>
<p class="a">transaction.state.log.min.isr=1</p>
<p class="a">log.flush.interval.messages=10000</p>
<p class="a">log.flush.interval.ms=1000</p>
<p class="a">log.retention.hours=168</p>
<p class="a">log.segment.bytes=1073741824</p>
<p class="a">log.retention.check.interval.ms=300000</p>
<p class="a">zookeeper.connect=node01:2181,node02:2181,node03:2181</p>
<p class="a">zookeeper.connection.timeout.ms=6000</p>
<p class="a">group.initial.rebalance.delay.ms=0</p>
<p class="a">delete.topic.enable=true</p>
<p class="a">host.name=node02</p>
</div>
<p>&nbsp;</p>
<p>第三台机器修改kafka配置文件server.properties</p>
<div>
<p class="a">broker.id=2</p>
<p class="a">num.network.threads=3</p>
<p class="a">num.io.threads=8</p>
<p class="a">socket.send.buffer.bytes=102400</p>
<p class="a">socket.receive.buffer.bytes=102400</p>
<p class="a">socket.request.max.bytes=104857600</p>
<p class="a">log.dirs=/export/servers/kafka_2.11-1.0.0/logs</p>
<p class="a">num.partitions=2</p>
<p class="a">num.recovery.threads.per.data.dir=1</p>
<p class="a">offsets.topic.replication.factor=1</p>
<p class="a">transaction.state.log.replication.factor=1</p>
<p class="a">transaction.state.log.min.isr=1</p>
<p class="a">log.flush.interval.messages=10000</p>
<p class="a">log.flush.interval.ms=1000</p>
<p class="a">log.retention.hours=168</p>
<p class="a">log.segment.bytes=1073741824</p>
<p class="a">log.retention.check.interval.ms=300000</p>
<p class="a">zookeeper.connect=node01:2181,node02:2181,node03:2181</p>
<p class="a">zookeeper.connection.timeout.ms=6000</p>
<p class="a">group.initial.rebalance.delay.ms=0</p>
<p class="a">delete.topic.enable=true</p>
<p class="a">host.name=node03</p>
</div>
<p>&nbsp;</p>
<h3>5.2.4启动kafka集群</h3>
<p>三台机器启动kafka服务</p>
<div>
<p class="a">前台启动： ./kafka-server-start.sh ../config/server.properties</p>
<p class="a">后台启动：&nbsp;nohup bin/kafka-server-start.sh config/server.properties &gt; /dev/null 2&gt;&amp;1 &amp;&nbsp;&nbsp;&nbsp; 后台启动命令</p>
</div>
<p>&nbsp;</p>
<h1>7、kafka的命令行的管理使用</h1>
<p>cd&nbsp;/export/servers/kafka_2.11-1.0.0&nbsp;</p>
<p>创建topic： bin/kafka-topics.sh --create --partitions 3 --replication-factor 2 --topic kafkatopic --zookeeper node01:2181,node02:2181,node03:2181</p>
<p>模拟生产者： bin/kafka-console-producer.sh --broker-list node01:9092,node02:9092,node03:9092 --topic kafkatopic</p>
<p>模拟消费：&nbsp;bin/kafka-console-consumer.sh --from-beginning --topic kafkatopic --zookeeper node01:2181,node02:2181,node03:2181</p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 kafka消息队列：2、kafka的架构介绍以及基本组件模型介绍</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/18/11210819.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 18 Jul 2019 15:57:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/18/11210819.html</guid><description><![CDATA[<h1>3、kafka的架构模型</h1>
<p>1、producer：消息的生产者，主要是用于生产消息的。主要是接入一些外部的数据源，从外部获取数据，比如说我们可以从flume获取数据，还可以通过ftp传入数据等，还可以通过kafka的API生产数据，通过push的方式，主动的将数据推送到kafka的topic当中去</p>
<p>2、topic：主题，里面是一类消息的抽象的集合，说白了这下面就是用来装各种数据的</p>
<p>3、paritition：消息的分区。为了解决数据保存的横向扩展的问题，所以将一个topic分为多个partition，每个partition保存topic当中的部分部署。为了解决partition丢失的问题，引入了副本机制，可以将一个partition复制多分出来保存</p>
<p>4、broker：在kafka当中一台服务器，叫做一个broker</p>
<p>5、consumer：消息的消费者，主要去消费topic当中的数据的，主动会去pull拉取topic当中的消息</p>
<p>6、zookeeper：为了解决消费者消费的时候，确定一个topic当中有多少个分区，分区分别都在哪一台机器上，引入zk来保存这些数据</p>
<p>7、kakfa的消费模型，在kakfa当中消费有组的概念。同一时间，一个组当中，只能有一个线程去消费一个paritition当中的数据</p>
<p>&nbsp;</p>
<p>8、kakfa消费必要的三个条件</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第一个条件：确定哪一个topic</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第二个条件：必须知道zk的地址</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第三个条件：消息消费的offset偏移量</p>
<p>&nbsp;</p>
<h1>4、kafka的组件的介绍</h1>
<p>produer：消息的生产者，往topic当中生产消息</p>
<p>consumer：消息的消费者，从topic当中消费消息</p>
<p>broker：kafka的服务器</p>
<p>zookeeper：kafka依赖于zk保存一些topic以及partition的信息</p>
<p>topic：一类消息的高度抽象集合，一个topic下面由多个paritition组成</p>
<p>partition：消息的分区，每个paritition保存了一部分topic的数据，一个partition包含多个segement。一个segement又包含两部分，.log文件和.index文件</p>
<p>segement：包含两个文件.log 文件&nbsp;&nbsp; .index文件</p>
<p>.log：记录了我们的数据，文件是顺序读写的</p>
<p>.index文件：记录了.log文件的索引</p>
<p>&nbsp;</p>
<p>offset：消息的偏移量，我们消费数据的时候，都要记录消息的offset，下次继续消费的时候，根据上次的offset偏移量就可以确定我们下一条数据从哪里开始消费</p>
<p><span style="color: #ff0000;">===============================</span></p>
<h1>1、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kafka的架构模型</h1>
<p>基于producer&nbsp; consumer&nbsp; topic&nbsp; broker&nbsp; 等的一个基本架构</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190718235525920-1173211187.png" alt="" /></p>
<p>&nbsp;</p>
<p><strong>5</strong><strong>、</strong><strong>kafka</strong><strong>的组件</strong><strong>介绍</strong></p>
<p>Topic ：消息根据Topic进行归类</p>
<p>Producer：发送消息者</p>
<p>Consumer：消息接受者</p>
<p>broker：每个kafka实例(server)</p>
<p>Zookeeper：依赖集群保存meta信息。</p>
<p><strong>Topics</strong><strong>组件介绍</strong></p>
<p>Topic：一类消息，每个topic将被分成多个partition(区)，在集群的配置文件中配置。</p>
<p>partition：在存储层面是逻辑append log文件，包含多个segment文件。</p>
<p>Segment：消息存储的真实文件，会不断生成新的。</p>
<p>offset：每条消息在文件中的位置（偏移量）。offset为一个long型数字，它是唯一标记一条消息。</p>
<p><strong>partition</strong></p>
<p>1、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在存储层面是逻辑append log文件，每个partition有多个segment组成。</p>
<p>2、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 任何发布到此partition的消息都会被直接追加到log文件的尾部。</p>
<p>3、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 每个partition在内存中对应一个index列表，记录每个segment中的第一条消息偏移。这样查找消息的时候，先在index列表中定位消息位置，再读取文件，速度块。</p>
<p>4、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 发布者发到某个topic的消息会被均匀的分布到多个part上，broker收到发布消息往对应part的最后一个segment上添加该消息。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190718235547915-1546040924.png" alt="" /></p>
<p><strong>partition</strong><strong>分布</strong></p>
<p>1、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; partitions分区到不同的server上，一个partition保存在一个server上，避免一个server上的文件过大，同时可以容纳更多的consumer消费,有效提升并发消费的能力。</p>
<p>2、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这个server(如果保存的是partition的leader)负责partition的读写。可以配置备份。</p>
<p>3、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 每个partition都有一个server为"leader"，负责读写，其余的相对备份机为follower，follower同步leader数据，负责leader死了之后的接管。n个leader均衡的分散在每个server上。</p>
<p>4、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; partition的leader和follower之间监控通过zookeeper完成。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190718235601398-252124569.png" alt="" /></p>
<p>&nbsp;</p>
<p><strong>segment</strong></p>
<p>1、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 每个segment中存储多条消息，消息id由其逻辑位置决定，即从消息id可直接定位到消息的存储位置，避免id到位置的额外映射。</p>
<p>2、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当某个segment上的消息条数达到配置值或消息发布时间超过阈值时，segment上的消息会被flush到磁盘，只有flush到磁盘上的消息订阅者才能订阅到</p>
<p>3、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; segment达到一定的大小（可以通过配置文件设定,默认1G）后将不会再往该segment写数据，broker会创建新的segment。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190718235614821-1617480092.png" alt="" /></p>
<p>&nbsp;</p>
<p><strong>offset</strong></p>
<p>offset是每条消息的偏移量。</p>
<p>segment日志文件中保存了一系列"log entries"(日志条目),每个log entry格式为"4个字节的数字N表示消息的长度" + "N个字节的消息内容";</p>
<p>每个日志文件都有一个offset来唯一的标记一条消息,offset的值为8个字节的数字,表示此消息在此partition中所处的起始位置.</p>
<p>每个partition在物理存储层面,有多个log file组成(称为segment).</p>
<p>segment file的命名为"最小offset".log.例如"00000000000.log";其中"最小offset"表示此segment中起始消息的offset.</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190718235625765-1280711766.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 kafka消息队列：1、kafka基本介绍以及与传统消息队列的对比</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/18/11210533.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 18 Jul 2019 14:41:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/18/11210533.html</guid><description><![CDATA[<h1>1、 Kafka介绍</h1>
<p>&nbsp;</p>
<p class="1">l&nbsp; Apache Kafka是一个开源<strong>消息</strong>系统，由Scala写成。是由Apache软件基金会开发的一个开源消息系统项目。</p>
<p class="1">l&nbsp; Kafka最初是由LinkedIn开发，并于2011年初开源。2012年10月从Apache Incubator毕业。该项目的目标是为处理实时数据提供一个统一、高通量、低等待的平台。</p>
<p class="1">l&nbsp; <strong>Kafka</strong><strong>是一个分布式消息队列：生产者、消费者的功能。它提供了类似于</strong><strong>JMS</strong><strong>的特性，但是在设计实现上完全不同，此外它并不是</strong><strong>JMS</strong><strong>规范的实现</strong><strong>。</strong></p>
<p class="1">l&nbsp; Kafka对消息保存时根据Topic进行归类，发送消息者称为Producer,消息接受者称为Consumer,此外kafka集群有多个kafka实例组成，每个实例(server)成为broker。</p>
<h1>2、 消息队列的作用</h1>
<p>消息系统的核心作用就是三点：解耦，异步和并行</p>
<p>以用户注册的案列来说明消息系统的作用</p>
<h3>2.1 用户注册的一般流程</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190718223843363-1142973651.png" alt="" /></p>
<p>&nbsp;</p>
<p><strong>问题</strong>：随着后端流程越来越多，每步流程都需要额外的耗费很多时间，从而会导致用户更长的等待延迟。</p>
<h3>2.2 用户注册的并行执行</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190718223840273-1280933385.png" alt="" /></p>
<p>&nbsp;</p>
<p><strong>问题</strong>：系统并行的发起了4个请求，4个请求中，如果某一个环节执行1分钟，其他环节再快，用户也需要等待1分钟。如果其中一个环节异常之后，整个服务挂掉了。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190718223835366-768996050.png" alt="" /></p>
<p>&nbsp;</p>
<h3>2.3 用户注册的最终一致</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190718223826993-868310083.png" alt="" /></p>
<p>&nbsp;</p>
<p class="1">1、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>保证主流程的正常执行</strong>、执行成功之后，发送MQ消息出去。</p>
<p class="1">2、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 需要这个destination的其他系统通过消费数据再执行，最终一致。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190718223818882-1244029972.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>1、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kafka与传统消息系统的区别</h1>
<p>&nbsp;</p>
<h2>3.1、在<a title="大型网站架构知识库" href="http://lib.csdn.net/base/architecture" target="_blank">架构</a>模型方面，</h2>
<p>RabbitMQ遵循AMQP协议，RabbitMQ的broker由Exchange,Binding,queue组成，其中exchange和binding组成了消息的路由键；客户端Producer通过连接channel和server进行通信，Consumer从queue获取消息进行消费（长连接，queue有消息会推送到consumer端，consumer循环从输入流读取数据）。rabbitMQ以broker为中心；有消息的确认机制。RabbitMQ基于一种pub与sub的消息发布订阅机制。</p>
<p>kafka遵从一般的MQ结构，producer，broker，consumer，以consumer为中心，消息的消费信息保存的客户端consumer上，consumer根据消费的点，从broker上批量pull数据；无消息确认机制。</p>
<h2>3.2、在吞吐量，</h2>
<p>kafka具有高的吞吐量，内部采用消息的批量处理，zero-copy机制，数据的存储和获取是本地磁盘顺序批量操作，具有O(1)的复杂度，消息处理的效率很高。</p>
<p>rabbitMQ在吞吐量方面稍逊于kafka，他们的出发点不一样，rabbitMQ支持对消息的可靠的传递，支持事务，不支持批量的操作；基于存储的可靠性的要求存储可以采用内存或者硬盘。</p>
<h2>3.3、在可用性方面，</h2>
<p>rabbitMQ支持miror的queue，主queue失效，miror queue接管。</p>
<p>kafka的broker支持主备模式。</p>
<h2>3.4、在集群负载均衡方面，</h2>
<p>kafka采用zookeeper对集群中的broker、consumer进行管理，可以注册topic到zookeeper上；通过zookeeper的协调机制，producer保存对应topic的broker信息，可以随机或者轮询发送到broker上；并且producer可以基于语义指定分片，消息发送到broker的某分片上。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190718224946301-349069754.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>idea中跑mapreduce报错, PATH设置错误</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/18/11204621.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 17 Jul 2019 17:17:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/18/11204621.html</guid><description><![CDATA[<p>问题如题，报错：</p>
<p><span style="color: #ff0000;">[root@node01 servers]# hadoop jar loginVisit.jar cn.itcast.loginVisit.step1.Step1Main</span><br /><span style="color: #ff0000;">19/07/17 22:14:59 INFO client.RMProxy: Connecting to ResourceManager at node01/192.168.8.100:8032</span><br /><span style="color: #ff0000;">19/07/17 22:14:59 WARN security.UserGroupInformation: PriviledgedActionException as:root (auth:SIMPLE) cause:java.net.ConnectException: Call From node01.hadoop.com/192.168.8.100 to node02:8020 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused</span><br /><span style="color: #ff0000;">Exception in thread "main" java.net.ConnectException: <strong>Call From node01.hadoop.com/192.168.8.100 to node02:8020 failed on connection exception</strong>: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused</span><br /><span style="color: #ff0000;">	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br /><span style="color: #ff0000;">	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span><br /><span style="color: #ff0000;">	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span></p>
<p>&nbsp;</p>
<p><span style="color: #000000;">原因：</span></p>
<p>Step1Main.java中，path设置错误：</p>
<p><em id="__mceDel">TextOutputFormat.setOutputPath(job,new Path("hdfs://<span style="color: #ff0000;">node02</span>:8020/loginVisit/output3"));</em></p>
<p><span style="color: #000000;">其中node02要改为node01.&nbsp;</span></p>
<p><span style="color: #000000;">严重怀疑代码被idea莫名其妙地修改了！</span></p>
<p>&nbsp;</p>]]></description></item><item><title>idea跑mapreduce结果为空白文本，idea代码被莫名其妙地改动了</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/18/11204616.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 17 Jul 2019 17:12:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/18/11204616.html</guid><description><![CDATA[<p>遇到如题的错误，</p>
<p>一开始查找Step1Main.java的代码错误，尝试关掉分区设置，还是一样。</p>
<p>后来以为是mapper或reducer不执行，网上查找了半天也没有正确原因。</p>
<p>最终，偶然间看到reducer中，<span style="color: #ff0000;">某些代码被莫名其妙地改动了</span>。字符串login被修改为step1，字符串visit被修改为step2.&nbsp;</p>
<p>将其修改回来后，执行程序正常。</p>
<p>&nbsp;</p>
<p>idea还是有bug的，包重命名时，会在其他module下新建相同名称的包，还可能把java类移动到新建的包下面。以后要注意了。</p>
<p>&nbsp;</p>
<p>针对idea，改变文件/文件夹名称和所在路径时，有可能改变发生位置变化的文件中的文本内容，尤其是JAVA类中和类名相同的字符串。</p>
<p>JAVA类名一修改，内部的类名文本也会改，但可能有bug，会把其他和类名相同的字符串也改掉，导致程序运行出错。</p>
<p>所以一定要慎重，尽量不改，如果一定要改，修改前后也要考虑可能出错的地方去，并检查之。</p>]]></description></item><item><title>第2阶段试卷</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/16/11196723.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 16 Jul 2019 10:34:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/16/11196723.html</guid><description><![CDATA[<p>有两个海量日志文件存储在hdfs上， 其中登陆日志格式：user，ip，time，oper（枚举值：1为上线，2为下线）；访问日志格式为：ip，time，url，假设登陆日志中上下线信息完整，且同一上下线时间段内使用的ip唯一，计算访问日志中独立user数量最多的前10个url，用MapReduce实现。</p>
<p>提示：<br />1、要统计前10，需要两个步骤，第一个步骤实现join，统计出每个url对应的独立用户数，第二步骤求出top10<br />2、两个大表join，用同一job多输入<br />3、要根据ip字段join，所以要根据ip分区</p>
<p>4、求top10</p>
<p>&nbsp;</p>
<p>注：<br />1、独立用户/独立访客：是指不同的、通过互联网访问、浏览这个网页的自然人。英文简写UV，全称unique visitor。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>详见代码。</p>]]></description></item><item><title>2-10 就业课(2.0)-oozie：13、14、clouderaManager的服务搭建</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/14/11186538.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 14 Jul 2019 15:59:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/14/11186538.html</guid><description><![CDATA[<h2>3、clouderaManager安装资源下载</h2>
<h3>第一步：下载安装资源并上传到服务器</h3>
<p>&nbsp;</p>
<p>我们这里安装CM5.14.0这个版本，需要下载以下这些资源，一共是四个文件即可</p>
<p>下载cm5的压缩包</p>
<p>下载地址：<a href="http://archive.cloudera.com/cm5/cm/5/">http://archive.cloudera.com/cm5/cm/5/</a></p>
<p>具体文件地址：</p>
<p><a href="http://archive.cloudera.com/cm5/cm/5/cloudera-manager-el6-cm5.14.0_x86_64.tar.gz">http://archive.cloudera.com/cm5/cm/5/cloudera-manager-el6-cm5.14.0_x86_64.tar.gz</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>下载cm5的parcel包</p>
<p>下载地址：</p>
<p><a href="http://archive.cloudera.com/cdh5/parcels/">http://archive.cloudera.com/cdh5/parcels/</a></p>
<p>&nbsp;</p>
<p>第一个文件具体下载地址：</p>
<p><a href="http://archive.cloudera.com/cdh5/parcels/5.14.0/CDH-5.14.0-1.cdh5.14.0.p0.24-el6.parcel">http://archive.cloudera.com/cdh5/parcels/5.14.0/CDH-5.14.0-1.cdh5.14.0.p0.24-el6.parcel</a></p>
<p>&nbsp;</p>
<p>第二个文件具体下载地址：</p>
<p><a href="http://archive.cloudera.com/cdh5/parcels/5.14.0/CDH-5.14.0-1.cdh5.14.0.p0.24-el6.parcel.sha1">http://archive.cloudera.com/cdh5/parcels/5.14.0/CDH-5.14.0-1.cdh5.14.0.p0.24-el6.parcel.sha1</a></p>
<p>&nbsp;</p>
<p>第三个文件具体下载地址：</p>
<p><a href="http://archive.cloudera.com/cdh5/parcels/5.14.0/manifest.json">http://archive.cloudera.com/cdh5/parcels/5.14.0/manifest.json</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>将这四个安装包都上传到第一台机器的/export/softwares路径下</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>第二步：解压压缩包到指定路径</h3>
<p>解压CM安装包到/opt路径下去</p>
<div>
<p class="a">cd /export/softwares</p>
<p class="a">tar -zxvf cloudera-manager-el6-cm5.14.0_x86_64.tar.gz -C /opt/</p>
</div>
<h3>第三步：将我们的parcel包的三个文件拷贝到对应路径</h3>
<p>将我们的parcel包含三个文件，拷贝到/opt/cloudera/parcel-repo路径下面去，并记得有个文件需要重命名</p>
<p class="code">cd /export/softwares/</p>
<p class="code">cp CDH-5.14.0-1.cdh5.14.0.p0.24-el6.parcel CDH-5.14.0-1.cdh5.14.0.p0.24-el6.parcel.sha1 manifest.json&nbsp; /opt/cloudera/parcel-repo/</p>
<p>&nbsp;</p>
<p>重命名标黄的这个文件</p>
<p class="code">cd /opt/cloudera/parcel-repo/</p>
<p class="code">mv CDH-5.14.0-1.cdh5.14.0.p0.24-el6.parcel.sha1 CDH-5.14.0-1.cdh5.14.0.p0.24-el6.parcel.sha</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>第四步：所有节点添加普通用户并给与sudo权限</h3>
<p>在node01机器上面添加普通用户并赋予sudo权限</p>
<p>执行以下命令创建普通用户cloudera-scm</p>
<p class="code">useradd --system --home=/opt/cm-5.14.0/run/cloudera-scm-server --no-create-home --shell=/bin/false --comment "Cloudera SCM User" cloudera-scm</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>赋予cloudera-scm普通用户的sudo权限</p>
<p class="code">visudo</p>
<div>
<p class="a">cloudera-scm ALL=(ALL) NOPASSWD: ALL</p>
</div>
<p>&nbsp;</p>
<h3>第五步：更改主节点的配置文件</h3>
<p>node01机器上面更改配置文件</p>
<p>&nbsp;</p>
<p class="code">vim /opt/cm-5.14.0/etc/cloudera-scm-agent/config.ini</p>
<div>
<p class="a">server_host=node01.hadoop.com</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>第六步：将/opt目录下的安装包发放到其他机器</h3>
<p>将第一台机器的安装包发放到其他机器</p>
<div>
<p class="a">cd /opt</p>
<p class="a">scp -r cloudera/ cm-5.14.0/ node02.hadoop.com:/opt</p>
</div>
<p>&nbsp;</p>
<h3>第七步：创建一些数据库备用</h3>
<p>node02机器上面创建数据库</p>
<p>hive 数据库</p>
<div>
<p class="a">create database hive DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</p>
</div>
<p>&nbsp;</p>
<p>集群监控数据库</p>
<div>
<p class="a">create database amon DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</p>
</div>
<p>&nbsp;</p>
<p>hue 数据库</p>
<div>
<p class="a">create database hue DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>oozie 数据库</p>
<div>
<p class="a">create database oozie DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>第八步：准备数据库连接的驱动包</h3>
<p>在所有机器上面都准备一份数据库的连接驱动jar包放到/usr/share/java路径下</p>
<p>准备一份mysql的驱动连接包，放到/usr/share/java路径下去</p>
<p class="code">cd /export/softwares/</p>
<p class="code">wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.45.tar.gz</p>
<p class="code">tar -zxvf mysql-connector-java-5.1.45.tar.gz</p>
<p class="code">cd /export/softwares/mysql-connector-java-5.1.45</p>
<p class="code">cp mysql-connector-java-5.1.45-bin.jar /usr/share/java/mysql-connector-java.jar</p>
<p>拷贝驱动包到第二台机器</p>
<p class="code">cd /usr/share/java</p>
<p class="code">scp mysql-connector-java.jar node02.hadoop.com:$PWD</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>第九步：为clouderaManager创建数据库</h3>
<p>node01服务器执行</p>
<div>
<p class="a">/opt/cm-5.14.0/share/cmf/schema/scm_prepare_database.sh mysql -hnode02.hadoop.com&nbsp; -uroot -p123456 --scm-host node01.hadoop.com scm root 123456</p>
</div>
<p>&nbsp;</p>
<p align="left">命令说明：/<strong>opt</strong>/<strong>cm</strong>-5.14.0/share/cmf/schema/scm_prepare_database.<strong>sh</strong> 数据库类型 -h数据库主机 &ndash;u数据库用户名 &ndash;p数据库密码 --scm-host <strong>cm</strong>主机&nbsp; 数据库名称&nbsp; 用户名&nbsp; 密码</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>第十步：启动服务</h3>
<p>主节点启动clouderaManager Server与ClouderaManager&nbsp; agent服务</p>
<p class="code">/opt/cm-5.14.0/etc/init.d/cloudera-scm-server start</p>
<p class="code">/opt/cm-5.14.0/etc/init.d/cloudera-scm-agent start</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>从节点node02启动ClouderaManager agent服务</p>
<p class="code">/opt/cm-5.14.0/etc/init.d/cloudera-scm-agent start</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>第十一步：浏览器页面访问</h3>
<p><a href="http://node01:7180/cmf/login">http://node01:7180/cmf/login</a></p>
<p>&nbsp;</p>
<p>默认用户名admin</p>
<p>密码 admin</p>
<p><span style="color: #ff0000;">===================================================</span></p>
<p>课程总结：<br />1、oozie的安装使用<br />	oozie是什么：任务调度的框架，与azkaban的功能类似<br />	oozie的安装：一步一步来不要调过  搞定<br />	oozie的任务的执行workFlow：调度shell脚本，调度hive任务，调度mapreduce的任务  搞定<br />	oozie的的多个任务的串联 ： 搞定<br />	oozie的定时任务  搞定<br />	<br />	hue与oozie的整合  搞定</p>
<p>2、HA的环境搭建  不用做  可以将伪分布模式的环境转换成完全分布式，不丢失hdfs的数据<br />3、ClouderaManager的环境安装  做不了  </p>
<p>&nbsp;</p>]]></description></item><item><title>2-10 就业课(2.0)-oozie：12、cm环境搭建的基础环境准备</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/14/11186435.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 14 Jul 2019 15:28:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/14/11186435.html</guid><description><![CDATA[<h1>8、clouderaManager5.14.0环境安装搭建</h1>
<p>Cloudera Manager是cloudera公司提供的一种大数据的解决方案，可以通过ClouderaManager管理界面来对我们的集群进行安装和操作，提供了良好的UI界面交互，使得我们管理集群不用熟悉任何的linux技术，只需要通过网页浏览器就可以实现我们的集群的操作和管理，让我们使用和管理集群更加的方便。</p>
<h2>1、ClouderaManager整体架构</h2>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190714234119845-1634824676.png" alt="" /></p>
<p>&nbsp;</p>
<p>Cloudera Manager的核心是Cloudera Manager Server。Server托管Admin Console Web Server和应用程序逻辑。它负责安装软件、配置、启动和停止服务以及管理运行服务的群集。</p>
<p>解释：</p>
<ul>
<li>Agent：安装在每台主机上。它负责启动和停止进程，解压缩配置，触发安装和监控主机</li>
<li>Management Service：执行各种监控、报警和报告功能的一组角色的服务。</li>
<li>Database：存储配置和监控信息</li>
<li>Cloudera Repository：可供Cloudera Manager分配的软件的存储库（repo库）</li>
<li>Client：用于与服务器进行交互的接口：&nbsp;<br />
<br />
<ul>
<li>Admin Console：管理员控制台</li>
<li>API：开发人员使用
API可以创建自定义的Cloudera Manager应用程序</li>


</ul>


</li>


</ul>
<h3><strong>Cloudera Management
Service</strong></h3>
<p>Cloudera Management Service 可作为一组角色实施各种管理功能</p>
<ul>
<li>Activity Monitor：收集有关服务运行的活动的信息</li>
<li>Host Monitor：收集有关主机的运行状况和指标信息</li>
<li>Service Monitor：收集有关服务的运行状况和指标信息</li>
<li>Event Server：聚合组件的事件并将其用于警报和搜索</li>
<li>Alert Publisher ：为特定类型的事件生成和提供警报</li>
<li>Reports Manager：生成图表报告，它提供用户、用户组的目录的磁盘使用率、磁盘、io等历史视图</li>


</ul>
<h3><strong>信号检测</strong></h3>
<p>默认情况下，Agent 每隔 15 秒向 Cloudera Manager Server
发送一次检测信号。但是，为了减少用户延迟，在状态变化时会提高频率。</p>
<h3><strong>状态管理</strong></h3>
<ul>
<li>模型状态捕获什么进程应在何处运行以及具有什么配置</li>
<li>运行时状态是哪些进程正在何处运行以及正在执行哪些命令（例如，重新平衡
HDFS 或执行备份/灾难恢复计划或滚动升级或停止）</li>
<li>当您更新配置（例如Hue Server Web 端口）时，您即更新了模型状态。但是，如果 Hue 在更新时正在运行，则它仍将使用旧端口。当出现这种不匹配情况时，角色会标记为具有&rdquo;过时的配置&rdquo;。要重新同步，您需重启角色（这会触发重新生成配置和重启进程）</li>
<li>特殊情况如果要加入一些clouder manager控制台没有的属性时候都在高级里面嵌入</li>
</ul>
<h3><strong>服务器和客户端配置</strong></h3>
<ul>
<li>如使用HDFS，文件
/etc/hadoop/conf/hdfs-site.xml 仅包含与 HDFS 客户端相关的配置</li>
<li>而 HDFS 角色实例（例如，NameNode 和 DataNode）会从/var/run/cloudera-scm-agent/process/unique-process-name下的每个进程专用目录获取它们的配置</li>
</ul>
<h3>进程管理</h3>
<ul>
<li>在 Cloudera Manager 管理的群集中，只能通过 Cloudera Manager 启动或停止服务。ClouderaManager 使用一种名为
supervisord的开源进程管理工具，它会重定向日志文件，通知进程失败，为合适用户设置调用进程的有效用户 ID 等等</li>
<li>Cloudera Manager 支持自动重启崩溃进程。如果一个角色实例在启动后反复失败，Cloudera Manager还会用不良状态标记该实例</li>
<li>特别需要注意的是，停止 Cloudera Manager 和
Cloudera Manager Agent 不会停止群集；所有正在运行的实例都将保持运行</li>
<li>Agent 的一项主要职责是启动和停止进程。当 Agent 从检测信号检测到新进程时，Agent 会在/var/run/cloudera-scm-agent
中为它创建一个目录，并解压缩配置</li>
<li>Agent 受到监控，属于
Cloudera Manager 的主机监控的一部分：如果 Agent 停止检测信号，主机将被标记为运行状况不良</li>
</ul>
<h3><strong>主机管理</strong></h3>
<ul>
<li>Cloudera Manager 自动将作为群集中的托管主机身份：JDK、Cloudera Manager Agent、CDH、Impala、Solr
等参与所需的所有软件部署到主机</li>
<li>Cloudera Manager 提供用于管理参与主机生命周期的操作以及添加和删除主机的操作</li>
<li>Cloudera Management Service
Host Monitor 角色执行运行状况检查并收集主机度量，以使您可以监控主机的运行状况和性能</li>
</ul>
<h3><strong>安全</strong></h3>
<ul>
<li><strong>身份验证</strong>
<ul>
<li>Hadoop中身份验证的目的仅仅是证明用户或服务确实是他或她所声称的用户或服务，通常，企业中的身份验证通过单个分布式系统（例如，轻型目录访问协议 (LDAP) 目录）进行管理。LDAP身份验证包含由各种存储系统提供支持的简单用户名/密码服务</li>
<li>Hadoop 生态系统的许多组件会汇总到一起来使用 Kerberos 身份验证并提供用于在 LDAP 或
AD 中管理和存储凭据的选项</li>
</ul>
</li>
</ul>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<strong>授权</strong>&nbsp;<br />
CDH 当前提供以下形式的访问控制：&nbsp;</p>
<ul>
<li>适用于目录和文件的传统 POSIX 样式的权限</li>
<li>适用于 HDFS 的扩展的访问控制列表 (ACL)</li>
<li>Apache HBase 使用
ACL 来按列、列族和列族限定符授权各种操作 (READ, WRITE, CREATE, ADMIN)</li>
<li>使用 Apache Sentry 基于角色进行访问控制</li>


</ul>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<strong>加密</strong>&nbsp;</p>
<ul>
<ul>
<li>需要获得企业版的Cloudera（Cloudera
Navigator 许可）</li>


</ul>

</ul>
<p>&nbsp;</p>
<h2>2、clouderaManager环境安装前准备</h2>
<p>准备两台虚拟机，其中一台作为我们的主节点，安装我们的ClouderaManager Server与ClouderaManager&nbsp; agent，另外一台作为我们的从节点只安装我们的clouderaManager&nbsp; agent</p>
<p>机器规划如下</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="184">
<p>服务器IP</p>

</td>
<td valign="top" width="184">
<p>192.168.52.100</p>

</td>
<td valign="top" width="184">
<p>192.168.52.110</p>

</td>

</tr>
<tr>
<td valign="top" width="184">
<p>主机名</p>

</td>
<td valign="top" width="184">
<p>node01.hadoop.com</p>

</td>
<td valign="top" width="184">
<p>node02.hadoop.com</p>

</td>

</tr>
<tr>
<td valign="top" width="184">
<p>主机名与IP地址映射</p>

</td>
<td valign="top" width="184">
<p>是</p>

</td>
<td valign="top" width="184">
<p>是</p>

</td>

</tr>
<tr>
<td valign="top" width="184">
<p>防火墙</p>

</td>
<td valign="top" width="184">
<p>关闭</p>

</td>
<td valign="top" width="184">
<p>关闭</p>

</td>

</tr>
<tr>
<td valign="top" width="184">
<p>selinux</p>

</td>
<td valign="top" width="184">
<p>关闭</p>

</td>
<td valign="top" width="184">
<p>关闭</p>

</td>

</tr>
<tr>
<td valign="top" width="184">
<p>jdk</p>

</td>
<td valign="top" width="184">
<p>安装</p>

</td>
<td valign="top" width="184">
<p>安装</p>

</td>

</tr>
<tr>
<td valign="top" width="184">
<p>ssh免密码登录</p>

</td>
<td valign="top" width="184">
<p>是</p>

</td>
<td valign="top" width="184">
<p>是</p>

</td>

</tr>
<tr>
<td valign="top" width="184">
<p>mysql数据库</p>

</td>
<td valign="top" width="184">
<p>否</p>

</td>
<td valign="top" width="184">
<p>是</p>

</td>

</tr>
<tr>
<td valign="top" width="184">
<p>服务器内存</p>

</td>
<td valign="top" width="184">
<p>16G</p>

</td>
<td valign="top" width="184">
<p>8G</p>

</td>

</tr>

</tbody>

</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>所有机器统一两个路径</p>
<div>
<p class="a">mkdir -p /export/softwares/</p>
<p class="a">mkdir -p /export/servers/</p>

</div>
<h3>2.1、两台机器更改主机名</h3>
<p>第一台机器更改主机名</p>
<p class="code">vim /etc/sysconfig/network</p>
<div>
<p class="a">NETWORKING=yes</p>
<p class="a">HOSTNAME=node01.hadoop.com</p>

</div>
<p>第二台机器更改主机名</p>
<p class="code">vim /etc/sysconfig/network</p>
<div>
<p class="a">NETWORKING=yes</p>
<p class="a">HOSTNAME=node02.hadoop.com</p>

</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>2.2、更改主机名与IP地址的映射</h3>
<p>两台机器更改hosts文件</p>
<p class="code">vim /etc/hosts</p>
<div>
<p class="a">192.168.52.100 node01.hadoop.com</p>
<p class="a">192.168.52.110 node02.hadoop.com</p>

</div>
<h3>2.3、两台机器关闭防火墙</h3>
<p class="code">service iptables stop</p>
<p class="code">chkconfig iptables off</p>
<h3>2.4、两台机器关闭selinux</h3>
<p class="code">vim /etc/selinux/config</p>
<div>
<p class="a">SELINUX=disabled</p>

</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>2.5、两台机器安装jdk</h3>
<p>将我们的jdk的压缩包上传到node01.hadoop.com的/export/softwares路径下</p>
<p class="code">cd /export/softwares/</p>
<p class="code">tar -zxvf jdk-8u141-linux-x64.tar.gz&nbsp; -C /export/servers/</p>
<p>&nbsp;</p>
<p>配置环境变量</p>
<p class="code">vim /etc/profile</p>
<div>
<p class="a">export JAVA_HOME=/export/servers/jdk1.8.0_141</p>
<p class="a">export PATH=:$JAVA_HOME/bin:$PATH</p>

</div>
<p>&nbsp;</p>
<p class="code">source /etc/profile</p>
<p>&nbsp;</p>
<p>第二台机器同样安装jdk即可</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>2.6、两台机器实现SSH免密码登录</h3>
<h4>第一步：两台器生成公钥与私钥</h4>
<p>两台机器上面执行以下命令，然后按下三个回车键即可生成公钥与私钥</p>
<p class="code">ssh-keygen -t rsa</p>
<p>&nbsp;</p>
<h4>第二步：两台机器将公钥拷贝到同一个文件当中去</h4>
<p>两台机器执行以下命令</p>
<p class="code">ssh-copy-id node01.hadoop.com</p>
<p>&nbsp;</p>
<h4>第三步：拷贝authorized_keys到其他机器</h4>
<p>第一台机器上将authorized_keys拷贝到第二台机器</p>
<p class="code">scp /root/.ssh/authorized_keys node02.hadoop.com:/root/.ssh/</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>2.7、第二台机器安装mysql数据库</h3>
<p>通过yum源，在线安装mysql</p>
<p>&nbsp;</p>
<p class="code">yum&nbsp; install&nbsp; mysql&nbsp; mysql-server&nbsp; mysql-devel</p>
<p class="code">/etc/init.d/mysqld start</p>
<p class="code">/usr/bin/mysql_secure_installation</p>
<p>进入mysql客户端执行以下命令</p>
<p class="code">&nbsp;grant all privileges on *.* to 'root'@'%' identified by '123456' with grant option;</p>
<p class="code">&nbsp;flush privileges;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>2.8、解除linux系统打开文件最大数量的限制</h3>
<p>两台机器都需要执行</p>
<p class="code">vi /etc/security/limits.conf</p>
<p>添加以下内容</p>
<div>
<p class="a">*&nbsp;&nbsp;&nbsp; soft noproc 11000</p>
<p class="a">*&nbsp;&nbsp;&nbsp; hard noproc 11000</p>
<p class="a">*&nbsp;&nbsp;&nbsp; soft nofile 65535</p>
<p class="a">*&nbsp;&nbsp;&nbsp; hard nofile 65535</p>

</div>
<p>&nbsp;</p>
<h3>2.9、设置linux交换区内存</h3>
<p>两台机器都要执行</p>
<p>执行命令</p>
<p class="code">echo 10 &gt; /proc/sys/vm/swappiness</p>
<p>并编辑文件sysctl.conf：</p>
<p class="code">vim /etc/sysctl.conf</p>
<p>添加或修改</p>
<div>
<p class="a">vm.swappiness = 0</p>

</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>两台机器都要执行：</p>
<p class="code">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</p>
<p class="code">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</p>
<p>并编辑文件rc.local ：</p>
<p class="code">vim /etc/rc.local</p>
<div>
<p class="a">echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</p>
<p class="a">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</p>

</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>2.10、两台机器时钟同步</h3>
<p>两台机器需要进行时钟同步操作，保证两台机器时间相同</p>
<p>crontab &ndash;e</p>
<div>
<p class="a">*/1 * * * * /usr/sbin/ntpdate ntp4.aliyun.com;</p>

</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>2.11、两台服务器关闭防火墙</h3>
<div>
<p class="a">service iptables stop</p>
<p class="a">chkconfig iptables off</p>

</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>服务器关机重启</p>
<p>&nbsp;</p>]]></description></item><item><title>2-10 就业课(2.0)-oozie：11、hadoop的federation（联邦机制，了解一下）</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/14/11184136.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 14 Jul 2019 06:05:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/14/11184136.html</guid><description><![CDATA[<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190714224852207-2001311801.png" alt="" /></p>
<p><span style="color: #ff0000;">====================================================</span></p>
<h2>Hadoop Federation</h2>
<h3>背景概述</h3>
<p>单NameNode的架构使得HDFS在集群扩展性和性能上都有潜在的问题，当集群大到一定程度后，NameNode进程使用的内存可能会达到上百G，NameNode成为了性能的瓶颈。因而提出了namenode水平扩展方案-- Federation。</p>
<p>Federation中文意思为联邦,联盟，是NameNode的Federation,也就是会有多个NameNode。多个NameNode的情况意味着有多个namespace(命名空间)，区别于HA模式下的多NameNode，它们是拥有着同一个namespace。既然说到了NameNode的命名空间的概念,这里就看一下现有的HDFS数据管理架构,如下图所示:</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190714225714173-398491620.png" alt="" /></p>
<p>&nbsp;</p>
<p>从上图中,我们可以很明显地看出现有的HDFS数据管理,数据存储2层分层的结构.也就是说,所有关于存储数据的信息和管理是放在NameNode这边,而真实数据的存储则是在各个DataNode下.而这些隶属于同一个NameNode所管理的数据都是在同一个命名空间下的.而一个namespace对应一个block pool。Block Pool是同一个namespace下的block的集合.当然这是我们最常见的单个namespace的情况,也就是一个NameNode管理集群中所有元数据信息的时候.如果我们遇到了之前提到的NameNode内存使用过高的问题,这时候怎么办?元数据空间依然还是在不断增大,一味调高NameNode的jvm大小绝对不是一个持久的办法.这时候就诞生了HDFS Federation的机制.</p>
<h3>Federation架构设计</h3>
<p>HDFS Federation是解决namenode内存瓶颈问题的水平横向扩展方案。</p>
<p>Federation意味着在集群中将会有多个namenode/namespace。这些namenode之间是联合的，也就是说，他们之间相互独立且不需要互相协调，各自分工，管理自己的区域。分布式的datanode被用作通用的数据块存储存储设备。每个datanode要向集群中所有的namenode注册，且周期性地向所有namenode发送心跳和块报告，并执行来自所有namenode的命令。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190714225730063-768887829.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Federation一个典型的例子就是上面提到的NameNode内存过高问题,我们完全可以将上面部分大的文件目录移到另外一个NameNode上做管理.<strong>更重要的一点在于,这些NameNode是共享集群中所有的DataNode的,它们还是在同一个集群内的。</strong></p>
<p>这时候在DataNode上就不仅仅存储一个Block Pool下的数据了,而是多个(在DataNode的datadir所在目录里面查看BP-xx.xx.xx.xx打头的目录)。</p>
<p><strong>概括起来：</strong></p>
<p>多个NN共用一个集群里的存储资源，每个NN都可以单独对外提供服务。</p>
<p>每个NN都会定义一个存储池，有单独的id，每个DN都为所有存储池提供存储。</p>
<p>DN会按照存储池id向其对应的NN汇报块信息，同时，DN会向所有NN汇报本地存储可用资源情况。</p>
<p><strong>HDFS Federation</strong><strong>不足</strong></p>
<p>HDFS Federation并没有完全解决单点故障问题。虽然namenode/namespace存在多个，但是从单个namenode/namespace看，仍然存在单点故障：如果某个namenode挂掉了，其管理的相应的文件便不可以访问。Federation中每个namenode仍然像之前HDFS上实现一样，配有一个secondary namenode，以便主namenode挂掉一下，用于还原元数据信息。</p>
<p>所以一般集群规模真的很大的时候，会采用HA+Federation的部署方案。也就是每个联合的namenodes都是ha的。</p>
<p> <strong><br clear="all" />
</strong></p>
<h3>Federation示例配置</h3>
<p>这是一个包含两个Namenode的Federation示例配置：</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="553">
<p align="left">&lt;configuration&gt;</p>
<p align="left">&nbsp; &lt;property&gt;</p>
<p align="left">&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.nameservices&lt;/name&gt;</p>
<p align="left">&nbsp;&nbsp;&nbsp; &lt;value&gt;ns1,ns2&lt;/value&gt;</p>
<p align="left">&nbsp; &lt;/property&gt;</p>
<p align="left">&nbsp; &lt;property&gt;</p>
<p align="left">&nbsp;&nbsp;&nbsp;
  &lt;name&gt;dfs.namenode.rpc-address.ns1&lt;/name&gt;</p>
<p align="left">&nbsp;&nbsp;&nbsp;
  &lt;value&gt;nn-host1:rpc-port&lt;/value&gt;</p>
<p align="left">&nbsp; &lt;/property&gt;</p>
<p align="left">&nbsp; &lt;property&gt;</p>
<p align="left">&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.namenode.http-address.ns1&lt;/name&gt;</p>
<p align="left">&nbsp;&nbsp;&nbsp;
  &lt;value&gt;nn-host1:http-port&lt;/value&gt;</p>
<p align="left">&nbsp; &lt;/property&gt;</p>
<p align="left">&nbsp; &lt;property&gt;</p>
<p align="left">&nbsp;&nbsp;&nbsp;
  &lt;name&gt;dfs.namenode.secondaryhttp-address.ns1&lt;/name&gt;</p>
<p align="left">&nbsp;&nbsp;&nbsp;
  &lt;value&gt;snn-host1:http-port&lt;/value&gt;</p>
<p align="left">&nbsp; &lt;/property&gt;</p>
<p align="left">&nbsp; &lt;property&gt;</p>
<p align="left">&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.namenode.rpc-address.ns2&lt;/name&gt;</p>
<p align="left">&nbsp;&nbsp;&nbsp;
  &lt;value&gt;nn-host2:rpc-port&lt;/value&gt;</p>
<p align="left">&nbsp; &lt;/property&gt;</p>
<p align="left">&nbsp; &lt;property&gt;</p>
<p align="left">&nbsp;&nbsp;&nbsp;
  &lt;name&gt;dfs.namenode.http-address.ns2&lt;/name&gt;</p>
<p align="left">&nbsp;&nbsp;&nbsp;
  &lt;value&gt;nn-host2:http-port&lt;/value&gt;</p>
<p align="left">&nbsp; &lt;/property&gt;</p>
<p align="left">&nbsp; &lt;property&gt;</p>
<p align="left">&nbsp;&nbsp;&nbsp;
  &lt;name&gt;dfs.namenode.secondaryhttp-address.ns2&lt;/name&gt;</p>
<p align="left">&nbsp;&nbsp;&nbsp; &lt;value&gt;snn-host2:http-port&lt;/value&gt;</p>
<p align="left">&nbsp; &lt;/property&gt;</p>
<p align="left">&nbsp;</p>
<p align="left">&nbsp; .... Other common configuration ...</p>
<p align="left">&lt;/configuration&gt;</p>
<p>&nbsp;</p>




  </td>




 </tr>




</tbody>



</table>]]></description></item><item><title>word2010文档如何隐藏右侧灰色空白不可编辑区域</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/14/11183726.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 14 Jul 2019 03:54:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/14/11183726.html</guid><description><![CDATA[<p>word2010文档如何隐藏右侧灰色空白不可编辑区域，</p>
<p>（word2007也是差不多的操作）</p>
<p>两种方法：</p>
<p>1.点击图中的&ldquo;最终状态&rdquo;按钮：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190714115046043-1675584818.png" alt="" /></p>
<p>&nbsp;</p>
<p>2.点击图中的&rdquo;以嵌入方式显示所有修订&ldquo;的按钮：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190714115254744-845305218.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>记一次惊险的系统和分区修复</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/14/11183274.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 14 Jul 2019 02:15:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/14/11183274.html</guid><description><![CDATA[<p>新买了一块SSD，新安装了win10系统，运行速度确实非常快，杠杠的，很开心。</p>
<p>&nbsp;</p>
<p>但是希望能启动双系统，以前的win7系统也能使用。旧硬盘上安装了win7，新硬盘上安装了win10，双系统的使用方法就是开机时按ESC键，选择其中一块硬盘，就能启动该硬盘下的系统。但是想法很丰满，现实却很骨感，当启动win7时，系统一开始检查磁盘，然后自动重启了，默认启动盘是ssd，所以自动启动了win10。我不死心，再次重启，选择win7，这次，同样是检查磁盘，然后我按esc键取消检查，但是没用，还是检查其他的分区。检查完了，就开始恢复文件，也不知道恢复的什么文件。我看要恢复好几个小时，就没管它，睡觉去了，一觉醒来，系统自动休眠了。然后再次关机重启，切换到win7，系统蓝屏，没办法，我只能启动win10，没想到win10也无法启动，报错：NTFS file system.&nbsp;</p>
<p>猜测：启动win7时，win10 的系统盘的文件遭到了加载破坏。</p>
<p>解决方法：打开高级启动菜单（我尝试按F8，不过好像没用，但是win10启动失败几次后，自动进入了这个界面），选择疑难解答---高级选项---命令提示符。</p>
<p>此时输入命令dispart，回车，再输入list volume，结果如下：</p>
<div><span style="color: #ffffff; background-color: #000000;">C:\Users\Administrator&gt;diskpart</span></div>
<div><span style="color: #ffffff; background-color: #000000;">Microsoft DiskPart 版本 10.0.17763.1</span></div>
<div><span style="color: #ffffff; background-color: #000000;">Copyright (C) Microsoft Corporation.</span><br /><span style="color: #ffffff; background-color: #000000;">在计算机上: WITT20190713</span></div>
<div><span style="color: #ffffff; background-color: #000000;">DISKPART&gt; list volume</span></div>
<div><span style="color: #ffffff; background-color: #000000;">&nbsp; 卷 ###&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LTR&nbsp; 标签&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FS&nbsp;&nbsp;&nbsp;&nbsp; 类型&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 大小&nbsp;&nbsp;&nbsp;&nbsp; 状态&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 信息</span><br /><span style="color: #ffffff; background-color: #000000;">&nbsp; ----------&nbsp; ---&nbsp; -----------&nbsp; -----&nbsp; ----------&nbsp; -------&nbsp; ---------&nbsp; --------</span><br /><span style="color: #ffffff; background-color: #000000;">&nbsp; 卷&nbsp;&nbsp;&nbsp;&nbsp; 0&nbsp;&nbsp;&nbsp;&nbsp; D&nbsp;&nbsp; WIN7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NTFS&nbsp;&nbsp; 磁盘分区&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 100 GB&nbsp; 正常</span><br /><span style="color: #ffffff; background-color: #000000;">&nbsp; 卷&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp; E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #000000; background-color: #ffff00;">RAW</span>&nbsp;&nbsp;&nbsp; 磁盘分区&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 365 GB&nbsp; 正常</span><br /><span style="color: #ffffff; background-color: #000000;">&nbsp; 卷&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp; C&nbsp;&nbsp; WIN10 &nbsp; &nbsp; &nbsp;&nbsp; <span style="color: #000000; background-color: #ffff00;">RAW</span> &nbsp; 磁盘分区&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 80 GB&nbsp; 正常&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 系统</span><br /><span style="color: #ffffff; background-color: #000000;">&nbsp; 卷&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp; F&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NTFS&nbsp;&nbsp; 磁盘分区&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 143 GB&nbsp; 正常</span></div>
<div>&nbsp;</div>
<div>&nbsp;</div>
<div>然后找到win10系统分区是C盘（不一定是C盘，可能是E盘），发现其FS是RAW，正常是NTFS。</div>
<div>然后执行一个非常棒的命令：&nbsp; chkdsk /x /f c:</div>
<div>&nbsp;</div>
<div>这样就开始修复该分区C。 一定要看准哪个是系统盘，再输入对应的盘符。</div>
<div>&nbsp;</div>
<div>固态硬盘的话，修复很快的，几分钟后就能修复完成。然后重启电脑，就能正常进入win10系统了（至于win7，咱不管它了，也不重要，以后早晚要删掉的）。</div>
<div>另外，要说明的一点：该命令不仅能修复系统分区，还能修复其他分区，比如这里，E盘也是RAW状态，然后在打开&lsquo;此电脑&rsquo;，发现E盘无法打开，处于未格式化的状态。</div>
<div>此时我们执行：&nbsp; chkdsk /x /f e:</div>
<div>&nbsp;</div>
<div>执行过程如下：</div>
<div>
<div><span style="color: #ffffff; background-color: #000000;">C:\Users\Administrator&gt;chkdsk /x /f e:</span><br /><span style="color: #ffffff; background-color: #000000;">文件系统的类型是 NTFS。</span></div>
<div><span style="color: #ffffff; background-color: #000000;">阶段 1: 检查基本文件系统结构...</span><br /><span style="color: #ffffff; background-color: #000000;">&nbsp; 已处理 1359360 个文件记录。</span><br /><span style="color: #ffffff; background-color: #000000;">文件验证完成。</span><br /><span style="color: #ffffff; background-color: #000000;">&nbsp; 已处理 1699 个大型文件记录。</span><br /><span style="color: #ffffff; background-color: #000000;">&nbsp; 已处理 0 个错误的文件记录。</span></div>
<div><span style="color: #ffffff; background-color: #000000;">阶段 2: 检查文件名链接...</span><br /><span style="color: #ffffff; background-color: #000000;">&nbsp; 已处理 585 个重新解析记录。</span><br /><span style="color: #ffffff; background-color: #000000;">&nbsp; 已处理 1610516 个索引项。</span><br /><span style="color: #ffffff; background-color: #000000;">索引验证完成。</span><br /><span style="color: #ffffff; background-color: #000000;">CHKDSK 正在扫描未编制索引的文件以便重新连接到其原始目录。</span><br /><span style="color: #ffffff; background-color: #000000;">正在将孤立文件 bootex.log (13)恢复到目录文件 5。</span><br /><span style="color: #ffffff; background-color: #000000;">&nbsp; 已扫描到 2 个未索引文件。</span><br /><span style="color: #ffffff; background-color: #000000;">正在将孤立文件 bootsqm.dat (14)恢复到目录文件 5。</span><br /><span style="color: #ffffff; background-color: #000000;">&nbsp; 已将 2 个未编制索引的文件恢复到原始目录。</span><br /><span style="color: #ffffff; background-color: #000000;">&nbsp; 已将 0 个未编制索引的文件恢复到回收箱。</span><br /><span style="color: #ffffff; background-color: #000000;">&nbsp; 已处理 585 个重新解析记录。</span></div>
<div><span style="color: #ffffff; background-color: #000000;">阶段 3: 检查安全描述符...</span><br /><span style="color: #ffffff; background-color: #000000;">正修复安全文件的记录段。</span><br /><span style="color: #ffffff; background-color: #000000;">正修复安全文件的记录段。</span><br /><span style="color: #ffffff; background-color: #000000;">安全描述符验证完成。</span><br /><span style="color: #ffffff; background-color: #000000;">&nbsp; 已处理 125579 个数据文件。</span><br /><span style="color: #ffffff; background-color: #000000;">CHKDSK 正在验证 Usn 日志...</span><br /><span style="color: #ffffff; background-color: #000000;">Usn 日志验证完成。</span><br /><span style="color: #ffffff; background-color: #000000;">正在更正卷位图的错误。</span></div>
<div><span style="color: #ffffff; background-color: #000000;">Windows 已更正文件系统。</span><br /><span style="color: #ffffff; background-color: #000000;">无需采取进一步操作。</span></div>
<div><span style="color: #ffffff; background-color: #000000;">总共有&nbsp; 383524863 KB 磁盘空间。</span><br /><span style="color: #ffffff; background-color: #000000;">707166 个文件中有&nbsp; 347687996 KB。</span><br /><span style="color: #ffffff; background-color: #000000;">125580 个索引&nbsp;&nbsp;&nbsp;&nbsp; 338496 KB。</span><br /><span style="color: #ffffff; background-color: #000000;">坏扇区&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0 KB。</span><br /><span style="color: #ffffff; background-color: #000000;">系统正在使用&nbsp;&nbsp;&nbsp; 1437251 KB。</span><br /><span style="color: #ffffff; background-color: #000000;">日志文件占用了&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 65536 KB。</span><br /><span style="color: #ffffff; background-color: #000000;">磁盘上&nbsp;&nbsp; 34061120 KB 可用。</span></div>
<div><span style="color: #ffffff; background-color: #000000;">每个分配单元中有&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4096 字节。</span><br /><span style="color: #ffffff; background-color: #000000;">磁盘上共有&nbsp;&nbsp; 95881215 个分配单元。</span><br /><span style="color: #ffffff; background-color: #000000;">磁盘上有&nbsp;&nbsp;&nbsp; 8515280 个可用的分配单元。</span></div>
</div>
<div>&nbsp;</div>
<div>然后E盘也恢复正常使用了。</div>
<div>&nbsp;</div>
<div>其实，E盘才是最重要的，如果E盘无法修复，那我的所有的资料都丢失了。真是一次惊险的神还原！</div>
<div>另外，平时还是要做好各种系统、数据备份！这次比较幸运，下次万一无法还原，还能有备份数据。</div>
<div>&nbsp;</div>
<div>&nbsp;</div>]]></description></item><item><title>2-10 就业课(2.0)-oozie：10、伪分布式环境转换为HA集群环境</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/12/11173699.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 11 Jul 2019 16:40:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/12/11173699.html</guid><description><![CDATA[<p>hadoop 的基础环境增强 HA模式</p>
<p>HA是为了保证我们的业务 系统 7 *24 的连续的高可用提出来的一种解决办法，<br />现在hadoop当中的主节点，namenode以及resourceManager都已经实现了HA<br />如果active状态namenode出现故障，standBy状态的节点会检测到并代替active节点继续工作</p>
<p>常用的HA的实现方式：QJM的方式<br />使用qjm的方式实现我们的namnode的HA就会出现一个问题，edits文件如何同步</p>
<p><br />zkFailoverController:监控namenode的健康状态  主要有以下三个功能  健康检测，会话管理，选举机制</p>
<p><br />将伪分布式模式，转换成高可用的模式，并且保证hdfs的数据的不丢失。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190714134924186-1497860572.png" alt="" /></p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190714135254232-1247337152.png" alt="" /></p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">===========================================</span></p>
<h1>7、hadoop基础环境增强</h1>
<h2>Hadoop High Availability</h2>
<p>HA(High Available), 高可用，是保证业务连续性的有效解决方案，一般有两个或两个以上的节点，分为<strong>活动节点（Active）</strong>及<strong>备用节点（Standby）</strong>。通常把正在执行业务的称为活动节点，而作为活动节点的一个备份的则称为备用节点。当活动节点出现问题，导致正在运行的业务（任务）不能正常运行时，备用节点此时就会侦测到，并立即接续活动节点来执行业务。从而实现业务的不中断或短暂中断。</p>
<p>Hadoop1.X版本，NN是HDFS集群的单点故障点，每一个集群只有一个NN,如果这个机器或进程不可用，整个集群就无法使用。为了解决这个问题，出现了一堆针对HDFS HA的解决方案（如：Linux HA, VMware FT, shared NAS+NFS, BookKeeper, QJM/Quorum Journal Manager, BackupNode等）。</p>
<p>在HA具体实现方法不同情况下，HA框架的流程是一致的, 不一致的就是如何存储、管理、同步edits编辑日志文件。</p>
<p>在Active NN和Standby NN之间要有个共享的存储日志的地方，Active NN把edit Log写到这个共享的存储日志的地方，Standby NN去读取日志然后执行，这样Active和Standby NN内存中的HDFS元数据保持着同步。一旦发生主从切换Standby NN可以尽快接管Active NN的工作。</p>
<p>&nbsp;</p>
<p align="left">&nbsp;</p>
<h3>Namenode HA</h3>
<h4>Namenode HA详解</h4>
<p>hadoop2.x之后，Clouera提出了QJM/Qurom Journal Manager，这是一个基于Paxos算法（分布式一致性算法）实现的HDFS HA方案，它给出了一种较好的解决思路和方案,QJM主要优势如下：</p>
<p>不需要配置额外的高共享存储，降低了复杂度和维护成本。</p>
<p align="left">消除spof(单点故障)。</p>
<p align="left">系统鲁棒性(Robust)的程度可配置、可扩展。</p>
<p align="left">&nbsp;</p>
<p align="left">基本原理就是用2N+1台 JournalNode 存储EditLog，每次写数据操作有&gt;=N+1返回成功时即认为该次写成功，数据不会丢失了。当然这个算法所能容忍的是最多有N台机器挂掉，如果多于N台挂掉，这个算法就失效了。这个原理是基于Paxos算法。</p>
<p align="left">在HA架构里面SecondaryNameNode已经不存在了，为了保持standby NN时时的与Active NN的元数据保持一致，他们之间交互通过JournalNode进行操作同步。</p>
<p align="left">任何修改操作在 Active NN上执行时，JournalNode进程同时也会记录修改log到至少半数以上的JN中，这时 Standby NN 监测到JN 里面的同步log发生变化了会读取 JN 里面的修改log，然后同步到自己的目录镜像树里面，如下图：</p>
<p align="center"><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190714134409948-1023221323.png" alt="" /></p>
<p align="center">&nbsp;</p>
<p align="left">当发生故障时，Active的 NN 挂掉后，Standby NN 会在它成为Active NN 前，读取所有的JN里面的修改日志，这样就能高可靠的保证与挂掉的NN的目录镜像树一致，然后无缝的接替它的职责，维护来自客户端请求，从而达到一个高可用的目的。</p>
<p align="left">在HA模式下，datanode需要确保同一时间有且只有一个NN能命令DN。为此：</p>
<p align="left">每个NN改变状态的时候，向DN发送自己的状态和一个序列号。</p>
<p align="left">DN在运行过程中维护此序列号，当failover时，新的NN在返回DN心跳时会返回自己的active状态和一个更大的序列号。DN接收到这个返回则认为该NN为新的active。</p>
<p align="left">如果这时原来的active NN恢复，返回给DN的心跳信息包含active状态和原来的序列号，这时DN就会拒绝这个NN的命令。</p>
<p>&nbsp;</p>
<p align="left">&nbsp;</p>
<h4>Failover Controller</h4>
<p>HA模式下，会将FailoverController部署在每个NameNode的节点上，作为一个单独的进程用来监视NN的健康状态。<strong>FailoverController</strong><strong>主要包括三个组件:</strong></p>
<p>HealthMonitor: 监控NameNode是否处于unavailable或unhealthy状态。当前通过RPC调用NN相应的方法完成。</p>
<p>ActiveStandbyElector: 监控NN在ZK中的状态。</p>
<p>ZKFailoverController: 订阅HealthMonitor 和ActiveStandbyElector 的事件，并管理NN的状态,另外zkfc还负责解决fencing（也就是脑裂问题）。</p>
<p>上述三个组件都在跑在一个JVM中，这个JVM与NN的JVM在同一个机器上。但是两个独立的进程。一个典型的HA集群，有两个NN组成，每个NN都有自己的ZKFC进程。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190714134313835-997570954.png" alt="" /></p>
<p>&nbsp;</p>
<p><strong>ZKFailoverController</strong><strong>主要职责：</strong></p>
<p>l&nbsp; <strong><span style="color: #ff0000;">健康监测</span>：</strong>周期性的向它监控的NN发送健康探测命令，从而来确定某个NameNode是否处于健康状态，如果机器宕机，心跳失败，那么zkfc就会标记它处于一个不健康的状态</p>
<p>l&nbsp; <strong><span style="color: #ff0000;">会话管理</span>：</strong>如果NN是健康的，zkfc就会在zookeeper中保持一个打开的会话，如果NameNode同时还是Active状态的，那么zkfc还会在Zookeeper中占有一个类型为短暂类型的znode，当这个NN挂掉时，这个znode将会被删除，然后备用的NN将会得到这把锁，升级为主NN，同时标记状态为Active</p>
<p>l&nbsp; 当宕机的NN新启动时，它会再次注册zookeper，发现已经有znode锁了，便会自动变为Standby状态，如此往复循环，保证高可靠，需要注意，目前仅仅支持最多配置2个NN</p>
<p>l&nbsp; <span style="color: #ff0000;"><strong>master</strong></span><strong><span style="color: #ff0000;">选举</span>：</strong>通过在zookeeper中维持一个短暂类型的znode，来实现抢占式的锁机制，从而判断那个NameNode为Active状态</p>
<h3>Yarn HA</h3>
<p>Yarn作为资源管理系统，是上层计算框架（如MapReduce,Spark）的基础。在Hadoop 2.4.0版本之前，Yarn存在单点故障（即ResourceManager存在单点故障），一旦发生故障，恢复时间较长，且会导致正在运行的Application丢失，影响范围较大。从Hadoop 2.4.0版本开始，Yarn实现了ResourceManager HA，在发生故障时自动failover，大大提高了服务的可靠性。</p>
<p>ResourceManager（简写为RM）作为Yarn系统中的主控节点，负责整个系统的资源管理和调度，内部维护了各个应用程序的ApplictionMaster信息、NodeManager（简写为NM）信息、资源使用等。由于资源使用情况和NodeManager信息都可以通过NodeManager的心跳机制重新构建出来，因此只需要对ApplicationMaster相关的信息进行持久化存储即可。</p>
<p>在一个典型的HA集群中，两台独立的机器被配置成ResourceManger。在任意时间，有且只允许一个活动的ResourceManger,另外一个备用。切换分为两种方式：</p>
<p><strong>手动切换</strong>：在自动恢复不可用时，管理员可用手动切换状态，或是从Active到Standby,或是从Standby到Active。</p>
<p><strong>自动切换</strong>：基于Zookeeper，但是区别于HDFS的HA，2个节点间无需配置额外的ZFKC守护进程来同步数据。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190714134237650-1175359039.png" alt="" /></p>
<h2 align="left">Hadoop HA集群的搭建</h2>
<p>如何在已有的节点上面搭建HA高可用集群</p>
<p>集群服务规划：</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="138">
<p>机器ip</p>



</td>
<td valign="top" width="138">
<p>192.168.52.100</p>



</td>
<td valign="top" width="138">
<p>192.168.52.110</p>



</td>
<td valign="top" width="138">
<p>192.168.52.120</p>



</td>



</tr>
<tr>
<td valign="top" width="138">
<p>主机名称</p>



</td>
<td valign="top" width="138">
<p>node01.hadoop.com</p>



</td>
<td valign="top" width="138">
<p>node02.hadoop.com</p>



</td>
<td valign="top" width="138">
<p>node03.hadoop.com</p>



</td>



</tr>
<tr>
<td valign="top" width="138">
<p>NameNode</p>



</td>
<td valign="top" width="138">
<p>是(active)</p>



</td>
<td valign="top" width="138">
<p>是(standBy)</p>



</td>
<td valign="top" width="138">
<p>否</p>



</td>



</tr>
<tr>
<td valign="top" width="138">
<p>DataNode</p>



</td>
<td valign="top" width="138">
<p>是</p>



</td>
<td valign="top" width="138">
<p>是</p>



</td>
<td valign="top" width="138">
<p>是</p>



</td>



</tr>
<tr>
<td valign="top" width="138">
<p>journalNode</p>



</td>
<td valign="top" width="138">
<p>是</p>



</td>
<td valign="top" width="138">
<p>是</p>



</td>
<td valign="top" width="138">
<p>是</p>



</td>



</tr>
<tr>
<td valign="top" width="138">
<p>ZKFC</p>



</td>
<td valign="top" width="138">
<p>是</p>



</td>
<td valign="top" width="138">
<p>是</p>



</td>
<td valign="top" width="138">
<p>否</p>



</td>



</tr>
<tr>
<td valign="top" width="138">
<p>ResourceManager</p>



</td>
<td valign="top" width="138">
<p>否</p>



</td>
<td valign="top" width="138">
<p>是（standBy）</p>



</td>
<td valign="top" width="138">
<p>是(active)</p>



</td>



</tr>
<tr>
<td valign="top" width="138">
<p>NodeManager</p>



</td>
<td valign="top" width="138">
<p>是</p>



</td>
<td valign="top" width="138">
<p>是</p>



</td>
<td valign="top" width="138">
<p>是</p>



</td>



</tr>
<tr>
<td valign="top" width="138">
<p>zookeeper</p>



</td>
<td valign="top" width="138">
<p>是</p>



</td>
<td valign="top" width="138">
<p>是</p>



</td>
<td valign="top" width="138">
<p>是</p>



</td>



</tr>
<tr>
<td valign="top" width="138">
<p>jobHistory</p>



</td>
<td valign="top" width="138">
<p>&nbsp;</p>



</td>
<td valign="top" width="138">
<p>&nbsp;</p>



</td>
<td valign="top" width="138">
<p>是</p>



</td>



</tr>



</tbody>



</table>
<p>&nbsp;</p>
<h3>第一步：停止服务</h3>
<p>停止hadoop集群的所有服务，包括HDFS的服务，以及yarn集群的服务，包括impala的服务，hive的服务以及oozie的服务等</p>
<h4>停止oozie服务</h4>
<p>node03停止oozie服务</p>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">bin/oozied.sh stop</p>



</div>
<h4>停止hue服务</h4>
<p>node03停止hue的服务</p>
<h4>停止impala服务</h4>
<p>直接使用kill -9杀死进程即可</p>
<p>node03停止impala相关服务</p>
<div>
<p class="a">service impala-catalog stop</p>
<p class="a">service impala-state-store stop</p>
<p class="a">service impala-server stop</p>



</div>
<p>node02停止impala相关服务</p>
<div>
<p class="a">service impala-server stop</p>



</div>
<p>node01停止impala相关服务</p>
<div>
<p class="a">service impala-server stop</p>



</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>停止hive服务</h4>
<p>node03停止hive服务</p>
<p>通过kill命令直接杀死相关hive进程即可</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190714134126131-766756513.png" alt="" /></p>
<h4>停止hadoop服务</h4>
<p>node01机器执行以下命令停止hadoop服务</p>
<p class="code">cd /export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="code">sbin/stop-dfs.sh</p>
<p class="code">sbin/stop-yarn.sh</p>
<p class="code">sbin/mr-jobhistory-daemon.sh stop historyserver</p>
<p>&nbsp;</p>
<h3>第二步：启动所有节点的zookeeper服务</h3>
<p class="code">cd /export/servers/zookeeper-3.4.5-cdh5.14.0</p>
<p class="code">bin/zkServer.sh start</p>
<p>&nbsp;</p>
<h3>第三步：更改配置文件</h3>
<p>所有节点修改配置文件，注意yarn-site.xml当中的</p>
<p>yarn.resourcemanager.ha.id 这个属性值，node03机器与node02机器的配置值不太一样</p>
<p>&nbsp;</p>
<h4>修改core-site.xml</h4>
<div>
<p class="a">&lt;!--</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;fs.default.name&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;hdfs://192.168.52.100:8020&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;/export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/tempDatas&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;io.file.buffer.size&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;4096&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;fs.trash.interval&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;10080&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">--&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node01.hadoop.com:2181,node02.hadoop.com:2181,node03.hadoop.com:2181&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;fs.defaultFS&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;hdfs://hann&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!--&nbsp; 缓冲区大小，实际工作中根据服务器性能动态调整 --&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;io.file.buffer.size&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;4096&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;/export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/tempDatas&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;fs.trash.interval&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;10080&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;*&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;hadoop.proxyuser.root.groups&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;*&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>



</div>
<h4>修改hdfs-site.xml</h4>
<div>
<p class="a">&lt;!-- NameNode存储元数据信息的路径，实际工作中，一般先确定磁盘的挂载目录，然后多个目录用，进行分割&nbsp;&nbsp; --&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!--&nbsp;&nbsp; 集群动态上下线</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.hosts&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;/export/servers/hadoop-2.7.4/etc/hadoop/accept_host&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.hosts.exclude&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;/export/servers/hadoop-2.7.4/etc/hadoop/deny_host&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;--&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&lt;!--</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node01:50090&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.namenode.http-address&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node01:50070&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;file:///export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/namenodeDatas&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;file:///export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/datanodeDatas&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.namenode.edits.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;value&gt;file:///export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/dfs/nn/edits&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.namenode.checkpoint.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;file:///export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/dfs/snn/name&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.namenode.checkpoint.edits.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;file:///export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/dfs/nn/snn/edits&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.replication&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;1&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.permissions&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;false&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.blocksize&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;134217728&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.client.read.shortcircuit&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.domain.socket.path&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;/var/run/hdfs-sockets/dn&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.client.file-block-storage-locations.timeout.millis&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;10000&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.datanode.hdfs-blocks-metadata.enabled&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.nameservices&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;hann&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.ha.namenodes.hann&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;nn1,nn2&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.namenode.rpc-address.hann.nn1&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node01.hadoop.com:8020&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.namenode.rpc-address.hann.nn2&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node02.hadoop.com:8020&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.namenode.servicerpc-address.hann.nn1&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node01.hadoop.com:8022&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.namenode.servicerpc-address.hann.nn2&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node02.hadoop.com:8022&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.namenode.http-address.hann.nn1&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node01.hadoop.com:50070&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.namenode.http-address.hann.nn2&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node02.hadoop.com:50070&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.namenode.shared.edits.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;qjournal://node01.hadoop.com:8485;node02.hadoop.com:8485;node03.hadoop.com:8485/hann&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.journalnode.edits.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;/export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/dfs/jn&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.client.failover.proxy.provider.hann&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.ha.fencing.methods&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;sshfence&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.ha.fencing.ssh.private-key-files&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;/root/.ssh/id_rsa&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.ha.automatic-failover.enabled&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;file:///export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/namenodeDatas&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.namenode.edits.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;value&gt;file:///export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/dfs/nn/edits&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;file:///export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/datanodeDatas&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.replication&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;3&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.permissions&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;false&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.blocksize&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;134217728&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.client.read.shortcircuit&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.domain.socket.path&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;/var/run/hdfs-sockets/dn&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.client.file-block-storage-locations.timeout.millis&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;10000&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.datanode.hdfs-blocks-metadata.enabled&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>



</div>
<p>&nbsp;</p>
<h4>修改mapred-site.xml</h4>
<div>
<p class="a">&lt;!--</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;yarn&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.job.ubertask.enable&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node01:10020&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node01:19888&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt;</p>
<p class="a">&lt;!--</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.map.output.compress&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.map.output.compress.codec&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.hadoop.io.compress.SnappyCodec&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.output.fileoutputformat.compress&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.output.fileoutputformat.compress.type&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;RECORD&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.output.fileoutputformat.compress.codec&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.hadoop.io.compress.SnappyCodec&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">--&gt;</p>
<p class="a">&lt;!--指定运行mapreduce的环境是yarn --&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;yarn&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- MapReduce JobHistory Server IPC host:port --&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node03:10020&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- MapReduce JobHistory Server Web UI host:port --&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node03:19888&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- The directory where MapReduce stores control files.默认 ${hadoop.tmp.dir}/mapred/system --&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.jobtracker.system.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;/export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/jobtracker&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- The amount of memory to request from the scheduler for each map task. 默认 1024--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.map.memory.mb&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;1024&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.map.java.opts&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;-Xmx1024m&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt; --&gt;</p>
<p class="a">&lt;!-- The amount of memory to request from the scheduler for each reduce task. 默认 1024--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.reduce.memory.mb&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;1024&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.reduce.java.opts&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;-Xmx2048m&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt; --&gt;</p>
<p class="a">&lt;!-- 用于存储文件的缓存内存的总数量，以兆字节为单位。默认情况下，分配给每个合并流1MB，给个合并流应该寻求最小化。默认值100--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.task.io.sort.mb&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;100&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&lt;!-- &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.jobtracker.handler.count&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;25&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;--&gt;</p>
<p class="a">&lt;!-- 整理文件时用于合并的流的数量。这决定了打开的文件句柄的数量。默认值10--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.task.io.sort.factor&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;10&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- 默认的并行传输量由reduce在copy(shuffle)阶段。默认值5--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.reduce.shuffle.parallelcopies&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;25&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.app.mapreduce.am.command-opts&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;-Xmx1024m&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- MR AppMaster所需的内存总量。默认值1536--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.app.mapreduce.am.resource.mb&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;1536&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- MapReduce存储中间数据文件的本地目录。目录不存在则被忽略。默认值${hadoop.tmp.dir}/mapred/local--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.cluster.local.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;/export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/mapreduce/local&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>



</div>
<p>&nbsp;</p>
<h4>修改yarn-site.xml</h4>
<p>注意：yarn.resourcemanager.ha.id 这个属性的配置，node03的这个属性值与node02的这个属性值内容不同</p>
<div>
<p class="a">&lt;!--</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node01&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.log-aggregation.retain-seconds&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;604800&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- Site specific YARN configuration properties --&gt;</p>
<p class="a">&lt;!-- 是否启用日志聚合.应用程序完成后,日志汇总收集每个容器的日志,这些日志移动到文件系统,例如HDFS. --&gt;</p>
<p class="a">&lt;!-- 用户可以通过配置"yarn.nodemanager.remote-app-log-dir"、"yarn.nodemanager.remote-app-log-dir-suffix"来确定日志移动到的位置 --&gt;</p>
<p class="a">&lt;!-- 用户可以通过应用程序时间服务器访问日志 --&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&lt;!-- 启用日志聚合功能，应用程序完成后，收集各个节点的日志到一起便于查看 --&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;</p>
<p class="a">&lt;!--开启resource manager HA,默认为false--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.ha.enabled&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- 集群的Id，使用该值确保RM不会做为其它集群的active --&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.cluster-id&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;mycluster&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!--配置resource manager&nbsp; 命名--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.ha.rm-ids&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;rm1,rm2&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- 配置第一台机器的resourceManager --&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.hostname.rm1&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node03.hadoop.com&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- 配置第二台机器的resourceManager --&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;name&gt;yarn.resourcemanager.hostname.rm2&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node02.hadoop.com&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&lt;!-- 配置第一台机器的resourceManager通信地址 --&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.address.rm1&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node03.hadoop.com:8032&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.scheduler.address.rm1&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node03.hadoop.com:8030&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.resource-tracker.address.rm1&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node03.hadoop.com:8031&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.admin.address.rm1&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node03.hadoop.com:8033&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.webapp.address.rm1&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node03.hadoop.com:8088&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&lt;!-- 配置第二台机器的resourceManager通信地址 --&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.address.rm2&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node02.hadoop.com:8032&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.scheduler.address.rm2&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node02.hadoop.com:8030&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.resource-tracker.address.rm2&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node02.hadoop.com:8031&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.admin.address.rm2&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node02.hadoop.com:8033&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.webapp.address.rm2&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node02.hadoop.com:8088&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!--开启resourcemanager自动恢复功能--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;name&gt;yarn.resourcemanager.recovery.enabled&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!--在node3上配置rm1,在node2上配置rm2,注意：一般都喜欢把配置好的文件远程复制到其它机器上，但这个在YARN的另一个机器上一定要修改，其他机器上不配置此项--&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.ha.id&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;rm1&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;description&gt;If we want to launch more than one RM in single node, we need this configuration&lt;/description&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &lt;!--用于持久存储的类。尝试开启--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.store.class&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.zk-address&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node01.hadoop.com:2181,node02.hadoop.com:2181,node03.hadoop.com:2181&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;description&gt;For multiple zk services, separate them with comma&lt;/description&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!--开启resourcemanager故障自动切换，指定机器--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.ha.automatic-failover.enabled&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;description&gt;Enable automatic failover; By default, it is enabled only when HA is enabled.&lt;/description&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.client.failover-proxy-provider&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.hadoop.yarn.client.ConfiguredRMFailoverProxyProvider&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- 允许分配给一个任务最大的CPU核数，默认是8 --&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.nodemanager.resource.cpu-vcores&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;4&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- 每个节点可用内存,单位MB --&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.nodemanager.resource.memory-mb&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;512&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- 单个任务可申请最少内存，默认1024MB --&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.scheduler.minimum-allocation-mb&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;512&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- 单个任务可申请最大内存，默认8192MB --&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.scheduler.maximum-allocation-mb&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;512&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!--多长时间聚合删除一次日志 此处--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.log-aggregation.retain-seconds&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;2592000&lt;/value&gt;&lt;!--30 day--&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!--时间在几秒钟内保留用户日志。只适用于如果日志聚合是禁用的--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.nodemanager.log.retain-seconds&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;604800&lt;/value&gt;&lt;!--7 day--&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!--指定文件压缩类型用于压缩汇总日志--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.nodemanager.log-aggregation.compression-type&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;gz&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- nodemanager本地文件存储目录--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.nodemanager.local-dirs&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;/export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/yarn/local&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- resourceManager&nbsp; 保存最大的任务完成个数 --&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.max-completed-applications&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;1000&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;!-- 逗号隔开的服务列表，列表名称应该只包含a-zA-Z0-9_,不能以数字开始--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&lt;!--rm失联后重新链接的时间--&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;yarn.resourcemanager.connect.retry-interval.ms&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;2000&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>



</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>改完之后，将配置文件分发到其他的各个节点</p>
<p>还要记得改node02机器的yarn-site.xml</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>第四步：服务的启动</h3>
<h4>第一步：初始化zookeeper</h4>
<p>在node01机器上进行zookeeper的初始化，其本质工作是创建对应的zookeeper节点</p>
<div>
<p class="a">cd /export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="a">bin/hdfs zkfc -formatZK</p>



</div>
<h4>第二步：启动journalNode</h4>
<p>三台机器执行以下命令启动journalNode，用于我们的元数据管理</p>
<p class="code">cd /export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="code">sbin/hadoop-daemon.sh start journalnode</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>第三步：初始化journalNode</h4>
<p>node01机器上准备初始化journalNode</p>
<div>
<p class="a">cd /export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="a">bin/hdfs namenode -initializeSharedEdits -force</p>



</div>
<h4>第四步：启动namenode</h4>
<p>node01机器上启动namenode</p>
<p class="code">cd /export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="code">sbin/hadoop-daemon.sh start namenode</p>
<p>node02机器上启动namenode</p>
<div>
<p class="a">cd /export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="a">bin/hdfs namenode -bootstrapStandby</p>
<p class="a">sbin/hadoop-daemon.sh start namenode</p>



</div>
<h4>第五步：启动所有节点的datanode进程</h4>
<p>在node01机器上启动所有节点的datanode进程</p>
<p class="code">cd /export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="code">sbin/hadoop-daemons.sh start datanode</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>第六步：启动zkfc</h4>
<p>在node01机器上面启动zkfc进程</p>
<p class="code">cd /export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="code">sbin/hadoop-daemon.sh start zkfc</p>
<p>&nbsp;</p>
<p>在node02机器上面启动zkfc进程</p>
<p class="code">cd /export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="code">sbin/hadoop-daemon.sh start zkfc</p>
<p>&nbsp;</p>
<h4>第七步：启动yarn进程</h4>
<p>node03机器上启动yarn集群</p>
<p class="code">cd /export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="code">sbin/start-yarn.sh</p>
<p>node02机器上启动yarn集群</p>
<p class="code">cd /export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="code">sbin/start-yarn.sh</p>
<h4>第八步：启动jobhsitory</h4>
<p>node03节点启动jobhistoryserver</p>
<p class="code">cd /export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="code">sbin/mr-jobhistory-daemon.sh start historyserver</p>
<p>&nbsp;</p>]]></description></item><item><title>2-10 就业课(2.0)-oozie：9、oozie与hue的整合，以及整合后执行MR任务</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/12/11173683.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 11 Jul 2019 16:36:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/12/11173683.html</guid><description><![CDATA[<h1>5、hue整合oozie</h1>
<h2>第一步：停止oozie与hue的进程</h2>
<p>通过命令停止oozie与hue的进程，准备修改oozie与hue的配置文件</p>
<h2>第二步：修改oozie的配置文件（老版本的bug，新版本已经不需要了）这一步我们都不需要做了</h2>
<p>修改oozie的配置文件oozie-site.xml</p>
<div>
<p class="a">&lt;property&gt;&nbsp;&nbsp;&nbsp; &lt;name&gt;oozie.service.WorkflowAppService.system.libpath&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;/user/oozie/share/lib&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &nbsp;&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;oozie.use.system.libpath&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
</div>
<p>&nbsp;</p>
<p>重新上传所有的jar包到hdfs的/user/oozie/share/lib路径下去</p>
<p class="code">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<div>
<p class="a">bin/oozie-setup.sh&nbsp; sharelib create -fs hdfs://node01:8020 -locallib oozie-sharelib-4.1.0-cdh5.14.0-yarn.tar.gz</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>第三步：修改hue的配置文件</h2>
<p>修改hue的配置文件hue.ini</p>
<p>&nbsp;</p>
<p class="code">[liboozie]</p>
<div>
<p class="a">&nbsp; # The URL where the Oozie service runs on. This is required in order for</p>
<p class="a">&nbsp; # users to submit jobs. Empty value disables the config check.</p>
<p class="a">&nbsp; oozie_url=http://node03.hadoop.com:11000/oozie</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp; # Requires FQDN in oozie_url if enabled</p>
<p class="a">&nbsp; ## security_enabled=false</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp; # Location on HDFS where the workflows/coordinator are deployed when submitted.</p>
<p class="a">&nbsp; remote_deployement_dir=/user/root/oozie_works</p>
</div>
<p>&nbsp;</p>
<p>修改oozie的配置文件大概在1151行左右的样子</p>
<p class="code">[oozie]</p>
<div>
<p class="a">&nbsp; # Location on local FS where the examples are stored.</p>
<p class="a">&nbsp; # local_data_dir=/export/servers/oozie-4.1.0-cdh5.14.0/examples/apps</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp; # Location on local FS where the data for the examples is stored.</p>
<p class="a">&nbsp; # sample_data_dir=/export/servers/oozie-4.1.0-cdh5.14.0/examples/input-data</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp; # Location on HDFS where the oozie examples and workflows are stored.</p>
<p class="a">&nbsp; # Parameters are $TIME and $USER, e.g. /user/$USER/hue/workspaces/workflow-$TIME</p>
<p class="a">&nbsp; # remote_data_dir=/user/root/oozie_works/examples/apps</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp; # Maximum of Oozie workflows or coodinators to retrieve in one API call.</p>
<p class="a">&nbsp; oozie_jobs_count=100</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp; # Use Cron format for defining the frequency of a Coordinator instead of the old frequency number/unit.</p>
<p class="a">&nbsp; enable_cron_scheduling=true</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp; # Flag to enable the saved Editor queries to be dragged and dropped into a workflow.</p>
<p class="a">&nbsp; enable_document_action=true</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp; # Flag to enable Oozie backend filtering instead of doing it at the page level in Javascript. Requires Oozie 4.3+.</p>
<p class="a">&nbsp; enable_oozie_backend_filtering=true</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp; # Flag to enable the Impala action.</p>
<p class="a">&nbsp; enable_impala_action=true</p>
</div>
<p>&nbsp;</p>
<p class="code">[filebrowser]</p>
<div>
<p class="a">&nbsp; # Location on local filesystem where the uploaded archives are temporary stored.</p>
<p class="a">&nbsp; archive_upload_tempdir=/tmp</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp; # Show Download Button for HDFS file browser.</p>
<p class="a">&nbsp; show_download_button=true</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp; # Show Upload Button for HDFS file browser.</p>
<p class="a">&nbsp; show_upload_button=true</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp; # Flag to enable the extraction of a uploaded archive in HDFS.</p>
<p class="a">&nbsp; enable_extract_uploaded_archive=true</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>第四步：启动hue与oozie的进程</h2>
<p>启动hue进程</p>
<div>
<p class="a">cd /export/servers/hue-3.9.0-cdh5.14.0</p>
<p class="a">build/env/bin/supervisor</p>
</div>
<p>启动oozie进程</p>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">bin/oozied.sh start</p>
</div>
<p>&nbsp;</p>
<p>页面访问hue</p>
<p>http://node03.hadoop.com:8888/</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>6、oozie使用过程当中可能遇到的问题</h1>
<p><strong>1) Mysql</strong><strong>权限配置</strong></p>
<p>授权所有主机可以使用root用户操作所有数据库和数据表</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>mysql&gt; grant all on *.* to root@'%' identified by '123456' with grant option;</p>
<p>mysql&gt; flush privileges;</p>
<p>mysql&gt; exit;</p>
</td>
</tr>
</tbody>
</table>
<p><strong>2) workflow.xml</strong><strong>配置的时候不要忽略file</strong><strong>属性</strong></p>
<p><strong>3) jps</strong><strong>查看进程时，注意有没有bootstrap</strong></p>
<p><strong>4) </strong><strong>关闭oozie</strong></p>
<p>如果bin/oozied.sh stop无法关闭，则可以使用kill -9 [pid]，之后oozie根目录下的oozie-server/temp/xxx.pid文件一定要删除。</p>
<p><strong>5) Oozie</strong><strong>重新打包时，一定要注意先关闭进程，删除对应文件夹下面的pid</strong><strong>文件。（可以参考第4</strong><strong>条目）</strong></p>
<p><strong>6) </strong><strong>配置文件一定要生效</strong></p>
<p>起始标签和结束标签无对应则不生效，配置文件的属性写错了，那么则执行默认的属性。</p>
<p><strong>7) libext</strong><strong>下边的jar</strong><strong>存放于某个文件夹中，导致share/lib</strong><strong>创建不成功。</strong></p>
<p><strong>9) </strong><strong>修改Hadoop</strong><strong>配置文件，需要重启集群。一定要记得scp</strong><strong>到其他节点。</strong></p>
<p><strong>10) JobHistoryServer</strong><strong>必须开启，集群要重启的。</strong></p>
<p><strong>11) Mysql</strong><strong>配置如果没有生效的话，默认使用derby</strong><strong>数据库。</strong></p>
<p><strong>12) </strong><strong>在本地修改完成的job</strong><strong>配置，必须重新上传到HDFS</strong><strong>。</strong></p>
<p><strong>13) </strong><strong>将HDFS</strong><strong>中上传的oozie</strong><strong>配置文件下载下来查看是否有错误。</strong></p>
<p><strong>14) Linux</strong><strong>用户名和Hadoop</strong><strong>的用户名不一致。</strong></p>
<p><strong>15</strong><strong>）sharelib</strong><strong>找不到，包括重新初始化oozie</strong></p>
<p><strong>如果部署oozie</strong><strong>出错，修复执行，初始化oozie</strong><strong>：</strong></p>
<p><strong>1</strong><strong>、停止oozie</strong><strong>（要通过jps</strong><strong>检查bootstrap</strong><strong>进程是否已经不存在）</strong></p>
<p><strong>2</strong><strong>、删除oozie-server/temp/*</strong></p>
<p><strong>3</strong><strong>、删除HDFS</strong><strong>上的sharelib</strong><strong>文件夹</strong></p>
<p><strong>4</strong><strong>、删除oozie.sql</strong><strong>文件，删除Mysql</strong><strong>中删除oozie</strong><strong>库，重新创建</strong></p>
<p><strong>5</strong><strong>、重新按照顺序执行文档中oozie</strong><strong>的安装重新再来一遍</strong></p>]]></description></item><item><title>各个框架的启动与停止命令</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/11/11173149.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 11 Jul 2019 14:16:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/11/11173149.html</guid><description><![CDATA[<p>zookeeper:</p>
<p>三个节点上都执行： zkServer.sh start&nbsp; &nbsp;启动单个节点的zk服务</p>
<p>查看zk进程是否存在：jps&nbsp; ，发现一个进程&nbsp;QuorumPeerMain</p>
<p>zkServer.sh status&nbsp; &nbsp; 查看该zk服务器是follower还是leader。</p>
<p>&nbsp;</p>
<p>hdfs:</p>
<p>start-dfs.sh</p>
<p>stop-dfs.sh</p>
<p>&nbsp;查看hdfs进程是否存在：jps&nbsp;</p>
<p>bin/hdfs zkfc -formatZK&nbsp; &nbsp;&nbsp;在node01机器上进行zookeeper的初始化，其本质工作是创建对应的zookeeper节点</p>
<p>&nbsp;</p>
<p>journalnode:&nbsp;</p>
<p class="code"><span lang="EN-US">/export/servers/hadoop-2.6.0-cdh5.14.0/sbin/hadoop-daemon.sh start journalnode&nbsp; &nbsp;&nbsp;</span>三台机器执行以下命令启动journalNode，用于我们的元数据管理</p>
<div>
<p class="a">/export/servers/hadoop-2.6.0-cdh5.14.0/bin/hdfs namenode -initializeSharedEdits -force&nbsp; &nbsp;&nbsp;node01机器上准备初始化journalNode</p>
</div>
<p>&nbsp;</p>
<p class="code"><span lang="EN-US">/export/servers/hadoop-2.6.0-cdh5.14.0/</span><span lang="EN-US">sbin/hadoop-daemon.sh start zkfc&nbsp; &nbsp;&nbsp;</span>在node01、node02上分别启动zkfc进程</p>
<p>&nbsp;</p>
<p>yarn(mr):</p>
<p>start-yarn.sh</p>
<p>stop-yarn.sh</p>
<p>查看yarn进程是否存在：jps&nbsp;</p>
<p>&nbsp;</p>
<p>jobhistory:</p>
<p>mr-jobhistory-daemon.sh start historyserver</p>
<p>mr-jobhistory-daemon.sh stop historyserver</p>
<p>&nbsp;查看jobhistory进程是否存在：jps&nbsp; ，</p>
<p>&nbsp;</p>
<p>flume:&nbsp;</p>
<p>&nbsp;</p>
<p>cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin</p>
<div>
<p class="a">启动：flume-ng agent -n a1 -c conf -f conf/wifi.conf -Dflume.root.logger=INFO,console（已经配置flume的环境变量）</p>
<p class="a">停止：以上启动方式是前台启动，可以直接按ctrl+C&nbsp;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;</p>
</div>
<p>hive：</p>
<p>nohup hive --service hiveserver2 &amp;</p>
<p>nohup&nbsp;hive --service metastore &amp;</p>
<p>查看hive进程是否存在：jps&nbsp; &nbsp; 发现多了2个RunJar进程。</p>
<p>&nbsp;</p>
<p>impala：</p>
<p>service impala-state-store start | stop | restart&nbsp;</p>
<p>service impala-catalog start&nbsp;| stop | restart&nbsp;</p>
<p>service impala-server start&nbsp;| stop | restart&nbsp;</p>
<p>查看impala进程是否存在：ps -ef | grep impala</p>
<p class="code">&nbsp;</p>
<p>hue：</p>
<p>&nbsp;cd /export/servers/hue-3.9.0-cdh5.14.0</p>
<div>
<p class="a">build/env/bin/supervisor</p>
<p class="a">如配置了环境变量：则直接执行：supervisor</p>
<p class="a">查看hue进程是否存在：ps -ef | grep hue&nbsp;</p>
<p class="a">&nbsp;</p>
</div>
<p>oozie：</p>
<p>cd&nbsp;/export/servers/oozie-4.1.0-cdh5.14.0</p>
<p>bin/oozied.sh start | stop</p>
<p>如配置了环境变量，则直接执行：oozied.sh start | stop</p>
<p>查看oozie进程是否存在：jps&nbsp; &nbsp; 发现多了一个Bootstrap进程。</p>
<p>&nbsp;</p>
<p>kafka: （需要三台机器上都执行该命令）</p>
<p>cd /export/servers/kafka_2.11-1.0.0/&nbsp;</p>
<div>
<p class="a">启动：nohup bin/kafka-server-start.sh config/server.properties 2&gt;&amp;1 &amp;&nbsp;&nbsp;</p>
<p class="a">停止：bin/kafka-server-stop.sh</p>
<p class="a">查看kafka进程是否存在： jps&nbsp; &nbsp; 发现多了一个Kafka进程。</p>
</div>
<p>&nbsp;</p>
<p>storm:&nbsp;（需要三台机器上都执行相应的命令）</p>
<p>cd&nbsp;/export/servers/apache-storm-1.1.1</p>
<p>Node01 启动相关服务</p>
<p>启动 nimbus进程:&nbsp;nohup bin/storm nimbus &gt;/dev/null 2&gt;&amp;1 &amp;</p>
<p>启动web&nbsp; UI:&nbsp;nohup bin/storm ui &gt;/dev/null 2&gt;&amp;1 &amp;</p>
<p>启动logViewer:&nbsp;nohup bin/storm logviewer &gt;/dev/null 2&gt;&amp;1 &amp;&nbsp;</p>
<p>启动supervisor:&nbsp;nohup bin/storm supervisor &gt;/dev/null 2&gt;&amp;1 &amp;</p>
<p>Node02启动相关服务</p>
<p>nimbus： nohup bin/storm nimbus &gt;/dev/null 2&gt;&amp;1 &amp;&nbsp;<br />
logviewer： nohup bin/storm
logviewer &gt;/dev/null 2&gt;&amp;1 &amp;&nbsp;<br />
supervisor： nohup bin/storm
supervisor &gt;/dev/null 2&gt;&amp;1 &amp;</p>
<p>node03启动相关服务</p>
<p>nimbus： nohup bin/storm
nimbus &gt;/dev/null 2&gt;&amp;1 &amp;&nbsp;<br />
logviewer： nohup bin/storm
logviewer &gt;/dev/null 2&gt;&amp;1 &amp;&nbsp;<br />
supervisor： nohup bin/storm
supervisor &gt;/dev/null 2&gt;&amp;1 &amp;</p>
<p>停止：直接kill -9 storm的进程号</p>
<p>启动storm的拓扑任务：&nbsp;&nbsp;</p>
<p>cd /export/servers/apache-storm-1.1.1/</p>
<p>bin/storm jar logMonitor.jar cn.itcast.storm.logMonitor.LogMonitorMain logMonitor&nbsp;</p>
<p>停止storm的拓扑任务： bin/storm kill logMonitor （<span style="color: #ff0000;">注意：对应该拓扑任务，有2个进程LogWriter, worker，直接kill -9 这2个进程的进程号，是没用的！</span>）</p>
<p>&nbsp;</p>
<p>spark：（需要先启动zk，才可以构建高可用SPARK集群，可以先启动HDFS，以便于整合hdfs）</p>
<p>/export/servers/spark-2.1.3-bin-hadoop2.7/sbin/start-all.sh ：启动所有的master和worker。</p>
<p>启动spark-shell：</p>
<p>　　spark-shell --master local[2]</p>
<p>　　指定具体的master地址：spark-shell --master spark://node01:7077</p>
<p>&nbsp;</p>
<p>另外，还有sqoop，azkaban。</p>
<p>其中sqoop不需要启动服务，用的时候直接执行sqoop export | import就行。</p>
<p>&nbsp;</p>]]></description></item><item><title>2-10 就业课(2.0)-oozie：8、定时任务的执行</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/11/11167570.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 10 Jul 2019 17:34:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/11/11167570.html</guid><description><![CDATA[<h2>4.5、oozie的任务调度,定时任务执行</h2>
<p>&nbsp;</p>
<p>在oozie当中，主要是通过Coordinator&nbsp;来实现任务的定时调度，与我们的workflow类似的，Coordinator&nbsp;这个模块也是主要通过xml来进行配置即可，接下来我们就来看看如何配置Coordinator&nbsp;来实现任务的定时调度</p>
<p>Coordinator&nbsp;的调度主要可以有两种实现方式</p>
<p>第一种：基于时间的定时任务调度，</p>
<p>oozie基于时间的调度主要需要指定三个参数，第一个起始时间，第二个结束时间，第三个调度频率</p>
<p>&nbsp;</p>
<p>第二种：基于数据的任务调度，只有在有了数据才会去出发执行</p>
<p>这种是基于数据的调度，只要在有了数据才会触发调度任务</p>
<p>&nbsp;</p>
<h3>oozie当中定时任务的设置</h3>
<h4>第一步：拷贝定时任务的调度模板</h4>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">cp -r examples/apps/cron oozie_works/cron-job</p>
</div>
<p>&nbsp;</p>
<h4>第二步：拷贝我们的hello.sh脚本</h4>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0/oozie_works</p>
<p class="a">cp shell/hello.sh&nbsp; cron-job/</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>第三步：修改配置文件</h4>
<p>修改job.properties</p>
<p class="code">cd /export/servers/oozie-4.1.0-cdh5.14.0/oozie_works/cron-job</p>
<p class="code">vim job.properties</p>
<div>
<p class="a">nameNode=hdfs://node01:8020</p>
<p class="a">jobTracker=node01:8032</p>
<p class="a">queueName=default</p>
<p class="a">examplesRoot=oozie_works</p>
<p class="a">&nbsp;</p>
<p class="a">oozie.coord.application.path=${nameNode}/user/${user.name}/${examplesRoot}/cron-job/coordinator.xml</p>
<p class="a">start=2018-08-22T19:20+0800</p>
<p class="a">end=2019-08-22T19:20+0800</p>
<p class="a">EXEC=hello.sh</p>
<p class="a">workflowAppUri=${nameNode}/user/${user.name}/${examplesRoot}/cron-job/workflow.xml</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>修改coordinator.xml</p>
<p class="code">vim coordinator.xml</p>
<div>
<p class="a">&lt;!--</p>
<p class="a">&nbsp;&nbsp;&nbsp; oozie的frequency 可以支持很多表达式，其中可以通过定时每分，或者每小时，或者每天，或者每月进行执行，也支持可以通过与linux的crontab表达式类似的写法来进行定时任务的执行</p>
<p class="a">&nbsp;&nbsp;&nbsp; 例如frequency 也可以写成以下方式</p>
<p class="a">&nbsp;&nbsp;&nbsp; frequency="10 9 * * *"&nbsp; 每天上午的09:10:00开始执行任务</p>
<p class="a">&nbsp;&nbsp;&nbsp; frequency="0 1 * * *"&nbsp; 每天凌晨的01:00开始执行任务</p>
<p class="a">&nbsp;--&gt;</p>
<p class="a">&lt;coordinator-app name="cron-job" frequency="${coord:minutes(1)}" start="${start}" end="${end}" timezone="GMT+0800"</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns="uri:oozie:coordinator:0.4"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;action&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;workflow&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;app-path&gt;${workflowAppUri}&lt;/app-path&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;jobTracker&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;${jobTracker}&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;nameNode&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;${nameNode}&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;queueName&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;${queueName}&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/workflow&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/action&gt;</p>
<p class="a">&lt;/coordinator-app&gt;</p>
</div>
<p>&nbsp;</p>
<p>修改workflow.xml</p>
<p class="code">vim workflow.xml</p>
<div>
<p class="a">&lt;workflow-app xmlns="uri:oozie:workflow:0.5" name="one-op-wf"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;start to="action1"/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;action name="action1"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;shell xmlns="uri:oozie:shell-action:0.2"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;job-tracker&gt;${jobTracker}&lt;/job-tracker&gt;</p>
<p class="a">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;name-node&gt;${nameNode}&lt;/name-node&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.job.queue.name&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;${queueName}&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;exec&gt;${EXEC}&lt;/exec&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- &lt;argument&gt;my_output=Hello Oozie&lt;/argument&gt; --&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;file&gt;/user/root/oozie_works/cron-job/${EXEC}#${EXEC}&lt;/file&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;capture-output/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/shell&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;ok to="end"/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;error to="end"/&gt;</p>
<p class="a">&lt;/action&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;end name="end"/&gt;</p>
<p class="a">&lt;/workflow-app&gt;</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>第四步：上传到hdfs对应路径</h4>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0/oozie_works</p>
<p class="a">hdfs dfs -put cron-job/ /user/root/oozie_works/</p>
</div>
<h4>第五步：运行定时任务</h4>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
</div>
<p>&nbsp;</p>
<div>
<p class="a">bin/oozie job -oozie http://node03:11000/oozie -config oozie_works/cron-job/job.properties -run</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>oozie当中任务的查看以及杀死</h3>
<h4>查看所有普通任务</h4>
<p class="code">oozie&nbsp; jobs</p>
<h4>查看定时任务</h4>
<p align="left">oozie jobs -jobtype coordinator</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>杀死某个任务</h4>
<p>oozie可以通过jobid来杀死某个定时任务</p>
<pre><code>oozie job -kill [id]</code></pre>
<pre><code>例如我们可以使用命令</code><code></code></pre>
<pre>oozie job -kill 0000085-180628150519513-oozie-root-C</pre>
<pre>来杀死我们定时任务</pre>
<p>&nbsp;</p>]]></description></item><item><title>oozie的常见错误</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/11/11167561.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 10 Jul 2019 17:20:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/11/11167561.html</guid><description><![CDATA[<p>1.变量或路径的英文字母写错，常常是大小写搞混，或者是字母顺序颠倒。</p>
<p>&nbsp;</p>
<p>2.本地 oozie_works 工作目录下的文件，如job.properties，workflow.xml等，修改后，忘记上传到hdfs。</p>
<p>&nbsp;</p>
<p>3.忘记启动hdfs、yarn、jobhistory、hive的metastore或hiveserver2等。</p>
<p>&nbsp;</p>]]></description></item><item><title>2-10 就业课(2.0)-oozie：7、job任务的串联</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/10/11167318.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 10 Jul 2019 15:31:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/10/11167318.html</guid><description><![CDATA[<h2>4.4、oozie的任务串联</h2>
<p>在实际工作当中，肯定会存在多个任务需要执行，并且存在上一个任务的输出结果作为下一个任务的输入数据这样的情况，所以我们需要在workflow.xml配置文件当中配置多个action，实现多个任务之间的相互依赖关系</p>
<p>需求：首先执行一个shell脚本，执行完了之后再执行一个MR的程序，最后再执行一个hive的程序</p>
<h3>第一步：准备我们的工作目录</h3>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0/oozie_works</p>
<p class="a">mkdir -p sereval-actions</p>
</div>
<p>&nbsp;</p>
<h3>第二步：准备我们的调度文件</h3>
<p>将我们之前的hive，shell，以及MR的执行，进行串联成到一个workflow当中去，准备我们的资源文件</p>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0/oozie_works</p>
<p class="a">cp hive2/script.q sereval-actions/</p>
<p class="a">cp shell/hello.sh sereval-actions/</p>
<p class="a">cp -ra map-reduce/lib sereval-actions/</p>
</div>
<p>&nbsp;</p>
<h3>第三步：开发调度的配置文件</h3>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0/oozie_works/sereval-actions</p>
</div>
<p>创建配置文件workflow.xml并编辑</p>
<p class="code">vim workflow.xml</p>
<div>
<p class="a">&lt;workflow-app xmlns="uri:oozie:workflow:0.4" name="shell-wf"&gt;</p>
<p class="a">&lt;start to="shell-node"/&gt;</p>
<p class="a">&lt;action name="shell-node"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;shell xmlns="uri:oozie:shell-action:0.2"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;job-tracker&gt;${jobTracker}&lt;/job-tracker&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name-node&gt;${nameNode}&lt;/name-node&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.job.queue.name&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;${queueName}&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;exec&gt;${EXEC}&lt;/exec&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- &lt;argument&gt;my_output=Hello Oozie&lt;/argument&gt; --&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;file&gt;/user/root/oozie_works/sereval-actions/${EXEC}#${EXEC}&lt;/file&gt;</p>
<p class="a">&nbsp;　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711210318337-121003063.png" alt="" /></p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;capture-output/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/shell&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;ok to="mr-node"/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;error to="mr-node"/&gt;</p>
<p class="a">&lt;/action&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&lt;action name="mr-node"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;map-reduce&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;job-tracker&gt;${jobTracker}&lt;/job-tracker&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name-node&gt;${nameNode}&lt;/name-node&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;prepare&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;delete path="${nameNode}/${outputDir}"/&gt;</p>
<p class="a">　　　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711210348507-1352662084.png" alt="" /></p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/prepare&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.job.queue.name&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;${queueName}&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!--&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.mapper.class&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.oozie.example.SampleMapper&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;name&gt;mapred.reducer.class&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.oozie.example.SampleReducer&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.map.tasks&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;1&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.input.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;/user/${wf:user()}/${examplesRoot}/input-data/text&lt;/value&gt;</p>
<p class="a">　　　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711210419615-176656299.png" alt="" /></p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;name&gt;mapred.output.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;/user/${wf:user()}/${examplesRoot}/output-data/${outputDir}&lt;/value&gt;</p>
<p class="a">　　　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711210437260-1820715129.png" alt="" /></p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &lt;!-- 开启使用新的API来进行配置 --&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.mapper.new-api&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.reducer.new-api&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- 指定MR的输出key的类型 --&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.job.output.key.class&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.hadoop.io.Text&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- 指定MR的输出的value的类型--&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.job.output.value.class&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.hadoop.io.IntWritable&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- 指定输入路径 --&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.input.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;${nameNode}/${inputDir}&lt;/value&gt;</p>
<p class="a">　　　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711210514095-531129578.png" alt="" /></p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- 指定输出路径 --&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.output.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;${nameNode}/${outputDir}&lt;/value&gt;</p>
<p class="a">　　　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711210528885-1565821512.png" alt="" /></p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- 指定执行的map类 --&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.job.map.class&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.hadoop.examples.WordCount$TokenizerMapper&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- 指定执行的reduce类 --&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.job.reduce.class&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.hadoop.examples.WordCount$IntSumReducer&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!--&nbsp; 配置map task的个数 --&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.map.tasks&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;1&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/map-reduce&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ok to="hive2-node"/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;error to="fail"/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/action&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&lt;action name="hive2-node"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;hive2 xmlns="uri:oozie:hive2-action:0.1"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;job-tracker&gt;${jobTracker}&lt;/job-tracker&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name-node&gt;${nameNode}&lt;/name-node&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;prepare&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;delete path="${nameNode}/user/${wf:user()}/${examplesRoot}/output-data/hive2"/&gt;</p>
<p class="a">　　　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711210608419-1748122246.png" alt="" /></p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;mkdir path="${nameNode}/user/${wf:user()}/${examplesRoot}/output-data"/&gt;</p>
<p class="a">　　　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711210623427-386037466.png" alt="" /></p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/prepare&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.job.queue.name&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;${queueName}&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;jdbc-url&gt;${jdbcURL}&lt;/jdbc-url&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;script&gt;script.q&lt;/script&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;param&gt;INPUT=/user/${wf:user()}/${examplesRoot}/input-data/table&lt;/param&gt;</p>
<p class="a">　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711210638819-736137859.png" alt="" /></p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;param&gt;OUTPUT=/user/${wf:user()}/${examplesRoot}/output-data/hive2&lt;/param&gt;</p>
<p class="a">　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711210652797-1907249782.png" alt="" /></p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/hive2&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ok to="end"/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;error to="fail"/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/action&gt;</p>
<p class="a">&lt;decision name="check-output"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;switch&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;case to="end"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ${wf:actionData('shell-node')['my_output'] eq 'Hello Oozie'}</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/case&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;default to="fail-output"/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/switch&gt;</p>
<p class="a">&lt;/decision&gt;</p>
<p class="a">&lt;kill name="fail"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;message&gt;Shell action failed, error message[${wf:errorMessage(wf:lastErrorNode())}]&lt;/message&gt;</p>
<p class="a">&lt;/kill&gt;</p>
<p class="a">&lt;kill name="fail-output"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;message&gt;Incorrect output, expected [Hello Oozie] but was [${wf:actionData('shell-node')['my_output']}]&lt;/message&gt;</p>
<p class="a">&lt;/kill&gt;</p>
<p class="a">&lt;end name="end"/&gt;</p>
<p class="a">&lt;/workflow-app&gt;</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>开发我们的job.properties配置文件</p>
<p class="code">cd /export/servers/oozie-4.1.0-cdh5.14.0/oozie_works/sereval-actions</p>
<p class="code">vim&nbsp; job.properties</p>
<div>
<p class="a">nameNode=hdfs://node01:8020</p>
<p class="a">jobTracker=node01:8032</p>
<p class="a">queueName=default</p>
<p class="a">examplesRoot=oozie_works</p>
<p class="a">EXEC=hello.sh</p>
<p class="a">outputDir=/oozie/output</p>
<p class="a">inputdir=/oozie/input</p>
<p class="a">jdbcURL=jdbc:hive2://node03:10000/default</p>
<p class="a">oozie.use.system.libpath=true</p>
<p class="a"># 配置我们文件上传到hdfs的保存路径 实际上就是在hdfs 的/user/root/oozie_works/sereval-actions这个路径下</p>
<p class="a">oozie.wf.application.path=${nameNode}/user/${user.name}/${examplesRoot}/sereval-actions/workflow.xml</p>
</div>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711210731471-1943831461.png" alt="" /></p>
<p>&nbsp;</p>
<h3>第四步：上传我们的资源文件夹到hdfs对应路径</h3>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0/oozie_works/</p>
<p class="a">hdfs dfs -put sereval-actions/ /user/root/oozie_works/</p>
</div>
<h3>第五步：执行调度任务</h3>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0/</p>
<p class="a">bin/oozie job -oozie http://node03:11000/oozie -config oozie_works/serveral-actions/job.properties -run</p>
</div>
<p>&nbsp;</p>]]></description></item><item><title>hadoop-mapreduce的官方示例的测试执行方法</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/10/11167139.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 10 Jul 2019 14:47:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/10/11167139.html</guid><description><![CDATA[<p>&nbsp;</p>
<p>1.根据给出的精度参数计算 pi ：</p>
<p>hadoop jar /export/servers/hadoop-2.6.0-cdh5.14.0/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.0-cdh5.14.0.jar pi 3 5&nbsp;</p>
<p>&nbsp;</p>
<p>2.根据给出的输入文件路径和输出文件路径，将目标文件中的所有单词以及对应的出现次数统计好，输出：</p>
<p>yarn jar /export/servers/hadoop-2.6.0-cdh5.14.0/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.0-cdh5.14.0.jar wordcount&nbsp;/oozie/input /oozie/output&nbsp;</p>
<p>&nbsp;</p>
<p>注：可以用hadoop，也可使用yarn。hadoop是旧的命令，yarn是新的命令。</p>]]></description></item><item><title>2-10 就业课(2.0)-oozie：6、通过oozie执行mr任务，以及执行sqoop任务的解决思路</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/10/11167053.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 10 Jul 2019 14:30:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/10/11167053.html</guid><description><![CDATA[<p>&nbsp;&nbsp;执行sqoop任务的解决思路（目前的问题是sqoop只安装在node03上，而oozie会随机分配一个节点来执行任务）：<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190710231509368-364103367.png" alt="" width="1341" height="659" /></p>
<p><span style="color: #ff0000;">=====================================================</span></p>
<p>&nbsp;</p>
<h2>4.3、使用oozie调度MR任务</h2>
<h3>第一步：准备MR执行的数据</h3>
<p>我们这里通过oozie调度一个MR的程序的执行，MR的程序可以是自己写的，也可以是hadoop工程自带的，我们这里就选用hadoop工程自带的MR程序来运行wordcount的示例</p>
<p>准备以下数据上传到HDFS的/oozie/input路径下去</p>
<div>
<p class="a">hdfs dfs -mkdir -p /oozie/input</p>
<p class="a">vim wordcount.txt</p>
</div>
<p class="code">hello&nbsp;&nbsp; world&nbsp;&nbsp; hadoop</p>
<p class="code">spark&nbsp;&nbsp; hive&nbsp;&nbsp;&nbsp; hadoop</p>
<p>将我们的数据上传到hdfs对应目录</p>
<div>
<p class="a">hdfs dfs -put wordcount.txt /oozie/input</p>
</div>
<p>&nbsp;</p>
<h3>第二步：执行官方测试案例</h3>
<div>
<p class="a">yarn jar /export/servers/hadoop-2.6.0-cdh5.14.0/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.0-cdh5.14.0.jar wordcount /oozie/input/ /oozie/output</p>
</div>
<h3>第三步：准备我们调度的资源</h3>
<p>将我们需要调度的资源都准备好放到一个文件夹下面去，包括我们的jar包，我们的job.properties，以及我们的workflow.xml。</p>
<p>拷贝MR的任务模板</p>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">cp -ra examples/apps/map-reduce/ oozie_works/</p>
</div>
<p>&nbsp;</p>
<p>删掉MR任务模板lib目录下自带的jar包</p>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0/oozie_works/map-reduce/lib</p>
<p class="a">rm -rf oozie-examples-4.1.0-cdh5.14.0.jar</p>
</div>
<p>&nbsp;</p>
<h3>第三步：拷贝我们自己的jar包到对应目录</h3>
<p>从上一步的删除当中，我们可以看到我们需要调度的jar包存放在了</p>
<p>/export/servers/oozie-4.1.0-cdh5.14.0/oozie_works/map-reduce/lib这个目录下，所以我们把我们需要调度的jar包也放到这个路径下即可</p>
<div>
<p class="a">cp /export/servers/hadoop-2.6.0-cdh5.14.0/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.0-cdh5.14.0.jar /export/servers/oozie-4.1.0-cdh5.14.0/oozie_works/map-reduce/lib/</p>
</div>
<p>&nbsp;</p>
<h3>第四步：修改配置文件</h3>
<p>修改job.properties</p>
<p class="code">cd /export/servers/oozie-4.1.0-cdh5.14.0/oozie_works/map-reduce</p>
<p class="code">vim job.properties</p>
<div>
<p class="a">nameNode=hdfs://node01:8020</p>
<p class="a">jobTracker=node01:8032</p>
<p class="a">queueName=default</p>
<p class="a">examplesRoot=oozie_works</p>
<p class="a">&nbsp;</p>
<p class="a">oozie.wf.application.path=${nameNode}/user/${user.name}/${examplesRoot}/map-reduce/workflow.xml</p>
<p class="a">　　　　　　　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711205754771-1592184105.png" alt="" /></p>
<p class="a">outputDir=/oozie/output</p>
<p class="a">inputdir=/oozie/input</p>
</div>
<p>修改workflow.xml</p>
<p class="code">cd /export/servers/oozie-4.1.0-cdh5.14.0/oozie_works/map-reduce</p>
<p class="code">vim workflow.xml</p>
<div>
<p class="a">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</p>
<p class="a">&lt;!--</p>
<p class="a">&nbsp; Licensed to the Apache Software Foundation (ASF) under one</p>
<p class="a">&nbsp; or more contributor license agreements.&nbsp; See the NOTICE file</p>
<p class="a">&nbsp; distributed with this work for additional information</p>
<p class="a">&nbsp; regarding copyright ownership.&nbsp; The ASF licenses this file</p>
<p class="a">&nbsp; to you under the Apache License, Version 2.0 (the</p>
<p class="a">&nbsp; "License"); you may not use this file except in compliance</p>
<p class="a">&nbsp; with the License.&nbsp; You may obtain a copy of the License at</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; http://www.apache.org/licenses/LICENSE-2.0</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp; Unless required by applicable law or agreed to in writing, software</p>
<p class="a">&nbsp; distributed under the License is distributed on an "AS IS" BASIS,</p>
<p class="a">&nbsp; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</p>
<p class="a">&nbsp; See the License for the specific language governing permissions and</p>
<p class="a">&nbsp; limitations under the License.</p>
<p class="a">--&gt;</p>
<p class="a">&lt;workflow-app xmlns="uri:oozie:workflow:0.5" name="map-reduce-wf"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;start to="mr-node"/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;action name="mr-node"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;map-reduce&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;job-tracker&gt;${jobTracker}&lt;/job-tracker&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name-node&gt;${nameNode}&lt;/name-node&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;prepare&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;delete path="${nameNode}/${outputDir}"/&gt;</p>
<p class="a">　　　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711210009921-737971349.png" alt="" /></p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/prepare&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.job.queue.name&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;${queueName}&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!--&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.mapper.class&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.oozie.example.SampleMapper&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.reducer.class&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.oozie.example.SampleReducer&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.map.tasks&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;1&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.input.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;/user/${wf:user()}/${examplesRoot}/input-data/text&lt;/value&gt;</p>
<p class="a">　　　　　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711210042817-1781068585.png" alt="" /></p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.output.dir&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;/user/${wf:user()}/${examplesRoot}/output-data/${outputDir}&lt;/value&gt;</p>
<p class="a">　　　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711210101878-2127323772.png" alt="" /></p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; <span style="color: #ff0000;">&lt;!-- 开启使用新的API来进行配置 --&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.mapper.new-api&lt;/name&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.reducer.new-api&lt;/name&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- 指定MR的输出key的类型 --&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.job.output.key.class&lt;/name&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.hadoop.io.Text&lt;/value&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- 指定MR的输出的value的类型--&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.job.output.value.class&lt;/name&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.hadoop.io.IntWritable&lt;/value&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- 指定输入路径 --&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;name&gt;mapred.input.dir&lt;/name&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;${nameNode}/${inputDir}&lt;/value&gt;</span></p>
<p class="a"><span style="color: #ff0000;">　　　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711210150711-1530238015.png" alt="" /></span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- 指定输出路径 --&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.output.dir&lt;/name&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;${nameNode}/${outputDir}&lt;/value&gt;</span></p>
<p class="a"><span style="color: #ff0000;">　　　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711210205923-1620599603.png" alt="" /></span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- 指定执行的map类 --&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.job.map.class&lt;/name&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.hadoop.examples.WordCount$TokenizerMapper&lt;/value&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- 指定执行的reduce类 --&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.job.reduce.class&lt;/name&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.hadoop.examples.WordCount$IntSumReducer&lt;/value&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!--&nbsp; 配置map task的个数 --&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.map.tasks&lt;/name&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;1&lt;/value&gt;</span></p>
<p class="a"><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</span></p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/map-reduce&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ok to="end"/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;error to="fail"/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/action&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;kill name="fail"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;message&gt;Map/Reduce failed, error message[${wf:errorMessage(wf:lastErrorNode())}]&lt;/message&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/kill&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;end name="end"/&gt;</p>
<p class="a">&lt;/workflow-app&gt;</p>
</div>
<h3>第五步：上传调度任务到hdfs对应目录</h3>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0/oozie_works</p>
<p class="a">hdfs dfs -put map-reduce/ /user/root/oozie_works/</p>
</div>
<p>&nbsp;</p>
<h3>第六步：执行调度任务</h3>
<p>执行我们的调度任务，然后通过oozie的11000端口进行查看任务结果</p>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">bin/oozie job -oozie http://node03:11000/oozie -config oozie_works/map-reduce/job.properties -run</p>
</div>
<p>&nbsp;</p>]]></description></item><item><title>2-10 就业课(2.0)-oozie：5、通过oozie执行hive的任务</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/10/11167047.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 10 Jul 2019 14:29:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/10/11167047.html</guid><description><![CDATA[<h2>4.2、使用oozie调度我们的hive</h2>
<h3>第一步：拷贝hive的案例模板</h3>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">cp -ra examples/apps/hive2/ oozie_works/</p>
</div>
<p>&nbsp;</p>
<h3>第二步：编辑hive模板</h3>
<p>这里使用的是hiveserver2来进行提交任务，需要注意我们要将hiveserver2的服务给启动起来：</p>
<p>nohup hive --service metastore &amp;</p>
<p>nohup hive --service hiveserver2 &amp;</p>
<p>&nbsp;</p>
<p>修改job.properties</p>
<p class="code">cd /export/servers/oozie-4.1.0-cdh5.14.0/oozie_works/hive2</p>
<p class="code">vim job.properties</p>
<div>
<p class="a">nameNode=hdfs://node01:8020</p>
<p class="a">jobTracker=node01:8032</p>
<p class="a">queueName=default</p>
<p class="a">jdbcURL=jdbc:hive2://node03:10000/default</p>
<p class="a">examplesRoot=oozie_works</p>
<p class="a">&nbsp;</p>
<p class="a">oozie.use.system.libpath=true</p>
<p class="a"># 配置我们文件上传到hdfs的保存路径 实际上就是在hdfs 的/user/root/oozie_works/hive2这个路径下</p>
<p class="a">oozie.wf.application.path=${nameNode}/user/${user.name}/${examplesRoot}/hive2<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711205416294-1320813451.png" alt="" /></p>
<p>&nbsp;</p>
</div>
<p>&nbsp;</p>
<p>修改workflow.xml</p>
<p class="code">vim workflow.xml</p>
<div>
<p class="a">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</p>
<p class="a">&lt;workflow-app xmlns="uri:oozie:workflow:0.5" name="hive2-wf"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;start to="hive2-node"/&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;action name="hive2-node"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;hive2 xmlns="uri:oozie:hive2-action:0.1"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;job-tracker&gt;${jobTracker}&lt;/job-tracker&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name-node&gt;${nameNode}&lt;/name-node&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;prepare&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;delete path="${nameNode}/user/${wf:user()}/${examplesRoot}/output-data/hive2"/&gt;</p>
<p class="a">　　　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711205437803-1594000704.png" alt="" /></p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;mkdir path="${nameNode}/user/${wf:user()}/${examplesRoot}/output-data"/&gt;</p>
<p class="a">　　　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711205453968-510300318.png" alt="" /></p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/prepare&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.job.queue.name&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;${queueName}&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;jdbc-url&gt;${jdbcURL}&lt;/jdbc-url&gt;</p>
<p class="a">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&gt;script.q&lt;/script&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;param&gt;INPUT=/user/${wf:user()}/${examplesRoot}/input-data/table&lt;/param&gt;</p>
<p class="a">　　　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711205534486-2094615776.png" alt="" /></p>
<p class="a">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;param&gt;OUTPUT=/user/${wf:user()}/${examplesRoot}/output-data/hive2&lt;/param&gt;</p>
<p class="a">　　　　　　<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711205622319-1962494468.png" alt="" /></p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/hive2&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ok to="end"/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;error to="fail"/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/action&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;kill name="fail"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;message&gt;Hive2 (Beeline) action failed, error message[${wf:errorMessage(wf:lastErrorNode())}]&lt;/message&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/kill&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;end name="end"/&gt;</p>
<p class="a">&lt;/workflow-app&gt;</p>
</div>
<p>&nbsp;</p>
<p>编辑hive的sql文件</p>
<p class="code">vim script.q</p>
<div>
<p class="a">DROP TABLE IF EXISTS test;</p>
<p class="a">CREATE EXTERNAL TABLE test (a INT) STORED AS TEXTFILE LOCATION '${INPUT}';</p>
<p class="a">insert into test values(10);</p>
<p class="a">insert into test values(20);</p>
<p class="a">insert into test values(30);</p>
</div>
<h3>第三步：上传工作文件到hdfs</h3>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0/oozie_works</p>
<p class="a">hdfs dfs -put hive2/ /user/root/oozie_works/</p>
</div>
<h3>第四步：执行oozie的调度</h3>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">bin/oozie job -oozie http://node03:11000/oozie -config oozie_works/hive2/job.properties&nbsp; -run</p>
</div>
<h3>第五步：查看调度结果</h3>
<p>&nbsp;</p>]]></description></item><item><title>2-10 就业课(2.0)-oozie：4、通过oozie执行shell脚本</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/10/11166687.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 10 Jul 2019 13:36:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/10/11166687.html</guid><description><![CDATA[<p>oozie的配置文件<br />job.properties:里面主要定义的是一些key，value对，定义了一些变量，这些变量往workflow.xml里面传递<br />workflow.xml  :workflow的配置文件，里面写的是一个或者多个action，一个action就代表我们一个需要执行的任务</p>
<p><span style="color: #ff0000;">===========================================</span></p>
<h1>4、oozie的使用</h1>
<h2>4.1、使用oozie调度shell脚本</h2>
<p>oozie安装好了之后，我们需要测试oozie的功能是否完整好使，官方已经给我们带了各种测试案例，我们可以通过官方提供的各种案例来对我们的oozie进行调度</p>
<h3>第一步：解压官方提供的调度案例</h3>
<p>oozie自带了各种案例，我们可以使用oozie自带的各种案例来作为模板，所以我们这里先把官方提供的各种案例给解压出来</p>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">tar -zxf oozie-examples.tar.gz</p>




</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>第二步：创建我们的工作目录</h3>
<p>在任意地方创建一个oozie的工作目录，以后我们的调度任务的配置文件全部放到oozie的工作目录当中去</p>
<p>我这里直接在oozie的安装目录下面创建工作目录</p>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">mkdir oozie_works</p>




</div>
<p>&nbsp;</p>
<h3>第三步：拷贝我们的任务模板到我们的工作目录当中去</h3>
<p>我们的任务模板以及工作目录都准备好了之后，我们把我们的shell的任务模板拷贝到我们oozie的工作目录当中去</p>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">cp -r examples/apps/shell/ oozie_works/</p>




</div>
<p>&nbsp;</p>
<h3>第四步：随意准备一个shell脚本</h3>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">vim oozie_works/shell/hello.sh</p>




</div>
<p>注意：这个脚本一定要是在我们oozie工作路径下的shell路径下的位置</p>
<div>
<p class="a">#!/bin/bash</p>
<p class="a">echo "hello world" &gt;&gt; /export/servers/hello_oozie.txt</p>




</div>
<p>&nbsp;</p>
<h3>第五步：修改模板下的配置文件</h3>
<p>修改job.properties</p>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0/oozie_works/shell</p>




</div>
<p class="code">vim job.properties</p>
<div>
<p class="a">nameNode=hdfs://node01:8020</p>
<p class="a">jobTracker=node01:8032<a href="file:///D:/Study/BigData/heima/stage2/10%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A6%BB%E7%BA%BF%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/7%E3%80%81%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9oozie%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E5%8A%A0%E5%BC%BA.docx#_msocom_1">[a1]</a>&nbsp;</p>
<p class="a">queueName=default<a href="file:///D:/Study/BigData/heima/stage2/10%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A6%BB%E7%BA%BF%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/7%E3%80%81%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9oozie%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E5%8A%A0%E5%BC%BA.docx#_msocom_2">[a2]</a>&nbsp;</p>
<p class="a">examplesRoot=oozie_works<a href="file:///D:/Study/BigData/heima/stage2/10%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A6%BB%E7%BA%BF%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/7%E3%80%81%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9oozie%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E5%8A%A0%E5%BC%BA.docx#_msocom_3">[a3]</a>&nbsp;</p>
<p class="a">oozie.wf.application.path=${nameNode}/user/${user.name}/${examplesRoot}/shell</p>
<p class="a">截图一张，因为该行在手机端上显示错误，下同：<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711204851261-1430965886.png" alt="" /></p>
<p>EXEC=hello.sh<a href="file:///D:/Study/BigData/heima/stage2/10%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A6%BB%E7%BA%BF%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/7%E3%80%81%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9oozie%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E5%8A%A0%E5%BC%BA.docx#_msocom_4">[a4]</a>&nbsp;</p>




</div>
<p>修改workflow.xml</p>
<p class="code">vim workflow.xml</p>
<div>
<p class="a">&lt;workflow-app xmlns="uri:oozie:workflow:0.4" name="shell-wf"&gt;</p>
<p class="a">&lt;start to="shell-node"/&gt;</p>
<p class="a">&lt;action name="shell-node"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;shell xmlns="uri:oozie:shell-action:0.2"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;job-tracker&gt;${jobTracker}&lt;/job-tracker&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name-node&gt;${nameNode}&lt;/name-node&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapred.job.queue.name&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;${queueName}&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;exec&gt;${EXEC}&lt;/exec&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- &lt;argument&gt;my_output=Hello Oozie&lt;/argument&gt; --&gt;</p>
<p class="a">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;file&gt;/user/root/oozie_works/shell/${EXEC}#${EXEC}<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711204957833-1234415651.png" alt="" />&lt;/file&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;capture-output/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/shell&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;ok to="end"/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;error to="fail"/&gt;</p>
<p class="a">&lt;/action&gt;</p>
<p class="a">&lt;decision name="check-output"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;switch&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;case to="end"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ${wf:actionData('shell-node')['my_output'] eq 'Hello Oozie'}</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/case&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;default to="fail-output"/&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/switch&gt;</p>
<p class="a">&lt;/decision&gt;</p>
<p class="a">&lt;kill name="fail"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;message&gt;Shell action failed, error message[${wf:errorMessage(wf:lastErrorNode())}]&lt;/message&gt;</p>
<p class="a">&lt;/kill&gt;</p>
<p class="a">&lt;kill name="fail-output"&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;message&gt;Incorrect output, expected [Hello Oozie] but was [${wf:actionData('shell-node')['my_output']}]&lt;/message&gt;</p>
<p class="a">&lt;/kill&gt;</p>
<p class="a">&lt;end name="end"/&gt;</p>
<p class="a">&lt;/workflow-app&gt;</p>




</div>
<p>&nbsp;</p>
<h3>第六步：上传我们的调度任务到hdfs上面去</h3>
<p>注意：上传的hdfs目录为/user/root，因为我们hadoop启动的时候使用的是root用户，如果hadoop启动的是其他用户，那么就上传到</p>
<p>/user/其他用户</p>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">hdfs dfs -put oozie_works/ /user/root</p>




</div>
<p>&nbsp;</p>
<h3>第七步：执行调度任务</h3>
<p>通过oozie的命令来执行我们的调度任务</p>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">bin/oozie job -oozie http://node03:11000/oozie -config oozie_works/shell/job.properties&nbsp; -run</p>




</div>
<p>从监控界面可以看到我们的任务执行成功了</p>
<p>&nbsp;</p>
<p>查看hadoop的19888端口，我们会发现，oozie启动了一个MR的任务去执行我们的shell脚本</p>
<p>&nbsp;</p>
<div><hr align="left" size="1" width="33%" />
<div>
<div>
<p>&nbsp;<a href="file:///D:/Study/BigData/heima/stage2/10%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A6%BB%E7%BA%BF%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/7%E3%80%81%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9oozie%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E5%8A%A0%E5%BC%BA.docx#_msoanchor_1">[a1]</a>在hadoop2当中，jobTracker这种角色已经没有了，只有resourceManager，这里给定resourceManager的IP及端口即可</p>




</div>




</div>
<div>
<div>
<p>&nbsp;<a href="file:///D:/Study/BigData/heima/stage2/10%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A6%BB%E7%BA%BF%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/7%E3%80%81%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9oozie%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E5%8A%A0%E5%BC%BA.docx#_msoanchor_2">[a2]</a>任务提交的队列名称，默认或者随便更改都可以</p>




</div>




</div>
<div>
<div>
<p>&nbsp;<a href="file:///D:/Study/BigData/heima/stage2/10%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A6%BB%E7%BA%BF%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/7%E3%80%81%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9oozie%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E5%8A%A0%E5%BC%BA.docx#_msoanchor_3">[a3]</a>指定oozie的工作目录</p>




</div>




</div>
<div>
<div>
<p>&nbsp;<a href="file:///D:/Study/BigData/heima/stage2/10%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A6%BB%E7%BA%BF%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9/7%E3%80%81%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9oozie%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E5%8A%A0%E5%BC%BA.docx#_msoanchor_4">[a4]</a>保存执行任务的名称</p>




</div>




</div>




</div>]]></description></item><item><title>2-10 就业课(2.0)-oozie：3、安装2</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/10/11166344.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 10 Jul 2019 12:40:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/10/11166344.html</guid><description><![CDATA[<h2>第七步：修改oozie-site.xml</h2>
<p class="code">cd /export/servers/oozie-4.1.0-cdh5.14.0/conf</p>
<p class="code">vim oozie-site.xml</p>
<p>如果没有这些属性，直接添加进去即可，oozie默认使用的是UTC的时区，我们需要在我们oozie-site.xml当中记得要配置我们的时区为GMT+0800时区</p>
<div>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&lt;name&gt;oozie.service.JPAService.jdbc.driver&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;oozie.service.JPAService.jdbc.url&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;jdbc:mysql://node03.hadoop.com:3306/oozie&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;oozie.service.JPAService.jdbc.username&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;root&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;oozie.service.JPAService.jdbc.password&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;123456&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;oozie.processing.timezone&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;GMT+0800&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;oozie.service.ProxyUserService.proxyuser.hue.hosts&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;*&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;property&gt;&nbsp;&nbsp; &lt;name&gt;oozie.service.ProxyUserService.proxyuser.hue.groups&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;*&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;oozie.service.coord.check.maximum.frequency&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;false&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/property&gt;&nbsp; &nbsp;&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;name&gt;oozie.service.HadoopAccessorService.hadoop.configurations&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;*=/export/servers/hadoop-2.6.0-cdh5.14.0/etc/hadoop&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
</div>
<h2>第八步：创建mysql数据库</h2>
<div>
<p class="a">mysql -uroot -p</p>
<p class="a">create database oozie;</p>
<p class="a">或者用下面的更详细的：</p>
<p class="a">create database oozie default character set utf8 default collate utf8_general_ci;</p>
</div>
<p>&nbsp;</p>
<h2>第九步：上传oozie依赖的jar包到hdfs上面去</h2>
<p>上传oozie的解压后目录的yarn.tar.gz到hdfs目录去</p>
<div>
<p class="a">bin/oozie-setup.sh&nbsp; sharelib create -fs hdfs://node01:8020 -locallib oozie-sharelib-4.1.0-cdh5.14.0-yarn.tar.gz</p>
</div>
<p>实际上就是将这些jar包解压到了hdfs上面的路径下面去了</p>
<h2>第十步：创建oozie的数据库表</h2>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">bin/oozie-setup.sh&nbsp; db create -run -sqlfile oozie.sql</p>
</div>
<h2>第十一步：打包项目，生成war包</h2>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">bin/oozie-setup.sh&nbsp; prepare-war</p>
</div>
<p>&nbsp;</p>
<h2>第十二步：配置oozie的环境变量</h2>
<p class="code">vim /etc/profile</p>
<div>
<p class="a">export OOZIE_HOME=/export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">export OOZIE_URL=http://node03.hadoop.com:11000/oozie</p>
<p class="a">export PATH=:$OOZIE_HOME/bin:$PATH</p>
</div>
<p class="code">source /etc/profile</p>
<p>&nbsp;</p>
<h2>第十三步：启动与关闭oozie服务</h2>
<p>启动命令</p>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">bin/oozied.sh start</p>
</div>
<p>关闭命令</p>
<div>
<p class="a">bin/oozied.sh stop</p>
</div>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190710204228329-1846762068.png" alt="" /></p>
<p>&nbsp;</p>
<h2>第十四步：浏览器页面访问oozie</h2>
<p><a href="http://node03:11000/oozie/">http://node03:11000/oozie/</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>解决oozie的页面的时区问题：</p>
<p>我们页面访问的时候，发现我们的oozie使用的还是GMT的时区，与我们现在的时区相差一定的时间，所以我们需要调整一个js的获取时区的方法，将其改成我们现在的时区</p>
<p>&nbsp;</p>
<p>修改js当中的时区问题</p>
<p class="code">cd /export/servers/oozie-4.1.0-cdh5.14.0/oozie-server/webapps/oozie</p>
<p class="code">vim oozie-console.js</p>
<div>
<p class="a">function getTimeZone() {</p>
<p class="a">&nbsp;&nbsp;&nbsp; Ext.state.Manager.setProvider(new Ext.state.CookieProvider());</p>
<p class="a">&nbsp;&nbsp;&nbsp; return Ext.state.Manager.get("TimezoneId","GMT+0800");</p>
<p class="a">}</p>
</div>
<p>&nbsp;</p>
<p>重启oozie即可</p>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
</div>
<p>关闭oozie服务</p>
<div>
<p class="a">bin/oozied.sh stop</p>
</div>
<p>启动oozie服务</p>
<div>
<p class="a">bin/oozied.sh start</p>
</div>
<p>&nbsp;</p>]]></description></item><item><title>未知进程问题，process information unavailable</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/09/11161303.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 09 Jul 2019 15:53:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/09/11161303.html</guid><description><![CDATA[<p>执行jps，有些未知进程：</p>
<p>2690 -- process information unavailable<br />2666 </p>
<p>原因：内存不足。</p>
<p>&nbsp;</p>
<p>cd /tmp/hsperfdata_impala/</p>
<p>执行ll后，发现其中正好有2个文件，删除这2个文件即可：</p>
<p>-rw------- 1 impala impala 32768 Jul 9 23:48 2666<br />-rw-------   1 impala impala 32768 Jul  9 23:47 2690</p>
<p>&nbsp;</p>
<p>解决方案：</p>
<p>cd /tmp</p>
<p>rm -rf&nbsp;hsperfdata_impala/</p>
<p>&nbsp;</p>]]></description></item><item><title>2-10 就业课(2.0)-oozie：2、介绍和安装1</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/09/11154892.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 08 Jul 2019 16:00:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/09/11154892.html</guid><description><![CDATA[<h1 align="center">oozie的安装及使用</h1>
<h1>1、&nbsp; oozie的介绍</h1>
<p>Oozie是运行在hadoop平台上的一种工作流调度引擎，它可以用来调度与管理hadoop任务，如，MapReduce、Pig等。那么，对于OozieWorkflow中的一个个的action（可以理解成一个个MapReduce任务）Oozie是根据什么来对action的执行时间与执行顺序进行管理调度的呢？答案就是我们在数据结构中常见的有向无环图(DAGDirect Acyclic Graph)的模式来进行管理调度的，我们可以利用HPDL语言（一种xml语言）来定义整个workflow，实现工作流的调度oozie的架构以及执行流程</p>
<h1>2、oozie的架构</h1>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190710194648592-461427158.png" alt="" /></p>
<h2>oozie的执行流程</h2>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190711211657576-1875617960.png" alt="" /></p>
<p>&nbsp;</p>
<h2>oozie的组件介绍</h2>
<p>workFlow：工作流，定义我们的工作流的任务的执行，主要由一个个的action，在xml中进行配置即可</p>
<p>Coordinator&nbsp;：协作器，说白了就是oozie当中的定时任务调度的模块</p>
<p>Bundle&nbsp;：多个Coordinator&nbsp;的抽象，可以通过bundle将多个Coordinator&nbsp;进行组装集合起来，形成一个bundle。（用得很少）</p>
<p>&nbsp;</p>
<h1>3、oozie的安装</h1>
<h2>第一步：修改core-site.xml</h2>
<p>修改core-site.xml添加我们hadoop集群的代理用户</p>
<p class="code">cd /export/servers/hadoop-2.6.0-cdh5.14.0/etc/hadoop</p>
<p class="code">vim&nbsp; core-site.xml</p>
<div>
<p class="a">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;*&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;hadoop.proxyuser.root.groups&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;*&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
</div>
<p class="code">注意：hadoop的历史任务的服务必须启动，即19888端口可以查看，具体如何配置19888请查看hadoop课程的环境搭建</p>
<div>
<p class="a">修改完成之后，记得重启hadoop的hdfs与yarn集群，还要记得启动jobhistory</p>
</div>
<p>重启hdfs与yarn集群</p>
<p class="code">cd /export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="code">sbin/stop-dfs.sh</p>
<p class="code">sbin/start-dfs.sh</p>
<p class="code">sbin/stop-yarn.sh</p>
<p class="code">sbin/start-yarn.sh</p>
<p>&nbsp;</p>
<h2>第二步：上传oozie的安装包并解压</h2>
<p>将我们的oozie的安装包上传到/export/softwares</p>
<div>
<p class="a">cd /export/softwares/</p>
<p class="a">tar -zxvf oozie-4.1.0-cdh5.14.0.tar.gz -C ../servers/</p>
</div>
<p>&nbsp;</p>
<h2>第三步：解压hadooplibs到与oozie平行的目录</h2>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">tar -zxvf oozie-hadooplibs-4.1.0-cdh5.14.0.tar.gz -C ../</p>
</div>
<p>&nbsp;</p>
<h2>第四步：创建libext目录</h2>
<p>在oozie的安装路径下创建libext目录</p>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">mkdir -p libext</p>
</div>
<p>&nbsp;</p>
<h2>第五步：拷贝依赖包到libext</h2>
<p>拷贝一些依赖包到libext目录下面去</p>
<p>拷贝所有的依赖包</p>
<div>
<p class="a">cd /export/servers/oozie-4.1.0-cdh5.14.0</p>
<p class="a">cp -ra hadooplibs/hadooplib-2.6.0-cdh5.14.0.oozie-4.1.0-cdh5.14.0/* libext/</p>
</div>
<p>拷贝mysql的驱动包</p>
<div>
<p class="a">cp /export/servers/hive-1.1.0-cdh5.14.0/lib/mysql-connector-java-5.1.38.jar /export/servers/oozie-4.1.0-cdh5.14.0/libext/</p>
</div>
<p>&nbsp;</p>
<h2>第六步：添加ext-2.2.zip压缩包</h2>
<p>拷贝ext-2.2.zip这个包到libext目录当中去</p>
<p>将我们准备好的软件ext-2.2.zip拷贝到我们的libext目录当中去</p>
<p>&nbsp;</p>]]></description></item><item><title>hue中访问impala报错</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/08/11154767.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 08 Jul 2019 15:24:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/08/11154767.html</guid><description><![CDATA[<p><span style="color: #ff0000;">hue中访问impala报错：Could not connect to node03:21050</span></p>
<p>原因：impala服务未启动。</p>
<p>&nbsp;</p>
<p>解决方法：在3个节点上都启动impala：</p>
<p>主节点node03启动以下三个服务进程</p>
<p class="code">service impala-state-store start</p>
<p class="code">service impala-catalog start</p>
<p class="code">service impala-server start</p>
<p>&nbsp;</p>
<p>从节点启动node01与node02启动impala-server</p>
<p class="code">service&nbsp; impala-server&nbsp; start</p>
<p>查看impala进程是否存在</p>
<p class="code">ps -ef | grep impala</p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 HUE：14、15、16、hue与hdfs、yarn集群、hive、impala、mysql的整合</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/07/11148871.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 07 Jul 2019 15:40:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/07/11148871.html</guid><description><![CDATA[<h1>3、hue与其他框架的集成</h1>
<h2>3.1、hue与hadoop的HDFS以及yarn集成</h2>
<h3>第一步：更改所有hadoop节点的core-site.xml配置</h3>
<p>记得更改完core-site.xml之后一定要重启hdfs与yarn集群</p>
<div>
<p class="a">&lt;property&gt;</p>
<p class="a">&lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt;</p>
<p class="a">&lt;value&gt;*&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
<p class="a">&lt;property&gt;</p>
<p class="a">&lt;name&gt;hadoop.proxyuser.root.groups&lt;/name&gt;</p>
<p class="a">&lt;value&gt;*&lt;/value&gt;</p>
<p class="a">&lt;/property&gt;</p>
</div>
<h3>第二步：更改所有hadoop节点的hdfs-site.xml</h3>
<div>
<p class="a">&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &nbsp; &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
</div>
<h3>第三步：重启hadoop集群</h3>
<p>在node01机器上面执行以下命令</p>
<div>
<p class="a">cd /export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="a">sbin/stop-dfs.sh</p>
<p class="a">sbin/start-dfs.sh</p>
<p class="a">sbin/stop-yarn.sh</p>
<p class="a">sbin/start-yarn.sh</p>
</div>
<p>&nbsp;</p>
<h3>第四步：停止hue的服务，并继续配置hue.ini</h3>
<div>
<p class="a">cd /export/servers/hue-3.9.0-cdh5.14.0/desktop/conf</p>
<p class="a">vim hue.ini</p>
</div>
<p>配置我们的hue与hdfs集成</p>
<div>
<p class="a">[[hdfs_clusters]]</p>
<p class="a">&nbsp;&nbsp;&nbsp; [[[default]]]</p>
</div>
<p class="code">fs_defaultfs=hdfs://node01.hadoop.com:8020</p>
<p class="code">webhdfs_url=http://node01.hadoop.com:50070/webhdfs/v1</p>
<p class="code">hadoop_hdfs_home=/export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="code">hadoop_bin=/export/servers/hadoop-2.6.0-cdh5.14.0/bin</p>
<p class="code">hadoop_conf_dir=/export/servers/hadoop-2.6.0-cdh5.14.0/etc/hadoop</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>配置我们的hue与yarn集成</p>
<div>
<p class="a">[[yarn_clusters]]</p>
<p class="a">&nbsp;&nbsp;&nbsp; [[[default]]]</p>
</div>
<p class="code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resourcemanager_host=node01</p>
<p class="code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resourcemanager_port=8032</p>
<p class="code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; submit_to=True</p>
<p class="code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resourcemanager_api_url=http://node01:8088</p>
<p class="code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; history_server_api_url=http://node01:19888</p>
<p>&nbsp;</p>
<h2>3.2、配置hue与hive集成</h2>
<p>如果需要配置hue与hive的集成，我们需要启动hive的metastore服务以及hiveserver2服务（impala需要hive的metastore服务，hue需要hive的hiveserver2服务）</p>
<h3>更改hue的配置hue.ini</h3>
<p>修改hue.ini</p>
<div>
<p class="a">[beeswax]</p>
</div>
<p class="code">&nbsp; hive_server_host=node03.hadoop.com</p>
<p class="code">&nbsp; hive_server_port=10000</p>
<p class="code">&nbsp; hive_conf_dir=/export/servers/hive-1.1.0-cdh5.14.0/conf</p>
<p class="code">&nbsp; server_conn_timeout=120</p>
<p class="code">&nbsp; auth_username=root</p>
<p class="code">&nbsp; auth_password=123456</p>
<p>&nbsp;</p>
<div>
<p class="a">[metastore]</p>
</div>
<p class="code">&nbsp; #允许使用hive创建数据库表等操作</p>
<p class="code">&nbsp; enable_new_create_table=true</p>
<h3>启动hive的metastore服务</h3>
<p>去node03机器上启动hive的metastore以及hiveserver2服务</p>
<div>
<p class="a">cd /export/servers/hive-1.1.0-cdh5.14.0</p>
<p class="a">nohup bin/hive --service metastore &amp; （<span style="color: #ff0000;">如果配置了hive的环境变量，则可以省略bin/的路径</span>）</p>
<p class="a">nohup bin/hive --service hiveserver2 &amp;（<span style="color: #ff0000;">如果配置了hive的环境变量，则可以省略bin/的路径</span>）</p>
</div>
<p>&nbsp;</p>
<p>重新启动hue，然后就可以通过浏览器页面操作hive了</p>
<p>&nbsp;</p>
<h2>3.3、配置hue与impala的集成</h2>
<p>停止hue的服务进程</p>
<p>修改hue.ini配置文件</p>
<div>
<p class="a">[impala]</p>
</div>
<p class="code">&nbsp; server_host=node03</p>
<p class="code">&nbsp; server_port=21050</p>
<p class="code">&nbsp; impala_conf_dir=/etc/impala/conf</p>
<h2>3.4、配置hue与mysql的集成</h2>
<p>找到databases 这个选项，将这个选项下面的mysql注释给打开，然后配置mysql即可,大概在1547行</p>
<div>
<p class="a">[[[mysql]]]</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nice_name="My SQL DB"</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; engine=mysql</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; host=node03.hadoop.com</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; port=3306</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; user=root</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; password=123456</p>
</div>
<p>&nbsp;</p>
<h2>3.5、重新启动hue的服务</h2>
<div>
<p class="a">cd /export/servers/hue-3.9.0-cdh5.14.0/</p>
<p class="a">build/env/bin/supervisor</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>3.6、解决hive以及impala执行权限不足的问题</h2>
<p>在我们hive当中执行任意的查询，只要是需要跑MR的程序，就会报错，发现权限不够的异常，具体详细信息如下：</p>
<p>&nbsp;</p>
<div>
<pre>INFO&nbsp; : Compiling command(queryId=root_20180625191616_d02efd23-2322-4f3d-9cb3-fc3a06ff4ce0): select count(1) from mystu</pre>
<pre>INFO&nbsp; : Semantic Analysis Completed</pre>
<pre>INFO&nbsp; : Returning Hive schema: Schema(fieldSchemas:[FieldSchema(name:_c0, type:bigint, comment:null)], properties:null)</pre>
<pre>INFO&nbsp; : Completed compiling command(queryId=root_20180625191616_d02efd23-2322-4f3d-9cb3-fc3a06ff4ce0); Time taken: 0.065 seconds</pre>
<pre>INFO&nbsp; : Concurrency mode is disabled, not creating a lock manager</pre>
<pre>INFO&nbsp; : Executing command(queryId=root_20180625191616_d02efd23-2322-4f3d-9cb3-fc3a06ff4ce0): select count(1) from mystu</pre>
<pre>INFO&nbsp; : Query ID = root_20180625191616_d02efd23-2322-4f3d-9cb3-fc3a06ff4ce0</pre>
<pre>INFO&nbsp; : Total jobs = 1</pre>
<pre>INFO&nbsp; : Launching Job 1 out of 1</pre>
<pre>INFO&nbsp; : Starting task [Stage-1:MAPRED] in serial mode</pre>
<pre>INFO&nbsp; : Number of reduce tasks determined at compile time: 1</pre>
<pre>INFO&nbsp; : In order to change the average load for a reducer (in bytes):</pre>
<pre>INFO&nbsp; :&nbsp;&nbsp; set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</pre>
<pre>INFO&nbsp; : In order to limit the maximum number of reducers:</pre>
<pre>INFO&nbsp; :&nbsp;&nbsp; set hive.exec.reducers.max=&lt;number&gt;</pre>
<pre>INFO&nbsp; : In order to set a constant number of reducers:</pre>
<pre>INFO&nbsp; :&nbsp;&nbsp; set mapreduce.job.reduces=&lt;number&gt;</pre>
<pre>ERROR : Job Submission failed with exception 'org.apache.hadoop.security.AccessControlException(Permission denied: user=admin, access=EXECUTE, inode="/tmp":root:supergroup:drwxrwx---</pre>
</div>
<p>&nbsp;</p>
<p>我们需要给hdfs上面的几个目录执行权限即可</p>
<div>
<p class="a">hdfs&nbsp; dfs&nbsp; -chmod o+x /tmp</p>
<p class="a">hdfs&nbsp; dfs&nbsp; -chmod o+x&nbsp; /tmp/hadoop-yarn</p>
<p class="a">hdfs&nbsp; dfs&nbsp; -chmod o+x&nbsp; /tmp/hadoop-yarn/staging</p>
</div>
<p>&nbsp;</p>
<p>或者我们可以这样执行</p>
<div>
<p class="a">hdfs&nbsp; dfs&nbsp; -chmod -R o+x /tmp</p>
</div>
<p>可以将/tmp目录下所有的文件及文件夹都赋予权限</p>
<p>继续执行hive的任务就不会报错了</p>
<p><span style="color: #ff0000;">=========================================================</span></p>
<p>课程总结：</p>
<p>impala：sql语句的一个查询工具，<br />	 特点：比较快<br />	 缺点：占用内存大<br />	 <br />impala架构：<br />	impala-server：从节点  主要用于执行sql语句的查询<br />	impala-catalog：主节点 主要用于存储元数据信息<br />	impala-state-store: 主节点  主要用于保存一些sql语句的执行状态<br />	</p>
<p>	impala的安装：没有提供tar.gz的安装包，使用rpm的安装包来进行安装<br />	下载一个rpm的仓库，5个G，所有的大数据软件都可以通过rpm包方式来进行安装<br />	<br />	制作本地的yum源     搞定<br />		第一个：配置文件<br />		第二个：httpd服务<br />		第三个：rpm的仓库<br />	<br />	进行安装  搞定<br />	<br />	impala的配置：  搞定<br />		impala需要三个核心配置文件 hdfs-site.xml   core-site.xml   hive-site.xml<br />		impala的配置文件也得需要更改<br />		<br />impala的语法的使用： </p>
<p>	进入impala-shell之前的一些参数<br />	impala-shell -q   与hive  -e  类似，不进入impala的shell交互窗口直接执行sql语句<br />	impala-shell  -f 与hive -f  类似，直接执行sql脚本<br />	impala-shell -r  刷新元数据信息，进入impala-shell之前刷新元数据信息，全量的刷新，如果数据量比较大，性能消耗比较大<br />	<br />	进入impala-shell之后的一些参数<br />	refresh  dbName.tabName  局部的刷新，只刷新某张已经存在的表的元数据信息<br />	invalidate metadata   全量的刷新，，适用于hive当中新建的数据库或者数据库表的情况<br />	<br />	impala的建库建表语法：与hive建库建表一模一样，参见hive的表创建<br />	<br />	impala的sql语法：与hive的sql语法类似，参见hive的sql语法<br />	<br />	impala的数据导入的几种方式： 搞定<br />		load  datal  这种加载数据的方式，只能从hdfs上面加载数据<br />		insert   into  table  select    <br />	<br />	<br />	impala  java 开发 了解</p>
<p>	<br />------------------------------------------<br />	<br />hue：主要是与其他的各个框架整合使用，hue本身不提供任何的功能</p>
<p>可以与hdfs，以及yarn整合<br />可以与hive以及impala整合<br />可以与mysql整合</p>
<p>编译的时候可能会通不过：删了重新编译</p>
<p>&nbsp;</p>]]></description></item><item><title>hue中访问hdfs报错</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/07/11148875.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 07 Jul 2019 15:40:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/07/11148875.html</guid><description><![CDATA[<p>在hue中访问hdfs报错：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190707232852865-208123311.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190707232912442-1038622141.png" alt="" /></p>
<p><span style="color: #ff0000;">Cannot access: /. Note: you are a Hue admin but not a HDFS superuser, "hdfs" or part of HDFS supergroup, "supergroup".</span></p>
<p>&nbsp;原因：hue.ini配置文件中，</p>
<p class="code">server_user=root&nbsp; &nbsp;&nbsp;server_group=root&nbsp; &nbsp;&nbsp;default_user=root 这3个配置忘记把注释去掉了。</p>
<p>&nbsp;</p>]]></description></item><item><title>安装hue时，make apps 编译报错</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/07/11145453.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 07 Jul 2019 02:46:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/07/11145453.html</guid><description><![CDATA[<p><span style="color: #ff0000;">安装hue时，make apps 编译报错 ："Error: must have python development packages for 2.6 or 2.7. Could not find Python.h. Please install python2.6-devel or python2.7-devel"。 Stop。</span></p>
<p>原因：排查最终原因是，python等某些依赖未安装/未安装好。</p>
<p>　　&nbsp; 依赖未安装的原因，是配置了本地yum源。</p>
<p>解决方法：</p>
<p>可能是本地yum源配置的原因，</p>
<p>进入该目录： /etc/yum.repos.d/</p>
<p>将原来配置的本地文件localimp.repo重命名，然后备份：</p>
<p>mv localimp.repo localimp22222.repo.bak</p>
<p>然后重新安装hue需要的依赖（这个安装的命令可以多执行几遍，确保所有依赖都安装完毕）：</p>
<p align="left">yum -y install ant asciidoc cyrus-sasl-devel cyrus-sasl-gssapi cyrus-sasl-plain gcc gcc-c++ krb5-devel libffi-devel libxml2-devel libxslt-devel make&nbsp; mysql mysql-devel openldap-devel python-devel sqlite-devel gmp-devel</p>
<p align="left">发现其又安装了好多依赖程序。</p>
<p align="left">&nbsp;</p>
<p align="left">然后删除hue的程序目录：&nbsp; /export/servers/hue-3.9.0-cdh5.14.0/</p>
<p>重新减压hue，配置hue.ini（或直接拷贝原来配置好的文件过来）</p>
<p>然后进入目录 &nbsp;/export/servers/hue-3.9.0-cdh5.14.0/ ， 重新编译：make apps&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: #ff0000;">成功！</span></p>
<p>&nbsp;</p>]]></description></item><item><title>impala invalidate metadata和impala-shell -r作用相同</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/06/11144696.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 06 Jul 2019 15:32:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/06/11144696.html</guid><description><![CDATA[<p><br />impala的invalidate metadata内部命令，是否和外部命令impala-shell -r的作用相同的？ </p>
<p>  这个问题的回答： 在invalidate metadata  和 impala-shell 中 -r 参数，都是刷新元数据的作用。即两者作用相同。</p>]]></description></item><item><title>第1节 HUE：13、hue的下载以及安装配置</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/06/11144684.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 06 Jul 2019 15:30:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/06/11144684.html</guid><description><![CDATA[<p><br />hue的基本介绍：主要是用于与其他各个框架做整合的，提供一个web界面可以供我们去操作其他的大数据框架<br />可以理解为这个hue就是一个与其他各个框架整合的工具，hue本身不提供任何的功能，所有的功能，都是借助其他的框架来完成</p>
<p>hue的架构：<br />第一个UI界面：主要是提供我们web界面供我们使用的<br />第二个hue  server：就是一个tomcat的服务<br />第三个hue  DB: hue的数据库，主要用于保存一些我们提交的任务</p>
<p><span style="color: #ff0000;">==================================================</span></p>
<h1>1、Hue的介绍</h1>
<p>HUE=<strong>Hadoop User Experience</strong></p>
<p>Hue是一个开源的Apache Hadoop UI系统，由Cloudera Desktop演化而来，最后Cloudera公司将其贡献给Apache基金会的Hadoop社区，它是基于Python Web框架Django实现的。</p>
<p>通过使用Hue我们可以在浏览器端的Web控制台上与Hadoop集群进行交互来分析处理数据，例如操作HDFS上的数据，运行MapReduce Job，执行Hive的SQL语句，浏览HBase数据库等等。</p>
<h2>HUE链接</h2>
<ul>
<li>Site:&nbsp;<a href="http://gethue.com/" target="_blank">http://gethue.com/</a></li>
<li>Github:&nbsp;<a href="https://github.com/cloudera/hue" target="_blank">https://github.com/cloudera/hue</a></li>
<li>Reviews:&nbsp;<a href="https://review.cloudera.org/" target="_blank">https://review.cloudera.org</a></li>




</ul>
<h2>Hue的架构</h2>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190706224753907-220187875.png" alt="" /></p>
<h2>核心功能</h2>
<ul>
<li>SQL编辑器，支持Hive, Impala, MySQL, Oracle, PostgreSQL, SparkSQL, Solr SQL, Phoenix&hellip;</li>
<li>搜索引擎Solr的各种图表</li>
<li>Spark和Hadoop的友好界面支持</li>
<li>支持调度系统Apache Oozie，可进行workflow的编辑、查看</li>




</ul>
<p>HUE提供的这些功能相比Hadoop生态各组件提供的界面更加友好，但是一些需要debug的场景可能还是需要使用原生系统才能更加深入的找到错误的原因。</p>
<p>HUE中查看Oozie workflow时，也可以很方便的看到整个workflow的DAG图，不过在最新版本中已经将DAG图去掉了，只能看到workflow中的action列表和他们之间的跳转关系，想要看DAG图的仍然可以使用oozie原生的界面系统查看。</p>
<p>1，访问HDFS和文件浏览</p>
<p>2，通过web调试和开发hive以及数据结果展示</p>
<p>3，查询solr和结果展示，报表生成</p>
<p>4，通过web调试和开发impala交互式SQL Query</p>
<p>5，spark调试和开发</p>
<p>7，oozie任务的开发，监控，和工作流协调调度</p>
<p>8，Hbase数据查询和修改，数据展示</p>
<p>9，Hive的元数据（metastore）查询</p>
<p>10，MapReduce任务进度查看，日志追踪</p>
<p>11，创建和提交MapReduce，Streaming，Java job任务</p>
<p>12，Sqoop2的开发和调试</p>
<p>13，Zookeeper的浏览和编辑</p>
<p>14，数据库（MySQL，PostGres，SQlite，Oracle）的查询和展示</p>
<p>&nbsp;</p>
<p>一句话总结：Hue是一个友好的界面集成框架，可以集成我们各种学习过的以及将要学习的框架，一个界面就可以做到查看以及执行所有的框架</p>
<h1>2、Hue的安装</h1>
<p>Hue的安装支持多种方式，包括rpm包的方式进行安装，tar.gz包的方式进行安装以及cloudera&nbsp; manager的方式来进行安装等，我们这里使用tar.gz包的方式来记性安装</p>
<h2>第一步：下载Hue的压缩包并上传到linux解压</h2>
<p>Hue的压缩包的下载地址：</p>
<p><a href="http://archive.cloudera.com/cdh5/cdh/5/">http://archive.cloudera.com/cdh5/cdh/5/</a></p>
<p>我们这里使用的是CDH5.14.0这个对应的版本，具体下载地址为</p>
<p><a href="http://archive.cloudera.com/cdh5/cdh/5/hue-3.9.0-cdh5.14.0.tar.gz">http://archive.cloudera.com/cdh5/cdh/5/hue-3.9.0-cdh5.14.0.tar.gz</a></p>
<p>下载然后上传到linux系统，然后进行解压</p>
<div>
<p class="a">cd /export/softwares/</p>
<p class="a">tar -zxvf hue-3.9.0-cdh5.14.0.tar.gz -C ../servers/</p>



</div>
<p>&nbsp;</p>
<h2>第二步：编译安装启动</h2>
<h3>2.1、linux系统安装依赖包：</h3>
<p>联网安装各种必须的依赖包</p>
<p align="left">yum install ant asciidoc cyrus-sasl-devel cyrus-sasl-gssapi cyrus-sasl-plain gcc gcc-c++ krb5-devel libffi-devel libxml2-devel libxslt-devel make&nbsp; mysql mysql-devel openldap-devel python-devel sqlite-devel gmp-devel</p>
<p>&nbsp;</p>
<h3>2.2、开始配置Hue</h3>
<div>
<p class="a">cd /export/servers/hue-3.9.0-cdh5.14.0/desktop/conf</p>
<p class="a">vim&nbsp; hue.ini</p>



</div>
<p>&nbsp;</p>
<div>
<p class="a">#通用配置</p>
<p class="a">[desktop]</p>



</div>
<p class="code">secret_key=jFE93j;2[290-eiw.KEiwN2s3['d;/.q[eIW^y#e=+Iei*@Mn&lt;qW5o</p>
<p class="code">http_host=node03.hadoop.com</p>
<p class="code">is_hue_4=true</p>
<p class="code">time_zone=Asia/Shanghai</p>
<p class="code">server_user=root</p>
<p class="code">server_group=root</p>
<p class="code">default_user=root</p>
<p class="code">default_hdfs_superuser=root</p>
<div>
<p class="a">#配置使用mysql作为hue的存储数据库,大概在hue.ini的587行左右</p>
<p class="a">[[database]]</p>



</div>
<p class="code">engine=mysql</p>
<p class="code">host=node03.hadoop.com</p>
<p class="code">port=3306</p>
<p class="code">user=root</p>
<p class="code">password=123456</p>
<p class="code">name=hue</p>
<p>&nbsp;</p>
<h3>2.3、创建mysql数据库</h3>
<p>创建hue数据库</p>
<div>
<pre>create database hue default character set utf8 default collate utf8_general_ci;</pre>
</div>
<p>注意：实际工作中，还需要为hue这个数据库创建对应的用户，并分配权限，我这就不创建了，所以下面这一步不用执行了</p>
<div>
<pre>grant all on hue.* to 'hue'@'%' identified by 'hue';</pre>
</div>
<h3>2.4、准备进行编译</h3>
<div>
<p class="a">cd /export/servers/hue-3.9.0-cdh5.14.0</p>
<p class="a">make apps</p>
</div>
<p>&nbsp;</p>
<h3>2.5、linux系统添加普通用户hue</h3>
<div>
<p class="a">useradd hue</p>
<p class="a">passwd hue</p>
</div>
<p>&nbsp;</p>
<h3>2.6、启动hue进程</h3>
<div>
<p class="a">cd /export/servers/hue-3.9.0-cdh5.14.0/</p>
<p class="a">build/env/bin/supervisor</p>
</div>
<h3>2.7、页面访问</h3>
<p><a href="http://node03:8888/">http://node03:8888</a></p>
<p>第一次访问的时候，需要设置管理员用户和密码</p>
<p>我们这里的管理员的用户名与密码尽量保持与我们安装hadoop的用户名和密码一致，</p>
<p>我们安装hadoop的用户名与密码分别是root&nbsp; root</p>
<p>初次登录使用root用户，密码为root</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190706232910199-1322253963.png" alt="" /></p>
<p>进入之后发现我们的hue页面报错了，这个错误主要是因为hive的原因，因为我们的hue与hive集成的时候出错了，所以我们需要配置我们的hue与hive进行集成，接下里就看看我们的hue与hive以及hadoop如何进行集成。</p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 IMPALA：12、通过java代码来执行impala的查询操作</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/06/11141353.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 05 Jul 2019 16:09:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/06/11141353.html</guid><description><![CDATA[<p>详见代码。</p>]]></description></item><item><title>第1节 IMPALA：10、基本查询语法；11、数据加载的4种方式</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/06/11141351.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 05 Jul 2019 16:08:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/06/11141351.html</guid><description><![CDATA[<h2>9.3、 创建数据库表</h2>
<p>创建student表</p>
<div>
<p class="a">CREATE TABLE IF NOT EXISTS mydb1.student (name STRING, age INT, contact INT );</p>
</div>
<p>创建employ表</p>
<div>
<p class="a">create table employee (Id INT, name STRING, age INT,address STRING, salary BIGINT);</p>
</div>
<p>&nbsp;</p>
<h3>9.3.1、 数据库表中插入数据</h3>
<div>
<pre>insert into employee (ID,NAME,AGE,ADDRESS,SALARY)VALUES (1, 'Ramesh', 32, 'Ahmedabad', 20000 );</pre>
</div>
<p>insert <strong>into</strong> employee <strong>values</strong> (2, 'Khilan', 25, 'Delhi', 15000 );</p>
<div>
<pre>Insert into employee values (3, 'kaushik', 23, 'Kota', 30000 );</pre>
<pre>Insert into employee values (4, 'Chaitali', 25, 'Mumbai', 35000 );</pre>
<pre>Insert into employee values (5, 'Hardik', 27, 'Bhopal', 40000 );</pre>
<pre>Insert into employee values (6, 'Komal', 22, 'MP', 32000 );</pre>
</div>
<p>&nbsp;</p>
<p>数据的覆盖</p>
<div>
<pre>Insert overwrite employee values (1, 'Ram', 26, 'Vishakhapatnam', 37000 );</pre>
<pre>执行覆盖之后，表中只剩下了这一条数据了</pre>
</div>
<p>另外一种建表语句</p>
<div>
<p class="a">create table customer as select * from employee;</p>
</div>
<p>&nbsp;</p>
<h3>9.3.2、 数据的查询</h3>
<p>select * from employee;</p>
<p>select name,age from employee;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>9.3.3、 删除表</h3>
<div>
<pre>DROP table&nbsp; mydb1.employee;</pre>
</div>
<p>&nbsp;</p>
<h3>9.3.4、 清空表数据</h3>
<p>truncate&nbsp; employee;</p>
<h3>9.3.5、 创建视图</h3>
<div>
<pre>CREATE VIEW IF NOT EXISTS employee_view AS select name, age from employee;</pre>
</div>
<p>&nbsp;</p>
<h3>9.3.6、 查看视图数据</h3>
<p>select * from employee_view;</p>
<h2>9.4、 order&nbsp; by语句</h2>
<p>基础语法</p>
<div>
<pre>select * from table_name ORDER BY col_name [ASC|DESC] [NULLS FIRST|NULLS LAST]</pre>
<pre>Select * from employee ORDER BY id asc;</pre>
</div>
<p>&nbsp;</p>
<h2>9.5、group&nbsp; by&nbsp; 语句</h2>
<div>
<pre>Select name, sum(salary) from employee Group BY name;</pre>
</div>
<p>&nbsp;</p>
<h2>9.6、 having 语句</h2>
<p>基础语法</p>
<div>
<pre>select * from table_name ORDER BY col_name [ASC|DESC] [NULLS FIRST|NULLS LAST]</pre>
</div>
<p>按年龄对表进行分组，并选择每个组的最大工资，并显示大于20000的工资</p>
<p><strong>select</strong> <strong>max</strong>(salary) <strong>from</strong> employee <strong>group</strong> by age having <strong>max</strong>(salary) &gt; 20000;</p>
<p>&nbsp;</p>
<h2>9.7、 limit语句</h2>
<div>
<pre>select * from employee order by id limit 4;</pre>
</div>
<h1>10、impala当中的数据表导入几种方式</h1>
<p>第一种方式，通过load&nbsp; hdfs的数据到impala当中去</p>
<div>
<p class="a">create table user(id int ,name string,age int ) row format delimited fields terminated by "\t";</p>
</div>
<p>准备数据user.txt并上传到hdfs的 /user/impala路径下去</p>
<p>1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hello&nbsp;&nbsp; 15</p>
<p>2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; zhangsan&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20</p>
<p>3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lisi&nbsp;&nbsp;&nbsp; 30</p>
<p>4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wangwu&nbsp; 50</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>加载数据的4种方法：</p>
<p>第一种方式：</p>
<p>load data inpath '/user/impala/' into table user;</p>
<p><span style="color: #ff0000;">&nbsp;注意：没法使用load data local的方式，加载本地目录中的数据！</span></p>
<p>&nbsp;</p>
<p>查询加载的数据</p>
<p>select&nbsp; *&nbsp; from&nbsp; user;</p>
<p>如果查询不不到数据，那么需要刷新一遍数据表</p>
<p>refresh&nbsp; user;</p>
<p>&nbsp;</p>
<p>第二种方式：</p>
<p>create&nbsp; table&nbsp; user2&nbsp;&nbsp; as&nbsp;&nbsp; select * from&nbsp; user;</p>
<p>&nbsp;</p>
<p>第三种方式：</p>
<p>insert&nbsp; into</p>
<p>第四种：</p>
<p>insert&nbsp; into&nbsp; select&nbsp;</p>]]></description></item><item><title>第1节 IMPALA：8、shell交互窗口使用；9、外部和内部shell参数</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/05/11141153.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 05 Jul 2019 14:53:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/05/11141153.html</guid><description><![CDATA[<p>impala当中的元数据的同步的问题<br />impala当中创建的数据库表，直接就可以看得到，不用刷新<br />hive当中创建的数据库表，需要刷新元数据才能够看得到</p>
<p>因为impala的catalog的服务，我们需要通过刷新机制，将hive当中表的元数据信息，保存到catalog里面来，impala才能够看得到</p>
<p><span style="color: #ff0000;">=====================================================</span></p>
<h1>9、impala的使用</h1>
<h2>9.1、impala-shell语法</h2>
<h3>9.1.1、impala-shell的外部命令参数语法</h3>
<p>不需要进入到impala-shell交互命令行当中即可执行的命令参数</p>
<p>impala-shell后面执行的时候可以带很多参数：</p>
<p>-h&nbsp; 查看帮助文档</p>
<div>
<p class="a">impala-shell -h</p>
</div>
<p>&nbsp;</p>
<p>-r&nbsp; 刷新整个元数据，数据量大的时候，比较消耗服务器性能</p>
<p>impala-shell -r</p>
<p>&nbsp;</p>
<p>-B&nbsp; 去格式化，查询大量数据可以提高性能</p>
<p>&nbsp;&nbsp; --print_header&nbsp; 去格式化显示列名</p>
<p>&nbsp; --output_delimiter&nbsp; 指定分隔符</p>
<p>-v&nbsp; 查看对应版本</p>
<p>impala-shell -v -V</p>
<p>&nbsp;</p>
<p>-f&nbsp; 执行查询文件</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --query_file&nbsp;&nbsp; 指定查询文件</p>
<div>
<p class="a">cd /export/servers</p>
<p class="a">vim impala-shell.sql</p>
</div>
<p class="code">use weblog;</p>
<p class="code">select * from ods_click_pageviews limit 10;</p>
<p class="code">&nbsp;</p>
<p>通过-f 参数来执行查询文件</p>
<p>impala-shell -f impala-shell.sql</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>-i&nbsp; 连接到impalad</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --impalad&nbsp; 指定impalad去执行任务</p>
<p>-o&nbsp; 保存执行结果到文件当中去</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --output_file&nbsp; 指定输出文件名</p>
<div>
<p class="a">impala-shell -f impala-shell.sql -o hello.txt</p>
</div>
<p>&nbsp;</p>
<p>-p&nbsp; 显示查询计划</p>
<p>impala-shell -f impala-shell.sql -p</p>
<p>&nbsp;</p>
<p>-q 不使用impala-shell进行查询</p>
<p>&nbsp;</p>
<h3>9.1.2、impala-shell的内部命令行参数语法</h3>
<p>进入impala-shell命令行之后可以执行的语法</p>
<h4>help命令</h4>
<p>帮助文档</p>
<p>&nbsp;</p>
<h4>connect命令</h4>
<p>connect&nbsp; hostname 连接到某一台机器上面去执行</p>
<p>&nbsp;</p>
<h4>refresh 命令</h4>
<p>refresh dbname.tablename&nbsp; 增量刷新，刷新某一张表的元数据，主要用于刷新hive当中数据表里面的数据改变的情况</p>
<div>
<p class="a">refresh mydb.stu;</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>invalidate&nbsp; metadata 命令：</h4>
<p>invalidate&nbsp; metadata全量刷新，性能消耗较大，主要用于hive当中新建数据库或者数据库表的时候来进行刷新</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>explain 命令：</h4>
<p>用于查看sql语句的执行计划</p>
<p>explain select * from stu;</p>
<p>&nbsp;</p>
<p>explain的值可以设置成0,1,2,3等几个值，其中3级别是最高的，可以打印出最全的信息</p>
<p>set explain_level=3;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>profile命令：</h4>
<p>执行sql语句之后执行，可以打印出更加详细的执行步骤，</p>
<p>主要用于查询结果的查看，集群的调优等</p>
<p>select * from stu;</p>
<p>profile;</p>
<p>&nbsp;</p>
<p>注意:在hive窗口当中插入的数据或者新建的数据库或者数据库表，在impala当中是不可直接查询到的，需要刷新数据库，在impala-shell当中插入的数据，在impala当中是可以直接查询到的，不需要刷新数据库，其中使用的就是catalog这个服务的功能实现的，catalog是impala1.2版本之后增加的模块功能，主要作用就是同步impala之间的元数据</p>]]></description></item><item><title>第1节 IMPALA：7、impala的安装以及配置过程</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/04/11135599.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 04 Jul 2019 15:37:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/04/11135599.html</guid><description><![CDATA[<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>6、制作本地yum源</h1>
<p>镜像源是centos当中下载相关软件的地址，我们可以通过制作我们自己的镜像源指定我们去哪里下载impala的rpm包，这里我们使用httpd这个软件来作为服务端，启动httpd的服务来作为我们镜像源的下载地址</p>
<p>这里我们选用第三台机器作为镜像源的服务端</p>
<p>node03机器上执行以下命令</p>
<p class="code">yum&nbsp; -y install httpd</p>
<p class="code">service httpd start</p>
<p class="code">cd /etc/yum.repos.d</p>
<p class="code">vim localimp.repo</p>
<div>
<p class="a">[localimp]</p>
<p class="a">name=localimp</p>
<p class="a">baseurl=http://node03/cdh5.14.0/</p>
<p class="a">gpgcheck=0</p>
<p class="a">enabled=1</p>
</div>
<p>&nbsp;</p>
<p>创建apache&nbsp; httpd的读取链接</p>
<div>
<p class="a">ln -s /data02/cdh/5.14.0 /var/www/html/cdh5.14.0</p>
</div>
<p>页面访问本地yum源，出现这个界面表示本地yum源制作成功</p>
<p>&nbsp;</p>
<p>将制作好的localimp配置文件发放到所有需要安装impala的节点上去</p>
<div>
<p class="a">cd /etc/yum.repos.d/</p>
<p class="a">scp localimp.repo&nbsp; node02:$PWD</p>
<p class="a">scp localimp.repo&nbsp; node01:$PWD</p>
</div>
<h1>7、开始安装impala</h1>
<p>安装规划</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="138">
<p>服务名称</p>
</td>
<td valign="top" width="138">
<p>node01</p>
</td>
<td valign="top" width="138">
<p>node02</p>
</td>
<td valign="top" width="138">
<p>node03</p>
</td>
</tr>
<tr>
<td valign="top" width="138">
<p>impala-catalog</p>
</td>
<td valign="top" width="138">
<p>不安装</p>
</td>
<td valign="top" width="138">
<p>不安装</p>
</td>
<td valign="top" width="138">
<p>安装</p>
</td>
</tr>
<tr>
<td valign="top" width="138">
<p>impala-state-store</p>
</td>
<td valign="top" width="138">
<p>不安装</p>
</td>
<td valign="top" width="138">
<p>不安装</p>
</td>
<td valign="top" width="138">
<p>安装</p>
</td>
</tr>
<tr>
<td valign="top" width="138">
<p>impala-server</p>
</td>
<td valign="top" width="138">
<p>安装</p>
</td>
<td valign="top" width="138">
<p>安装</p>
</td>
<td valign="top" width="138">
<p>安装</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>主节点node03执行以下命令进行安装</p>
<div>
<p class="a">yum&nbsp; install&nbsp; impala -y</p>
<p class="a">yum install impala-server -y</p>
<p class="a">yum install impala-state-store&nbsp; -y</p>
<p class="a">yum install impala-catalog&nbsp; -y</p>
<p class="a">yum&nbsp; install&nbsp; impala-shell -y</p>
</div>
<p>从节点node01与node02安装以下服务</p>
<div>
<p class="a">yum install impala-server -y</p>
</div>
<p>&nbsp;</p>
<h1>8、所有节点配置impala</h1>
<h2>第一步：修改hive-site.xml</h2>
<p>node03机器修改hive-site.xml内容如下</p>
<p>hive-site.xml配置</p>
<p class="code">vim /export/servers/hive-1.1.0-cdh5.14.0/conf/hive-site.xml</p>
<div>
<p class="a">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</p>
<p class="a">&lt;configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;jdbc:mysql://node03.hadoop.com:3306/hive?createDatabaseIfNotExist=true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;root&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;123456&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;hive.cli.print.current.db&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;hive.cli.print.header&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;hive.server2.thrift.bind.host&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;node03.hadoop.com&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;hive.metastore.uris&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;thrift://node03.hadoop.com:9083&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &nbsp;&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;hive.metastore.client.socket.timeout&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;3600&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&lt;/configuration&gt;</p>
</div>
<p>&nbsp;</p>
<h2>第二步：将hive的安装包发送到node02与node01机器上</h2>
<p>在node03机器上面执行</p>
<p class="code">cd /export/servers/</p>
<p class="code">scp -r hive-1.1.0-cdh5.14.0/ node02:$PWD</p>
<p class="code">scp -r hive-1.1.0-cdh5.14.0/ node01:$PWD</p>
<h2>第三步：node03启动hive的metastore服务</h2>
<p>启动hive的metastore服务</p>
<p>node03机器启动hive的metastore服务</p>
<p class="code">cd&nbsp; /export/servers/hive-1.1.0-cdh5.14.0</p>
<p class="code">nohup bin/hive --service metastore &amp;</p>
<p class="code">nohup bin/hive -- service hiveserver2 &amp;</p>
<p>注意：一定要保证mysql的服务正常启动，否则metastore的服务不能够启动</p>
<h2>第四步：所有hadoop节点修改hdfs-site.xml添加以下内容</h2>
<p>所有节点创建文件夹</p>
<p>mkdir -p /var/run/hdfs-sockets</p>
<p>修改所有节点的hdfs-site.xml添加以下配置，修改完之后重启hdfs集群生效</p>
<p class="code">vim&nbsp; /export/servers/hadoop-2.6.0-cdh5.14.0/etc/hadoop/hdfs-site.xml</p>
<div>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.client.read.shortcircuit&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.domain.socket.path&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;/var/run/hdfs-sockets/dn&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.client.file-block-storage-locations.timeout.millis&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;10000&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;property&gt;<br />
&lt;name&gt;dfs.datanode.hdfs-blocks-metadata.enabled&lt;/name&gt;<br />
&lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>



</div>
<p>&nbsp;</p>
<p>注意：root用户不需要这一步操作了，实际工作当中普通用户需要这一步操作</p>
<div>
<p class="a">创建文件夹&nbsp; /var/run/hadoop-hdfs/</p>
<p class="a">给这个文件夹赋予权限，例如如果我们用的是普通用户，那就直接赋予普通用户的权限</p>
<p class="a">例如：</p>
<p class="a">chown&nbsp;
-R&nbsp; hadoop:hadoop&nbsp;&nbsp; /var/run/hdfs-sockets/</p>
<p class="a">因为我这里直接用的root用户，所以不需要赋权限了</p>



</div>
<h2>第五步：重启hdfs</h2>
<p>重启hdfs文件系统</p>
<p>node01服务器上面执行以下命令</p>
<p class="code">cd /export/servers/hadoop-2.6.0-cdh5.14.0/</p>
<p class="code">sbin/stop-dfs.sh</p>
<p class="code">sbin/start-dfs.sh</p>
<p>&nbsp;</p>
<h2>第六步：创建hadoop与hive的配置文件的连接</h2>
<p>impala的配置目录为&nbsp; /etc/impala/conf</p>
<p>这个路径下面需要把core-site.xml，hdfs-site.xml以及hive-site.xml拷贝到这里来，但是我们这里使用软连接的方式会更好</p>
<p>所有节点执行以下命令创建链接到impala配置目录下来</p>
<div>
<p class="a">ln -s /export/servers/hadoop-2.6.0-cdh5.14.0/etc/hadoop/core-site.xml
/etc/impala/conf/core-site.xml</p>
<p class="a">ln -s /export/servers/hadoop-2.6.0-cdh5.14.0/etc/hadoop/hdfs-site.xml
/etc/impala/conf/hdfs-site.xml</p>
<p class="a">ln -s /export/servers/hive-1.1.0-cdh5.14.0/conf/hive-site.xml
/etc/impala/conf/hive-site.xml</p>



</div>
<p>&nbsp;</p>
<h2>第七步：修改impala的配置文件</h2>
<h3>所有节点修改impala默认配置</h3>
<p>所有节点更改impala默认配置文件以及添加mysql的连接驱动包</p>
<p class="code">vim /etc/default/impala</p>
<div>
<p class="a">IMPALA_CATALOG_SERVICE_HOST=node03</p>
<p class="a">IMPALA_STATE_STORE_HOST=node03</p>



</div>
<p>所有节点创建mysql的驱动包的软连接</p>
<p>ln -s
/export/servers/hive-1.1.0-cdh5.14.0/lib/mysql-connector-java-5.1.38.jar /usr/share/java/mysql-connector-java.jar
 
</p>
<p>&nbsp;</p>
<h3>所有节点修改bigtop的java路径</h3>
<p>修改bigtop的java_home路径</p>
<p class="code">vim /etc/default/bigtop-utils</p>
<div>
<p class="a">export JAVA_HOME=/export/servers/jdk1.8.0_141</p>



</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>第八步：启动impala服务</h2>
<p>启动impala服务</p>
<p>主节点node03启动以下三个服务进程</p>
<p class="code">service impala-state-store start</p>
<p class="code">service impala-catalog start</p>
<p class="code">service impala-server start</p>
<p>&nbsp;</p>
<p>从节点启动node01与node02启动impala-server</p>
<p class="code">service&nbsp;
impala-server&nbsp; start</p>
<p>查看impala进程是否存在</p>
<p class="code">ps -ef | grep impala</p>
<p>&nbsp;</p>
<p>注意：启动之后所有关于impala的日志默认都在/var/log/impala 这个路径下，node03机器上面应该有三个进程，node02与node01机器上面只有一个进程，如果进程个数不对，去对应目录下查看报错日志</p>
<p>浏览器页面访问：</p>
<p>访问impalad的管理界面</p>
<p><a href="http://node03:25000/">http://node03:25000/</a></p>
<p>访问statestored的管理界面</p>
<p><a href="http://node03:25010/">http://node03:25010/</a></p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 IMPALA：6、yum源制作过程</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/04/11134910.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 04 Jul 2019 13:05:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/04/11134910.html</guid><description><![CDATA[<p>impala的安装：<br />第一步：下载5个G的安装包，并且上传linux，解压<br />第二步：安装httpd的服务，并启动，访问httpd就是访问我们linux的 /var/www/html这个路径下面的东西<br />第三步：开发我们本地yum的配置文件，通过配置文件连接我们的rpm的仓库  <br />	ln  -s  /data02/cdh/5.14.0   /var/www/html/cdh5.14.0  这个表示在linux当中创建一个连接文件，表示将/var/www/html/cdh5.14.0 这个文件指向/data02/cdh/5.14.0<br />	以后访问/var/www/html/cdh5.14.0  这个路径就是访问我们的rpm的仓库<br />	<br />	注意：如果rpm的仓库访问不到，两个原因，第一个就是防火墙没关闭，第二个就是selinux没关闭<br />	关闭selinux  vim  /etc/selinux/config  <br />	SELINUX=disabled</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190704210324059-795426472.png" alt="" /></p>
<p>======================================================</p>
<h1>6、制作本地yum源</h1>
<p>镜像源是centos当中下载相关软件的地址，我们可以通过制作我们自己的镜像源指定我们去哪里下载impala的rpm包，这里我们使用httpd这个软件来作为服务端，启动httpd的服务来作为我们镜像源的下载地址</p>
<p>这里我们选用第三台机器作为镜像源的服务端</p>
<p>node03机器上执行以下命令</p>
<p class="code">yum&nbsp; -y install httpd</p>
<p class="code">service httpd start</p>
<p class="code">cd /etc/yum.repos.d</p>
<p class="code">vim localimp.repo</p>
<div>
<p class="a">[localimp]</p>
<p class="a">name=localimp</p>
<p class="a">baseurl=http://node03/cdh5.14.0/</p>
<p class="a">gpgcheck=0</p>
<p class="a">enabled=1</p>
</div>
<p>&nbsp;</p>
<p>创建apache&nbsp; httpd的读取链接</p>
<div>
<p class="a">ln -s /data02/cdh/5.14.0 /var/www/html/cdh5.14.0</p>
</div>
<p>页面访问本地yum源，出现这个界面表示本地yum源制作成功</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190704210433101-1798491232.png" alt="" /></p>
<p>&nbsp;</p>
<p>将制作好的localimp配置文件发放到所有需要安装impala的节点上去</p>
<div>
<p class="a">cd /etc/yum.repos.d/</p>
<p class="a">scp localimp.repo&nbsp; node02:$PWD</p>
<p class="a">scp localimp.repo&nbsp; node01:$PWD</p>
</div>]]></description></item><item><title>第1节 IMPALA：4、5、linux磁盘的挂载和上传压缩包并解压</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/02/11123786.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 02 Jul 2019 15:23:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/02/11123786.html</guid><description><![CDATA[<h2>第二步：开机之后进行磁盘挂载</h2>
<p>分区，格式化，挂载新磁盘</p>
<p>磁盘挂载</p>
<p>&nbsp;</p>
<div>
<p class="a">df -lh</p>
<p class="a">fdisk -l</p>
<p class="a">开始分区</p>
<p class="a">fdisk /dev/sdb&nbsp;&nbsp; 这个命令执行后依次输 n&nbsp; p&nbsp; 1&nbsp; 回车&nbsp; 回车 &nbsp;w</p>
<p class="a">fdisk -l</p>
<p class="a">格式化我们的分区</p>
<p class="a">mkfs -t ext4 -c /dev/sdb1&nbsp;&nbsp; 格式化我们的分区</p>
<p class="a">mkdir /data02</p>
<p class="a">将我们的分区挂载到/data02目录下</p>
<p class="a">mount -t ext4 /dev/sdb1 /data02</p>
<p class="a">df -lh</p>
<p class="a">将我们的挂载磁盘设置开机启动，避免开机之后挂载的磁盘就没了</p>
<p class="a">echo "/dev/sdb1 /data02 ext4 defaults 0 0" &gt;&gt; /etc/fstab</p>
</div>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190702232108108-1325303689.png" alt="" /></p>
<p>&nbsp;</p>
<p>挂载完成之后，记得重新启动node03机器上面的mysql服务，datanode服务，nodemanager服务，zookeeper服务</p>
<p>启动mysql的服务命令：/etc/init.d/mysqld&nbsp; start</p>
<p>&nbsp;</p>
<h1>5、上传压缩包并解压</h1>
<p>将我们5个G的压缩文件上传/data02目录下，并进行解压</p>
<div>
<p class="a">cd /data02/</p>
<p class="a">tar -zxvf cdh5.14.0-centos6.tar.gz</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;</p>
</div>]]></description></item><item><title>第1节 IMPALA：3、impala软件的下载和linux磁盘的挂载</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/02/11123778.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 02 Jul 2019 15:20:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/02/11123778.html</guid><description><![CDATA[<p>1. impala安装软件下载：</p>
<p>http://archive.cloudera.com/cdh5/repo-as-tarball/5.14.0/</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190702231142683-1487722959.png" alt="" /></p>
<p>&nbsp;</p>
<p>2.&nbsp;linux磁盘的挂载：</p>
<p>[root@node03 ~]# df -lh<br />Filesystem            Size  Used Avail Use% Mounted on<br />/dev/mapper/VolGroup-lv_root<br />                       37G   15G   21G  43% /<br />tmpfs                 1.5G     0  1.5G   0% /dev/shm<br />/dev/sda1             477M   41M  411M  10% /boot</p>
<p>[root@node03 ~]# fdisk -l</p>
<p>Disk /dev/sda: 42.9 GB, 42949672960 bytes<br />255 heads, 63 sectors/track, 5221 cylinders<br />Units = cylinders of 16065 * 512 = 8225280 bytes<br />Sector size (logical/physical): 512 bytes / 512 bytes<br />I/O size (minimum/optimal): 512 bytes / 512 bytes<br />Disk identifier: 0x000a0ee0</p>
<p>   Device Boot      Start         End      Blocks   Id  System<br />/dev/sda1   *           1          64      512000   83  Linux<br />Partition 1 does not end on cylinder boundary.<br />/dev/sda2              64        5222    41430016   8e  Linux LVM</p>
<p>Disk /dev/sdb: 21.5 GB, 21474836480 bytes<br />255 heads, 63 sectors/track, 2610 cylinders<br />Units = cylinders of 16065 * 512 = 8225280 bytes<br />Sector size (logical/physical): 512 bytes / 512 bytes<br />I/O size (minimum/optimal): 512 bytes / 512 bytes<br />Disk identifier: 0x00000000</p>
<p><br />Disk /dev/mapper/VolGroup-lv_root: 40.3 GB, 40340815872 bytes<br />255 heads, 63 sectors/track, 4904 cylinders<br />Units = cylinders of 16065 * 512 = 8225280 bytes<br />Sector size (logical/physical): 512 bytes / 512 bytes<br />I/O size (minimum/optimal): 512 bytes / 512 bytes<br />Disk identifier: 0x00000000</p>
<p><br />Disk /dev/mapper/VolGroup-lv_swap: 2080 MB, 2080374784 bytes<br />255 heads, 63 sectors/track, 252 cylinders<br />Units = cylinders of 16065 * 512 = 8225280 bytes<br />Sector size (logical/physical): 512 bytes / 512 bytes<br />I/O size (minimum/optimal): 512 bytes / 512 bytes<br />Disk identifier: 0x00000000</p>
<p><span style="color: #ff0000;">====================================================</span></p>
<h1>4、挂载磁盘</h1>
<p>由于我们下载的tar包非常大，大概5个G，解压之后也最少需要5个G的空间，而我们的虚拟机磁盘有限，不够用了，所以我们可以为我们的虚拟机挂载一块磁盘，专门用于存储我们的tar包。</p>
<h2>第一步：虚拟机关机新增磁盘</h2>
<p>在我们的虚拟机关机的状态下，在VMware当中新增一块磁盘</p>
<h2>&nbsp;</h2>]]></description></item><item><title>第1节 IMPALA：2、架构介绍</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/02/11123627.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 02 Jul 2019 14:44:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/02/11123627.html</guid><description><![CDATA[<p>impala的架构以及查询计划：<br />	impalad :从节点  对应启动一个impala-server的进程 ，主要负责各种查询计划，官方建议与所有的datanode安装在同一台机器上面<br />	impala-statestore  :  主节点，状态存储区，主要存储了我们一些查询sql语句的执行情况<br />	impala-catalog:主节点，元数据存储区  建表信息，建库信息，表字段之间的分隔符信息，对应加载hdfs的数据路径信息<br />	</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190702224420467-1501061655.png" alt="" /></p>
<p>&nbsp;</p>
<p>impala的查询过程<br />	第一步：客户端提交查询任务，impala的某一个impalad从节点接收到这个请求<br />	第二步：查询对应的表的元数据信息，我们可以找到hdfs对应的文件路径<br />	第三步：生成单机版的查询计划，决定我们如何去查询数据<br />	第四步：单机版的查询计划，分发给其他所有的impalad的节点，一起执行查询<br />	第五步：查询结果汇总<br />	<br />impala的架构分为两个层次<br />					frontend :使用的是java语言来实现的，前台的一些界面，查询计划的生成等等<br />					backend：C++语言开发的，作为底层的查询的执行来起作用</p>
<p>===============================================</p>
<h2>impala的架构以及查询计划</h2>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190702224145802-999387173.png" alt="" /></p>
<p>&nbsp;</p>
<p>Impala的架构模块：</p>
<p>impala-server&nbsp; ==&gt;启动的守护进程，执行我们的查询计划 从节点，官方建议与所有的datanode装在一起，可以通过hadoop的短路读取特性实现数据的快速查询</p>
<p>impala-statestore&nbsp; ==》 状态存储区&nbsp; 主节点</p>
<p>impalas-catalog&nbsp;&nbsp; ==》元数据管理区&nbsp; 主节点</p>
<p align="left"><strong>查询执行</strong></p>
<p align="left">impalad分为frontend和backend两个层次， frondend用java实现（通过JNI嵌入impalad）， 负责查询计划生成， 而backend用C++实现， 负责查询执行。</p>
<p align="left">&nbsp;</p>
<p align="left"><strong>frontend</strong><strong>生成查询计划分为两个阶段：</strong></p>
<p align="left">（1）生成单机查询计划，单机执行计划与关系数据库执行计划相同，所用查询优化方法也类似。</p>
<p align="left">（2）生成分布式查询计划。 根据单机执行计划， 生成真正可执行的分布式执行计划，降低数据移动， 尽量把数据和计算放在一起。</p>
<p align="left">&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190702224122428-1268553765.png" alt="" /></p>
<p>&nbsp;</p>
<p align="left">上图是SQL查询例子， 该SQL的目标是在三表join的基础上算聚集， 并按照聚集列排序取topN。</p>
<p align="left">&nbsp;</p>
<p align="left">impala的查询优化器支持代价模型<strong>（了解）</strong>： 利用表和分区的cardinality，每列的distinct值个数等统计数据， impala可估算执行计划代价， 并生成较优的执行计划。 上图左边是frontend查询优化器生成的单机查询计划， 与传统关系数据库不同， 单机查询计划不能直接执行， 必须转换成如图右半部分所示的分布式查询计划。 该分布式查询计划共分成6个segment（图中彩色无边框圆角矩形）， 每个segment是可以被单台服务器独立执行的计划子树。</p>
<p align="left">&nbsp;</p>
<p align="left">impala支持两种分布式join方式， 表广播和哈希重分布：</p>
<p align="left">表广播方式保持一个表的数据不动， 将另一个表广播到所有相关节点（图中t3）；</p>
<p align="left">哈希重分布的原理是根据join字段哈希值重新分布两张表数据(譬如图中t1和t2）。</p>
<p align="left">&nbsp;</p>
<p align="left">分布式计划中的聚集函数分拆为两个阶段执行。第一步针对本地数据进行分组聚合（Pre-AGG）以降低数据量， 并进行数据重分步， 第二步， 进一步汇总之前的聚集结果（mergeAgg）计算出最终结果。</p>
<p align="left">&nbsp;</p>
<p align="left">与聚集函数类似， topN也是分为两个阶段执行， （1）本地排序取topN，以降低数据量； （2） merge sort得到最终topN结果。</p>
<p align="left">&nbsp;</p>
<p align="left">Backend从frontend接收plan segment并执行， 执行性能非常关键，impala采取的查询性能优化措施有向量执行。 一次getNext处理一批记录， 多个操作符可以做pipeline。LLVM编译执行， CPU密集型查询效率提升5倍以上。IO本地化。 利用HDFS short-circuit local read功能，实现本地文件读取Parquet列存，相比其他格式性能最高提升5倍。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190702224105268-1863610671.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 IMPALA：1、impala的基本介绍</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/02/11123509.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 02 Jul 2019 14:19:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/02/11123509.html</guid><description><![CDATA[<p>impala的介绍：<br />	impala是cloudera公司开源提供的一款高效率的sql查询工具<br />	impala可以兼容hive的绝大多数的语法，可以完全的替代表hive<br />	<br />impala与hive的关系：紧耦合的关系</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201907/1325651-20190702224710205-462490979.png" alt="" /></p>
<p>&nbsp;</p>
<p>impala的优点与缺点：优点：快 ，以内存空间换区时间速度，所以比较快<br />			        缺点：内存消耗比较大，官方推荐每个节点的内存128G起步<br />						  底层的实现，是基于C++，维护难度增大<br />						  与hive共存亡，紧耦合的关系<br />						  稳定性不如hive</p>
<p>===============================================</p>
<h2>通过本地yum源进行安装impala</h2>
<p>所有cloudera软件下载地址</p>
<p><a href="http://archive.cloudera.com/cdh5/cdh/5/">http://archive.cloudera.com/cdh5/cdh/5/</a></p>
<p><a href="http://archive.cloudera.com/cdh5/">http://archive.cloudera.com/cdh5/</a></p>
<p>impala是cloudera提供的一款高效率的sql查询工具，提供实时的查询效果，官方测试性能比hive快3到10倍，其sql查询比sparkSQL还要更加快速，号称是当前大数据领域最快的查询sql工具，</p>
<p>impala是参照谷歌的新三篇论文（Caffeine、Pregel、Dremel</p>
<p>）当中的Dremel实现而来，其中旧三篇论文分别是（BigTable，GFS，MapReduce）分别对应我们即将学的HBase和已经学过的HDFS以及MapReduce</p>
<p>impala是基于hive并使用内存进行计算，兼顾数据仓库，具有实时，批处理，多并发等优点</p>
<h2>impala与hive的关系</h2>
<p>impala是基于hive的大数据分析查询引擎，直接使用hive的元数据库metadata，意味着impala元数据都存储在hive的metastore当中，并且impala兼容hive的绝大多数sql语法。所以需要安装impala的话，必须先安装hive，保证hive安装成功，并且还需要启动hive的metastore服务</p>
<h2>impala的优点</h2>
<p>1、impala比较快，非常快，特别快，因为所有的计算都可以放入内存当中进行完成，只要你内存足够大</p>
<p>2、摈弃了MR的计算，改用C++来实现，有针对性的硬件优化</p>
<p>3、具有数据仓库的特性，对hive的原有数据做数据分析</p>
<p>4、支持ODBC，jdbc远程访问</p>
<h2>impala的缺点：</h2>
<p>1、基于内存计算，对内存依赖性较大</p>
<p>2、改用C++编写，意味着维护难度增大</p>
<p>3、基于hive，与hive共存亡，紧耦合</p>
<p>4、稳定性不如hive，不存在数据丢失的情况</p>]]></description></item><item><title>nohup command 2&gt;&amp;1 &amp; 的含义</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/07/02/11117814.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 01 Jul 2019 17:05:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/07/02/11117814.html</guid><description><![CDATA[<p>nohup command 2&gt;&amp;1 &amp;的含义：</p>
<p>&nbsp;</p>
<p>nohup：no hang up，意思是不挂断。表示永久执行命令，哪怕当前终端已经退出登录。</p>
<p>　　并且命令前面添加nohup之后，会把原来打印到屏幕上的信息都追加到nohup.out文件中。（nohup: ignoring input and appending output to `nohup.out'）</p>
<p>&amp;：后台执行命令。</p>
<p>&nbsp;</p>
<p>2&gt;&amp;1：</p>
<p>在bash shell中，</p>
<p>0代表标准输入，一般是键盘录入；</p>
<p>1代表标准输出,一般是屏幕；</p>
<p>2代表标准错误；</p>
<p>因此当命令使用nohup &amp;运行以后，标准都错误都输出到2去了，console上看不到输出的错误。</p>
<p>因此，2&gt;&amp;1，起到了一个重定向都作用，将标准错误重定向到标准输出上去，后台运行的程序就可以在屏幕上看到程序输出的错误了。</p>
<p>&nbsp;</p>
<p>eg.&nbsp;nohup bin/hive --service hiveserver2 2&gt;&amp;1 &amp;</p>]]></description></item><item><title>第2节 网站点击流项目(下)：9、10、11、模块开发，数据可视化。</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/30/11111221.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 30 Jun 2019 13:06:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/30/11111221.html</guid><description><![CDATA[<p>模块开发，数据可视化。</p>
<p>详见代码。</p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 网站点击流项目(下)：8、结果的导出以及工作流的调度工作</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/30/11108485.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 29 Jun 2019 17:47:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/30/11108485.html</guid><description><![CDATA[<p>利用sqoop导出数据到mysql：</p>
<p>eg. dw_pvs_everyday<br />DROP TABLE IF EXISTS `dw_pvs_everyhour_oneday`;<br />CREATE TABLE `dw_pvs_everyhour_oneday` (<br />  `month` varchar(32) DEFAULT NULL,<br />  `day` varchar(32) DEFAULT NULL,<br />  `hour` varchar(32) DEFAULT NULL,<br />  `pvs` varchar(32) DEFAULT NULL<br />) ENGINE=InnoDB DEFAULT CHARSET=utf8;</p>
<p>bin/sqoop export --connect jdbc:mysql://node03:3306/weblog --username root --password root -m 1 --export-dir /user/hive/warehouse/weblog.db/dw_pvs_everyday --table dw_pvs_everyday --input-fields-terminated-by '\001';</p>
<p>&nbsp;</p>
<p>工作流的调度工作：</p>
<p>程序调度一共分为以下步骤：</p>
<p>第一步：第一个MR程序执行</p>
<p>第二步：第二个MR程序执行</p>
<p>第三步：第三个MR程序执行</p>
<p>第四步：hive表数据加载</p>
<p>第五步：hive表数据分析</p>
<p>第六步：分析结果通过sqoop导出</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190630105634576-1872761951.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 网站点击流项目(下)：7、hive的级联求和</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/30/11108484.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 29 Jun 2019 17:46:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/30/11108484.html</guid><description><![CDATA[<h2>一、hive级联求和的简单例子：</h2>
<p>create table t_salary_detail(username string,month string,salary int)<br />row format delimited fields terminated by ',';</p>
<p>load data local inpath '/export/servers/hivedatas/accumulate/t_salary_detail.dat' into table t_salary_detail;</p>
<p>用户	时间	收到小费金额<br />A,2015-01,5<br />A,2015-01,15<br />B,2015-01,5<br />A,2015-01,8<br />B,2015-01,25<br />A,2015-01,5<br />A,2015-02,4<br />A,2015-02,6<br />B,2015-02,10<br />B,2015-02,5<br />A,2015-03,7<br />A,2015-03,9<br />B,2015-03,11<br />B,2015-03,6</p>
<p><br />需求：统计每个用户每个月总共获得多少小费</p>
<p>select t.month,t.username,sum(salary) as salSum<br />from t_salary_detail t <br />group by t.username,t.month;</p>
<p>+----------+-------------+---------+--+<br />| t.month  | t.username  | salsum  |<br />+----------+-------------+---------+--+<br />| 2015-01  | A           | 33      | <br />| 2015-02  | A           | 10      | <br />| 2015-03  | A           | 16      | <br />| 2015-01  | B           | 30      | <br />| 2015-02  | B           | 15      | <br />| 2015-03  | B           | 17      | <br />+----------+-------------+---------+--+</p>
<p><br />需求：统计每个用户累计小费<br />select t.username,sum(salary) as salSum<br />from t_salary_detail t <br />group by t.username;</p>
<p>+----------+-------------+---------+--+<br />| t.month  | t.username  | salsum  | 累计小费<br />+----------+-------------+---------+--+<br />| 2015-01  | A           | 33      |  33<br />| 2015-02  | A           | 10      |  43<br />| 2015-03  | A           | 16      |  59<br />| 2015-01  | B           | 30      |  30<br />| 2015-02  | B           | 15      |  45<br />| 2015-03  | B           | 17      |  62<br />+----------+-------------+---------+--+</p>
<p>第一步：求每个用户的每个月的小费总和</p>
<p>select t.month,t.username,sum(salary) as salSum<br />from t_salary_detail t <br />group by t.username,t.month;</p>
<p>+----------+-------------+---------+--+<br />| t.month  | t.username  | salsum  |<br />+----------+-------------+---------+--+<br />| 2015-01  | A           | 33      |<br />| 2015-02  | A           | 10      |<br />| 2015-03  | A           | 16      |<br />| 2015-01  | B           | 30      |<br />| 2015-02  | B           | 15      |<br />| 2015-03  | B           | 17      |<br />+----------+-------------+---------+--+</p>
<p>&nbsp;</p>
<p><br />第二步：使用inner join 实现自己连接自己</p>
<p>select<br />A.* ,B.*<br />from<br />(select t.month,t.username,sum(salary) as salSum<br />from t_salary_detail t <br />group by t.username,t.month) A<br />inner join <br />(select t.month,t.username,sum(salary) as salSum<br />from t_salary_detail t <br />group by t.username,t.month) B<br />on A.username = B.username;</p>
<p>+----------+-------------+-----------+----------+-------------+-----------+--+<br />| a.month  | a.username  | a.salsum  | b.month  | b.username  | b.salsum  |<br />+----------+-------------+-----------+----------+-------------+-----------+--+<br />取这一个作为一组<br />| 2015-01  | A           | 33        | 2015-01  | A           | 33        |</p>
<p>| 2015-01  | A           | 33        | 2015-02  | A           | 10        |<br />| 2015-01  | A           | 33        | 2015-03  | A           | 16        |<br />取这两个作为一组<br />| 2015-02  | A           | 10        | 2015-01  | A           | 33        |<br />| 2015-02  | A           | 10        | 2015-02  | A           | 10        |</p>
<p>| 2015-02  | A           | 10        | 2015-03  | A           | 16        |<br />取这三个作为一组<br />| 2015-03  | A           | 16        | 2015-01  | A           | 33        |<br />| 2015-03  | A           | 16        | 2015-02  | A           | 10        |<br />| 2015-03  | A           | 16        | 2015-03  | A           | 16        |</p>
<p><br />| 2015-01  | B           | 30        | 2015-01  | B           | 30        |<br />| 2015-01  | B           | 30        | 2015-02  | B           | 15        |<br />| 2015-01  | B           | 30        | 2015-03  | B           | 17        |<br />| 2015-02  | B           | 15        | 2015-01  | B           | 30        |<br />| 2015-02  | B           | 15        | 2015-02  | B           | 15        |<br />| 2015-02  | B           | 15        | 2015-03  | B           | 17        |<br />| 2015-03  | B           | 17        | 2015-01  | B           | 30        |<br />| 2015-03  | B           | 17        | 2015-02  | B           | 15        |<br />| 2015-03  | B           | 17        | 2015-03  | B           | 17        |<br />+----------+-------------+-----------+----------+-------------+-----------+--+</p>
<p><br />每一步相对于上一步的结果</p>
<p><br />加参数继续变形<br />select<br />A.* ,B.*<br />from<br />(select t.month,t.username,sum(salary) as salSum<br />from t_salary_detail t <br />group by t.username,t.month) A<br />inner join <br />(select t.month,t.username,sum(salary) as salSum<br />from t_salary_detail t <br />group by t.username,t.month) B<br />on A.username = B.username<br />where B.month &lt;= A.month;</p>
<p>+----------+-------------+-----------+----------+-------------+-----------+--+<br />| a.month  | a.username  | a.salsum  | b.month  | b.username  | b.salsum  |<br />+----------+-------------+-----------+----------+-------------+-----------+--+<br />| 2015-01  | A           | 33        | 2015-01  | A           | 33        |   33</p>
<p>| 2015-02  | A           | 10        | 2015-01  | A           | 33        |   43<br />| 2015-02  | A           | 10        | 2015-02  | A           | 10        |</p>
<p>| 2015-03  | A           | 16        | 2015-01  | A           | 33        |   59<br />| 2015-03  | A           | 16        | 2015-02  | A           | 10        |<br />| 2015-03  | A           | 16        | 2015-03  | A           | 16        |</p>
<p>| 2015-01  | B           | 30        | 2015-01  | B           | 30        |    30</p>
<p>| 2015-02  | B           | 15        | 2015-01  | B           | 30        |   45<br />| 2015-02  | B           | 15        | 2015-02  | B           | 15        |</p>
<p>| 2015-03  | B           | 17        | 2015-01  | B           | 30        |   62<br />| 2015-03  | B           | 17        | 2015-02  | B           | 15        |<br />| 2015-03  | B           | 17        | 2015-03  | B           | 17        |<br />+----------+-------------+-----------+----------+-------------+-----------+--+</p>
<p>&nbsp;</p>
<p>第三步：从第二步的结果中继续通过a.month与a.username进行分组,并对分组后的b.salsum进行累加求和即可</p>
<p>select<br />A.username,A.month,max(A.salSum),sum(B.salSum) as accumulate<br />from<br />(select t.month,t.username,sum(salary) as salSum from t_salary_detail t group by t.username,t.month) A<br />inner join <br />(select t.month,t.username,sum(salary) as salSum from t_salary_detail t group by t.username,t.month) B<br />on A.username = B.username<br />where B.month &lt;= A.month<br />group by A.username,A.month<br />order by A.username,A.month;</p>
<p>累计的小费进行求和<br />+-------------+----------+------+-------------+--+<br />| a.username  | a.month  | _c2  | accumulate  |<br />+-------------+----------+------+-------------+--+<br />| A           | 2015-01  | 33   | 33          |<br />| A           | 2015-02  | 10   | 43          |<br />| A           | 2015-03  | 16   | 59          |<br />| B           | 2015-01  | 30   | 30          |<br />| B           | 2015-02  | 15   | 45          |<br />| B           | 2015-03  | 17   | 62          |<br />+-------------+----------+------+-------------+--+</p>
<p>&nbsp;</p>
<h2>二、路径转换（漏斗模型）</h2>
<p>0: jdbc:hive2://node03:10000&gt; select * from ods_click_pageviews limit 10;<br />+---------------------------------------+----------------------------------+----------------------------------+---------------------------------+------------------------------+---------------------------------+------------------------------------+----------------------------------------------------+----------------------------------------------------+--------------------------------------+-----------------------------+------------------------------+--+<br />|      ods_click_pageviews.session      | ods_click_pageviews.remote_addr  | ods_click_pageviews.remote_user  | ods_click_pageviews.time_local  | ods_click_pageviews.request  | ods_click_pageviews.visit_step  | ods_click_pageviews.page_staylong  |          ods_click_pageviews.http_referer          |        ods_click_pageviews.http_user_agent         | ods_click_pageviews.body_bytes_sent  | ods_click_pageviews.status  | ods_click_pageviews.datestr  |<br />+---------------------------------------+----------------------------------+----------------------------------+---------------------------------+------------------------------+---------------------------------+------------------------------------+----------------------------------------------------+----------------------------------------------------+--------------------------------------+-----------------------------+------------------------------+--+<br />| 9ff03c4c-25f4-43fc-b3e0-08ea88b38fcc  | 1.80.249.223                     | -                                | 2013-09-18 07:57:33             | /hadoop-hive-intro/          | 1                               | 60                                 | "http://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=hive%E7%9A%84%E5%AE%89%E8%A3%85&amp;source=web&amp;cd=2&amp;ved=0CC4QFjAB&amp;url=%68%74%74%70%3a%2f%2f%62%6c%6f%67%2e%66%65%6e%73%2e%6d%65%2f%68%61%64%6f%6f%70%2d%68%69%76%65%2d%69%6e%74%72%6f%2f&amp;ei=5lw5Uo-2NpGZiQfCwoG4BA&amp;usg=AFQjCNF8EFxPuCMrm7CvqVgzcBUzrJZStQ&amp;bvm=bv.52164340,d.aGc&amp;cad=rjt" | "Mozilla/5.0(WindowsNT5.2;rv:23.0)Gecko/20100101Firefox/23.0" | 14764                                | 200                         | 20130918                     |<br />| ba46b150-ca63-47d1-9cdd-e278df01f5d3  | 101.226.167.201                  | -                                | 2013-09-18 09:30:36             | /hadoop-mahout-roadmap/      | 1                               | 60                                 | "http://blog.fens.me/hadoop-mahout-roadmap/"       | "Mozilla/4.0(compatible;MSIE8.0;WindowsNT6.1;Trident/4.0;SLCC2;.NETCLR2.0.50727;.NETCLR3.5.30729;.NETCLR3.0.30729;MediaCenterPC6.0;MDDR;.NET4.0C;.NET4.0E;.NETCLR1.1.4322;TabletPC2.0);360Spider" | 10335                                | 200                         | 20130918                     |<br />| 30e183c4-e03d-4a5a-b5ba-55fff2ea1be1  | 101.226.167.205                  | -                                | 2013-09-18 09:30:32             | /hadoop-family-roadmap/      | 1                               | 60                                 | "http://blog.fens.me/hadoop-family-roadmap/"       | "Mozilla/4.0(compatible;MSIE8.0;WindowsNT6.1;Trident/4.0;SLCC2;.NETCLR2.0.50727;.NETCLR3.5.30729;.NETCLR3.0.30729;MediaCenterPC6.0;MDDR;.NET4.0C;.NET4.0E;.NETCLR1.1.4322;TabletPC2.0);360Spider" | 11715                                | 200                         | 20130918                     |<br />| ea77f279-451d-4efa-8a7f-3d321675ad4d  | 101.226.169.215                  | -                                | 2013-09-18 10:07:31             | /about                       | 1                               | 60                                 | "http://blog.fens.me/about"                        | "Mozilla/4.0(compatible;MSIE8.0;WindowsNT6.1;Trident/4.0;SLCC2;.NETCLR2.0.50727;.NETCLR3.5.30729;.NETCLR3.0.30729;MediaCenterPC6.0;MDDR;.NET4.0C;.NET4.0E;.NETCLR1.1.4322;TabletPC2.0);360Spider" | 5                                    | 301                         | 20130918                     |<br />| bbe902cb-9496-46fe-b201-2065996373c3  | 110.211.10.14                    | -                                | 2013-09-18 13:31:10             | /hadoop-mahout-roadmap/      | 1                               | 60                                 | "http://f.dataguru.cn/forum.php?mod=viewthread&amp;tid=175501" | "Mozilla/4.0(compatible;MSIE8.0;WindowsNT6.1;WOW64;Trident/4.0;SLCC2;.NETCLR2.0.50727;.NETCLR3.5.30729;.NETCLR3.0.30729;MALN;InfoPath.2;.NET4.0C;MediaCenterPC6.0)" | 10335                                | 200                         | 20130918                     |<br />| 1646b21a-a2d6-40ef-ab7a-56496ba0e493  | 111.161.17.104                   | -                                | 2013-09-18 12:17:25             | /hadoop-hive-intro/          | 1                               | 60                                 | "http://blog.fens.me/series-hadoop-cloud/"         | "Mozilla/5.0(WindowsNT6.2;WOW64)AppleWebKit/537.36(KHTML,likeGecko)Chrome/29.0.1547.66Safari/537.36" | 14763                                | 200                         | 20130918                     |<br />| d8261f93-be31-45a9-82d9-094657157468  | 111.193.224.9                    | -                                | 2013-09-18 07:17:25             | /hadoop-family-roadmap/      | 1                               | 60                                 | "https://www.google.com.hk/"                       | "Mozilla/5.0(Macintosh;IntelMacOSX10_8_5)AppleWebKit/537.36(KHTML,likeGecko)Chrome/29.0.1547.57Safari/537.36" | 11715                                | 200                         | 20130918                     |<br />| a854f511-3ca9-406b-8a34-5c9cc6a61782  | 112.65.193.16                    | -                                | 2013-09-18 08:48:31             | /hadoop-mahout-roadmap/      | 1                               | 60                                 | "-"                                                | "Mozilla/4.0"                                      | 38590                                | 200                         | 20130918                     |<br />| 01c87dee-e91c-4ad7-b3cc-0c121bc03806  | 113.107.237.31                   | -                                | 2013-09-18 09:06:46             | /finance-rhive-repurchase/   | 1                               | 60                                 | "-"                                                | "-"                                                | 45271                                | 200                         | 20130918                     |<br />| f8660978-9b1e-414b-a075-c04f1cb7197a  | 113.90.232.163                   | -                                | 2013-09-19 00:58:00             | /hadoop-mahout-roadmap/      | 1                               | 60                                 | "http://h2w.iask.cn/jump.php?url=http%3A%2F%2Fblog.fens.me%2Fhadoop-mahout-roadmap%2F" | "Mozilla/5.0(iPhone;CPUiPhoneOS6_0_1likeMacOSX)AppleWebKit/536.26(KHTML,likeGecko)Mobile/10A523" | 10321                                | 200                         | 20130918                     |<br />+---------------------------------------+----------------------------------+----------------------------------+---------------------------------+------------------------------+---------------------------------+------------------------------------+----------------------------------------------------+----------------------------------------------------+--------------------------------------+-----------------------------+------------------------------+--+</p>
<p><br />求两个指标：<br />	第一个指标：每一步相对于第一步的转化率<br />	第二个指标：每一步相对于上一步的转化率</p>
<p><br /># 使用模型生成的数据，可以满足我们的转化率的求取<br />load data inpath '/weblog/clickstream/pageviews/click-part-r-00000' overwrite into table ods_click_pageviews partition(datestr='20130920');<br />load data local inpath '/export/servers/hivedatas/click-part-r-00000' overwrite into table ods_click_pageviews partition(datestr='20130920');</p>
<p>----------------------------------------------------------<br />---1、查询每一个步骤的总访问人数</p>
<p>Step1、  /item                     1000          相对上一步        相对第一步   1000<br />Step2、  /category                 800             0.8              0.8         1800<br />Step3、  /index                    500             0.625            0.5          2300<br />Step4、  /order                    100             0.2              0.1          2400</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>create table dw_oute_numbs as <br />select 'step1' as step,count(distinct remote_addr)  as numbs from ods_click_pageviews <br />where datestr='20130920' <br />and request like '/item%'<br />union all<br />select 'step2' as step,count(distinct remote_addr)  as numbs from ods_click_pageviews <br />where datestr='20130920' <br />and request like '/category%'<br />union all<br />select 'step3' as step,count(distinct remote_addr)  as numbs from ods_click_pageviews where datestr='20130920' <br />and request like '/order%'<br />union all<br />select 'step4' as step,count(distinct remote_addr)  as numbs from ods_click_pageviews where datestr='20130920' <br />and request like '/index%';</p>
<p><br />+---------------------+----------------------+--+<br />| dw_oute_numbs.step  | dw_oute_numbs.numbs  |<br />+---------------------+----------------------+--+<br />| step1               | 1029                 |<br />| step2               | 1029                 |<br />| step3               | 1028                 |<br />| step4               | 1018                 |<br />+---------------------+----------------------+--+</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>----------------------------------------------------------------------------<br />--2、查询每一步骤相对于路径起点人数的比例<br />--级联查询，自己跟自己join</p>
<p>select rn.step as rnstep,rn.numbs as rnnumbs,rr.step as rrstep,rr.numbs as rrnumbs  <br />from dw_oute_numbs rn<br />inner join <br />dw_oute_numbs rr;</p>
<p>自join后结果如下图所示：<br />每一步相对于第一步的转化率</p>
<p><br />+---------+----------+---------+----------+--+<br />| rnstep  | rnnumbs  | rrstep  | rrnumbs  |<br />+---------+----------+---------+----------+--+<br />| step1   | 1029     | step1   | 1029     |<br />| step2   | 1029     | step1   | 1029     |<br />| step3   | 1028     | step1   | 1029     |<br />| step4   | 1018     | step1   | 1029     |<br />| step1   | 1029     | step2   | 1029     |<br />| step2   | 1029     | step2   | 1029     |<br />| step3   | 1028     | step2   | 1029     |<br />| step4   | 1018     | step2   | 1029     |<br />| step1   | 1029     | step3   | 1028     |<br />| step2   | 1029     | step3   | 1028     |<br />| step3   | 1028     | step3   | 1028     |<br />| step4   | 1018     | step3   | 1028     |<br />| step1   | 1029     | step4   | 1018     |<br />| step2   | 1029     | step4   | 1018     |<br />| step3   | 1028     | step4   | 1018     |<br />| step4   | 1018     | step4   | 1018     |<br />+---------+----------+---------+----------+--+</p>
<p>过滤只取step1的所有的数据<br />select tempTab.rnnumbs/tempTab.rrnumbs from (<br />select rn.step as rnstep,rn.numbs as rnnumbs,rr.step as rrstep,rr.numbs as rrnumbs  <br />from dw_oute_numbs rn<br />inner join <br />dw_oute_numbs rr where rr.step = 'step1'<br />) tempTab;</p>
<p>&nbsp;</p>
<p><br />--每一步的人数/第一步的人数==每一步相对起点人数比例<br />select tmp.rnstep,tmp.rnnumbs/tmp.rrnumbs as ratio<br />from(<br />select rn.step as rnstep,rn.numbs as rnnumbs,rr.step as rrstep,rr.numbs as rrnumbs  from dw_oute_numbs rn<br />inner join <br />dw_oute_numbs rr) tmp<br />where tmp.rrstep='step1';</p>
<p>简化sql语句；<br />select a.step,a.numbs/b.numbs compareFirst from dw_oute_numbs a,dw_oute_numbs b <br />where b.step='step1'<br />order by a.step;<br />+---------+---------------------+--+<br />| a.step  |    comparefirst     |<br />+---------+---------------------+--+<br />| step1   | 1.0                 |<br />| step2   | 1.0                 |<br />| step3   | 0.9990281827016521  |<br />| step4   | 0.989310009718173   |<br />+---------+---------------------+--+</p>
<p>--------------------------------------------------------------------------------<br />--3、查询每一步骤相对于上一步骤的漏出率<br />--首先通过自join表过滤出每一步跟上一步的记录</p>
<p><br />select rn.step as rnstep,rn.numbs as rnnumbs,rr.step as rrstep,rr.numbs as rrnumbs  <br />from dw_oute_numbs rn<br />inner join <br />dw_oute_numbs rr<br />where cast(substr(rn.step,5,1) as int)=cast(substr(rr.step,5,1) as int)-1;</p>
<p>select newTable.rnnumbs/newTable.rrnumbs from (<br />select * from (<br />select rn.step as rnstep,rn.numbs as rnnumbs,rr.step as rrstep,rr.numbs as rrnumbs  <br />from dw_oute_numbs rn<br />inner join <br />dw_oute_numbs rr <br />) tmpTable<br />where  cast(substr(tmpTable.rrStep,5,1) as int ) =  cast(substr(tmpTable.rnstep,5,1) as int )-1<br />) newTable </p>
<p><br />where temTable.rrstep.截串  &gt;= temTable.rnstep.截串</p>
<p>注意：cast为hive的内置函数，主要用于类型的转换<br />用例：<br />select  cast(1 as  float);<br />select  cast('2018-06-22' as date);</p>
<p><br />+---------+----------+---------+----------+--+<br />| rnstep  | rnnumbs  | rrstep  | rrnumbs  |<br />+---------+----------+---------+----------+--+<br />| step1   | 1029     | step2   | 1029     |<br />| step2   | 1029     | step3   | 1028     |<br />| step3   | 1028     | step4   | 1018     |<br />+---------+----------+---------+----------+--+</p>
<p>--然后就可以非常简单的计算出每一步相对上一步的漏出率<br />select tmp.rrstep as step,tmp.rrnumbs/tmp.rnnumbs as leakage_rate<br />from<br />(<br />select rn.step as rnstep,rn.numbs as rnnumbs,rr.step as rrstep,rr.numbs as rrnumbs  <br />from dw_oute_numbs rn<br />inner join <br />dw_oute_numbs rr<br />) tmp<br />where cast(substr(tmp.rnstep,5,1) as int)=cast(substr(tmp.rrstep,5,1) as int)-1;</p>
<p><br />我的思路：<br />-- cast('123' AS FLOAT);字符串显示转换为浮点数 <br />select a.step,a.numbs,b.step,b.numbs,case when a.numbs is null then '相对上一步' else b.numbs/a.numbs end compareLast <br />from dw_oute_numbs a <br />right outer join dw_oute_numbs b <br />on regexp_replace(b.step,'step','')=regexp_replace(a.step,'step','')+1  --regexp_replace函数改为substr(b.step,5,1)=substr(a.step,5,1)+1，不用正则表达式，可以提高效率<br />order by b.step;<br />+---------+----------+---------+----------+---------------------+--+<br />| a.step  | a.numbs  | b.step  | b.numbs  |     comparelast     |<br />+---------+----------+---------+----------+---------------------+--+<br />| NULL    | NULL     | step1   | 1029     | 相对前一步               |<br />| step1   | 1029     | step2   | 1029     | 1.0                 |<br />| step2   | 1029     | step3   | 1028     | 0.9990281827016521  |<br />| step3   | 1028     | step4   | 1018     | 0.9902723735408561  |<br />+---------+----------+---------+----------+---------------------+--+</p>
<p><br />-----------------------------------------------------------------------------------<br />--4、汇总以上两种指标<br />select abs.step,abs.numbs,abs.rate as abs_ratio,rel.rate as leakage_rate<br />from <br />(<br />select tmp.rnstep as step,tmp.rnnumbs as numbs,tmp.rnnumbs/tmp.rrnumbs as rate<br />from<br />(<br />select rn.step as rnstep,rn.numbs as rnnumbs,rr.step as rrstep,rr.numbs as rrnumbs  from dw_oute_numbs rn<br />inner join <br />dw_oute_numbs rr) tmp<br />where tmp.rrstep='step1'<br />) abs<br />left outer join<br />(<br />select tmp.rrstep as step,tmp.rrnumbs/tmp.rnnumbs as rate<br />from<br />(<br />select rn.step as rnstep,rn.numbs as rnnumbs,rr.step as rrstep,rr.numbs as rrnumbs  from dw_oute_numbs rn<br />inner join <br />dw_oute_numbs rr) tmp<br />where cast(substr(tmp.rnstep,5,1) as int)=cast(substr(tmp.rrstep,5,1) as int)-1<br />) rel<br />on abs.step=rel.step;</p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 网站点击流项目(下)：6、访客visit分析</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/29/11108321.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 29 Jun 2019 15:45:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/29/11108321.html</guid><description><![CDATA[<p>0: jdbc:hive2://node03:10000&gt; select * from ods_click_stream_visit limit 2;<br />+---------------------------------------+-------------------------------------+--------------------------------+---------------------------------+--------------------------------+---------------------------------+------------------------------------------------+------------------------------------+---------------------------------+--+<br />|    ods_click_stream_visit.session     | ods_click_stream_visit.remote_addr  | ods_click_stream_visit.intime  | ods_click_stream_visit.outtime  | ods_click_stream_visit.inpage  | ods_click_stream_visit.outpage  |         ods_click_stream_visit.referal         | ods_click_stream_visit.pagevisits  | ods_click_stream_visit.datestr  |<br />+---------------------------------------+-------------------------------------+--------------------------------+---------------------------------+--------------------------------+---------------------------------+------------------------------------------------+------------------------------------+---------------------------------+--+<br />| 01c87dee-e91c-4ad7-b3cc-0c121bc03806  | 113.107.237.31                      | 2013-09-18 09:06:46            | 2013-09-18 09:06:46             | /finance-rhive-repurchase/     | /finance-rhive-repurchase/      | "-"                                            | 1                                  | 20130918                        |<br />| 06bb3ecb-f2b1-4b83-ba30-cf0ed51dd5e3  | 115.236.11.194                      | 2013-09-18 12:25:57            | 2013-09-18 12:25:57             | /hadoop-mahout-roadmap/        | /hadoop-mahout-roadmap/         | "http://f.dataguru.cn/thread-177375-1-1.html"  | 1                                  | 20130918                        |<br />+---------------------------------------+-------------------------------------+--------------------------------+---------------------------------+--------------------------------+---------------------------------+------------------------------------------------+------------------------------------+---------------------------------+--+</p>
<p><br />--  回头/单次访客统计</p>
<p><br />select remote_addr,count(remote_addr) ipcount<br />from  ods_click_stream_visit<br />group by remote_addr<br />having ipcount &gt; 1; </p>
<p><br />查询今日所有回头访客及其访问次数。</p>
<p><br />drop table dw_user_returning;<br />create table dw_user_returning(<br />day string,<br />remote_addr string,<br />acc_cnt string)<br />partitioned by (datestr string);</p>
<p>insert overwrite table dw_user_returning partition(datestr='20130918')<br />select '20130918' as day,remote_addr,count(session) as acc_cnt from ods_click_stream_visit <br />group by remote_addr having acc_cnt &gt; 1;</p>
<p><br />------------------------------------------------------------------------------------<br />-- 人均访问频次,使用所有的独立访问的人，即独立的session个数除以所有的去重IP即可</p>
<p>-- 人均访问的频次，频次表示我们来了多少个session<br />--  次数都是使用session来进行区分，一个session就是表示一次<br />select count(session)/count(distinct remote_addr) from ods_click_stream_visit where datestr='20130918';</p>
<p>select count(1) <br />from ods_click_stream_visit<br />where datestr ='20130918';</p>
<p><br />-- 人均页面浏览量，所有的页面点击次数累加除以所有的独立去重IP总和即可<br />select sum(pagevisits)/count(distinct remote_addr) from ods_click_stream_visit where datestr='20130918';</p>]]></description></item><item><title>第2节 网站点击流项目(下)：5、访客分析</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/29/11107461.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 29 Jun 2019 10:35:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/29/11107461.html</guid><description><![CDATA[<p>-- 独立访客<br />--需求：按照时间维度来统计独立访客及其产生的pv量</p>
<p> 按照时间维度比如小时来统计独立访客及其产生的 pv 。</p>
<p><br />时间维度：时<br />drop table dw_user_dstc_ip_h;<br />create table dw_user_dstc_ip_h(<br />remote_addr string,<br />pvs      bigint,<br />hour     string);</p>
<p>insert into table dw_user_dstc_ip_h <br />select remote_addr,count(1) as pvs,concat(month,day,hour) as hour <br />from ods_weblog_detail<br />Where datestr='20130918'<br />group by concat(month,day,hour),remote_addr;</p>
<p><br />--在上述基础之上，可以继续分析，比如每小时独立访客总数<br />select count(1) as dstc_ip_cnts,hour from dw_user_dstc_ip_h group by hour;</p>
<p><br />时间维度：日<br />select remote_addr,count(1) as counts,concat(month,day) as day<br />from ods_weblog_detail<br />Where datestr='20130918'<br />group by concat(month,day),remote_addr;</p>
<p><br />时间维度： 月<br />select remote_addr,count(1) as counts,month <br />from ods_weblog_detail<br />group by month,remote_addr;</p>
<p>----------------------------------------------------------------------------------------<br />-- 每日新访客<br />-- 需求：将每天的新访客统计出来。</p>
<p>--历史去重访客累积表<br />drop table dw_user_dsct_history;<br />create table dw_user_dsct_history(<br />day string,<br />ip string)<br />partitioned by(datestr string);</p>
<p>--每日新访客表<br />drop table dw_user_new_d;<br />create table dw_user_new_d (<br />day string,<br />ip string) <br />partitioned by(datestr string);</p>
<p>&nbsp;</p>
<p><br />select a.remote_addr ,a.day<br />from (<br />select   remote_addr,'20130918' as day <br />from ods_weblog_detail newIp<br />where datestr ='20130918'<br />group by remote_addr<br />) a <br />left join dw_user_dsct_history hist<br />on a.remote_addr = hist.ip<br />where hist.ip is null;</p>
<p>&nbsp;</p>
<p><br />--每日新用户插入新访客表（写的太麻烦，有空优化之）<br />insert into table dw_user_new_d partition(datestr='20130918')<br />select tmp.day as day,tmp.today_addr as new_ip <br />from<br />(<br />select today.day as day,today.remote_addr as today_addr,old.ip as old_addr <br />from <br />(<br />select distinct remote_addr as remote_addr,"20130918" as day <br />from ods_weblog_detail where datestr="20130918"<br />) today<br />left outer join <br />dw_user_dsct_history old<br />on today.remote_addr=old.ip<br />) tmp<br />where tmp.old_addr is null;</p>
<p>--每日新用户追加到历史累计表<br />insert into table dw_user_dsct_history partition(datestr='20130918')<br />select day,ip from dw_user_new_d where datestr='20130918';</p>
<p><br />验证：<br />select count(distinct remote_addr) from ods_weblog_detail;</p>
<p>select count(1) from dw_user_dsct_history where datestr='20130918';</p>
<p>select count(1) from dw_user_new_d where datestr='20130918';</p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 网站点击流项目(下)：4、受访分析</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/29/11107376.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 29 Jun 2019 10:02:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/29/11107376.html</guid><description><![CDATA[<h2>2． 受访分析（从页面的角度分析）</h2>
<p>select * from ods_click_pageviews limit 2;<br />+---------------------------------------+----------------------------------+----------------------------------+---------------------------------+------------------------------+---------------------------------+------------------------------------+----------------------------------------------------+----------------------------------------------------+--------------------------------------+-----------------------------+------------------------------+--+<br />|      ods_click_pageviews.session      | ods_click_pageviews.remote_addr  | ods_click_pageviews.remote_user  | ods_click_pageviews.time_local  | ods_click_pageviews.request  | ods_click_pageviews.visit_step  | ods_click_pageviews.page_staylong  |          ods_click_pageviews.http_referer          |        ods_click_pageviews.http_user_agent         | ods_click_pageviews.body_bytes_sent  | ods_click_pageviews.status  | ods_click_pageviews.datestr  |<br />+---------------------------------------+----------------------------------+----------------------------------+---------------------------------+------------------------------+---------------------------------+------------------------------------+----------------------------------------------------+----------------------------------------------------+--------------------------------------+-----------------------------+------------------------------+--+<br />| 9ff03c4c-25f4-43fc-b3e0-08ea88b38fcc  | 1.80.249.223                     | -                                | 2013-09-18 07:57:33             | /hadoop-hive-intro/          | 1                               | 60                                 | "http://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=hive%E7%9A%84%E5%AE%89%E8%A3%85&amp;source=web&amp;cd=2&amp;ved=0CC4QFjAB&amp;url=%68%74%74%70%3a%2f%2f%62%6c%6f%67%2e%66%65%6e%73%2e%6d%65%2f%68%61%64%6f%6f%70%2d%68%69%76%65%2d%69%6e%74%72%6f%2f&amp;ei=5lw5Uo-2NpGZiQfCwoG4BA&amp;usg=AFQjCNF8EFxPuCMrm7CvqVgzcBUzrJZStQ&amp;bvm=bv.52164340,d.aGc&amp;cad=rjt" | "Mozilla/5.0(WindowsNT5.2;rv:23.0)Gecko/20100101Firefox/23.0" | 14764                                | 200                         | 20130918                     |<br />| ba46b150-ca63-47d1-9cdd-e278df01f5d3  | 101.226.167.201                  | -                                | 2013-09-18 09:30:36             | /hadoop-mahout-roadmap/      | 1                               | 60                                 | "http://blog.fens.me/hadoop-mahout-roadmap/"       | "Mozilla/4.0(compatible;MSIE8.0;WindowsNT6.1;Trident/4.0;SLCC2;.NETCLR2.0.50727;.NETCLR3.5.30729;.NETCLR3.0.30729;MediaCenterPC6.0;MDDR;.NET4.0C;.NET4.0E;.NETCLR1.1.4322;TabletPC2.0);360Spider" | 10335                                | 200                         | 20130918                     |<br />+---------------------------------------+----------------------------------+----------------------------------+---------------------------------+------------------------------+---------------------------------+------------------------------------+----------------------------------------------------+----------------------------------------------------+--------------------------------------+-----------------------------+------------------------------+--+</p>
<p><br />--各页面访问统计<br />各页面PV：各个页面被访问了多少次</p>
<p>select request as request,count(1) as request_counts from<br />ods_weblog_detail group by request having request is not null order by request_counts desc limit 20;</p>
<p><br />-----------------------------------------------<br />--热门页面统计<br />统计20130918这个分区里面的受访页面的top10</p>
<p>drop table dw_hotpages_everyday;<br />create table dw_hotpages_everyday(day string,url string,pvs string);</p>
<p>insert into table dw_hotpages_everyday<br />select '20130918',a.request,a.request_counts from<br />(<br />select request as request,count(request) as request_counts <br />from ods_weblog_detail <br />where datestr='20130918' <br />group by request <br />having request is not null<br />) a<br />order by a.request_counts desc limit 10;</p>
<p>&nbsp;</p>
<p>统计每日最热门页面的top10<br />select a.month,a.day,a.request ,concat(a.month,a.day),a.total_request<br />from (<br />select month,day, request,count(1) as total_request<br />from ods_weblog_detail<br />where datestr = '20130918'<br />group by  request ,month ,day<br />having request is not null<br />order by total_request desc limit 10<br />) a;</p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 网站点击流项目(下)：3、流量统计分析，分组求topN</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/29/11107222.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 29 Jun 2019 09:18:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/29/11107222.html</guid><description><![CDATA[<h1>四、 模块开发----统计分析</h1>
<p>select * from ods_weblog_detail limit 2;<brbr />| ods_weblog_detail.valid  | ods_weblog_detail.remote_addr  | ods_weblog_detail.remote_user  | ods_weblog_detail.time_local  | ods_weblog_detail.daystr  | ods_weblog_detail.timestr  | ods_weblog_detail.month  | ods_weblog_detail.day  | ods_weblog_detail.hour  |           ods_weblog_detail.request           | ods_weblog_detail.status  | ods_weblog_detail.body_bytes_sent  | ods_weblog_detail.http_referer  | ods_weblog_detail.ref_host  | ods_weblog_detail.ref_path  | ods_weblog_detail.ref_query  | ods_weblog_detail.ref_query_id  | ods_weblog_detail.http_user_agent  | ods_weblog_detail.datestr  |<br />+--------------------------+--------------------------------+--------------------------------+-------------------------------+---------------------------+----------------------------+--------------------------+------------------------+-------------------------+-----------------------------------------------+---------------------------+------------------------------------+---------------------------------+-----------------------------+-----------------------------+------------------------------+---------------------------------+------------------------------------+----------------------------+--+<br />| false                    | 194.237.142.21                 | -                              | 2013-09-18 06:49:18           | 2013-09-18                | 06:49:18                   | 09                       | 18                     | 06                      | /wp-content/uploads/2013/07/rstudio-git3.png  | 304                       | 0                                  | "-"                             | NULL                        | NULL                        | NULL                         | NULL                            | "Mozilla/4.0(compatible;)"         | 20130918                   |<br />| false                    | 163.177.71.12                  | -                              | 2013-09-18 06:49:33           | 2013-09-18                | 06:49:33                   | 09                       | 18                     | 06                      | /                                             | 200                       | 20                                 | "-"                             | NULL                        | NULL                        | NULL                         | NULL                            | "DNSPod-Monitor/1.0"               | 20130918                   |<brp>
<p><br />1.   流量分析<br />--------------------------------------------------------------------------------------------<br />--计算每小时pvs，注意gruop by语句的语法<br />select count(*) as pvs,month,day,hour from ods_weblog_detail group by month,day,hour;<br />--------------------------------------------------------------------------------------------<br />1.1． 多维度统计PV总量<br />--第一种方式：直接在ods_weblog_detail单表上进行查询<br />1.1.1 计算该处理批次（一天）中的各小时pvs<br />drop table if exists dw_pvs_everyhour_oneday;<br />create table if not exists dw_pvs_everyhour_oneday(month string,day string,hour string,pvs bigint) partitioned by(datestr string);</p>
<p>insert into table dw_pvs_everyhour_oneday partition(datestr='20130918')<br />select a.month as month,a.day as day,a.hour as hour,count(*) as pvs from ods_weblog_detail a<br />where  a.datestr='20130918' group by a.month,a.day,a.hour;</p>
<p>--计算每天的pvs<br />drop table if exists dw_pvs_everyday;<br />create table if not  exists dw_pvs_everyday(pvs bigint,month string,day string);</p>
<p>insert into table dw_pvs_everyday<br />select count(*) as pvs,a.month as month,a.day as day from ods_weblog_detail a<br />group by a.month,a.day;</p>
<p>+----------------------+------------------------+----------------------+--+<br />| dw_pvs_everyday.pvs  | dw_pvs_everyday.month  | dw_pvs_everyday.day  |<br />+----------------------+------------------------+----------------------+--+<br />| 10777                | 09                     | 18                   |<br />| 2993                 | 09                     | 19                   |<br />+----------------------+------------------------+----------------------+--+</p>
<p><br />1.1.2 第二种方式：与时间维表关联查询</p>
<p>--维度：日<br />drop table dw_pvs_everyday;<br />create table dw_pvs_everyday(pvs bigint,month string,day string);</p>
<p>insert into table dw_pvs_everyday<br />select count(*) as pvs,a.month as month,a.day as day from (select distinct month, day from t_dim_time) a<br />join ods_weblog_detail b <br />on a.month=b.month and a.day=b.day<br />group by a.month,a.day;</p>
<p>--维度：月<br />drop table dw_pvs_everymonth;<br />create table dw_pvs_everymonth (pvs bigint,month string);</p>
<p>insert into table dw_pvs_everymonth<br />select count(*) as pvs,a.month from (select distinct month from t_dim_time) a<br />join ods_weblog_detail b on a.month=b.month group by a.month;</p>
<p><br />--另外，也可以直接利用之前的计算结果。比如从之前算好的小时结果中统计每一天的<br />Insert into table dw_pvs_everyday<br />Select sum(pvs) as pvs,month,day from dw_pvs_everyhour_oneday group by month,day having day='18';<br />+--------+--------+------+--+<br />|  pvs   | month  | day  |<br />+--------+--------+------+--+<br />| 10777  | 09     | 18   |<br />| 2993   | 09     | 19   |<br />+--------+--------+------+--+</p>
<p>--------------------------------------------------------------------------------------------<br />1.2	按照来访维度统计pv</p>
<p>--统计每小时各来访url产生的pv量，查询结果存入：( "dw_pvs_referer_everyhour" )</p>
<p><br />drop table if exists dw_pvs_referer_everyhour;<br />create table if not exists dw_pvs_referer_everyhour<br />(referer_url string,referer_host string,month string,day string,<br />hour string,pv_referer_cnt bigint) partitioned by(datestr string);</p>
<p>insert into table dw_pvs_referer_everyhour partition(datestr='20130918')<br />select http_referer,ref_host,month,day,hour,count(1) as pv_referer_cnt<br />from ods_weblog_detail <br />group by http_referer,ref_host,month,day,hour <br />having ref_host is not null<br />order by hour asc,day asc,month asc,pv_referer_cnt desc;</p>
<p>&nbsp;</p>
<p>--统计每小时各来访host的产生的pv数并排序</p>
<p>drop table dw_pvs_refererhost_everyhour;<br />create table dw_pvs_refererhost_everyhour(ref_host string,month string,day string,hour string,ref_host_cnts bigint) partitioned by(datestr string);</p>
<p>insert into table dw_pvs_refererhost_everyhour partition(datestr='20130918')<br />select ref_host,month,day,hour,count(1) as ref_host_cnts<br />from ods_weblog_detail <br />group by ref_host,month,day,hour <br />having ref_host is not null<br />order by hour asc,day asc,month asc,ref_host_cnts desc;</p>
<p>---------------------------------------------------------------------------<br />1.3	统计pv总量最大的来源TOPN<br />--需求：按照时间维度，统计一天内各小时产生最多pvs的来源topN<br />分组求topN，先分组，再求每组内的topN</p>
<p><br />--row_number函数<br />select ref_host,ref_host_cnts,concat(month,day,hour),<br />row_number() over (partition by concat(month,day,hour) order by ref_host_cnts desc) as od <br />from dw_pvs_refererhost_everyhour;</p>
<p>&nbsp;</p>
<p>--综上可以得出<br />drop table dw_pvs_refhost_topn_everyhour;<br />create table dw_pvs_refhost_topn_everyhour(<br />hour string,<br />toporder string,<br />ref_host string,<br />ref_host_cnts string<br />)partitioned by(datestr string);</p>
<p>insert into table dw_pvs_refhost_topn_everyhour partition(datestr='20130918')<br />select t.hour,t.od,t.ref_host,t.ref_host_cnts from<br /> (select ref_host,ref_host_cnts,concat(month,day,hour) as hour,<br />row_number() over (partition by concat(month,day,hour) order by ref_host_cnts desc) as od <br />from dw_pvs_refererhost_everyhour) t where od&lt;=3;</p>
<p><br />---------------------------------------------------------------------------------------------<br />1.4	人均浏览页数<br />--需求描述：统计今日所有来访者平均请求的页面数。<br />--总页面请求数/去重总人数</p>
<p><br />select '20130918',count(1) / count(distinct remote_addr) from ods_weblog_detail where datestr='20130918'; --13.4 (20.744 seconds)<br />select count(request) / count(distinct remote_addr) from ods_weblog_detail where datestr='20130918'; -- 13.4 (20.888 seconds)<br />select count(request) / (select count(1) from (select remote_addr from ods_weblog_detail group by remote_addr) t) from ods_weblog_detail;报错：<br />Error: Error while compiling statement: FAILED: ParseException line 1:25 cannot recognize input near 'select' 'count' '(' in expression specification (state=42000,code=40000)</p>
<p>select count(distinct remote_addr) from ods_weblog_detail; --1027(19.466 seconds)<br />select count(1) from (select remote_addr from ods_weblog_detail group by remote_addr) t;  --1027(36.809 seconds)</p>
<p><br />drop table dw_avgpv_user_everyday;<br />create table dw_avgpv_user_everyday(<br />day string,<br />avgpv string);</p>
<p>insert into table dw_avgpv_user_everyday<br />select '20130918',count(1) / count(distinct remote_addr) from ods_weblog_detail where datestr='20130918'; <br />--select '20130918',sum(b.pvs)/count(b.remote_addr)  --这个方法实际上效率还要低一些<br />from<br />(<br />select remote_addr,count(1) as pvs from ods_weblog_detail where datestr='20130918' <br />group by remote_addr<br />) b;</p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 网站点击流项目(下)：2、明细宽表的生成</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/29/11107178.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 29 Jun 2019 09:09:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/29/11107178.html</guid><description><![CDATA[<h1>三、 模块开发----ETL</h1>
<h2>1． 创建ODS层数据表</h2>
<p>原始数据表：对应mr清洗完之后的数据，而不是原始日志数据</p>
<p>drop table if exists ods_weblog_origin;<br />create table ods_weblog_origin(<br />valid string,<br />remote_addr string,<br />remote_user string,<br />time_local string,<br />request string,<br />status string,<br />body_bytes_sent string,<br />http_referer string,<br />http_user_agent string)<br />partitioned by (datestr string)<br />row format delimited<br />fields terminated by '\001';</p>
<p>---------------------------------------------------<br />点击流pageview表</p>
<p>drop table if exists ods_click_pageviews;<br />create table ods_click_pageviews(<br />session string,<br />remote_addr string,<br />remote_user string,<br />time_local string,<br />request string,<br />visit_step string,<br />page_staylong string,<br />http_referer string,<br />http_user_agent string,<br />body_bytes_sent string,<br />status string)<br />partitioned by (datestr string)<br />row format delimited<br />fields terminated by '\001';</p>
<p>-----------------------------------------------<br />点击流visit表</p>
<p>drop table if exists ods_click_stream_visit;<br />create table ods_click_stream_visit(<br />session     string,<br />remote_addr string,<br />inTime      string,<br />outTime     string,<br />inPage      string,<br />outPage     string,<br />referal     string,<br />pageVisits  int)<br />partitioned by (datestr string)<br />row format delimited<br />fields terminated by '\001';</p>
<p>-------------------------------------------<br />维度表示例：<br />drop table if exists t_dim_time;<br />create table t_dim_time(date_key int,year string,month string,day string,hour string) <br />row format delimited fields terminated by ',';</p>
<h2>2． 导入ODS层数据</h2>
<p>&nbsp;</p>
<p>hdfs dfs -mkdir -p /weblog/preprocessed<br />hdfs dfs -mkdir -p /weblog/clickstream/pageviews<br />hdfs dfs -mkdir -p /weblog/clickstream/visits<br />hdfs dfs -mkdir -p /weblog/dim_time</p>
<p>hdfs dfs -put part-m-00000 /weblog/preprocessed<br />hdfs dfs -put part-r-00000 /weblog/clickstream/pageviews<br />hdfs dfs -put part-r-00000 /weblog/clickstream/visits<br />hdfs dfs -put dim_time_dat.txt /weblog/dim_time</p>
<p>设置hive本地模式运行（开启本地模式，解决多个小文件输入的时候，分配资源时间超过数据的计算时间的问题）<br />set hive.exec.mode.local.auto=true;</p>
<p>--------------------------------------------------------------------------</p>
<p>导入清洗结果数据到贴源数据表ods_weblog_origin</p>
<p>load data inpath '/weblog/preprocessed/' overwrite into table ods_weblog_origin partition(datestr='20130918');<br />show partitions ods_weblog_origin;<br />select count(*) from ods_weblog_origin;<br />---------------------------------------------------------------------------<br />导入点击流模型pageviews数据到ods_click_pageviews表</p>
<p>load data inpath '/weblog/clickstream/pageviews' overwrite into table ods_click_pageviews partition(datestr='20130918');<br />select count(*) from ods_click_pageviews;<br />-----------------------------------------------------------------------------<br />导入点击流模型visit数据到ods_click_stream_visit表</p>
<p>load data inpath '/weblog/clickstream/visits' overwrite into table ods_click_stream_visit partition(datestr='20130918');</p>
<p>----------------------------------------------------------------------------------------------------------------------<br />时间维度表数据导入<br />参考数据《dim_time_dat.txt》<br />load data inpath '/weblog/dim_time' overwrite into table t_dim_time;</p>
<p>&nbsp;</p>
<h2>3． 生成ODS层明细宽表</h2>
<p>建表&mdash;&mdash;明细宽表 ods_weblog_detail</p>
<p>drop table ods_weblog_detail;<br />create table ods_weblog_detail(<br />valid           string, --有效标识<br />remote_addr     string, --来源IP<br />remote_user     string, --用户标识<br />time_local      string, --访问完整时间<br />daystr          string, --访问日期<br />timestr         string, --访问时间<br />month           string, --访问月<br />day             string, --访问日<br />hour            string, --访问时<br />request         string, --请求的url<br />status          string, --响应码<br />body_bytes_sent string, --传输字节数<br />http_referer    string, --来源url<br />ref_host        string, --来源的host<br />ref_path        string, --来源的路径<br />ref_query       string, --来源参数query<br />ref_query_id    string, --来源参数query的值<br />http_user_agent string --客户终端标识<br />)<br />partitioned by(datestr string);</p>
<p><br />-------------------------------------------------------------------------------<br />通过查询插入数据到明细宽表  ods_weblog_detail中</p>
<p><br />分步：<br />--抽取refer_url到中间表  t_ods_tmp_referurl <br />--也就是将来访url分离出host  path  query  query id<br />--eg. http://www.google.com/url?sa=t&amp;rct=j&amp;q=nodejs%20%E5%BC%82%E6%AD%A5%E5%B9%BF%E6%92%AD&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CCgQFjAA&amp;url=%68%74%74%70%3a%2f%2f%62%6c%6f%67%2e%66%65%6e%73%2e%6d%65%2f%6e%6f%64%65%6a%73%2d%73%6f%63%6b%65%74%69%6f%2d%63%68%61%74%2f&amp;ei=rko5UrylAefOiAe7_IGQBw&amp;usg=AFQjCNG6YWoZsJ_bSj8kTnMHcH51hYQkAA&amp;bvm=bv.52288139,d.aGc<br />drop table if exists t_ods_tmp_referurl;<br />create table t_ods_tmp_referurl as<br />SELECT a.*,b.*<br />FROM ods_weblog_origin a <br />LATERAL VIEW parse_url_tuple(regexp_replace(http_referer, "\"", ""), 'HOST', 'PATH','QUERY', 'QUERY:id') <br />b as host, path, query, query_id; </p>
<p>--抽取转换time_local字段到中间表明细表 t_ods_tmp_detail    <br />--eg. 2013-09-18 06:49:42 <br />drop table if exists t_ods_tmp_detail;<br />create table t_ods_tmp_detail as <br />select b.*,substring(time_local,0,10) as daystr,<br />substring(time_local,12) as tmstr,<br />substring(time_local,6,2) as month,<br />substring(time_local,9,2) as day,<br />substring(time_local,12,2) as hour<br />From t_ods_tmp_referurl b;</p>
<p>以上语句可以改写成：<br />insert into table ods_weblog_detail partition(datestr='20130918')<br />select c.valid,c.remote_addr,c.remote_user,c.time_local,<br />substring(c.time_local,0,10) as daystr,<br />substring(c.time_local,12) as tmstr,<br />substring(c.time_local,6,2) as month,<br />substring(c.time_local,9,2) as day,<br />substring(c.time_local,12,2) as hour,<br />c.request,c.status,c.body_bytes_sent,c.http_referer,c.ref_host,c.ref_path,c.ref_query,c.ref_query_id,c.http_user_agent<br />from <br />(SELECT <br />a.valid,a.remote_addr,a.remote_user,a.time_local,<br />a.request,a.status,a.body_bytes_sent,a.http_referer,a.http_user_agent,b.ref_host,b.ref_path,b.ref_query,b.ref_query_id <br />FROM ods_weblog_origin a LATERAL VIEW parse_url_tuple(regexp_replace(a.http_referer, "\"", ""), 'HOST', 'PATH','QUERY', 'QUERY:id') b as<br /> ref_host, ref_path, ref_query, ref_query_id) c;</p>
<p><br />show partitions ods_weblog_detail;</p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 网站点击流项目(下)：1、数据仓库建模的基本概念</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/29/11105427.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 28 Jun 2019 16:48:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/29/11105427.html</guid><description><![CDATA[<p>数据仓库的设计概述：<br />1、维度建模：是我们常见的数据仓库用来分析数据的一种手段<br />	主要分为两个方面：维度表：从不同的角度去看待同一件事情，会得到不同的结果<br />					  事实表：记录了已经确切发生的一件事情，描述的是一件完整的事情<br />维度建模的三种方式：<br />第一种方式：星型模型，以事实表为核心依据，以多个不同的维度表散列周围，然后通过主外键的关系进行关联<br />第二种方式：雪花模型，以事实表为核心依据，以多个不同的维度表散列周围，多个不同的维度表还有可能关联其他的维度表<br />第三种：星座模式 ，以多个事实表为核心依据，多个事实表之间可能会关联相同的维度表，大多数的建模都是采用星座模式</p>
<p><span style="color: #ff0000;">============================================================</span></p>
<h1>二、 模块开发----数据仓库设计</h1>
<h2>1． 维度建模基本概念</h2>
<p>维度建模(dimensional modeling)是专门用于分析型数据库、数据仓库、数据集市建模的方法。数据集市可以理解为是一种"小型数据仓库"。</p>
<p><strong>维度表(dimension)</strong></p>
<p>维度表示你要对数据进行分析时所用的一个量,比如你要分析产品销售情况, 你可以选择按类别来进行分析,或按区域来分析。这样的按..分析就构成一个维度。再比如"昨天下午我在星巴克花费200元喝了一杯卡布奇诺"。那么以消费为主题进行分析，可从这段信息中提取三个维度：时间维度(昨天下午)，地点维度(星巴克), 商品维度(卡布奇诺)。通常来说维度表信息比较固定，且数据量小。</p>
<p><strong>事实表(fact table)</strong></p>
<p>表示对分析主题的度量。事实表包含了与各维度表相关联的外键，并通过JOIN方式与维度表关联。事实表的度量通常是数值类型，且记录数会不断增加，表规模迅速增长。比如上面的消费例子，它的消费事实表结构示例如下：</p>
<p>消费事实表：Prod_id(引用商品维度表), TimeKey(引用时间维度表), Place_id(引用地点维度表), Unit(销售量)。</p>
<p>总的说来，在数据仓库中不需要严格遵守规范化设计原则。因为数据仓库的主导功能就是面向分析，以查询为主，不涉及数据更新操作。事实表的设计是以能够正确记录历史信息为准则，维度表的设计是以能够以合适的角度来聚合主题内容为准则。</p>
<p align="left">&nbsp;</p>
<h2>2． 维度建模三种模式</h2>
<h3>2.1． 星型模式</h3>
<p>星形模式(Star Schema)是最常用的维度建模方式。星型模式是以事实表为中心，所有的维度表直接连接在事实表上，像星星一样。</p>
<p>星形模式的维度建模由一个事实表和一组维表成，且具有以下特点：</p>
<p>&nbsp;a. 维表只和事实表关联，维表之间没有关联；</p>
<p>&nbsp;b. 每个维表主键为单列，且该主键放置在事实表中，作为两边连接的外键；</p>
<p>c. 以事实表为核心，维表围绕核心呈星形分布；</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190629100200588-1459479613.png" alt="" />&nbsp;</p>
<p align="left">&nbsp;</p>
<h3>2.2． 雪花模式</h3>
<p>雪花模式(Snowflake Schema)是对星形模式的扩展。雪花模式的维度表可以拥有其他维度表的，虽然这种模型相比星型更规范一些，但是由于这种模型不太容易理解，维护成本比较高，而且性能方面需要关联多层维表，性能也比星型模型要低。所以一般不是很常用。</p>
<p align="center"><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190629100223326-980867817.png" alt="" /></p>
<p align="center">&nbsp;</p>
<h3>2.3． 星座模式</h3>
<p>星座模式是星型模式延伸而来，星型模式是基于一张事实表的，而星座模式是基于多张事实表的，而且共享维度信息。</p>
<p>前面介绍的两种维度建模方法都是多维表对应单事实表，但在很多时候维度空间内的事实表不止一个，而一个维表也可能被多个事实表用到。在业务发展后期，绝大部分维度建模都采用的是星座模式。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190629100238025-1847721101.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>3． 本项目中数据仓库的设计</h2>
<p><strong><em>注：采用星型模型&nbsp;&nbsp;&nbsp; </em></strong></p>
<h3>1.1． 事实表设计</h3>
<div align="center">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td colspan="3" valign="bottom" width="428">
<p align="left">原始数据表: ods_weblog_origin =&gt;对应mr清洗完之后的数据</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">valid</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">是否有效</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">remote_addr</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">访客ip</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">remote_user</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">访客用户信息</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">time_local</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">请求时间</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">request</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">请求url</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">status</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">响应码</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">body_bytes_sent</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">响应字节数</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">http_referer</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">来源url</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">http_user_agent</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">访客终端信息</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">&nbsp;</p>
</td>
<td valign="bottom" width="58">
<p align="left">&nbsp;</p>
</td>
<td valign="bottom" width="145">
<p align="left">&nbsp;</p>
</td>
</tr>
<tr>
<td colspan="3" valign="bottom" width="428">
<p align="left">访问日志明细宽表：dw_weblog_detail</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">valid</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">是否有效</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">remote_addr</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">访客ip</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">remote_user</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">访客用户信息</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">time_local</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">请求完整时间</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">daystr</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">访问日期</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">timestr</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">访问时间</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">month</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">访问月</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">day</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">访问日</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">hour</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">访问时</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">request</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">请求url整串</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">status</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">响应码</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">body_bytes_sent</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">响应字节数</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">http_referer</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">来源url</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">ref_host</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">来源的host</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">ref_path</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">来源的路径</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">ref_query</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">来源参数query</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">ref_query_id</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">来源参数query值</p>
</td>
</tr>
<tr>
<td valign="bottom" width="224">
<p align="left">http_user_agent</p>
</td>
<td valign="bottom" width="58">
<p align="left">string</p>
</td>
<td valign="bottom" width="145">
<p align="left">客户终端标识</p>
</td>
</tr>
</tbody>
</table>
</div>
<h3>1.2． 维度表设计</h3>
<div align="center">
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="262">
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="234">
<p><strong>时间维度 t_dim_time</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p><strong>date_Key</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p><strong>year</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p><strong>month</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p><strong>day</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p><strong>hour</strong></p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</td>
<td valign="top" width="274">
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="234">
<p align="left"><strong>访客地域维度t_dim_area</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p align="left"><strong>area_ID</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p align="left"><strong>北京</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p align="left"><strong>上海</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p align="left"><strong>广州</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p align="left"><strong>深圳</strong></p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</td>
</tr>
<tr>
<td valign="top" width="262">
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="234">
<p align="left"><strong>终端类型维度t_dim_termination</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p align="left"><strong>uc</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p align="left"><strong>firefox</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p align="left"><strong>chrome</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p align="left"><strong>safari</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p align="left"><strong>ios</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p align="left"><strong>android</strong></p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</td>
<td valign="top" width="274">
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="234">
<p align="left"><strong>网站栏目维度 t_dim_section</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p align="left"><strong>跳蚤市场</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p align="left"><strong>房租信息</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p align="left"><strong>休闲娱乐</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p align="left"><strong>建材装修</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p align="left"><strong>本地服务</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="234">
<p align="left"><strong>人才市场</strong></p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</td>
</tr>
</tbody>
</table>
</div>
<p>&nbsp;</p>
<p align="left">注意：</p>
<p align="left">维度表的数据一般要结合业务情况自己写脚本按照规则生成，也可以使用工具生成，方便后续的关联分析。</p>
<p align="left">比如一般会事前生成时间维度表中的数据，跨度从业务需要的日期到当前日期即可.具体根据你的分析粒度,可以生成年，季，月，周，天，时等相关信息，用于分析。</p>
<p align="left">&nbsp;</p>]]></description></item><item><title>MapReduce会自动忽略文件夹下的.开头的文件</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/28/11104500.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 28 Jun 2019 11:44:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/28/11104500.html</guid><description><![CDATA[<p>MapReduce会自动忽略文件夹下的.开头的文件，跳过这些文件的处理。</p>]]></description></item><item><title>第1节 网站点击流项目(上)：5、6、7、数据预处理</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/28/11104355.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 28 Jun 2019 11:00:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/28/11104355.html</guid><description><![CDATA[<h1>五、 模块开发----数据预处理</h1>
<h2>1． 主要目的</h2>
<p>过滤&ldquo;不合规&rdquo;数据，清洗无意义的数据</p>
<p>格式转换和规整</p>
<p>根据后续的统计需求，过滤分离出各种不同主题(不同栏目path)的基础数据。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190628185513390-263452709.png" alt="" /></p>
<p>&nbsp;</p>
<h2>2． 实现方式</h2>
<p>开发一个mr程序WeblogPreProcess(<strong><em>内容太长，见工程代码</em></strong>)</p>
<h2>1． 点击流模型数据梳理</h2>
<p>由于大量的指标统计从点击流模型中更容易得出，所以在预处理阶段，可以使用mr程序来生成点击流模型的数据。</p>
<h3>1.1． 点击流模型pageviews表</h3>
<p>Pageviews表模型数据生成, 详细见：ClickStreamPageView.java</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190628185857903-9352672.png" alt="" width="772" height="314" /></p>
<p>&nbsp;</p>
<p>此时程序的输入数据源就是上一步骤我们预处理完的数据。经过此不处理完成之后的数据格式为：</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190628185917788-1974575032.png" alt="" /></p>
<p>&nbsp;</p>
<h3>1.2． 点击流模型visit信息表</h3>
<p><em>注：&ldquo;一次访问&rdquo;=</em><em>&ldquo;N</em><em>次连续请求&rdquo;</em></p>
<p><em>直接从原始数据中用hql</em><em>语法得出每个人的&ldquo;次&rdquo;访问信息比较困难，可先用mapreduce</em><em>程序分析原始数据得出&ldquo;次&rdquo;信息数据，然后再用hql</em><em>进行更多维度统计</em></p>
<p>&nbsp;</p>
<p>用MR程序从pageviews数据中，梳理出每一次visit的起止时间、页面信息</p>
<p>详细代码见工程：ClickStreamVisit.java</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190628185936866-717495329.png" alt="" width="849" height="335" /></p>
<p><span style="color: #ff0000;">&nbsp;===================================================================</span></p>
<p align="left">&nbsp;</p>
<p>课程总结：</p>
<p>1、日志采集框架flume<br />	flume是干什么的？？？采集数据的<br />	flume里面的核心组件：<br />		source：数据源，对接我们的数据源进行获取数据<br />		channel：管道  连接source与sink 主要作为数据组件的连接以及数据的缓冲区<br />		sink：数据下沉的组件，主要是用于定义我们的数据的目的地<br />		event：flume的运行的实例  event里面包含了我们采集到的数据<br />		<br />	flume的数据采集：<br />		第一个：采集监控一个文件   搞定<br />		第二个：采集监控一个文件夹  搞定<br />		flume的failover  高可用机制   了解<br />		flume的load_balancer  负载均衡  了解<br />		flume的拦截器  了解</p>
<p>数据的调度：azkaban<br />		two   server   mode  的模式的安装  搞定<br />		azkaban的调度：调度shell脚本  调度hive任务  调度 mr的任务  执行hdfs的任务  搞定   <br />		azkaban的定时任务  搞定</p>
<p><br />sqoop数据迁移：<br />		数据导入：关系型数据库到大数据平台 <br />		数据导出：大数据平台到关系型数据库<br />		导入： 指定数据之间的分隔符，指定数据的导入目的地    搞定<br />		导入：导入到hive表 尽量搞定<br />		导出：导出到mysql  搞定</p>
<p>java 执行shell命令  搞定</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>网站日志分析：<br />网站分析的指标</p>
<p>网站的预处理代码  跑通，看懂</p>
<p align="left">&nbsp;</p>]]></description></item><item><title>第1节 网站点击流项目(上)：4、网站的数据采集，使用flume的taildir实现多个文件的监控采集</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11100237.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 27 Jun 2019 15:16:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11100237.html</guid><description><![CDATA[<h1>一、 模块开发----数据采集</h1>
<h2>1． 需求</h2>
<p>在网站web流量日志分析这种场景中，对数据采集部分的可靠性、容错能力要求通常不会非常严苛，因此使用通用的flume日志采集框架完全可以满足需求。</p>
<h2>2． Flume日志采集系统</h2>
<h3>2.1． Flume采集</h3>
<p>Flume采集系统的搭建相对简单：</p>
<p>1、在服务器上部署agent节点，修改配置文件</p>
<p>2、启动agent节点，将采集到的数据汇聚到指定的HDFS目录中</p>
<p>针对nginx日志生成场景，如果通过flume（1.6）收集，无论是Spooling Directory Source和Exec Source均不能满足动态实时收集的需求，在当前flume1.7稳定版本中，提供了一个非常好用的TaildirSource，使用这个source，可以监控一个目录，并且使用正则表达式匹配该目录中的文件名进行实时收集。</p>
<p>核心配置如下：</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="553">
<p>a1.sources = r1</p>
<p>a1.sources.r1.type = TAILDIR</p>
<p>a1.sources.r1.channels = c1</p>
<p>a1.sources.r1.positionFile = /var/log/flume/taildir_position.json</p>
<p>a1.sources.r1.filegroups = f1 f2</p>
<p>a1.sources.r1.filegroups.f1 = /var/log/test1/example.log</p>
<p>a1.sources.r1.filegroups.f2 = /var/log/test2/.*log.*</p>
</td>
</tr>
</tbody>
</table>
<p>filegroups:指定filegroups，可以有多个，以空格分隔；（TailSource可以同时监控tail多个目录中的文件）</p>
<p>positionFile:配置检查点文件的路径，检查点文件会以json格式保存已经tail文件的位置，解决了断点不能续传的缺陷。</p>
<p>filegroups.&lt;filegroupName&gt;：配置每个filegroup的文件绝对路径，文件名可以用正则表达式匹配</p>
<p>通过以上配置，就可以监控文件内容的增加和文件的增加。产生和所配置的文件名正则表达式不匹配的文件，则不会被tail。</p>
<h3>2.2． 数据内容样例</h3>
<p>&nbsp;</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="553">
<p><em>58.215.204.118 - - [18/Sep/2013:06:51:35 +0000] "GET /wp-includes/js/jquery/jquery.js?ver=1.10.2 HTTP/1.1" 304 0 "http://blog.fens.me/nodejs-socketio-chat/" "Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0"</em></p>
</td>
</tr>
</tbody>
</table>
<p>字段解析：</p>
<p>&nbsp;</p>
<p>1、访客ip地址：&nbsp;&nbsp; 58.215.204.118</p>
<p>2、访客用户信息：&nbsp; - -</p>
<p>3、请求时间：[18/Sep/2013:06:51:35 +0000]</p>
<p>4、请求方式：GET</p>
<p>5、请求的url：/wp-includes/js/jquery/jquery.js?ver=1.10.2</p>
<p>6、请求所用协议：HTTP/1.1</p>
<p>7、响应码：304</p>
<p>8、返回的数据流量：0</p>
<p>9、访客的来源url：<a href="http://blog.fens.me/nodejs-socketio-chat/">http://blog.fens.me/nodejs-socketio-chat/</a></p>
<p>10、访客所用浏览器：Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0</p>]]></description></item><item><title>第1节 网站点击流项目(上)：3、离线日志网站处理的架构流程</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11098787.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 27 Jun 2019 10:18:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11098787.html</guid><description><![CDATA[<p>掌握，背下来：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190627181801164-196975766.png" alt="" /></p>
<p><span style="color: #ff0000;">&nbsp;=======================================================================================</span></p>
<p>&nbsp;</p>
<h1>三、 整体技术流程及架构</h1>
<h2>1． 数据处理流程</h2>
<p>网站流量日志数据分析是一个纯粹的数据分析项目，其整体流程基本上就是依据数据的处理流程进行。有以下几个大的步骤：</p>
<ul>
<li><strong>数据采集</strong></li>
</ul>
<p>数据采集概念，目前行业会有两种解释：一是数据从无到有的过程（web服务器打印的日志、自定义采集的日志等）叫做数据采集；另一方面也有把通过使用Flume等工具把数据采集到指定位置的这个过程叫做数据采集。</p>
<p>关于具体含义要结合语境具体分析，明白语境中具体含义即可。</p>
<ul>
<li><strong>数据预处理</strong></li>
</ul>
<p>通过mapreduce程序对采集到的原始日志数据进行预处理，比如清洗，格式整理，滤除脏数据等，并且梳理成点击流模型数据。</p>
<ul>
<li><strong>数据入库</strong></li>
</ul>
<p>将预处理之后的数据导入到HIVE仓库中相应的库和表中。</p>
<p>&nbsp;</p>
<ul>
<li><strong>数据分析</strong></li>
</ul>
<p>项目的核心内容，即根据需求开发ETL分析语句，得出各种统计结果。</p>
<p>&nbsp;</p>
<ul>
<li><strong>数据展现</strong></li>
</ul>
<p>将分析所得数据进行数据可视化，一般通过图表进行展示。</p>
<p align="left"><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190627182237156-1613669412.png" alt="" /></p>
<p>&nbsp;</p>
<p align="left">&nbsp;</p>
<h2>2． 系统的架构</h2>
<p align="left">相对于传统的BI数据处理，流程几乎差不多，但是因为是处理大数据，所以流程中各环节所使用的技术则跟传统BI完全不同：</p>
<p class="1">数据采集：定制开发采集程序，或使用开源框架Flume</p>
<p class="1">数据预处理：定制开发mapreduce程序运行于hadoop集群</p>
<p class="1">数据仓库技术：基于hadoop之上的Hive</p>
<p class="1">数据导出：基于hadoop的sqoop数据导入导出工具</p>
<p class="1">数据可视化：定制开发web程序(echarts)</p>
<p class="1">整个过程的流程调度：hadoop生态圈中的azkaban工具</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190627182210324-1423595884.png" alt="" /></p>
<p>&nbsp;</p>
<p>其中，需要强调的是：</p>
<p>系统的数据分析不是一次性的，而是按照一定的时间频率反复计算，因而整个处理链条中的各个环节需要按照一定的先后依赖关系紧密衔接，即涉及到大量任务单元的管理调度，所以，项目中需要添加一个任务调度模块。</p>
<h2>3． 数据展现</h2>
<p>数据展现的目的是将分析所得的数据进行可视化，以便运营决策人员能更方便地获取数据，更快更简单地理解数据。</p>
<p>市面上有许多开源的数据可视化软件、工具。比如Echarts.</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190627182132222-62197974.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 网站点击流项目(上)：2、网站流量分析的常见指标</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11098772.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 27 Jun 2019 10:17:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11098772.html</guid><description><![CDATA[<p>网站分析的常见指标：<br />1：IP  ：一天之内网站访问的去重的IP个数<br />2：pageView   PV 访问一个页面算做一次记录<br />3：unique  pageView: UV  以cookie为依据，网站访问的不重复用户数  这个才是真正统计我这个网站一天有多少人来访问过</p>
<p>基础指标分析：<br />1：访问次数  以session为依据，一个session算作一次<br />2：网站停留时间  最后一个页面的进入时间，减去第一个页面的进入时间，大致等于我们的网站停留时间<br />3：页面停留时间 下一个页面的进入时间，减去上一个页面的进入时间就是我们的上一个页面停留时间</p>
<p><span style="color: #ff0000;">============================================================================================</span></p>
<p>&nbsp;</p>
<h3>1.1． 流量分析常见分类</h3>
<p>指标是网站分析的基础，用来记录和衡量访问者在网站自的各种行为。比如我们经常说的流量就是一个网站指标，它是用来衡量网站获得的访问量。在进行流量分析之前，我们先来了解一些常见的指标。</p>
<h4>骨灰级指标</h4>
<p>IP：1天之内，访问网站的不重复IP数。一天内相同IP地址多次访问网站只被计算1次。曾经IP指标可以用来表示用户访问身份，目前则更多的用来获取访问者的地理位置信息。</p>
<p>PageView浏览量: 即通常说的PV值，用户每打开1个网站页面，记录1个PV。用户多次打开同一页面PV累计多次。通俗解释就是页面被加载的总次数。</p>
<p>Unique PageView: 1天之内，访问网站的不重复用户数（以浏览器cookie为依据），一天内同一访客多次访问网站只被计算1次。</p>
<h4>基础级指标</h4>
<p>访问次数：访客从进入网站到离开网站的一系列活动记为一次访问，也称会话(session),1次访问(会话)可能包含多个PV。</p>
<p>网站停留时间：访问者在网站上花费的时间。</p>
<p>页面停留时间：访问者在某个特定页面或某组网页上所花费的时间。</p>
<h4>复合级指标</h4>
<p>人均浏览页数：平均每个独立访客产生的PV。人均浏览页数=浏览次数/独立访客。体现网站对访客的吸引程度。</p>
<p>跳出率:指某一范围内单页访问次数或访问者与总访问次数的百分比。其中跳出指单页访问或访问者的次数，即在一次访问中访问者进入网站后只访问了一个页面就离开的数量。</p>
<p>退出率:指某一范围内退出的访问者与综合访问量的百分比。其中退出指访问者离开网站的次数，通常是基于某个范围的。</p>
<p align="left">&nbsp;</p>
<p>有了上述这些指标之后，就能结合业务进行各种不同角度的分类分析，主要是以下几大方面：</p>
<h4>基础分析（PV,IP,UV）</h4>
<p class="2">趋势分析：根据选定的时段，提供网站流量数据，通过流量趋势变化形态，为您分析网站访客的访问规律、网站发展状况提供参考。</p>
<p class="2">对比分析：根据选定的两个对比时段，提供网站流量在时间上的纵向对比报表，帮您发现网站发展状况、发展规律、流量变化率等。</p>
<p class="2">当前在线：提供当前时刻站点上的访客量，以及最近15分钟流量、来源、受访、访客变化情况等，方便用户及时了解当前网站流量状况。</p>
<p class="2">访问明细：提供最近7日的访客访问记录，可按每个PV或每次访问行为（访客的每次会话）显示，并可按照来源、搜索词等条件进行筛选。 通过访问明细，用户可以详细了解网站流量的累计过程，从而为用户快速找出流量变动原因提供最原始、最准确的依据。</p>
<p class="2">&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190628184456010-30849450.png" alt="" /></p>
<p>&nbsp;</p>
<h4>来源分析</h4>
<p class="2">来源分类：提供不同来源形式（直接输入、搜索引擎、其他外部链接、站内来源）、不同来源项引入流量的比例情况。通过精确的量化数据，帮助用户分析什么类型的来路产生的流量多、效果好，进而合理优化推广方案。</p>
<p class="2">搜索引擎：提供各搜索引擎以及搜索引擎子产品引入流量的比例情况。</p>
<p class="2">搜索词：提供访客通过搜索引擎进入网站所使用的搜索词，以及各搜索词引入流量的特征和分布。帮助用户了解各搜索词引入流量的质量，进而了解访客的兴趣关注点、网站与访客兴趣点的匹配度，为优化SEO（搜索引擎优化）方案及SEM（搜索引擎营销）提词方案提供详细依据。</p>
<p class="2">最近7日的访客搜索记录，可按每个PV或每次访问行为（访客的每次会话）显示，并可按照访客类型、地区等条件进行筛选。为您搜索引擎优化提供最详细的原始数据。</p>
<p class="2">来路域名：提供具体来路域名引入流量的分布情况，并可按&ldquo;社会化媒体&rdquo;、&ldquo;搜索引擎&rdquo;、&ldquo;邮箱&rdquo;等网站类型对来源域名进行分类。 帮助用户了解哪类推广渠道产生的流量多、效果好，进而合理优化网站推广方案。</p>
<p class="2">来路页面：提供具体来路页面引入流量的分布情况。 尤其对于通过流量置换、包广告位等方式从其他网站引入流量的用户，该功能可以方便、清晰地展现广告引入的流量及效果，为优化推广方案提供依据。</p>
<p class="2">来源升降榜：提供开通统计后任意两日的TOP10000搜索词、来路域名引入流量的对比情况，并按照变化的剧烈程度提供排行榜。 用户可通过此功能快速找到哪些来路对网站流量的影响比较大，从而及时排查相应来路问题。</p>
<p class="2">&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190628184547734-796761436.png" alt="" /></p>
<h4>受访分析</h4>
<p class="2">受访域名：提供访客对网站中各个域名的访问情况。 一般情况下，网站不同域名提供的产品、内容各有差异，通过此功能用户可以了解不同内容的受欢迎程度以及网站运营成效。</p>
<p class="2">受访页面：提供访客对网站中各个页面的访问情况。 站内入口页面为访客进入网站时浏览的第一个页面，如果入口页面的跳出率较高则需要关注并优化；站内出口页面为访客访问网站的最后一个页面，对于离开率较高的页面需要关注并优化。</p>
<p class="2">受访升降榜：提供开通统计后任意两日的TOP10000受访页面的浏览情况对比，并按照变化的剧烈程度提供排行榜。 可通过此功能验证经过改版的页面是否有流量提升或哪些页面有巨大流量波动，从而及时排查相应问题。</p>
<p class="2">热点图：记录访客在页面上的鼠标点击行为，通过颜色区分不同区域的点击热度；支持将一组页面设置为"关注范围"，并可按来路细分点击热度。 通过访客在页面上的点击量统计，可以了解页面设计是否合理、广告位的安排能否获取更多佣金等。</p>
<p class="2">用户视点：提供受访页面对页面上链接的其他站内页面的输出流量，并通过输出流量的高低绘制热度图，与热点图不同的是，所有记录都是实际打开了下一页面产生了浏览次数（PV）的数据，而不仅仅是拥有鼠标点击行为。</p>
<p class="2">访问轨迹：提供观察焦点页面的上下游页面，了解访客从哪些途径进入页面，又流向了哪里。 通过上游页面列表比较出不同流量引入渠道的效果；通过下游页面列表了解用户的浏览习惯，哪些页面元素、内容更吸引访客点击。</p>
<p class="2">&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190628184617883-2077042722.png" alt="" /></p>
<p>&nbsp;</p>
<h4>访客分析</h4>
<p class="2">地区运营商：提供各地区访客、各网络运营商访客的访问情况分布。 地方网站、下载站等与地域性、网络链路等结合较为紧密的网站，可以参考此功能数据，合理优化推广运营方案。</p>
<p class="2">终端详情：提供网站访客所使用的浏览终端的配置情况。 参考此数据进行网页设计、开发，可更好地提高网站兼容性，以达到良好的用户交互体验。</p>
<p class="2">新老访客：当日访客中，历史上第一次访问该网站的访客记为当日新访客；历史上已经访问过该网站的访客记为老访客。 新访客与老访客进入网站的途径和浏览行为往往存在差异。该功能可以辅助分析不同访客的行为习惯，针对不同访客优化网站，例如为制作新手导航提供数据支持等。</p>
<p class="2">忠诚度：从访客一天内回访网站的次数（日访问频度）与访客上次访问网站的时间两个角度，分析访客对网站的访问粘性、忠诚度、吸引程度。 由于提升网站内容的更新频率、增强用户体验与用户价值可以有更高的忠诚度，因此该功能在网站内容更新及用户体验方面提供了重要参考。</p>
<p class="2">活跃度：从访客单次访问浏览网站的时间与网页数两个角度，分析访客在网站上的活跃程度。 由于提升网站内容的质量与数量可以获得更高的活跃度，因此该功能是网站内容分析的关键指标之一。</p>
<p class="2">&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190628184734828-1675729462.png" alt="" /></p>
<p>&nbsp;</p>
<h4>转化路径分析</h4>
<p>转化定义：</p>
<p>访客在您的网站完成了某项您期望的活动，记为一次转化，如注册、下载、购买。</p>
<p>目标示例：</p>
<p>&middot;获得用户目标：在线注册、创建账号等。</p>
<p>&middot;咨询目标：咨询、留言、电话等。</p>
<p>&middot;互动目标：视频播放、加入购物车、分享等。</p>
<p>&middot;收入目标：在线订单、付款等。</p>
<p>路径分析：</p>
<p>根据设置的特定路线，监测某一流程的完成转化情况，算出每步的转换率和流失率数据，如注册流程，购买流程等。</p>
<p>转化类型：</p>
<p>l&nbsp; 页面</p>
<p align="center">&nbsp;</p>
<p align="center"><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190628184757877-1644327901.png" alt="" />&nbsp;</p>
<p align="center">&nbsp;</p>
<p>l&nbsp; 事件</p>
<p align="center"><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190628184809213-552817090.png" alt="" /></p>
<p>&nbsp;</p>
<p align="center">&nbsp;</p>]]></description></item><item><title>第1节 网站点击流项目(上)：1、网站流量分析模型</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11096232.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 27 Jun 2019 03:58:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11096232.html</guid><description><![CDATA[<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190627151450292-1684736828.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190627174557874-1354412902.png" alt="" /></p>
<p><span style="color: #ff0000;">=====================================================================================</span></p>
<h1>一、 网站流量日志数据分析系统</h1>
<h2>1． 点击流数据模型</h2>
<h3>1.1． 点击流概念</h3>
<p>点击流（Click Stream）是指用户在网站上持续访问的轨迹。这个概念更注重用户浏览网站的整个流程。用户对网站的每次访问包含了一系列的点击动作行为，这些点击行为数据就构成了点击流数据（Click Stream Data），它代表了用户浏览网站的整个流程。</p>
<p>点击流和网站日志是两个不同的概念，点击流是从用户的角度出发，注重用户浏览网站的整个流程；而网站日志是面向整个站点，它包含了用户行为数据、服务器响应数据等众多日志信息，我们通过对网站日志的分析可以获得用户的点击流数据。</p>
<p>网站是由多个网页（Page）构成，当用户在访问多个网页时，网页与网页之间是靠Referrers参数来标识上级网页来源。由此，可以确定网页被依次访问的顺序,当然也可以通过时间来标识访问的次序。其次，用户对网站的每次访问，可视作是一次会话（Session），在网站日志中将会用不同的Sessionid来唯一标识每次会话。如果把Page视为&ldquo;点&rdquo;的话，那么我们可以很容易的把Session描绘成一条&ldquo;线&rdquo;,也就是用户的点击流数据轨迹曲线。</p>
<p align="center"><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190628183924141-946480218.png" alt="" /></p>
<p align="center">图：点击流概念模型</p>
<h3>1.2． 点击流模型生成</h3>
<p>点击流数据在具体操作上是由散点状的点击日志数据梳理所得。点击数据在数据建模时存在两张模型表Pageviews和visits，例如：</p>
<p>原始访问日志表</p>
<table style="width: 86%;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="21%">
<p>时间戳</p>
</td>
<td valign="top" width="12%">
<p>IP地址</p>
</td>
<td valign="top" width="16%">
<p>请求URL</p>
</td>
<td valign="top" width="17%">
<p>Referal</p>
</td>
<td valign="top" width="16%">
<p>响应吗</p>
</td>
<td valign="top" width="16%">
<p>&hellip;&hellip;&hellip;&hellip;&hellip;</p>
</td>
</tr>
<tr>
<td valign="top" width="21%">
<p>2012-01-01 12:31:12</p>
</td>
<td valign="top" width="12%">
<p>101.0.0.1</p>
</td>
<td valign="top" width="16%">
<p>/a/...</p>
</td>
<td valign="top" width="17%">
<p>somesite.com</p>
</td>
<td valign="top" width="16%">
<p>200</p>
</td>
<td valign="top" width="16%">
<p>&nbsp;</p>
</td>
</tr>
<tr>
<td valign="top" width="21%">
<p>2012-01-01 12:31:16</p>
</td>
<td valign="top" width="12%">
<p>201.0.0.2</p>
</td>
<td valign="top" width="16%">
<p>/a/...</p>
</td>
<td valign="top" width="17%">
<p>-</p>
</td>
<td valign="top" width="16%">
<p>200</p>
</td>
<td valign="top" width="16%">
<p>&nbsp;</p>
</td>
</tr>
<tr>
<td valign="top" width="21%">
<p>2012-01-01 12:33:06</p>
</td>
<td valign="top" width="12%">
<p>101.0.0.2</p>
</td>
<td valign="top" width="16%">
<p>/b/...</p>
</td>
<td valign="top" width="17%">
<p>baidu.com</p>
</td>
<td valign="top" width="16%">
<p>200</p>
</td>
<td valign="top" width="16%">
<p>&nbsp;</p>
</td>
</tr>
<tr>
<td valign="top" width="21%">
<p>2012-01-01 15:16:39</p>
</td>
<td valign="top" width="12%">
<p>234.0.0.3</p>
</td>
<td valign="top" width="16%">
<p>/c/...</p>
</td>
<td valign="top" width="17%">
<p>google.com</p>
</td>
<td valign="top" width="16%">
<p>304</p>
</td>
<td valign="top" width="16%">
<p>&nbsp;</p>
</td>
</tr>
<tr>
<td valign="top" width="21%">
<p>2012-01-01 15:17:11</p>
</td>
<td valign="top" width="12%">
<p>101.0.0.1</p>
</td>
<td valign="top" width="16%">
<p>/d/...</p>
</td>
<td valign="top" width="17%">
<p>/c/...</p>
</td>
<td valign="top" width="16%">
<p>404</p>
</td>
<td valign="top" width="16%">
<p>&nbsp;</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>页面点击流模型Pageviews表</p>
<p>这个模型强调的是对一个用户的一次访问session的信息识别</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top">
<p>Session</p>
</td>
<td valign="top">
<p>IP地址</p>
</td>
<td valign="top">
<p>时间</p>
</td>
<td valign="top">
<p>访问页面URL</p>
</td>
<td valign="top">
<p>停留时长</p>
</td>
<td valign="top">
<p>第几步</p>
</td>
</tr>
<tr>
<td valign="top">
<p>S001</p>
</td>
<td valign="top">
<p>101.0.0.1</p>
</td>
<td valign="top">
<p>2012-01-01 12:31:12</p>
</td>
<td valign="top">
<p>/a/....</p>
</td>
<td valign="top">
<p>30</p>
</td>
<td valign="top">
<p>1</p>
</td>
</tr>
<tr>
<td valign="top">
<p>S002</p>
</td>
<td valign="top">
<p>201.0.0.2</p>
</td>
<td valign="top">
<p>2012-01-01 12:31:16</p>
</td>
<td valign="top">
<p>/a/....</p>
</td>
<td valign="top">
<p>10</p>
</td>
<td valign="top">
<p>1</p>
</td>
</tr>
<tr>
<td valign="top">
<p>S002</p>
</td>
<td valign="top">
<p>201.0.0.2</p>
</td>
<td valign="top">
<p>2012-01-01 12:33:06</p>
</td>
<td valign="top">
<p>/b/....</p>
</td>
<td valign="top">
<p>110</p>
</td>
<td valign="top">
<p>2</p>
</td>
</tr>
<tr>
<td valign="top">
<p>S002</p>
</td>
<td valign="top">
<p>201.0.0.2</p>
</td>
<td valign="top">
<p>2012-01-01 12:35:06</p>
</td>
<td valign="top">
<p>/e/....</p>
</td>
<td valign="top">
<p>30</p>
</td>
<td valign="top">
<p>3</p>
</td>
</tr>
<tr>
<td valign="top">
<p>S003</p>
</td>
<td valign="top">
<p>201.0.0.2</p>
</td>
<td valign="top">
<p>2012-01-01 15:35:06</p>
</td>
<td valign="top">
<p>/a/....</p>
</td>
<td valign="top">
<p>20</p>
</td>
<td valign="top">
<p>1</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>点击流模型Visits表(按session聚集的页面访问信息)</p>
<p>强调的是一次访问session内的起始与结束时间点的情况</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top">
<p>Session</p>
</td>
<td valign="top">
<p>起始时间</p>
</td>
<td valign="top">
<p>结束时间</p>
</td>
<td valign="top">
<p>进入页面</p>
</td>
<td valign="top">
<p>离开页面</p>
</td>
<td valign="top">
<p>访问页面数</p>
</td>
<td valign="top">
<p>IP</p>
</td>
<td valign="top">
<p>referal</p>
</td>
</tr>
<tr>
<td valign="top">
<p>S001</p>
</td>
<td valign="top">
<p>2012-01-01 12:31:12</p>
</td>
<td valign="top">
<p>2012-01-01 12:31:12</p>
</td>
<td valign="top">
<p>/a/...</p>
</td>
<td valign="top">
<p>/a/...</p>
</td>
<td valign="top">
<p>1</p>
</td>
<td valign="top">
<p>101.0.0.1</p>
</td>
<td valign="top">
<p>somesite.com</p>
</td>
</tr>
<tr>
<td valign="top">
<p>S002</p>
</td>
<td valign="top">
<p>2012-01-01 12:31:16</p>
</td>
<td valign="top">
<p>2012-01-01 12:35:06</p>
</td>
<td valign="top">
<p>/a/...</p>
</td>
<td valign="top">
<p>/e/...</p>
</td>
<td valign="top">
<p>3</p>
</td>
<td valign="top">
<p>201.0.0.2</p>
</td>
<td valign="top">
<p>-</p>
</td>
</tr>
<tr>
<td valign="top">
<p>S003</p>
</td>
<td valign="top">
<p>2012-01-01 12:35:42</p>
</td>
<td valign="top">
<p>2012-01-01 12:35:42</p>
</td>
<td valign="top">
<p>/c/...</p>
</td>
<td valign="top">
<p>/c/...</p>
</td>
<td valign="top">
<p>1</p>
</td>
<td valign="top">
<p>234.0.0.3</p>
</td>
<td valign="top">
<p>baidu.com</p>
</td>
</tr>
<tr>
<td valign="top">
<p>S003</p>
</td>
<td valign="top">
<p>2012-01-01 15:16:39</p>
</td>
<td valign="top">
<p>2012-01-01 15:19:23</p>
</td>
<td valign="top">
<p>/c/...</p>
</td>
<td valign="top">
<p>/e/...</p>
</td>
<td valign="top">
<p>3</p>
</td>
<td valign="top">
<p>101.0.0.1</p>
</td>
<td valign="top">
<p>google.com</p>
</td>
</tr>
<tr>
<td valign="top">
<p>&hellip;&hellip;</p>
</td>
<td valign="top">
<p>&hellip;&hellip;</p>
</td>
<td valign="top">
<p>&hellip;&hellip;</p>
</td>
<td valign="top">
<p>&hellip;&hellip;</p>
</td>
<td valign="top">
<p>&hellip;&hellip;</p>
</td>
<td valign="top">
<p>&hellip;&hellip;</p>
</td>
<td valign="top">
<p>&hellip;&hellip;</p>
</td>
<td valign="top">
<p>&hellip;&hellip;</p>
</td>
</tr>
</tbody>
</table>
<h2>2． 如何进行网站流量分析</h2>
<p>流量分析整体来说是一个内涵非常丰富的体系，整体过程是一个金字塔结构：</p>
<p align="center"><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190628184022024-1381352164.png" alt="" /></p>
<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p>金字塔的顶部是网站的目标：投资回报率（ROI）。</p>
<h3>2.1． 网站流量分析模型举例</h3>
<h4>网站流量质量分析（流量分析）</h4>
<p>流量对于每个网站来说都是很重要，但流量并不是越多越好，应该更加看重流量的质量，换句话来说就是流量可以为我们带来多少收入。</p>
<p align="center"><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190628184102938-1146232000.png" alt="" /></p>
<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p>X轴代表量，指网站获得的访问量。Y轴代表质，指可以促进网站目标的事件次数（比如商品浏览、注册、购买等行为）。圆圈大小表示获得流量的成本。</p>
<p>BD流量是指商务拓展流量。一般指的是互联网经过运营或者竞价排名等方式，从外部拉来的流量。比如电商网站在百度上花钱来竞价排名，产生的流量就是BD流量的一部分。</p>
<h4>网站流量多维度细分（流量分析）</h4>
<p>细分是指通过不同维度对指标进行分割，查看同一个指标在不同维度下的表现，进而找出有问题的那部分指标，对这部分指标进行优化。</p>
<p align="center"><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190628184117559-1323258808.png" alt="" /></p>
<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<h4>网站内容及导航分析（内容分析）</h4>
<p>对于所有网站来说，页面都可以被划分为三个类别：</p>
<p>导航页、功能页、内容页</p>
<p>导航页的目的是引导访问者找到信息，功能页的目的是帮助访问者完成特定任务，内容页的目的是向访问者展示信息并帮助访问者进行 决策。</p>
<p>首页和列表页都是典型的导航页；</p>
<p>站内搜索页面、注册表单页面和购物车页面都是典型的功能页，</p>
<p>而产品详情页、新闻和文章页都是典型的内容页。</p>
<p>比如从内容导航分析中，以下两类行为就是网站运营者不希望看到的行为：</p>
<p align="center"><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190628184127337-1190848648.png" alt="" /></p>
<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p>第一个问题：访问者从导航页（首页）还没有看到内容页面之前就从导航页离开网站，需要分析导航页造成访问者中途离开的原因。</p>
<p>第二个问题：访问者从导航页进入内容页后，又返回到导航页，说明需要分析内容页的最初设计，并考虑中内容页提供交叉的信息推荐。</p>
<p align="left">&nbsp;</p>
<h4>网站转化以及漏斗分析（转化分析）</h4>
<p>所谓转化，即网站业务流程中的一个封闭渠道，引导用户按照流程最终实现业务目标（比如商品成交）；而漏斗模型则是指进入渠道的用户在各环节递进过程中逐渐流失的形象描述；</p>
<p>对于转化渠道，主要进行两部分的分析：</p>
<p><strong>访问者的流失和迷失</strong></p>
<p>l&nbsp; 阻力的流失</p>
<p>造成流失的原因很多，如：</p>
<p>不恰当的商品或活动推荐</p>
<p>对支付环节中专业名词的解释、帮助信息等内容不当</p>
<p align="center"><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190628184143516-511674113.png" alt="" /></p>
<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp;</p>
<p>l&nbsp; 迷失</p>
<p>造成迷失的主要原因是转化流量设计不合理，访问者在特定阶段得不到需要的信息，并且不能根据现有的信息作出决策，比如在线购买演唱会门票，直到支付也没看到在线选座的提示，这时候就很可能会产生迷失，返回查看。</p>
<p align="center"><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190628184151606-998910884.png" alt="" /></p>
<p>&nbsp;</p>
<p align="center">&nbsp;</p>
<p><strong>总之，网站数据分析是一门内容非常丰富的学科，本课程中主要关注网站流量分析过程中的技术运用，更多关于网站数据分析的业务知识可学习文档首页推荐的资料。</strong></p>
<p>&nbsp;</p>]]></description></item><item><title>第3节 sqoop：7、通过java代码远程连接linux执行shell命令</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11096081.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 27 Jun 2019 03:35:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11096081.html</guid><description><![CDATA[<p><br />数据库的数据同步软件<br />sqoop  数据同步  关系型数据库到大数据平台</p>
<p>任务：sqoop 是批量导入数据太慢，如何做到实时的数据同步<br />	<br />	实时的数据同步工具：<br />	  canal 阿里开源的一个数据库数据实时同步的软件，解析mysql的binlog日志进行数据同步<br />	  streamset  数据库的数据同步工具<br />	  flume 采集mysql的变化的数据，github上面有这样的一个项目，自定义source实时抽取mysql的数据<br />	  </p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">==================================================================</span></p>
<h1>3、java执行shell命令</h1>
<p>需求描述：在实际工作中，总会有些时候需要我们通过java代码通过远程连接去linux服务器上面执行一些shell命令，包括一些集群的状态管理，执行任务，集群的可视化界面操作等等，所以我们可以通过java代码来执行linux服务器的shell命令</p>
<p>为了解决上述问题，google公司给提出了对应的解决方案，开源出来了一个jar包叫做sshxcute，通过这个jar包我们可以通过java代码，非常便捷的操作我们的linux服务器了</p>
<p>项目地址如下：</p>
<p><a href="https://code.google.com/archive/p/sshxcute/">https://code.google.com/archive/p/sshxcute/</a></p>
<p>使用说明</p>
<p><a href="https://www.ibm.com/developerworks/cn/opensource/os-sshxcute/">https://www.ibm.com/developerworks/cn/opensource/os-sshxcute/</a></p>
<h2>第一步：创建maven的java工程并导入jar包</h2>
<p>由于这个jar包没有maven坐标，所以需要我们手动导入并添加到工程的build path当中去</p>
<p>&nbsp;</p>
<h2>第二步：开发测试用例</h2>
<div>
<p class="a">&nbsp;&nbsp;&nbsp; <strong>public</strong> <strong>static</strong> <strong>void</strong> main(String[] args) <strong>throws</strong> TaskExecFailException {</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ConnBean connBean = <strong>new</strong> ConnBean("192.168.8.100", "root", "yourpassword");</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SSHExec instance = SSHExec.<em>getInstance</em>(connBean);</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; instance.connect();</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExecCommand execCommand = <strong>new</strong> ExecCommand("echo 'hello world'");</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; instance.exec(execCommand);</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; instance.disconnect();</p>
<p class="a">&nbsp;&nbsp;&nbsp; }</p>


</div>
<p>&nbsp;</p>]]></description></item><item><title>第3节 sqoop：6、sqoop的数据增量导入和数据导出</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11095830.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 27 Jun 2019 03:02:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11095830.html</guid><description><![CDATA[<h4>增量导入</h4>
<p>在实际工作当中，数据的导入，很多时候都是只需要导入增量数据即可，并不需要将表中的数据全部导入到hive或者hdfs当中去，肯定会出现重复的数据的状况，所以我们一般都是选用一些字段进行增量的导入，为了支持增量的导入，sqoop也给我们考虑到了这种情况并且支持增量的导入数据</p>
<p>增量导入是仅导入新添加的表中的行的技术。</p>
<p>它需要添加&lsquo;incremental&rsquo;, &lsquo;check-column&rsquo;, 和 &lsquo;last-value&rsquo;选项来执行增量导入。</p>
<p>下面的语法用于Sqoop导入命令增量选项。</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>--incremental &lt;mode&gt;</p>
<p>--check-column &lt;column name&gt;</p>
<p>--last value &lt;last check column value&gt;</p>
<p>&nbsp;</p>
</td>
</tr>
</tbody>
</table>
<h5>第一种增量导入使用上面的选项来实现</h5>
<p>导入emp表当中id大于1202的所有数据</p>
<p>注意：增量导入的时候，一定不能加参数--delete-target-dir否则会报错</p>
<div>
<p class="a">bin/sqoop import \</p>
<p class="a">--connect jdbc:mysql://192.168.8.120:3306/userdb \</p>
<p class="a">--username root \</p>
<p class="a">--password root \</p>
<p class="a">--table emp \</p>
<p class="a">--incremental append \</p>
<p class="a">--check-column id \</p>
<p class="a">--last-value 1202&nbsp; \</p>
<p class="a">-m 1 \</p>
<p class="a">--target-dir /sqoop/increment</p>
</div>
<p>&nbsp;</p>
<p>查看数据内容</p>
<div>
<p class="a">hdfs dfs -text /sqoop/increment/part*</p>
</div>
<p>&nbsp;</p>
<h5>第二种增量导入通过--where条件来实现</h5>
<p>或者我们使用--where来进行控制数据的选取会更加精准</p>
<div>
<p class="a">bin/sqoop import \</p>
<p class="a">--connect jdbc:mysql://192.168.8.120:3306/userdb \</p>
<p class="a">--username root \</p>
<p class="a">--password root &nbsp;\</p>
<p class="a">--table emp \</p>
<p class="a">--incremental append&nbsp; \</p>
<p class="a">--where "create_time &gt; '2018-06-17 00:00:00' and is_delete='1' and create_time &lt; '2018-06-17 23:59:59'" \</p>
<p class="a">--target-dir /sqoop/increment2 \</p>
<p class="a">--check-column id&nbsp; \</p>
<p class="a">--m 1</p>
</div>
<p><span style="color: #ff0000;">作业：增量导入hive表中该如何实现？？？</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">面试题：如何解决减量数据？？？</span></p>
<p>答：根据我们的create_time&nbsp; 与update_time 两个条件可以判断我们哪些数据是前一天新增的，或者是前一天修改的</p>
<p>bin/sqoop import \</p>
<p>--connect jdbc:mysql://192.168.8.120:3306/userdb \</p>
<p>--username root \</p>
<p>--password root&nbsp; \</p>
<p>--table emp \</p>
<p>--incremental append&nbsp; \</p>
<p>--where "(create_time &gt; '2018-06-17 00:00:00' and is_delete='1' and create_time &lt; '2018-06-17 23:59:59') or (update_time&nbsp; &gt; '2018-06-17 00:00:00'&nbsp; and&nbsp; update_time &lt; '2018-06-17 23:59:59')"&nbsp; \</p>
<p>--check-column id&nbsp; \</p>
<p>--target-dir /sqoop/increment3&nbsp; \</p>
<p>-m 1</p>
<p>&nbsp;</p>
<h2>3.6、 Sqoop的数据导出</h2>
<p><strong>1</strong><strong>、将数据从HDFS</strong><strong>把文件导出到RDBMS</strong><strong>数据库</strong></p>
<p>导出前，目标表必须存在于目标数据库中。</p>
<p class="1">u&nbsp; 默认操作是从将文件中的数据使用INSERT语句插入到表中</p>
<p class="1">u&nbsp; 更新模式下，是生成UPDATE语句更新表数据</p>
<h3>hdfs导出到mysql</h3>
<p>数据是在HDFS当中的如下目录/sqoop/emp，数据内容如下</p>
<p>1201,gopal,manager,50000,TP,2018-06-17 18:54:32.0,2018-06-17 18:54:32.0,1</p>
<p>1202,manisha,Proof reader,50000,TP,2018-06-15 18:54:32.0,2018-06-17 20:26:08.0,1</p>
<p>1203,khalil,php dev,30000,AC,2018-06-17 18:54:32.0,2018-06-17 18:54:32.0,1</p>
<p>1204,prasanth,php dev,30000,AC,2018-06-17 18:54:32.0,2018-06-17 21:05:52.0,0</p>
<p>1205,kranthi,admin,20000,TP,2018-06-17 18:54:32.0,2018-06-17 18:54:32.0,1</p>
<h4>第一步：创建mysql表</h4>
<div>
<p class="a">CREATE TABLE `emp_out` (</p>
<p class="a">&nbsp; `id` INT(11) DEFAULT NULL,</p>
<p class="a">&nbsp; `name` VARCHAR(100) DEFAULT NULL,</p>
<p class="a">&nbsp; `deg` VARCHAR(100) DEFAULT NULL,</p>
<p class="a">&nbsp; `salary` INT(11) DEFAULT NULL,</p>
<p class="a">&nbsp; `dept` VARCHAR(10) DEFAULT NULL,</p>
<p class="a">&nbsp; `create_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,</p>
<p class="a">&nbsp; `update_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</p>
<p class="a">&nbsp; `is_delete` BIGINT(20) DEFAULT '1'</p>
<p class="a">) ENGINE=INNODB DEFAULT CHARSET=utf8;</p>
</div>
<h4>第二步：执行导出命令</h4>
<p>通过export来实现数据的导出，将hdfs的数据导出到mysql当中去</p>
<div>
<p class="a">bin/sqoop export \</p>
<p class="a">--connect jdbc:mysql://172.16.43.67:3306/userdb \</p>
<p class="a">--username root --password admin \</p>
<p class="a">--table emp_out \</p>
<p class="a">--export-dir /sqoop/emp \</p>
<p class="a">--input-fields-terminated-by ","</p>
</div>
<h4>第三步：验证mysql表数据</h4>
<p>&nbsp;</p>
<h2><span style="text-decoration: line-through;">3.7</span><span style="text-decoration: line-through;">、 Sqoop</span><span style="text-decoration: line-through;">作业（了解，一般用不到）</span></h2>
<p>&nbsp;</p>
<h2>3.8、Sqoop一些常用命令及参数（用到的时候再翻翻）</h2>
<p>&nbsp;</p>]]></description></item><item><title>mysql创建数据库并设置字符集编码</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11094795.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 26 Jun 2019 18:09:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11094795.html</guid><description><![CDATA[<p>create database `mydb` character set utf8 collate utf8_general_ci;</p>]]></description></item><item><title>mysql5.7修改账户密码</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11094792.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 26 Jun 2019 17:58:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11094792.html</guid><description><![CDATA[<p><strong>一、首次登录时，修改root账户的密码：</strong></p>
<p>vim /etc/my.cnf&nbsp;</p>
<p>在末尾添加&nbsp;<span class="hljs-keyword">skip<span class="hljs-attribute">-grant<span class="hljs-attribute">-tables ，保存。</span></span></span></p>
<p>&nbsp;</p>
<p>service mysqld restart&nbsp;</p>
<p>&nbsp;</p>
<p>再次登录时，不需要密码验证：</p>
<p>　　mysql -uroot</p>
<p>mysql&gt; use mysql<br />mysql&gt; update user set authentication_string=password('HEpan693640.') where user='root';<br />mysql&gt; flush privileges;<br />mysql&gt; quit</p>
<p>&nbsp;</p>
<p>上面修改的密码相当于在mysql安装的时候的初始化的密码变成了我们修改的密码。所以下次正常登录系统后mysql数据库还是要你把原始密码修改掉。</p>
<p>vim /etc/my.cnf&nbsp; &nbsp; ，注释或删掉&nbsp;skip<span class="hljs-attribute">-grant<span class="hljs-attribute">-tables</span></span></p>
<p>service mysqld restart&nbsp;</p>
<p>&nbsp;</p>
<p>再次以账户密码登录：</p>
<p>mysql -uroot -pHEpan693640.&nbsp;</p>
<p>此时系统会提示你修改密码，并且必须使用ALTER USER的方式修改，另外，无法执行其他任何语句：</p>
<p>mysql&gt; alter user 'root'@'localhost' identified by 'root';</p>
<p>此时系统报错：<span style="color: #ff0000;">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span></p>
<p>原因：是密码策略过于严格。</p>
<p>将密码设置复杂些，符合密码策略： mysql&gt; alter user 'root'@'localhost' identified by 'Root1@345';</p>
<p>然后，可以执行其他语句了。</p>
<p>&nbsp;</p>
<p>我还想把密码修改得简洁些，于是需要修改密码策略：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190627015248614-1682112262.png" alt="" /></p>
<p>&nbsp;</p>
<p>修改密码策略：</p>
<p>mysql&gt;&nbsp;set global validate_password_length=1;</p>
<p>mysql&gt; set global validate_password_mixed_case_count=0;</p>
<p>mysql&gt; set global validate_password_number_count=0;</p>
<p>mysql&gt; set global validate_password_policy='LOW';</p>
<p>mysql&gt; set global validate_password_special_char_count=0;</p>
<p>&nbsp;</p>
<p>修改过后密码策略如下：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190627015407040-807357592.png" alt="" /></p>
<p>&nbsp;</p>
<p>然后再次执行alter user，或其他修改密码的方法 即可。</p>
<p>&nbsp;</p>
<p><strong>二、其他时候修改密码的方法：</strong></p>
<p>1、mysql&gt; alter user 'root'@'localhost' identified by 'root';</p>
<p>2、mysql&gt;&nbsp;set password=password('root');</p>
<p>3、[root@node03 ~]# /usr/bin/mysql_secure_installation，然后根据提示往下走。</p>
<p>4、vim /etc/my.cnf&nbsp; 在末尾添加&nbsp; validate-password=<span class="hljs-value"><span class="hljs-keyword">OFF，也可以跳过密码验证。</span></span></p>
<p>&nbsp;</p>]]></description></item><item><title>linux(centos6.9)下rpm方式安装mysql后mysql服务无法启动</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11094749.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 26 Jun 2019 17:00:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11094749.html</guid><description><![CDATA[<p>以下两种方式启动都报错：启动失败：</p>
<p>[root@node03 ~]# service mysqld start<br />MySQL Daemon failed to start.<br />Starting mysqld:                                           [FAILED]</p>
<p>&nbsp;</p>
<p>[root@node03 ~]# /etc/init.d/mysqld start<br />MySQL Daemon failed to start.<br />Starting mysqld:                                           [FAILED]</p>
<p>&nbsp;</p>
<p>原因：旧版本的MySQL软件移除时没有删除原来的数据文件，即 /var/lib/mysql/路径下的内容。</p>
<p>解决方法：删除该路径下的所有内容，包括文件和文件夹。</p>
<p>&nbsp;</p>
<p>再次启动，报错另一个错误：</p>
<p>[root@node03 ~]# service mysqld start<br />Initializing MySQL database:  2019-06-26T16:37:53.977336Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).<br />2019-06-26T16:37:54.359914Z 0 [Warning] InnoDB: New log files created, LSN=45790<br />2019-06-26T16:37:54.431696Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.<br />2019-06-26T16:37:54.502670Z 0 [ERROR] <span style="color: #ff0000;">unknown variable 'default-character-set=utf8'</span><br />2019-06-26T16:37:54.502687Z 0 [ERROR] Aborting</p>
<p>                                                           [FAILED]</p>
<p>原因：/etc/my.cnf的配置文件中，我配置了default-character-set，但MySQL5.7貌似不认该参数。</p>
<p>解决方法：把所有的default-character-set配置项注释掉，或删除掉。</p>
<p>&nbsp;</p>
<p>再次启动，报第三个错误：</p>
<p>[root@node03 ~]# service mysqld start<br />Initializing MySQL database:  2019-06-26T16:46:34.713514Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).<br />2019-06-26T16:46:34.715422Z 0 [ERROR] <span style="color: #ff0000;">--initialize specified but the data directory has files in it. Aborting.</span><br />2019-06-26T16:46:34.715447Z 0 [ERROR] Aborting</p>
<p>                                                           [FAILED]</p>
<p>原因：由于第二次的启动失败，在/var/lib/mysql/路径下残留了一些文件，由于MySQL初始化时需要该路径下没有任何内容，所以启动失败。</p>
<p>解决方法：清空该路径下的所有内容。</p>
<p>&nbsp;</p>
<p>再次启动，成功！</p>
<p>[root@node03 ~]# service mysqld start<br />Initializing MySQL database:  2019-06-26T16:47:53.295945Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp se  er option (see documentation for more details).<br />2019-06-26T16:47:53.633116Z 0 [Warning] InnoDB: New log files created, LSN=45790<br />2019-06-26T16:47:53.699952Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.<br />2019-06-26T16:47:53.817335Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 246937da-9832-11e9-9e76-00505632a066.<br />2019-06-26T16:47:53.826311Z 0 [Warning] Gtid table is not ready to be used. Table 'mysql.gtid_executed' cannot be opened.<br />2019-06-26T16:47:53.832203Z 1 [Note] A temporary password is generated for root@localhost: nlaJ#thW=9zQ<br />                                                           [  OK  ]<br />Starting mysqld:                                           [  OK  ]</p>
<p>&nbsp;</p>]]></description></item><item><title>linux(centos6.9)下使用yum安装mysql，及启动MySQL等</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11094703.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 26 Jun 2019 16:22:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/27/11094703.html</guid><description><![CDATA[<p>查看系统自带的mysql版本：rpm -qa | grep mysql</p>
<p>卸载mysql：rpm -e mysql-libs-5.1.73-8.el6_8.x86_64 --nodeps</p>
<p>&nbsp;</p>
<p>1.&nbsp;安装mysql 服务器端：</p>
<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;yum -y install mysql-server mysql-devel</p>
<p>2.&nbsp;安装mysql客户端：</p>
<p>&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; yum install mysql</p>
<p>3.&nbsp;启动mysql服务：</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; service mysqld start或者/etc/init.d/mysqld start</p>
<p>停止：</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; service mysqld stop</p>
<p>重启：</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; service mysqld restart</p>
<p>4.&nbsp;创建root管理员：</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mysqladmin -u root password root</p>
<p>5.登陆</p>
<p>mysql -uroot -proot</p>
<p>&nbsp;</p>
<p>6.root权限</p>
<p>GRANT ALL PRIVILEGES ON *.* TO root@"%" IDENTIFIED BY "root";</p>
<p>flush privileges;</p>
<p>&nbsp;</p>
<p>设置mysql的开机启动</p>
<p>chkconfig --add mysqld</p>
<p>chkconfig mysqld on</p>]]></description></item><item><title>CentOS6.9用rpm安装MySQL5.7</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/26/11093226.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 26 Jun 2019 11:05:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/26/11093226.html</guid><description><![CDATA[<p>whereis mysql</p>
<p>yum -y remove mysql-libs</p>
<p>&nbsp;</p>
<p>yum clean dbcache&nbsp;</p>
<p><br />wget http://repo.mysql.com/mysql57-community-release-el7-11.noarch.rpm</p>
<p>rpm -ivh mysql57-community-release-el7-11.noarch.rpm</p>
<p>yum -y install mysql-community-server</p>
<p>&nbsp;</p>
<p>service mysqld start</p>
<p>mysql -uroot</p>
<p>update user set password=PASSWORD("123456") where user='root';</p>
<p>flush privileges;</p>
<p>quit</p>
<p>mysql -uroot</p>
<p>mysql -uroot -p123456</p>
<p>&nbsp;</p>
<p>错误：</p>
<p>执行 yum -y install mysql-community-server 时报错：</p>
<p><span style="color: #ff0000;">Error: Package: mysql-community-client-5.7.26-1.el7.x86_64 (mysql57-community)</span><br /><span style="color: #ff0000;">           Requires: libstdc++.so.6(GLIBCXX_3.4.15)(64bit)</span><br />Error: Package: mysql-community-server-5.7.26-1.el7.x86_64 (mysql57-community)<br />           Requires: libstdc++.so.6(GLIBCXX_3.4.15)(64bit)<br />Error: Package: mysql-community-libs-5.7.26-1.el7.x86_64 (mysql57-community)<br />           Requires: libc.so.6(GLIBC_2.14)(64bit)<br />Error: Package: mysql-community-server-5.7.26-1.el7.x86_64 (mysql57-community)<br />           Requires: libc.so.6(GLIBC_2.17)(64bit)<br />Error: Package: mysql-community-server-5.7.26-1.el7.x86_64 (mysql57-community)<br />           Requires: systemd<br />Error: Package: mysql-community-client-5.7.26-1.el7.x86_64 (mysql57-community)<br />           Requires: libc.so.6(GLIBC_2.14)(64bit)<br />Error: Package: mysql-community-server-5.7.26-1.el7.x86_64 (mysql57-community)<br />           Requires: libsasl2.so.3()(64bit)</p>
<p>原因：</p>
<p>该文中的rpm包&ldquo;mysql57-community-release-el7-11.noarch.rpm&rdquo;，是适用于centos 7 的。</p>
<p>解决方法：下载适用于centos6.9的rpm包：&nbsp;wget https://dev.mysql.com/get/mysql57-community-release-el6-9.noarch.rpm</p>
<p>查看安装的mysql。<br /># yum list installed |grep mysql</p>
<p>查看系统自带的mysql版本：rpm -qa | grep mysql</p>
<p>mysql-libs.x86_64 5.1.73-8.el6_8 @base<br />mysql57-community-release.noarch</p>
<p>删除安装的mysql。<br /># yum -y remove mysql57-community-release.noarch</p>
<p>重新下载mysql的rpm文件。<br /># wget https://dev.mysql.com/get/mysql57-community-release-el6-9.noarch.rpm</p>
<p>安装Mysql的yum源。<br /># rpm -ivh mysql57-community-release-el6-9.noarch.rpm</p>
<p>安装Mysql。<br /># yum install mysql-community-server<br />如果这是还报Package: mysql-community-server-5.7.25-1.el7.x86_64 (mysql57-community)，执行下# yum clean all。Mysql安装成功。<br />--------------------&nbsp;</p>
<p>转载自：https://blog.csdn.net/YYYQYYY/article/details/77469723&nbsp;</p>
<p>　　　　https://blog.csdn.net/u011886447/article/details/89166946&nbsp;</p>
<p>在原文的基础上略有优化。</p>]]></description></item><item><title>MySQL设置各类字符集</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/26/11093191.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 26 Jun 2019 10:56:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/26/11093191.html</guid><description><![CDATA[<p>一、查看字符集编码：</p>
<p>登录mysql</p>
<p><code class="java plain">show variables like&nbsp;</code><code class="java string">'%character%'</code><code class="java plain">;</code></p>
<p>&nbsp;</p>
<p>二、修改编码：</p>
<p>编辑/etc/my.cnf ，设置后的配置文件如下：</p>
<p>[root@node03 /]# cat /etc/my.cnf <br />[mysql]<br />default-character-set=utf8<br />[mysqld]<br />datadir=/var/lib/mysql<br />socket=/var/lib/mysql/mysql.sock<br />user=mysql<br /># Disabling symbolic-links is recommended to prevent assorted security risks<br />symbolic-links=0<br />default-character-set=utf8<br />character_set_server=utf8<br />#lower_case_table_names=1 忽略大小写</p>
<p>[mysqld_safe]<br />log-error=/var/log/mysqld.log<br />pid-file=/var/run/mysqld/mysqld.pid<br />default-character-set=utf8<br />[mysql.server]<br />default-character-set=utf8<br />[client]<br />default-character-set=utf8</p>
<p>&nbsp;</p>
<p>三、重启MySQL服务：</p>
<p>service mysql restart</p>
<p>&nbsp;</p>
<p>四、如果上面的都修改了还乱码，那剩下问题就一定在connection连接层上。解决方法是在发送查询前执行一下下面这句（直接写在SQL文件的最前面）：</p>
<p><code>SET NAMES 'utf8';</code></p>
<p>它相当于下面的三句指令：<code><br />SET character_set_client = utf8;<br />SET character_set_results = utf8;<br />SET character_set_connection = utf8;</code></p>
<p>&nbsp;</p>
<p>执行show variables like 'character%' 跟下面一样说明修改成功</p>
<div class="cnblogs_Highlighter sh-gutter">
<div>
<div id="highlighter_39769" class="syntaxhighlighter  java">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java plain">mysql&gt; show variables like&nbsp;</code><code class="java string">'character%'</code><code class="java plain">;</code></div>
<div class="line number2 index1 alt1"><code class="java plain">+--------------------------+----------------------------+</code></div>
<div class="line number3 index2 alt2"><code class="java plain">| Variable_name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |</code></div>
<div class="line number4 index3 alt1"><code class="java plain">+--------------------------+----------------------------+</code></div>
<div class="line number5 index4 alt2"><code class="java plain">| character_set_client&nbsp;&nbsp;&nbsp;&nbsp; | utf8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |</code></div>
<div class="line number6 index5 alt1"><code class="java plain">| character_set_connection | utf8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |</code></div>
<div class="line number7 index6 alt2"><code class="java plain">| character_set_database&nbsp;&nbsp; | utf8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |</code></div>
<div class="line number8 index7 alt1"><code class="java plain">| character_set_filesystem | binary&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |</code></div>
<div class="line number9 index8 alt2"><code class="java plain">| character_set_results&nbsp;&nbsp;&nbsp; | utf8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |</code></div>
<div class="line number10 index9 alt1"><code class="java plain">| character_set_server&nbsp;&nbsp;&nbsp;&nbsp; | utf8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |</code></div>
<div class="line number11 index10 alt2"><code class="java plain">| character_set_system&nbsp;&nbsp;&nbsp;&nbsp; | utf8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |</code></div>
<div class="line number12 index11 alt1"><code class="java plain">| character_sets_dir&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | /usr/share/mysql/charsets/ |</code></div>
<div class="line number13 index12 alt2"><code class="java plain">+--------------------------+----------------------------+</code></div>
<div class="line number14 index13 alt1"><code class="java value">8</code>&nbsp;<code class="java plain">rows in set (</code><code class="java value">0.00</code>&nbsp;<code class="java plain">sec)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>]]></description></item><item><title>MySQL导出数据库和导入数据库</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/26/11093159.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 26 Jun 2019 10:50:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/26/11093159.html</guid><description><![CDATA[<h3>一、导出：</h3>
<p class="prettyprint prettyprinted"><span class="pln">语法：</span><span class="pln">mysqldump&nbsp;--default-character-set=utf8&nbsp;<span class="pun">-<span class="pln">u<span class="pun">用户名<span class="pln"> <span class="pun">-<span class="pln">p密码&nbsp;<span class="pun">数据库名 -d&nbsp;--add-drop-table<span class="pln"> <span class="pun">&gt;<span class="pln">&nbsp;导出文件名<span class="pun">.<span class="pln">sql</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class="prettyprint prettyprinted"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><strong>注意：</strong></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln">密码可以省略，如果省略，则程序会提示输入密码；</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class="prettyprint prettyprinted"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln">-d&nbsp; &nbsp;只导出表结构，没有表数据；</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class="prettyprint prettyprinted"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln">--add-drop-table&nbsp; &nbsp;--add-drop-table 在每个create语句之前增加一个drop table；</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class="prettyprint prettyprinted"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln">--default-character-set=utf8&nbsp; &nbsp;指定导出数据库的字符集编码</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class="prettyprint prettyprinted"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln">mysqldump 命令路径是根据你 MySQL 安装路径决定的，不过一般在任意路径下都可以使用该命令；</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class="prettyprint prettyprinted">&nbsp;</p>
<p>eg.&nbsp;</p>
<p class="prettyprint prettyprinted"><span class="com">#&nbsp;mysqldump&nbsp;--default-character-set=utf8 -uroot -proot hive &gt; /dbbak/hive20190626.sql</span></p>
<p>&nbsp;</p>
<p class="prettyprint prettyprinted">&nbsp;</p>
<h3>二、导入：</h3>
<p class="prettyprint prettyprinted"><span class="pln">方法一、</span></p>
<p class="prettyprint prettyprinted"><span class="pln">语法：</span><span class="pln">mysql&nbsp;--default-character-set=utf8&nbsp;<span class="pun">-<span class="pln">u<span class="pun">用户名<span class="pln"> <span class="pun">-<span class="pln">p密码&nbsp;<span class="pun">数据库名<span class="pln"> <span class="pun">&lt;<span class="pln"> 导出文件名<span class="pun">.<span class="pln">sql</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class="prettyprint prettyprinted"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><span class="pun"><span class="pln"><strong>注意：</strong></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>密码可以省略，如果省略，则程序会提示输入密码；</p>
<p>--default-character-set=utf8 指定导出数据库的字符集编码</p>
<p>&nbsp;</p>
<p>eg.</p>
<p class="prettyprint prettyprinted"><span class="com">#&nbsp;mysql --default-character-set=utf8 -uroot -proot hive&nbsp;&lt; hive20190626.sql</span></p>
<p class="prettyprint prettyprinted">&nbsp;</p>
<p>方法二、</p>
<p>使用 source 命令导入。使用 source 命令需要我们先登录到 mysql 中，并创建一个空的数据库：</p>
<p class="prettyprint prettyprinted"><span class="pln">mysql<span class="pun">&gt;<span class="pln"> create database abc<span class="pun">;<span class="pln"> <span class="com"># 创建数据库<span class="pln"> mysql<span class="pun">&gt;<span class="pln"> <span class="kwd">use<span class="pln"> abc<span class="pun">;<span class="pln"> <span class="com"># 使用已创建的数据库 <span class="pln"> mysql<span class="pun">&gt;<span class="pln"> <span class="kwd">set<span class="pln"> names utf8<span class="pun">;<span class="pln"> <span class="com"># 设置编码<span class="pln"><span style="color: #ff0000;"> mysql</span><span class="pun"><span style="color: #ff0000;">&gt;</span><span class="pln"><span style="color: #ff0000;"> source </span><span class="pun"><span style="color: #ff0000;">/</span><span class="pln"><span style="color: #ff0000;">home</span><span class="pun"><span style="color: #ff0000;">/</span><span class="pln"><span style="color: #ff0000;">abc</span><span class="pun"><span style="color: #ff0000;">/</span><span class="pln"><span style="color: #ff0000;">abc</span><span class="pun"><span style="color: #ff0000;">.</span><span class="pln"><span style="color: #ff0000;">sql ( 此句也是如何在mysql中执行sql文件的语法 ！ )</span> <span class="com"># 导入备份数据库</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>注意你备份的 sql 文件路径。</p>
<p>&nbsp;</p>]]></description></item><item><title>第3节 sqoop：4、sqoop的数据导入之导入数据到hdfs和导入数据到hive表</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/26/11089163.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 26 Jun 2019 04:20:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/26/11089163.html</guid><description><![CDATA[<p><br /> 注意：</p>
<p>（1）\001  是hive当中默认使用的分隔符，这个玩意儿是一个asc  码值，键盘上面打不出来</p>
<p>（2）linux中一行写不下，可以末尾加上 一些空格和 &ldquo; \ &rdquo;，换行继续写余下的命令：</p>
<p>bin/sqoop import --connect jdbc:mysql://192.168.25.24:3306/userdb --username root --password admin --table \<br />emp --fields-terminated-by '\001' \<br />--hive-import \<br />--hive-table sqooptohive.emp_hive \<br />--hive-overwrite \<br />--delete-target-dir -m 1</p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">============================================================</span></p>
<h2>3.5、 Sqoop的数据导入</h2>
<p>&ldquo;导入工具&rdquo;导入单个表从RDBMS到HDFS。表中的每一行被视为HDFS的记录。所有记录都存储为文本文件的文本数据（或者Avro、sequence文件等二进制数据）&nbsp;</p>
<h3>列举出所有的数据库</h3>
<p>命令行查看帮助</p>
<div>
<p class="a">bin/sqoop list-databases --help</p>
</div>
<p>&nbsp;</p>
<p>列出win7主机所有的数据库</p>
<div>
<p class="a">bin/sqoop list-databases --connect jdbc:mysql://172.16.43.67:3306/ --username root --password admin</p>
</div>
<p>&nbsp;</p>
<p>查看某一个数据库下面的所有数据表</p>
<div>
<p class="a">bin/sqoop list-tables --connect jdbc:mysql://172.16.43.67:3306/userdb --username root --password admin</p>
</div>
<p>&nbsp;</p>
<h3>其它导入示例</h3>
<h4>表数据</h4>
<p>在mysql中有一个库userdb中三个表：emp,&nbsp;emp_add和emp_conn</p>
<p>表emp:</p>
<table style="width: 437px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="66">
<p><strong>id</strong></p>
</td>
<td valign="top" width="97">
<p><strong>name</strong></p>
</td>
<td valign="top" width="128">
<p><strong>deg</strong></p>
</td>
<td valign="top" width="82">
<p><strong>salary</strong></p>
</td>
<td valign="top" width="64">
<p><strong>dept</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="66">
<p>1201</p>
</td>
<td valign="top" width="97">
<p>gopal</p>
</td>
<td valign="top" width="128">
<p>manager</p>
</td>
<td valign="top" width="82">
<p>50,000</p>
</td>
<td valign="top" width="64">
<p>TP</p>
</td>
</tr>
<tr>
<td valign="top" width="66">
<p>1202</p>
</td>
<td valign="top" width="97">
<p>manisha</p>
</td>
<td valign="top" width="128">
<p>Proof reader</p>
</td>
<td valign="top" width="82">
<p>50,000</p>
</td>
<td valign="top" width="64">
<p>TP</p>
</td>
</tr>
<tr>
<td valign="top" width="66">
<p>1203</p>
</td>
<td valign="top" width="97">
<p>khalil</p>
</td>
<td valign="top" width="128">
<p>php dev</p>
</td>
<td valign="top" width="82">
<p>30,000</p>
</td>
<td valign="top" width="64">
<p>AC</p>
</td>
</tr>
<tr>
<td valign="top" width="66">
<p>1204</p>
</td>
<td valign="top" width="97">
<p>prasanth</p>
</td>
<td valign="top" width="128">
<p>php dev</p>
</td>
<td valign="top" width="82">
<p>30,000</p>
</td>
<td valign="top" width="64">
<p>AC</p>
</td>
</tr>
<tr>
<td valign="top" width="66">
<p>1205</p>
</td>
<td valign="top" width="97">
<p>kranthi</p>
</td>
<td valign="top" width="128">
<p>admin</p>
</td>
<td valign="top" width="82">
<p>20,000</p>
</td>
<td valign="top" width="64">
<p>TP</p>
</td>
</tr>
</tbody>
</table>
<p>表emp_add:</p>
<table style="width: 435px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="93">
<p><strong>id</strong></p>
</td>
<td valign="top" width="96">
<p><strong>hno</strong></p>
</td>
<td valign="top" width="117">
<p><strong>street</strong></p>
</td>
<td valign="top" width="128">
<p><strong>city</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="93">
<p>1201</p>
</td>
<td valign="top" width="96">
<p>288A</p>
</td>
<td valign="top" width="117">
<p>vgiri</p>
</td>
<td valign="top" width="128">
<p>jublee</p>
</td>
</tr>
<tr>
<td valign="top" width="93">
<p>1202</p>
</td>
<td valign="top" width="96">
<p>108I</p>
</td>
<td valign="top" width="117">
<p>aoc</p>
</td>
<td valign="top" width="128">
<p>sec-bad</p>
</td>
</tr>
<tr>
<td valign="top" width="93">
<p>1203</p>
</td>
<td valign="top" width="96">
<p>144Z</p>
</td>
<td valign="top" width="117">
<p>pgutta</p>
</td>
<td valign="top" width="128">
<p>hyd</p>
</td>
</tr>
<tr>
<td valign="top" width="93">
<p>1204</p>
</td>
<td valign="top" width="96">
<p>78B</p>
</td>
<td valign="top" width="117">
<p>old city</p>
</td>
<td valign="top" width="128">
<p>sec-bad</p>
</td>
</tr>
<tr>
<td valign="top" width="93">
<p>1205</p>
</td>
<td valign="top" width="96">
<p>720X</p>
</td>
<td valign="top" width="117">
<p>hitec</p>
</td>
<td valign="top" width="128">
<p>sec-bad</p>
</td>
</tr>
</tbody>
</table>
<p>表emp_conn:</p>
<p>&nbsp;</p>
<table style="width: 433px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="97">
<p><strong>id</strong></p>
</td>
<td valign="top" width="142">
<p><strong>phno</strong></p>
</td>
<td valign="top" width="194">
<p><strong>email</strong></p>
</td>
</tr>
<tr>
<td valign="top" width="97">
<p>1201</p>
</td>
<td valign="top" width="142">
<p>2356742</p>
</td>
<td valign="top" width="194">
<p>gopal@tp.com</p>
</td>
</tr>
<tr>
<td valign="top" width="97">
<p>1202</p>
</td>
<td valign="top" width="142">
<p>1661663</p>
</td>
<td valign="top" width="194">
<p>manisha@tp.com</p>
</td>
</tr>
<tr>
<td valign="top" width="97">
<p>1203</p>
</td>
<td valign="top" width="142">
<p>8887776</p>
</td>
<td valign="top" width="194">
<p>khalil@ac.com</p>
</td>
</tr>
<tr>
<td valign="top" width="97">
<p>1204</p>
</td>
<td valign="top" width="142">
<p>9988774</p>
</td>
<td valign="top" width="194">
<p>prasanth@ac.com</p>
</td>
</tr>
<tr>
<td valign="top" width="97">
<p>1205</p>
</td>
<td valign="top" width="142">
<p>1231231</p>
</td>
<td valign="top" width="194">
<p>kranthi@tp.com</p>
</td>
</tr>
</tbody>
</table>
<h4>导入数据库表数据到HDFS</h4>
<p>下面的命令用于从MySQL数据库服务器中的emp表导入HDFS。</p>
<div>
<p class="a">bin/sqoop import --connect jdbc:mysql://192.168.1.101:3306/userdb --password admin --username root --table emp --m 1</p>
</div>
<p>如果成功执行，那么会得到下面的输出。</p>
<p>&nbsp;</p>
<p>为了验证在HDFS导入的数据，请使用以下命令查看导入的数据</p>
<div>
<p class="a">hdfs&nbsp; dfs&nbsp; -ls &nbsp;/user/root/emp</p>
</div>
<p>&nbsp;</p>
<h4>导入到HDFS指定目录</h4>
<p>在导入表数据到HDFS使用Sqoop导入工具，我们可以指定目标目录。</p>
<p>使用参数 --target-dir来指定导出目的地，</p>
<p>使用参数&mdash;delete-target-dir来判断导出目录是否存在，如果存在就删掉</p>
<div>
<p class="a">bin/sqoop import&nbsp; --connect jdbc:mysql://172.16.43.67:3306/userdb --username root --password admin --delete-target-dir --table emp&nbsp; --target-dir /sqoop/emp --m 1</p>
</div>
<p>查看导出的数据</p>
<div>
<p class="a">hdfs dfs -text /sqoop/emp/part-m-00000</p>
</div>
<p>&nbsp;</p>
<p>它会用逗号（，）分隔emp_add表的数据和字段。</p>
<div>
<p class="a">1201,gopal,manager,50000,TP</p>
<p class="a">1202,manisha,Proof reader,50000,TP</p>
<p class="a">1203,khalil,php dev,30000,AC</p>
<p class="a">1204,prasanth,php dev,30000,AC</p>
<p class="a">1205,kranthi,admin,20000,TP</p>
</div>
<h4>导入到hdfs指定目录并指定字段之间的分隔符</h4>
<div>
<p class="a">bin/sqoop import&nbsp; --connect jdbc:mysql://172.16.43.67:3306/userdb --username root --password admin --delete-target-dir --table emp&nbsp; --target-dir /sqoop/emp2 -m 1 --fields-terminated-by '\t'</p>
</div>
<p>查看文件内容</p>
<p>hdfs dfs -text /sqoop/emp2/part-m-00000</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>导入关系表到HIVE</h4>
<h5>第一步：拷贝jar包</h5>
<p>将我们mysql表当中的数据直接导入到hive表中的话，我们需要将hive的一个叫做hive-exec-1.1.0-cdh5.14.0.jar的jar包拷贝到sqoop的lib目录下</p>
<div>
<p class="a">cp /export/servers/hive-1.1.0-cdh5.14.0/lib/hive-exec-1.1.0-cdh5.14.0.jar /export/servers/sqoop-1.4.6-cdh5.14.0/lib/</p>
</div>
<p>&nbsp;</p>
<h5>第二步：准备hive数据库与表</h5>
<p>将我们mysql当中的数据导入到hive表当中来</p>
<div>
<p class="a">hive (default)&gt; create database sqooptohive;</p>
<p class="a">hive (default)&gt; use sqooptohive;</p>
<p class="a">hive (sqooptohive)&gt; create external table emp_hive(id int,name string,deg string,salary int ,dept string) row format delimited fields terminated by '\001';</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h5>第三步：开始导入</h5>
<div>
<p class="a">bin/sqoop import --connect jdbc:mysql://172.16.43.67:3306/userdb --username root --password admin --table emp --fields-terminated-by '\001' --hive-import --hive-table sqooptohive.emp_hive --hive-overwrite --delete-target-dir -m 1</p>
</div>
<p>&nbsp;</p>
<h5>第四步：hive表数据查看</h5>
<p>select * from emp_hive;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>导入关系表到hive并自动创建hive表</h4>
<p>我们也可以通过命令来将我们的mysql的表直接导入到hive表当中去</p>
<div>
<p class="a">bin/sqoop import --connect jdbc:mysql://172.16.43.67:3306/userdb --username root --password admin --table emp_conn --hive-import -m 1 --hive-database sqooptohive;</p>
</div>
<p>通过这个命令，我们可以直接将我们mysql表当中的数据以及表结构一起倒入到hive当中去</p>]]></description></item><item><title>第3节 sqoop：5、实现数据的控制导入</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/26/11089165.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 26 Jun 2019 04:20:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/26/11089165.html</guid><description><![CDATA[<h4>导入表数据子集</h4>
<p>我们可以导入表的使用Sqoop导入工具，"where"子句的一个子集。它执行在各自的数据库服务器相应的SQL查询，并将结果存储在HDFS的目标目录。</p>
<p>where子句的语法如下。</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>--where &lt;condition&gt;</p>
</td>
</tr>
</tbody>
</table>
<p>按照条件进行查找，通过&mdash;where参数来查找表emp_add当中city字段的值为sec-bad的所有数据导入到hdfs上面去</p>
<div>
<p class="a">bin/sqoop import \</p>
<p class="a">--connect jdbc:mysql://172.16.43.67:3306/userdb \</p>
<p class="a">--username root --password admin --table emp_add \</p>
<p class="a">--target-dir /sqoop/emp_add -m 1&nbsp; --delete-target-dir \</p>
<p class="a">--where "city = 'sec-bad'"</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>sql语句查找导入hdfs</h4>
<p>我们还可以通过 &ndash;query参数来指定我们的sql语句，通过sql语句来过滤我们的数据进行导入</p>
<p>&nbsp;</p>
<div>
<p class="a">bin/sqoop import \</p>
<p class="a">--connect jdbc:mysql://172.16.43.67:3306/userdb --username root --password admin \</p>
<p class="a">--delete-target-dir -m 1 \</p>
<p class="a">--query 'select phno from emp_conn where 1=1 and&nbsp; $CONDITIONS'<a href="file:///D:/Study/BigData/heima/stage2/7%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A6%BB%E7%BA%BF%E7%AC%AC%E4%B8%83%E5%A4%A9/%E7%AC%AC%E4%B8%83%E5%A4%A9%E6%95%99%E6%A1%88_%E8%BE%85%E5%8A%A9%E7%B3%BB%E7%BB%9F%E4%B9%8Bflume%E2%80%94%E2%80%94azkaban%E2%80%94%E2%80%94sqoop.docx#_msocom_1">[a1]</a>&nbsp; \</p>
<p class="a">--target-dir /sqoop/emp_conn</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>查看hdfs数据内容</p>
<div>
<p class="a">hdfs dfs -text /sqoop/emp_conn/part*</p>
</div>
<div><hr align="left" size="1" width="33%" />
<div>
<div>
<p>&nbsp;<a href="file:///D:/Study/BigData/heima/stage2/7%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A6%BB%E7%BA%BF%E7%AC%AC%E4%B8%83%E5%A4%A9/%E7%AC%AC%E4%B8%83%E5%A4%A9%E6%95%99%E6%A1%88_%E8%BE%85%E5%8A%A9%E7%B3%BB%E7%BB%9F%E4%B9%8Bflume%E2%80%94%E2%80%94azkaban%E2%80%94%E2%80%94sqoop.docx#_msoanchor_1">[a1]</a>使用sql语句来进行查找是不能加参数--table</p>
<p>并且必须要添加where条件，</p>
<p>并且where条件后面必须带一个$CONDITIONS 这个字符串，</p>
<p>并且这个sql语句必须用单引号，不能用双引号</p>
</div>
</div>
</div>]]></description></item><item><title>第3节 sqoop：3、sqoop的入门测试使用</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/26/11088732.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 26 Jun 2019 03:08:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/26/11088732.html</guid><description><![CDATA[<h2>3.5、 Sqoop的数据导入</h2>
<p>&ldquo;导入工具&rdquo;导入单个表从RDBMS到HDFS。表中的每一行被视为HDFS的记录。所有记录都存储为文本文件的文本数据（或者Avro、sequence文件等二进制数据）&nbsp;</p>
<h3>列举出所有的数据库</h3>
<p>命令行查看帮助</p>
<div>
<p class="a">bin/sqoop list-databases --help</p>
</div>
<p>&nbsp;</p>
<p>列出win7主机所有的数据库</p>
<div>
<p class="a">bin/sqoop list-databases --connect jdbc:mysql://172.16.43.67:3306/ --username root --password admin</p>
</div>
<p>&nbsp;</p>
<p>查看某一个数据库下面的所有数据表</p>
<div>
<p class="a">bin/sqoop list-tables --connect jdbc:mysql://172.16.43.67:3306/userdb --username root --password admin</p>
<p class="a">&nbsp;</p>
<p>开启mysql的远程连接权限<br />GRANT ALL  PRIVILEGES ON *.*  TO 'root'@'%'  IDENTIFIED BY 'yourpassword' WITH  GRANT  OPTION;<br />FLUSH  PRIVILEGES;</p>
<p>&nbsp;</p>
</div>]]></description></item><item><title>第3节 sqoop：2、sqoop的基本简介和安装</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11087075.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 25 Jun 2019 14:20:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11087075.html</guid><description><![CDATA[<h1>3. sqoop数据迁移</h1>
<h2>3.1、概述</h2>
<p>sqoop是apache旗下一款<strong>&ldquo;</strong><strong>Hadoop</strong><strong>和关系数据库服务器之间传送数据&rdquo;</strong>的工具。</p>
<p><strong>导入数据</strong>：MySQL，Oracle导入数据到Hadoop的HDFS、HIVE、HBASE等数据存储系统；</p>
<p><strong>导出数据：</strong>从Hadoop的文件系统中导出数据到关系数据库mysql等</p>
<p>&nbsp;</p>
<h2>3.2、sqoop1与sqoop2架构对比</h2>
<h3>sqoop1架构</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190626105234722-742972242.png" alt="" /></p>
<p>&nbsp;</p>
<h3>sqoop2架构</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190626105219816-813156387.png" alt="" /></p>
<p>&nbsp;</p>
<h2>3.3、工作机制</h2>
<p>将导入或导出命令翻译成mapreduce程序来实现</p>
<p>在翻译出的mapreduce中主要是对inputformat和outputformat进行定制</p>
<h2>3.4 、sqoop实战及原理</h2>
<h3>3.4.1 sqoop安装</h3>
<p>安装sqoop的前提是已经具备java和hadoop的环境</p>
<h4>1、下载并解压</h4>
<p>下载地址</p>
<p><a href="http://archive.cloudera.com/cdh5/cdh/5/">http://archive.cloudera.com/cdh5/cdh/5/</a></p>
<p>sqoop1版本详细下载地址</p>
<p><a href="http://archive.cloudera.com/cdh5/cdh/5/sqoop-1.4.6-cdh5.14.0.tar.gz">http://archive.cloudera.com/cdh5/cdh/5/sqoop-1.4.6-cdh5.14.0.tar.gz</a></p>
<p>sqoop2版本详细下载地址</p>
<p><a href="http://archive.cloudera.com/cdh5/cdh/5/sqoop2-1.99.5-cdh5.14.0.tar.gz">http://archive.cloudera.com/cdh5/cdh/5/sqoop2-1.99.5-cdh5.14.0.tar.gz</a></p>
<p>&nbsp;</p>
<p>我们这里使用sqoop1的版本，下载之后上传到/export/softwares目录下，然后进行解压</p>
<p class="code">cd /export/softwares</p>
<p class="code">tar -zxvf sqoop-1.4.6-cdh5.14.0.tar.gz -C ../servers/</p>
<h4>2、修改配置文件</h4>
<p class="code">cd /export/servers/sqoop-1.4.6-cdh5.14.0/conf/</p>
<p class="code">cp sqoop-env-template.sh&nbsp; sqoop-env.sh</p>
<p class="code">vim sqoop-env.sh</p>
<div>
<p class="a">export HADOOP_COMMON_HOME=/export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="a">export HADOOP_MAPRED_HOME=/export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="a">export HIVE_HOME=/export/servers/hive-1.1.0-cdh5.14.0</p>
</div>
<p>&nbsp;</p>
<h4>3、加入额外的依赖包</h4>
<p>sqoop的使用需要添加两个额外的依赖包，一个是mysql的驱动包，一个是java-json的的依赖包，不然就会报错</p>
<p>mysql-connector-java-5.1.40.jar</p>
<p>java-json.jar</p>
<p>&nbsp;</p>
<p>将这个两个jar包添加到sqoop的lib目录下</p>
<p>&nbsp;</p>
<h4>4、验证启动</h4>
<div>
<p class="a">cd /export/servers/sqoop-1.4.6-cdh5.14.0</p>
<p class="a">bin/sqoop-version</p>
</div>
<p>&nbsp;</p>]]></description></item><item><title>第2节 azkaban调度：1、azkaban的调度任务使用</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11087073.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 25 Jun 2019 14:18:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11087073.html</guid><description><![CDATA[<h2>2.4 Azkaban实战</h2>
<p>Azkaba内置的任务类型支持command、java</p>
<p>&nbsp;</p>
<h3>Command类型单一job示例</h3>
<h4>创建job描述文件</h4>
<p>创建文本文件，更改名称为mycommand.job</p>
<p>注意后缀.txt一定不要带上，保存为格式为UFT-8 without bom</p>
<p>内容如下</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>type=command</p>
<p>command=echo 'hello world'</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>将job资源文件打包成zip文件</h4>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>创建project并上传压缩包</h4>
<p>通过azkaban的web管理平台创建project并上传job压缩包</p>
<p>首先创建project</p>
<p>&nbsp;</p>
<p>上传zip包</p>
<p>&nbsp;</p>
<h4>启动执行job</h4>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Command类型多job工作流flow</h3>
<p>1、创建有依赖关系的多个job描述</p>
<p>第一个job：foo.job</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>type=command</p>
<p>command=echo 'foo'</p>
</td>
</tr>
</tbody>
</table>
<p>第二个job：bar.job依赖foo.job</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>type=command</p>
<p>dependencies=foo</p>
<p>command=echo 'bar'</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>2、将所有job资源文件打到一个zip包中</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>3、在azkaban的web管理界面创建工程并上传zip包</p>
<p>4、启动工作流flow</p>
<p>&nbsp;</p>
<h3>HDFS操作任务</h3>
<p>1、创建job描述文件fs.job</p>
<div>
<p class="a">type=command</p>
<p class="a">command=/export/servers/hadoop-2.6.0-cdh5.14.0/bin/hadoop fs -mkdir /azkaban</p>
</div>
<p>2、将job资源文件打包成zip文件</p>
<p>&nbsp;</p>
<p>3、通过azkaban的web管理平台创建project并上传job压缩包</p>
<p>4、启动执行该job</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>MAPREDUCE任务</h3>
<p>Mr任务依然可以使用command的job类型来执行</p>
<p>1、创建job描述文件，及mr程序jar包（示例中直接使用hadoop自带的example jar）</p>
<div>
<p class="a">type=command</p>
<p class="a">command=/export/servers/hadoop-2.6.0-cdh5.14.0/bin/hadoop jar hadoop-mapreduce-examples-2.6.0-cdh5.14.0.jar pi 3 5</p>
</div>
<p>&nbsp;</p>
<p>2、将所有job资源文件打到一个zip包中</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>3、在azkaban的web管理界面创建工程并上传zip包</p>
<p>4、启动job</p>
<h3>HIVE脚本任务</h3>
<p>l&nbsp; 创建job描述文件和hive脚本</p>
<p>Hive脚本： hive.sql</p>
<div>
<p class="a">create database if not exists azhive;</p>
<p class="a">use azhive;</p>
<p class="a">create table if not exists aztest(id string,name string) row format delimited fields terminated by '\t';</p>
</div>
<p>Job描述文件：hive.job</p>
<div>
<p class="a">type=command</p>
<p class="a">command=/export/servers/hive-1.1.0-cdh5.14.0/bin/hive -f 'hive.sql'</p>
</div>
<p>&nbsp;</p>
<p>将所有job资源文件打到一个zip包中</p>
<p>&nbsp;</p>
<p>在azkaban的web管理界面创建工程并上传zip包</p>
<p>启动job</p>
<p>&nbsp;</p>
<h3>azkaban的定时任务</h3>
<p>使用azkaban的scheduler功能可以实现对我们的作业任务进行定时调度功能</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625221603384-1863765356.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625221509891-468070244.png" alt="" /></p>
<p>&nbsp;</p>
<p>*/1 * ? * *&nbsp; 每分钟执行一次定时调度任务</p>
<p>0 1 ? * *&nbsp; 每天晚上凌晨一点钟执行这个任务</p>
<p>0 */2 ? * *&nbsp; 每隔两个小时定时执行这个任务</p>
<p>30 21 ? * * 每天晚上九点半定时执行这个任务</p>
<p>注：可以网上搜索在线crontab表达式生成器。</p>]]></description></item><item><title>修改linux的时区问题</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11085416.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 25 Jun 2019 12:32:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11085416.html</guid><description><![CDATA[<h4>修改linux的时区问题</h4>
<p>配置服务器节点上的时区的步骤：</p>
<p>1、先<span style="color: #ff0000;">生成</span>时区配置文件Asia/<span style="color: #ff0000;">Shanghai</span>，用交互式命令 tzselect 即可；</p>
<p>2、拷贝该时区文件，覆盖系统本地时区配置：</p>
<p>cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime&nbsp;</p>
<p>（注：由于先前做好了时钟同步（同步阿里云的时间），所以不用担心时区问题，不需要修改时区了。）</p>
<p>&nbsp;</p>
<p><span style="color: #ffffff; background-color: #000000;">[root@node03 azkaban-web-server-3.51.0]# tzselect</span><br /><span style="color: #ffffff; background-color: #000000;">Please identify a location so that time zone rules can be set correctly.</span><br /><span style="color: #ffffff; background-color: #000000;">Please select a continent or ocean.</span><br /><span style="color: #ffffff; background-color: #000000;"> 1) Africa</span><br /><span style="color: #ffffff; background-color: #000000;"> 2) Americas</span><br /><span style="color: #ffffff; background-color: #000000;"> 3) Antarctica</span><br /><span style="color: #ffffff; background-color: #000000;"> 4) Arctic Ocean</span><br /><span style="color: #ffffff; background-color: #000000;"> 5) Asia</span><br /><span style="color: #ffffff; background-color: #000000;"> 6) Atlantic Ocean</span><br /><span style="color: #ffffff; background-color: #000000;"> 7) Australia</span><br /><span style="color: #ffffff; background-color: #000000;"> 8) Europe</span><br /><span style="color: #ffffff; background-color: #000000;"> 9) Indian Ocean</span><br /><span style="color: #ffffff; background-color: #000000;">10) Pacific Ocean</span><br /><span style="color: #ffffff; background-color: #000000;">11) none - I want to specify the time zone using the Posix TZ format.</span><br /><span style="color: #ffffff; background-color: #000000;">#? 5</span><br /><span style="color: #ffffff; background-color: #000000;">Please select a country.</span><br /><span style="color: #ffffff; background-color: #000000;"> 1) Afghanistan		  18) Israel		    35) Palestine</span><br /><span style="color: #ffffff; background-color: #000000;"> 2) Armenia		  19) Japan		    36) Philippines</span><br /><span style="color: #ffffff; background-color: #000000;"> 3) Azerbaijan		  20) Jordan		    37) Qatar</span><br /><span style="color: #ffffff; background-color: #000000;"> 4) Bahrain		  21) Kazakhstan	    38) Russia</span><br /><span style="color: #ffffff; background-color: #000000;"> 5) Bangladesh		  22) Korea (North)	    39) Saudi Arabia</span><br /><span style="color: #ffffff; background-color: #000000;"> 6) Bhutan		  23) Korea (South)	    40) Singapore</span><br /><span style="color: #ffffff; background-color: #000000;"> 7) Brunei		  24) Kuwait		    41) Sri Lanka</span><br /><span style="color: #ffffff; background-color: #000000;"> 8) Cambodia		  25) Kyrgyzstan	    42) Syria</span><br /><span style="color: #ffffff; background-color: #000000;"> 9) China		  26) Laos		    43) Taiwan</span><br /><span style="color: #ffffff; background-color: #000000;">10) Cyprus		  27) Lebanon		    44) Tajikistan</span><br /><span style="color: #ffffff; background-color: #000000;">11) East Timor		  28) Macau		    45) Thailand</span><br /><span style="color: #ffffff; background-color: #000000;">12) Georgia		  29) Malaysia		    46) Turkmenistan</span><br /><span style="color: #ffffff; background-color: #000000;">13) Hong Kong		  30) Mongolia		    47) United Arab Emirates</span><br /><span style="color: #ffffff; background-color: #000000;">14) India		  31) Myanmar (Burma)	    48) Uzbekistan</span><br /><span style="color: #ffffff; background-color: #000000;">15) Indonesia		  32) Nepal		    49) Vietnam</span><br /><span style="color: #ffffff; background-color: #000000;">16) Iran		  33) Oman		    50) Yemen</span><br /><span style="color: #ffffff; background-color: #000000;">17) Iraq		  34) Pakistan</span><br /><span style="color: #ffffff; background-color: #000000;">#? 9</span><br /><span style="color: #ffffff; background-color: #000000;">Please select one of the following time zone regions.</span><br /><span style="color: #ffffff; background-color: #000000;">1) Beijing Time</span><br /><span style="color: #ffffff; background-color: #000000;">2) Xinjiang Time</span><br /><span style="color: #ffffff; background-color: #000000;">#? 1</span></p>
<p><span style="color: #ffffff; background-color: #000000;">The following information has been given:</span></p>
<p><span style="color: #ffffff; background-color: #000000;">	China</span><br /><span style="color: #ffffff; background-color: #000000;">	Beijing Time</span></p>
<p><span style="color: #ffffff; background-color: #000000;">Therefore TZ='Asia/Shanghai' will be used.</span><br /><span style="color: #ffffff; background-color: #000000;">Local time is now:	Tue Jun 25 20:24:16 CST 2019.</span><br /><span style="color: #ffffff; background-color: #000000;">Universal Time is now:	Tue Jun 25 12:24:16 UTC 2019.</span><br /><span style="color: #ffffff; background-color: #000000;">Is the above information OK?</span><br /><span style="color: #ffffff; background-color: #000000;">1) Yes</span><br /><span style="color: #ffffff; background-color: #000000;">2) No</span><br /><span style="color: #ffffff; background-color: #000000;">#?Yes</span></p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 azkaban调度：17、azkaban的两个服务模式的安装</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11084605.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 25 Jun 2019 10:35:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11084605.html</guid><description><![CDATA[<h3>2.3.3、azkaban两个服务模式安装</h3>
<h4>1、确认所需软件：</h4>
<h5>Azkaban Web服务安装包</h5>
<p>azkaban-web-server-0.1.0-SNAPSHOT.tar.gz</p>
<h5>Azkaban执行服务安装包</h5>
<p>azkaban-exec-server-0.1.0-SNAPSHOT.tar.gz</p>
<p>&nbsp;</p>
<h5>编译之后的sql脚本</h5>
<p>create-all-sql-0.1.0-SNAPSHOT.sql</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625183201939-1119204522.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h5>C程序文件脚本</h5>
<p>execute-as-user.c程序</p>
<h4>2、数据库准备</h4>
<p>进入mysql的客户端执行以下命令</p>
<p>&nbsp;</p>
<p class="code">mysql&nbsp; -uroot -p</p>
<p>&nbsp;</p>
<p>执行以下命令：</p>
<p class="code">CREATE DATABASE azkaban;</p>
<p class="code">CREATE USER 'azkaban'@'%' IDENTIFIED BY 'azkaban';&nbsp;&nbsp;&nbsp;</p>
<p class="code">GRANT all privileges ON azkaban.* to 'azkaban'@'%' identified by 'azkaban' WITH GRANT OPTION;</p>
<p class="code">flush privileges;</p>
<p class="code">use azkaban;</p>
<p class="code">source /export/softwares/create-all-sql-0.1.0-SNAPSHOT.sql;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>3、解压软件安装包</h4>
<p>解压azkaban-web-server</p>
<div>
<p class="a">cd /export/softwares</p>
<p class="a">tar -zxvf azkaban-web-server-0.1.0-SNAPSHOT.tar.gz -C ../servers/</p>
<p class="a">cd /export/servers</p>
<p class="a">mv azkaban-web-server-0.1.0-SNAPSHOT/ azkaban-web-server-3.51.0</p>
</div>
<p>&nbsp;</p>
<p>解压azkaban-exec-server</p>
<div>
<p class="a">cd /export/softwares</p>
<p class="a">tar -zxvf azkaban-exec-server-0.1.0-SNAPSHOT.tar.gz -C ../servers/</p>
<p class="a">cd /export/servers</p>
<p class="a">mv azkaban-exec-server-0.1.0-SNAPSHOT/ azkaban-exec-server-3.51.0</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>4、安装SSL安全认证</h4>
<p>安装ssl安全认证，允许我们使用https的方式访问我们的azkaban的web服务</p>
<p>密码一定要一个个的字母输入，或者粘贴也行</p>
<div>
<p class="a">cd /export/servers/azkaban-web-server-3.51.0</p>
<p class="a">keytool -keystore keystore -alias jetty -genkey -keyalg RSA</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>5、azkaban web server安装</h4>
<h5>修改azkaban-web-server的配置文件</h5>
<p class="code">cd /export/servers/azkaban-web-server-3.51.0/conf</p>
<p class="code">vim azkaban.properties</p>
<p>&nbsp;</p>
<div>
<p class="a"># Azkaban Personalization Settings</p>
<p class="a">azkaban.name=Azkaban</p>
<p class="a">azkaban.label=My Azkaban</p>
<p class="a">azkaban.color=#FF3601</p>
<p class="a">azkaban.default.servlet.path=/index</p>
<p class="a">web.resource.dir=web/</p>
<p class="a">default.timezone.id=Asia/Shanghai</p>
<p class="a"># Azkaban UserManager class</p>
<p class="a">user.manager.class=azkaban.user.XmlUserManager</p>
<p class="a">user.manager.xml.file=conf/azkaban-users.xml</p>
<p class="a"># Loader for projects</p>
<p class="a">executor.global.properties=conf/global.properties</p>
<p class="a">azkaban.project.dir=projects</p>
<p class="a"># Velocity dev mode</p>
<p class="a">velocity.dev.mode=false</p>
<p class="a"># Azkaban Jetty server properties.</p>
<p class="a">jetty.use.ssl=true</p>
<p class="a">jetty.maxThreads=25</p>
<p class="a">jetty.port=8081</p>
<p class="a">&nbsp;</p>
<p class="a">jetty.ssl.port=8443</p>
<p class="a">jetty.keystore=/export/servers/azkaban-web-server-3.51.0/keystore</p>
<p class="a">jetty.password=azkaban</p>
<p class="a">jetty.keypassword=azkaban</p>
<p class="a">jetty.truststore=/export/servers/azkaban-web-server-3.51.0/keystore</p>
<p class="a">jetty.trustpassword=azkaban</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;</p>
<p class="a"># Azkaban Executor settings</p>
<p class="a"># mail settings</p>
<p class="a">mail.sender=</p>
<p class="a">mail.host=</p>
<p class="a"># User facing web server configurations used to construct the user facing server URLs. They are useful when there is a reverse proxy between Azkaban web servers and users.</p>
<p class="a"># enduser -&gt; myazkabanhost:443 -&gt; proxy -&gt; localhost:8081</p>
<p class="a"># when this parameters set then these parameters are used to generate email links.</p>
<p class="a"># if these parameters are not set then jetty.hostname, and jetty.port(if ssl configured jetty.ssl.port) are used.</p>
<p class="a"># azkaban.webserver.external_hostname=myazkabanhost.com</p>
<p class="a"># azkaban.webserver.external_ssl_port=443</p>
<p class="a"># azkaban.webserver.external_port=8081</p>
<p class="a">job.failure.email=</p>
<p class="a">job.success.email=</p>
<p class="a">lockdown.create.projects=false</p>
<p class="a">cache.directory=cache</p>
<p class="a"># JMX stats</p>
<p class="a">jetty.connector.stats=true</p>
<p class="a">executor.connector.stats=true</p>
<p class="a"># Azkaban mysql settings by default. Users should configure their own username and password.</p>
<p class="a">database.type=mysql</p>
<p class="a">mysql.port=3306</p>
<p class="a">mysql.host=node03</p>
<p class="a">mysql.database=azkaban</p>
<p class="a">mysql.user=azkaban</p>
<p class="a">mysql.password=azkaban</p>
<p class="a">mysql.numconnections=100</p>
</div>
<div>
<p class="a">#Multiple Executor</p>
<p class="a">azkaban.use.multiple.executors=true</p>
<p class="a">#azkaban.executorselector.filters=StaticRemainingFlowSize,MinimumFreeMemory,CpuStatus</p>
<p class="a">azkaban.executorselector.comparator.NumberOfAssignedFlowComparator=1</p>
<p class="a">azkaban.executorselector.comparator.Memory=1</p>
<p class="a">azkaban.executorselector.comparator.LastDispatched=1</p>
<p class="a">azkaban.executorselector.comparator.CpuUsage=1</p>
<p class="a">&nbsp;</p>
<p class="a">azkaban.activeexecutor.refresh.milisecinterval=10000</p>
<p class="a">azkaban.queueprocessing.enabled=true</p>
<p class="a">azkaban.activeexecutor.refresh.flowinterval=10</p>
<p class="a">azkaban.executorinfo.refresh.maxThreads=10</p>
</div>
<p>&nbsp;</p>
<h4>6、azkaban&nbsp; executor server 安装</h4>
<h5>第一步：修改azkaban-exex-server配置文件</h5>
<p>修改azkaban-exec-server的配置文件</p>
<p class="code">cd /export/servers/azkaban-exec-server-3.51.0/conf</p>
<p class="code">vim azkaban.properties</p>
<p>&nbsp;</p>
<div>
<p class="a"># Azkaban Personalization Settings</p>
<p class="a">azkaban.name=Azkaban</p>
<p class="a">azkaban.label=My Azkaban</p>
<p class="a">azkaban.color=#FF3601</p>
<p class="a">azkaban.default.servlet.path=/index</p>
<p class="a">web.resource.dir=web/</p>
<p class="a">default.timezone.id=Asia/Shanghai</p>
<p class="a"># Azkaban UserManager class</p>
<p class="a">user.manager.class=azkaban.user.XmlUserManager</p>
<p class="a">user.manager.xml.file=conf/azkaban-users.xml</p>
<p class="a"># Loader for projects</p>
<p class="a">executor.global.properties=conf/global.properties</p>
<p class="a">azkaban.project.dir=projects</p>
<p class="a"># Velocity dev mode</p>
<p class="a">velocity.dev.mode=false</p>
<p class="a"># Azkaban Jetty server properties.</p>
<p class="a">jetty.use.ssl=true</p>
<p class="a">jetty.maxThreads=25</p>
<p class="a">jetty.port=8081</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;</p>
<p class="a">jetty.keystore=/export/servers/azkaban-web-server-3.51.0/keystore</p>
<p class="a">jetty.password=azkaban</p>
<p class="a">jetty.keypassword=azkaban</p>
<p class="a">jetty.truststore=/export/servers/azkaban-web-server-3.51.0/keystore</p>
<p class="a">jetty.trustpassword=azkaban</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;</p>
<p class="a"># Where the Azkaban web server is located</p>
<p class="a">azkaban.webserver.url=https://node03:8443</p>
<p class="a"># mail settings</p>
<p class="a">mail.sender=</p>
<p class="a">mail.host=</p>
<p class="a"># User facing web server configurations used to construct the user facing server URLs. They are useful when there is a reverse proxy between Azkaban web servers and users.</p>
<p class="a"># enduser -&gt; myazkabanhost:443 -&gt; proxy -&gt; localhost:8081</p>
<p class="a"># when this parameters set then these parameters are used to generate email links.</p>
<p class="a"># if these parameters are not set then jetty.hostname, and jetty.port(if ssl configured jetty.ssl.port) are used.</p>
<p class="a"># azkaban.webserver.external_hostname=myazkabanhost.com</p>
<p class="a"># azkaban.webserver.external_ssl_port=443</p>
<p class="a"># azkaban.webserver.external_port=8081</p>
<p class="a">job.failure.email=</p>
<p class="a">job.success.email=</p>
<p class="a">lockdown.create.projects=false</p>
<p class="a">cache.directory=cache</p>
<p class="a"># JMX stats</p>
<p class="a">jetty.connector.stats=true</p>
<p class="a">executor.connector.stats=true</p>
<p class="a"># Azkaban plugin settings</p>
<p class="a">azkaban.jobtype.plugin.dir=plugins/jobtypes</p>
<p class="a"># Azkaban mysql settings by default. Users should configure their own username and password.</p>
<p class="a">database.type=mysql</p>
<p class="a">mysql.port=3306</p>
<p class="a">mysql.host=node03</p>
<p class="a">mysql.database=azkaban</p>
<p class="a">mysql.user=azkaban</p>
<p class="a">mysql.password=azkaban</p>
<p class="a">mysql.numconnections=100</p>
<p class="a"># Azkaban Executor settings</p>
<p class="a">executor.maxThreads=50</p>
<p class="a">executor.flow.threads=30</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h5>第二步：添加插件</h5>
<p>将我们编译后的C文件execute-as-user.c</p>
<p>上传到这个目录来/export/servers/azkaban-exec-server-3.51.0/plugins/jobtypes</p>
<p>或者直接将我们/export/softwares下面的文件拷贝过来也行</p>
<p class="code">cp /export/softwares/execute-as-user.c /export/servers/azkaban-exec-server-3.51.0/plugins/jobtypes/</p>
<p>然后执行以下命令生成execute-as-user</p>
<div>
<p class="a">yum -y install gcc-c++</p>
<p class="a">cd /export/servers/azkaban-exec-server-3.51.0/plugins/jobtypes</p>
<p class="a">gcc execute-as-user.c -o execute-as-user<a href="file:///D:/Study/BigData/heima/stage2/7%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A6%BB%E7%BA%BF%E7%AC%AC%E4%B8%83%E5%A4%A9/%E7%AC%AC%E4%B8%83%E5%A4%A9%E6%95%99%E6%A1%88_%E8%BE%85%E5%8A%A9%E7%B3%BB%E7%BB%9F%E4%B9%8Bflume%E2%80%94%E2%80%94azkaban%E2%80%94%E2%80%94sqoop.docx#_msocom_1">[a1]</a>&nbsp;</p>
<p class="a">chown root execute-as-user</p>
<p class="a">chmod 6050 execute-as-user</p>
</div>
<p>&nbsp;</p>
<h5>第三步：修改配置文件</h5>
<p>修改配置文件</p>
<p class="code">cd&nbsp; /export/servers/azkaban-exec-server-3.47.0/plugins/jobtypes</p>
<p class="code">vim commonprivate.properties</p>
<div>
<p class="a">execute.as.user=false</p>
<p class="a">memCheck.enabled=false</p>
<p class="a">azkaban.native.lib=/export/servers/azkaban-exec-server-3.51.0/plugins/jobtypes</p>
</div>
<p>&nbsp;</p>
<p>最终生成如下</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625183305920-1909440843.png" alt="" /></p>
<p>&nbsp;</p>
<h4>7、启动服务</h4>
<h5>第一步：启动azkaban exec server</h5>
<div>
<p class="a">cd /export/servers/azkaban-exec-server-3.51.0</p>
<p class="a">bin/start-exec.sh</p>
</div>
<p>&nbsp;</p>
<h5>第二步：激活我们的exec-server</h5>
<p>node03机器任意目录下执行以下命令</p>
<p><span style="color: #ff0000;">（实际测试时，必须在/export/servers/azkaban-exec-server-3.51.0/路径下运行，否则报错）</span></p>
<div>
<p class="a">curl -G "node03:$(&lt;./executor.port)/executor?action=activate" &amp;&amp; echo</p>
</div>
<p>&nbsp;</p>
<h5>第三步：启动azkaban-web-server</h5>
<div>
<p class="a">cd /export/servers/azkaban-web-server-3.51.0/</p>
<p class="a">bin/start-web.sh</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>访问地址：</p>
<p><a href="https://node03:8443/">https://node03:8443</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>修改linux的时区问题</h4>
<p>由于先前做好了时钟同步，所以不用担心时区问题，不需要修改时区了</p>
<p>注：先配置好服务器节点上的时区</p>
<p>1、先生成时区配置文件Asia/Shanghai，用交互式命令 tzselect 即可</p>
<p>2、拷贝该时区文件，覆盖系统本地时区配置</p>
<p>cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime&nbsp;</p>
<div><hr align="left" size="1" width="33%" />
<div>
<div>
<p>&nbsp;<a href="file:///D:/Study/BigData/heima/stage2/7%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A6%BB%E7%BA%BF%E7%AC%AC%E4%B8%83%E5%A4%A9/%E7%AC%AC%E4%B8%83%E5%A4%A9%E6%95%99%E6%A1%88_%E8%BE%85%E5%8A%A9%E7%B3%BB%E7%BB%9F%E4%B9%8Bflume%E2%80%94%E2%80%94azkaban%E2%80%94%E2%80%94sqoop.docx#_msoanchor_1">[a1]</a>如果提示gcc&nbsp; command&nbsp; not&nbsp; found&nbsp; 那么就在线安装gcc+c++即可。 任意目录执行命令 yum&nbsp; -y&nbsp;&nbsp;&nbsp;&nbsp; install&nbsp; gcc-c++</p>
</div>
</div>
</div>]]></description></item><item><title>第2节 azkaban调度：16、azkaban的介绍以及azkaban的soloserver的安装使用</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11084062.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 25 Jun 2019 09:28:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11084062.html</guid><description><![CDATA[<h1>2. 工作流调度器azkaban</h1>
<h2>2.1 概述</h2>
<p>azkaban官网：</p>
<p><a href="https://azkaban.github.io/">https://azkaban.github.io/</a></p>
<h3>2.1.1为什么需要工作流调度系统</h3>
<p class="1">l&nbsp; 一个完整的数据分析系统通常都是由大量任务单元组成：</p>
<p>shell脚本程序，java程序，mapreduce程序、hive脚本等</p>
<p class="1">l&nbsp; 各任务单元之间存在时间先后及前后依赖关系</p>
<p class="1">l&nbsp; 为了很好地组织起这样的复杂执行计划，需要一个工作流调度系统来调度执行；</p>
<p>&nbsp;</p>
<p>例如，我们可能有这样一个需求，某个业务系统每天产生20G原始数据，我们每天都要对其进行处理，处理步骤如下所示：</p>
<p class="1">1、&nbsp; 通过Hadoop先将原始数据同步到HDFS上；</p>
<p class="1">2、&nbsp; 借助MapReduce计算框架对原始数据进行转换，生成的数据以分区表的形式存储到多张Hive表中；</p>
<p class="1">3、&nbsp; 需要对Hive中多个表的数据进行JOIN处理，得到一个明细数据Hive大表；</p>
<p class="1">4、&nbsp; 将明细数据进行各种统计分析，得到结果报表信息；</p>
<p class="1">5、&nbsp; 需要将统计分析得到的结果数据同步到业务系统中，供业务调用使用。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>2.1.2 工作流调度实现方式</h3>
<p>简单的任务调度：直接使用linux的crontab来定义；</p>
<p>复杂的任务调度：开发调度平台或使用现成的开源调度系统，比如ooize、azkaban、airflow等</p>
<h3>2.1.3 常见工作流调度系统</h3>
<p>市面上目前有许多工作流调度器</p>
<p>在hadoop领域，常见的工作流调度器有Oozie, Azkaban,Cascading,Hamake等</p>
<p>&nbsp;</p>
<p align="left">&nbsp;</p>
<h3>2.1.4 各种调度工具特性对比</h3>
<p align="left">下面的表格对上述四种hadoop工作流调度器的关键特性进行了比较，尽管这些工作流调度器能够解决的需求场景基本一致，但在设计理念，目标用户，应用场景等方面还是存在显著的区别，在做技术选型的时候，可以提供参考</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="114">
<p>特性</p>
</td>
<td valign="top" width="114">
<p>Hamake</p>
</td>
<td valign="top" width="114">
<p>Oozie</p>
</td>
<td valign="top" width="114">
<p>Azkaban</p>
</td>
<td valign="top" width="114">
<p>Cascading</p>
</td>
</tr>
<tr>
<td valign="top" width="114">
<p>工作流描述语言</p>
</td>
<td valign="top" width="114">
<p>XML</p>
</td>
<td valign="top" width="114">
<p>XML (xPDL based)</p>
</td>
<td valign="top" width="114">
<p>text file with key/value pairs</p>
</td>
<td valign="top" width="114">
<p>Java API</p>
</td>
</tr>
<tr>
<td valign="top" width="114">
<p>依赖机制</p>
</td>
<td valign="top" width="114">
<p>data-driven</p>
</td>
<td valign="top" width="114">
<p>explicit</p>
</td>
<td valign="top" width="114">
<p>explicit</p>
</td>
<td valign="top" width="114">
<p>explicit</p>
</td>
</tr>
<tr>
<td valign="top" width="114">
<p>是否要web容器</p>
</td>
<td valign="top" width="114">
<p>No</p>
</td>
<td valign="top" width="114">
<p>Yes</p>
</td>
<td valign="top" width="114">
<p>Yes</p>
</td>
<td valign="top" width="114">
<p>No</p>
</td>
</tr>
<tr>
<td valign="top" width="114">
<p>进度跟踪</p>
</td>
<td valign="top" width="114">
<p>console/log messages</p>
</td>
<td valign="top" width="114">
<p>web page</p>
</td>
<td valign="top" width="114">
<p>web page</p>
</td>
<td valign="top" width="114">
<p>Java API</p>
</td>
</tr>
<tr>
<td valign="top" width="114">
<p>Hadoop job调度支持</p>
</td>
<td valign="top" width="114">
<p>no</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
</tr>
<tr>
<td valign="top" width="114">
<p>运行模式</p>
</td>
<td valign="top" width="114">
<p>command line utility</p>
</td>
<td valign="top" width="114">
<p>daemon</p>
</td>
<td valign="top" width="114">
<p>daemon</p>
</td>
<td valign="top" width="114">
<p>API</p>
</td>
</tr>
<tr>
<td valign="top" width="114">
<p>Pig支持</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
</tr>
<tr>
<td valign="top" width="114">
<p>事件通知</p>
</td>
<td valign="top" width="114">
<p>no</p>
</td>
<td valign="top" width="114">
<p>no</p>
</td>
<td valign="top" width="114">
<p>no</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
</tr>
<tr>
<td valign="top" width="114">
<p>需要安装</p>
</td>
<td valign="top" width="114">
<p>no</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
<td valign="top" width="114">
<p>no</p>
</td>
</tr>
<tr>
<td valign="top" width="114">
<p>支持的hadoop版本</p>
</td>
<td valign="top" width="114">
<p>0.18+</p>
</td>
<td valign="top" width="114">
<p>0.20+</p>
</td>
<td valign="top" width="114">
<p>currently unknown</p>
</td>
<td valign="top" width="114">
<p>0.18+</p>
</td>
</tr>
<tr>
<td valign="top" width="114">
<p>重试支持</p>
</td>
<td valign="top" width="114">
<p>no</p>
</td>
<td valign="top" width="114">
<p>workflownode evel</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
</tr>
<tr>
<td valign="top" width="114">
<p>运行任意命令</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
</tr>
<tr>
<td valign="top" width="114">
<p>Amazon EMR支持</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
<td valign="top" width="114">
<p>no</p>
</td>
<td valign="top" width="114">
<p>currently unknown</p>
</td>
<td valign="top" width="114">
<p>yes</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h3>2.1.5 Azkaban与Oozie对比</h3>
<p>对市面上最流行的两种调度器，给出以下详细对比，以供技术选型参考。总体来说，ooize相比azkaban是一个重量级的任务调度系统，功能全面，但配置使用也更复杂。如果可以不在意某些功能的缺失，轻量级调度器azkaban是很不错的候选对象。</p>
<p>详情如下：</p>
<p class="1">u&nbsp; 功能</p>
<p>两者均可以调度mapreduce,pig,java,脚本工作流任务</p>
<p>两者均可以定时执行工作流任务</p>
<p>&nbsp;</p>
<p class="1">u&nbsp; 工作流定义</p>
<p>Azkaban使用Properties文件定义工作流</p>
<p>Oozie使用XML文件定义工作流</p>
<p>&nbsp;</p>
<p class="1">u&nbsp; 工作流传参</p>
<p>Azkaban支持直接传参，例如${input}</p>
<p>Oozie支持参数和EL表达式，例如${fs:dirSize(myInputDir)}</p>
<p>&nbsp;</p>
<p class="1">u&nbsp; 定时执行</p>
<p>Azkaban的定时执行任务是基于时间的</p>
<p>Oozie的定时执行任务基于时间和输入数据</p>
<p>&nbsp;</p>
<p class="1">u&nbsp; 资源管理</p>
<p>Azkaban有较严格的权限控制，如用户对工作流进行读/写/执行等操作</p>
<p>Oozie暂无严格的权限控制</p>
<p>&nbsp;</p>
<p class="1">u&nbsp; 工作流执行</p>
<p>Azkaban有两种运行模式，分别是solo server mode(executor server和web server部署在同一台节点)和multi server mode(executor server和web server可以部署在不同节点)</p>
<p>Oozie作为工作流服务器运行，支持多用户和多工作流</p>
<p>&nbsp;</p>
<p class="1">u&nbsp; 工作流管理</p>
<p>Azkaban支持浏览器以及ajax方式操作工作流</p>
<p>Oozie支持命令行、HTTP REST、Java API、浏览器操作工作流</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>2.2 Azkaban介绍</h2>
<p>Azkaban是由Linkedin开源的一个批量工作流任务调度器。用于在一个工作流内以一个特定的顺序运行一组工作和流程。</p>
<p>Azkaban定义了一种KV文件(properties)格式来建立任务之间的依赖关系，并提供一个易于使用的web用户界面维护和跟踪你的工作流。</p>
<p>它有如下功能特点：</p>
<p>&sup2;&nbsp; Web用户界面</p>
<p>&sup2;&nbsp; 方便上传工作流</p>
<p>&sup2;&nbsp; 方便设置任务之间的关系</p>
<p>&sup2;&nbsp; 调度工作流</p>
<p>&sup2;&nbsp; 认证/授权(权限的工作)</p>
<p>&sup2;&nbsp; 能够杀死并重新启动工作流</p>
<p>&sup2;&nbsp; 模块化和可插拔的插件机制</p>
<p>&sup2;&nbsp; 项目工作区</p>
<p>&sup2;&nbsp; 工作流和任务的日志记录和审计</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625174515933-824441486.png" alt="" /></p>
<p>&nbsp;</p>
<h2>2. 3 Azkaban安装部署</h2>
<h3>2.3.1、azkaban的编译</h3>
<p>我们这里选用azkaban3.51.0这个版本自己进行重新编译，编译完成之后得到我们需要的安装包进行安装</p>
<p><span style="color: #ff0000;">注意：我们这里编译需要使用jdk1.8的版本来进行编译，如果编译服务器使用的jdk版本是1.7的，记得切换成jdk1.8，我们这里使用的是jdk8u141这个版本来进行编译</span></p>
<p>&nbsp;</p>
<p class="code">cd /export/softwares/</p>
<p class="code">wget <a href="https://github.com/azkaban/azkaban/archive/3.51.0.tar.gz">https://github.com/azkaban/azkaban/archive/3.51.0.tar.gz</a></p>
<p class="code">tar -zxvf 3.51.0.tar.gz -C ../servers/</p>
<p class="code">cd /export/servers/azkaban-3.51.0/</p>
<p class="code">yum -y install git</p>
<p class="code">yum -y install gcc-c++</p>
<p class="code">./gradlew build installDist -x test</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>编译之后需要的安装文件列表如下</h4>
<h5>azkaban-exec-server</h5>
<p>编译完成之后得到我们需要的安装包在以下目录下即可获取得到</p>
<p>azkaban-exec-server存放目录</p>
<p>/export/servers/azkaban-3.51.0/azkaban-exec-server/build/distributions</p>
<p>&nbsp;</p>
<h5>azkaban-web-server</h5>
<p>azkaban-web-server存放目录</p>
<p>/export/servers/azkaban-3.51.0/azkaban-web-server/build/distributions</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h5>azkaban-solo-server</h5>
<p>azkaban-solo-server存放目录</p>
<div>
<p class="a">/export/servers/azkaban-3.51.0/azkaban-solo-server/build/distributions</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h5>execute-as-user.c</h5>
<p>azkaban two&nbsp; server模式下需要的C程序在这个路径下面</p>
<div>
<p class="a">/export/servers/azkaban-3.51.0/az-exec-util/src/main/c</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h5>数据库脚本文件</h5>
<p>数据库脚本文件在这个路径下面</p>
<p>/export/servers/azkaban-3.51.0/azkaban-db/build/install/azkaban-db</p>
<p>&nbsp;</p>
<h3>2.3.2、azkaban单服务模式安装与使用</h3>
<h4>所需软件</h4>
<p>azkaban-solo-server</p>
<h4>单服务模式安装</h4>
<h5>第一步：解压</h5>
<p>azkaban 的solo&nbsp; server使用的是一个单节点的模式来进行启动服务的，只需要一个</p>
<p>azkaban-solo-server-0.1.0-SNAPSHOT.tar.gz的安装包即可启动，所有的数据信息都是保存在H2这个azkaban默认的数据当中，</p>
<p>上传我们的压缩包，然后修改配置文件启动即可</p>
<p class="code">cd /export/softwares</p>
<p class="code">tar -zxvf azkaban-solo-server-0.1.0-SNAPSHOT.tar.gz -C ../servers/</p>
<p>&nbsp;</p>
<h5>第二步：修改两个配置文件</h5>
<p>修改时区配置文件</p>
<p class="code">cd /export/servers/azkaban-solo-server-0.1.0-SNAPSHOT/conf</p>
<p class="code">vim azkaban.properties</p>
<p>&nbsp;</p>
<div>
<p class="a">default.timezone.id=Asia/Shanghai</p>
</div>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625172101541-715677622.png" alt="" /></p>
<p>&nbsp;</p>
<p>修改commonprivate.properties配置文件</p>
<p class="code">cd /export/servers/azkaban-solo-server-0.1.0-SNAPSHOT/plugins/jobtypes</p>
<p class="code">vim commonprivate.properties</p>
<div>
<p class="a"><em>　　execute.as.user=false</em></p>
<p class="a"><em>　　memCheck.enabled=false</em>&nbsp;</p>
<p class="a"><span style="color: #ff0000;">注：如果启用内存检查，则当系统内存小于4G，azkaban不会运行，所以此处禁用内存检查。</span></p>
</div>
<h5>第三步：启动solo-server</h5>
<p>启动azkaban-solo-server</p>
<div>
<p class="a">cd&nbsp; /export/servers/azkaban-solo-server-0.1.0-SNAPSHOT</p>
<p class="a">bin/start-solo.sh</p>
</div>
<h5>第四步：浏览器页面访问</h5>
<p>浏览器页面访问</p>
<p><a href="http://node03:8081/">http://node03:8081/</a></p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625172611188-2074637420.png" alt="" /></p>
<p>&nbsp;</p>
<h4>单服务模式使用</h4>
<p>需求：使用azkaban调度我们的shell脚本，执行linux的shell命令。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625172624827-957495661.png" alt="" /></p>
<p>&nbsp;</p>
<p>创建普通文本文件&nbsp; foo.job，文件内容如下：</p>
<div>
<p class="a">type=command</p>
<p class="a">command=echo "hello world"</p>
</div>
<p>&nbsp;</p>
<p>然后将这个文件打包为压缩文件（<span style="color: #ff0000;">注：一定要打包为.zip格式！</span>）。</p>
<p>&nbsp;</p>
<p>azkaban上传我们的压缩包：</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625172658288-1019077541.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625172713527-662689284.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625172731482-631752114.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 flume：15、flume案例二，通过自定义拦截器实现数据的脱敏</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11081958.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 25 Jun 2019 03:43:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11081958.html</guid><description><![CDATA[<h2>1.7、flume案例二</h2>
<h3>案例需求：</h3>
<p>在数据采集之后，通过flume的拦截器，实现不需要的数据过滤掉，并将指定的第一个字段进行加密，加密之后再往hdfs上面保存</p>
<p>&nbsp;</p>
<h3>原始数据与处理之后的数据对比</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625114237765-169842904.png" alt="" /></p>
<p>图一&nbsp; 原始文件内容</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625114241485-2118441039.png" alt="" /></p>
<p>图二&nbsp; HDFS上产生收集到的处理数据</p>
<p>&nbsp;</p>
<h3>实现步骤</h3>
<h4>第一步：创建maven java工程，导入jar包</h4>
<p class="code">&lt;repositories&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;repository&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;id&gt;cloudera&lt;/id&gt;<br />
&nbsp;&lt;url&gt;https://repository.cloudera.com/artifactory/cloudera-repos/&lt;/url&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;/repository&gt;<br />
&lt;/repositories&gt;<br />
&lt;dependencies&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;dependency&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;groupId&gt;org.apache.flume&lt;/groupId&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;artifactId&gt;flume-ng-core&lt;/artifactId&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;version&gt;1.6.0-cdh5.14.0&lt;/version&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;scope&gt;provided&lt;/scope&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;/dependency&gt;<br />
&lt;/dependencies&gt;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>第二步：自定义flume的拦截器</h4>
<div>
<p class="a"><strong>package </strong>cn.itcast.iterceptor;<br />
<strong>import </strong>com.google.common.base.Charsets;<br />
<strong>import </strong>org.apache.flume.Context;<br />
<strong>import </strong>org.apache.flume.Event;<br />
<strong>import </strong>org.apache.flume.interceptor.Interceptor;<br />
<strong>import </strong>java.security.MessageDigest;<br />
<strong>import </strong>java.security.NoSuchAlgorithmException;<br />
<strong>import </strong>java.util.ArrayList;<br />
<strong>import </strong>java.util.List;<br />
<strong>import </strong>java.util.regex.Matcher;<br />
<strong>import </strong>java.util.regex.Pattern;<br />
<br />
<strong>import static </strong>cn.itcast.iterceptor.CustomParameterInterceptor.Constants.*;<br />
<br />
<strong>public class </strong>CustomParameterInterceptor <strong>implements </strong>Interceptor {<br />
&nbsp;&nbsp;&nbsp; <em>/** The
field_separator.</em><em>指明每一行字段的分隔符 */<br />
&nbsp;&nbsp;&nbsp; </em><strong>private final </strong>String <strong>fields_separator</strong>;<br />
<br />
&nbsp;&nbsp;&nbsp; <em>/** The
indexs.</em><em>通过分隔符分割后，指明需要那列的字段 </em><em>下标*/<br />
&nbsp;&nbsp;&nbsp; </em><strong>private final </strong>String <strong>indexs</strong>;<br />
<br />
&nbsp;&nbsp;&nbsp; <em>/** The
indexs_separator. </em><em>多个下标的分隔符*/<br />
&nbsp;&nbsp;&nbsp; </em><strong>private final </strong>String <strong>indexs_separator</strong>;<br />
<br />
&nbsp;&nbsp;&nbsp; <em>/**<br />
&nbsp;&nbsp; &nbsp;&nbsp;*<br />
&nbsp;&nbsp;&nbsp;&nbsp; * <strong>@param </strong><strong>indexs<br />
&nbsp;&nbsp;&nbsp;&nbsp; </strong>*
<strong>@param </strong><strong>indexs_separator<br />
&nbsp;&nbsp;&nbsp;&nbsp; </strong>*/<br />
&nbsp;&nbsp;&nbsp; </em><strong>public </strong>CustomParameterInterceptor( String fields_separator,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
String indexs, String indexs_separator,String encrypted_field_index) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String f =
fields_separator.trim();<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String i =
indexs_separator.trim();<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>this</strong>.<strong>indexs </strong>= indexs;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>this</strong>.<strong>encrypted_field_index</strong>=encrypted_field_index.trim();<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>if </strong>(!f.equals(<strong>""</strong>)) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f = <em>UnicodeToString</em>(f);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>this</strong>.<strong>fields_separator </strong>=f;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>if </strong>(!i.equals(<strong>""</strong>)) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = <em>UnicodeToString</em>(i);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>this</strong>.<strong>indexs_separator </strong>= i;<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; <em>/*<br />
&nbsp;&nbsp;&nbsp;&nbsp; *<br />
&nbsp;&nbsp;&nbsp;&nbsp; * \t </em><em>制表符 ('\u0009') \n </em><em>新行（换行）符 (' ') \r </em><em>回车符 (' ') \f </em><em>换页符 ('\u000C') \a </em><em>报警<br />
&nbsp;&nbsp;&nbsp;&nbsp; * (bell) </em><em>符 ('\u0007') \e </em><em>转义符 ('\u001B') \cx&nbsp; </em><em>空格(\u0020)</em><em>对应于 x </em><em>的控制符<br />
&nbsp;&nbsp;&nbsp;&nbsp; *<br />
&nbsp;&nbsp;&nbsp;&nbsp; * @param str<br />
&nbsp;&nbsp;&nbsp;&nbsp; * @return<br />
&nbsp;&nbsp;&nbsp;&nbsp; * @data:2015-6-30<br />
&nbsp;&nbsp;&nbsp;&nbsp; */<br />
<br />
&nbsp;&nbsp;&nbsp; /** The encrypted_field_index. </em><em>需要加密的字段下标*/<br />
&nbsp;&nbsp;&nbsp; </em><strong>private final </strong>String <strong>encrypted_field_index</strong>;<br />
&nbsp;&nbsp;&nbsp; <strong>public
static </strong>String UnicodeToString(String str) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pattern pattern = Pattern.<em>compile</em>(<strong>"(\\\\u(\\p{XDigit}{4}))"</strong>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Matcher matcher =
pattern.matcher(str);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>char </strong>ch;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>while
</strong>(matcher.find()) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ch = (<strong>char</strong>) Integer.<em>parseInt</em>(matcher.group(2), 16);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str =
str.replace(matcher.group(1), ch + <strong>""</strong>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>return
</strong>str;<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; <em>/*<br />
&nbsp;&nbsp;&nbsp;&nbsp; * @see
org.apache.flume.interceptor.Interceptor#intercept(org.apache.flume.Event)<br />
&nbsp;&nbsp;&nbsp;&nbsp; * </em><em>单个event</em><em>拦截逻辑<br />
&nbsp;&nbsp;&nbsp;&nbsp; */<br />
&nbsp;&nbsp;&nbsp; </em><strong>public </strong>Event intercept(Event
event) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>if </strong>(event
== <strong>null</strong>) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>return
null</strong>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>try </strong>{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String line = <strong>new </strong>String(event.getBody(), Charsets.<strong><em>UTF_8</em></strong>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String[] fields_spilts =
line.split(<strong>fields_separator</strong>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String[] indexs_split = <strong>indexs</strong>.split(<strong>indexs_separator</strong>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String newLine=<strong>""</strong>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>for
</strong>(<strong>int </strong>i = 0; i &lt; indexs_split.<strong>length</strong>;
i++) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>int </strong>parseInt = Integer.<em>parseInt</em>(indexs_split[i]);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>//</em><em>对加密字段进行加密<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>if</strong>(!<strong>""</strong>.equals(<strong>encrypted_field_index</strong>)&amp;&amp;<strong>encrypted_field_index</strong>.equals(indexs_split[i])){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newLine+=StringUtils.<em>GetMD5Code</em>(fields_spilts[parseInt]);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<strong>else</strong>{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newLine+=fields_spilts[parseInt];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>if</strong>(i!=indexs_split.<strong>length</strong>-1){<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newLine+=<strong>fields_separator</strong>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
event.setBody(newLine.getBytes(Charsets.<strong><em>UTF_8</em></strong>));<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>return
</strong>event;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <strong>catch
</strong>(Exception e) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>return
</strong>event;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; <em>/*<br />
&nbsp;&nbsp;&nbsp;&nbsp; * @see
org.apache.flume.interceptor.Interceptor#intercept(java.util.List)<br />
&nbsp;&nbsp;&nbsp;&nbsp; * </em><em>批量event</em><em>拦截逻辑<br />
&nbsp;&nbsp;&nbsp;&nbsp; */<br />
&nbsp;&nbsp;&nbsp; </em><strong>public </strong>List&lt;Event&gt;
intercept(List&lt;Event&gt; events) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List&lt;Event&gt; out = <strong>new </strong>ArrayList&lt;Event&gt;();<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>for </strong>(Event
event : events) {<br />
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Event outEvent = intercept(event);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>if
</strong>(outEvent != <strong>null</strong>) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; out.add(outEvent);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>return
</strong>out;<br />
&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp; <em>/*<br />
&nbsp;&nbsp;&nbsp;&nbsp; * @see
org.apache.flume.interceptor.Interceptor#initialize()<br />
&nbsp;&nbsp;&nbsp;&nbsp; */<br />
&nbsp;&nbsp;&nbsp; </em><strong>public void </strong>initialize() {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>// <strong>TODO Auto-generated method stub<br />
<br />
&nbsp;&nbsp;&nbsp; </strong></em>}<br />
<br />
&nbsp;&nbsp;&nbsp; <em>/*<br />
&nbsp;&nbsp;&nbsp;&nbsp; * @see
org.apache.flume.interceptor.Interceptor#close()<br />
&nbsp;&nbsp;&nbsp;&nbsp; */<br />
&nbsp;&nbsp;&nbsp; </em><strong>public void </strong>close() {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>// <strong>TODO Auto-generated method stub<br />
<br />
&nbsp;&nbsp;&nbsp; </strong></em>}<br />
<br />
<br />
&nbsp;&nbsp;&nbsp; <em>/**<br />
&nbsp;&nbsp;&nbsp;&nbsp; * </em><em>相当于自定义Interceptor</em><em>的工厂类<br />
&nbsp;&nbsp;&nbsp;&nbsp; * </em><em>在flume</em><em>采集配置文件中通过制定该Builder</em><em>来创建Interceptor</em><em>对象<br />
&nbsp;&nbsp;&nbsp;&nbsp; * </em><em>可以在Builder</em><em>中获取、解析flume</em><em>采集配置文件中的拦截器Interceptor</em><em>的自定义参数：<br />
&nbsp;&nbsp;&nbsp;&nbsp; * </em><em>字段分隔符，字段下标，下标分隔符、加密字段下标
...</em><em>等<br />
&nbsp;&nbsp;&nbsp;&nbsp; * <strong>@author<br />
&nbsp;&nbsp;&nbsp;&nbsp; </strong>*<br />
&nbsp;&nbsp;&nbsp;&nbsp; */<br />
&nbsp;&nbsp;&nbsp; </em><strong>public static class </strong>Builder <strong>implements </strong>Interceptor.Builder {<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>/**
The fields_separator.</em><em>指明每一行字段的分隔符 */<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>private&nbsp; </strong>String <strong>fields_separator</strong>;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>/**
The indexs.</em><em>通过分隔符分割后，指明需要那列的字段 </em><em>下标*/<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>private&nbsp; </strong>String <strong>indexs</strong>;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>/**
The indexs_separator. </em><em>多个下标下标的分隔符*/<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>private&nbsp; </strong>String <strong>indexs_separator</strong>;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>/**
The encrypted_field. </em><em>需要加密的字段下标*/<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>private&nbsp; </strong>String <strong>encrypted_field_index</strong>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>/*<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * @see
org.apache.flume.conf.Configurable#configure(org.apache.flume.Context)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>public void </strong>configure(Context context) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>fields_separator
</strong>= context.getString(<strong><em>FIELD_SEPARATOR</em></strong>,
<strong><em>DEFAULT_FIELD_SEPARATOR</em></strong>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>indexs
</strong>= context.getString(<strong><em>INDEXS</em></strong>,
<strong><em>DEFAULT_INDEXS</em></strong>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>indexs_separator
</strong>= context.getString(<strong><em>INDEXS_SEPARATOR</em></strong>,
<strong><em>DEFAULT_INDEXS_SEPARATOR</em></strong>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>encrypted_field_index</strong>=
context.getString(<strong><em>ENCRYPTED_FIELD_INDEX</em></strong>,
<strong><em>DEFAULT_ENCRYPTED_FIELD_INDEX</em></strong>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>/*<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * @see
org.apache.flume.interceptor.Interceptor.Builder#build()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>public </strong>Interceptor build() {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>return
new </strong>CustomParameterInterceptor(<strong>fields_separator</strong>,
<strong>indexs</strong>, <strong>indexs_separator</strong>,<strong>encrypted_field_index</strong>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; <em>/**<br />
&nbsp;&nbsp;&nbsp;&nbsp; * </em><em>常量<br />
&nbsp;&nbsp;&nbsp;&nbsp; *<br />
&nbsp;&nbsp;&nbsp;&nbsp; */<br />
&nbsp;&nbsp;&nbsp; </em><strong>public static class </strong>Constants {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>/**
The Constant FIELD_SEPARATOR. */<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;</em><strong>public
static final </strong>String <strong><em>FIELD_SEPARATOR
</em></strong>= <strong>"fields_separator"</strong>;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>/**
The Constant DEFAULT_FIELD_SEPARATOR. */<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>public static final </strong>String <strong><em>DEFAULT_FIELD_SEPARATOR </em></strong>=<strong>" "</strong>;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>/**
The Constant INDEXS. */<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>public static final </strong>String <strong><em>INDEXS </em></strong>= <strong>"indexs"</strong>;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>/**
The Constant DEFAULT_INDEXS. */<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>public static final </strong>String <strong><em>DEFAULT_INDEXS </em></strong>= <strong>"0"</strong>;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>/**
The Constant INDEXS_SEPARATOR. */<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>public static final </strong>String <strong><em>INDEXS_SEPARATOR </em></strong>= <strong>"indexs_separator"</strong>;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>/**
The Constant DEFAULT_INDEXS_SEPARATOR. */<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>public static final </strong>String <strong><em>DEFAULT_INDEXS_SEPARATOR </em></strong>= <strong>","</strong>;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>/**
The Constant ENCRYPTED_FIELD_INDEX. */<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>public static final </strong>String <strong><em>ENCRYPTED_FIELD_INDEX </em></strong>= <strong>"encrypted_field_index"</strong>;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<em>/** The Constant
DEFAUL_TENCRYPTED_FIELD_INDEX. */<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>public static final </strong>String <strong><em>DEFAULT_ENCRYPTED_FIELD_INDEX </em></strong>= <strong>""</strong>;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>/**
The Constant PROCESSTIME. */<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>public static final </strong>String <strong><em>PROCESSTIME </em></strong>= <strong>"processTime"</strong>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>/**
The Constant PROCESSTIME. */<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>public static final </strong>String <strong><em>DEFAULT_PROCESSTIME </em></strong>= <strong>"a"</strong>;<br />
<br />
&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; <em>/**<br />
&nbsp;&nbsp;&nbsp;&nbsp; * </em><em>工具类：字符串md5</em><em>加密<br />
&nbsp;&nbsp;&nbsp;&nbsp; */<br />
&nbsp;&nbsp;&nbsp; </em><strong>public static class </strong>StringUtils
{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>// </em><em>全局数组<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>private final static </strong>String[] <strong><em>strDigits </em></strong>= { <strong>"0"</strong>,
<strong>"1"</strong>, <strong>"2"</strong>, <strong>"3"</strong>,
<strong>"4"</strong>, <strong>"5"</strong>,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>"6"</strong>,
<strong>"7"</strong>, <strong>"8"</strong>, <strong>"9"</strong>,
<strong>"a"</strong>, <strong>"b"</strong>, <strong>"c"</strong>,
<strong>"d"</strong>, <strong>"e"</strong>, <strong>"f"
</strong>};<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>// </em><em>返回形式为数字跟字符串<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>private static </strong>String
byteToArrayString(<strong>byte </strong>bByte) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>int
</strong>iRet = bByte;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>//
System.out.println("iRet="+iRet);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>if </strong>(iRet &lt; 0)
{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iRet += 256;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>int
</strong>iD1 = iRet / 16;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>int
</strong>iD2 = iRet % 16;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>return
<em>strDigits</em></strong>[iD1] + <strong><em>strDigits</em></strong>[iD2];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>// </em><em>返回形式只为数字<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>private static </strong>String byteToNum(<strong>byte </strong>bByte) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>int </strong>iRet
= bByte;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.<strong><em>out</em></strong>.println(<strong>"iRet1="
</strong>+ iRet);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>if
</strong>(iRet &lt; 0) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iRet += 256;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>return
</strong>String.<em>valueOf</em>(iRet);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>// </em><em>转换字节数组为16</em><em>进制字串<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong>private static </strong>String byteToString(<strong>byte</strong>[] bByte) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StringBuffer sBuffer = <strong>new </strong>StringBuffer();<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>for
</strong>(<strong>int </strong>i = 0; i &lt; bByte.<strong>length</strong>;
i++) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sBuffer.append(<em>byteToArrayString</em>(bByte[i]));<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>return
</strong>sBuffer.toString();<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>public
static </strong>String GetMD5Code(String strObj) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String resultString = <strong>null</strong>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>try
</strong>{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resultString = <strong>new </strong>String(strObj);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MessageDigest md =
MessageDigest.<em>getInstance</em>(<strong>"MD5"</strong>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <em>// md.digest() </em><em>该函数返回值为存放哈希值结果的byte</em><em>数组<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em>resultString = <em>byteToString</em>(md.digest(strObj.getBytes()));<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <strong>catch
</strong>(NoSuchAlgorithmException ex) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ex.printStackTrace();<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>return
</strong>resultString;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />
&nbsp; &nbsp;&nbsp;}<br />
<br />
<br />
}</p>



</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>第三步：打包上传服务器</h4>
<p>将我们的拦截器打成jar包放到flume的lib目录下</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>第四步：开发flume的配置文件</h4>
<p>第三台机器开发flume的配置文件</p>
<p class="code">cd&nbsp; /export/servers/apache-flume-1.6.0-cdh5.14.0-bin/conf</p>
<p class="code">vim spool-interceptor-hdfs.conf</p>
<p>&nbsp;</p>
<div>
<p class="a">a1.channels = c1</p>
<p class="a">a1.sources = r1</p>
<p class="a">a1.sinks = s1</p>
<p class="a">#channel</p>
<p class="a">a1.channels.c1.type = memory</p>
<p class="a">a1.channels.c1.capacity=100000</p>
<p class="a">a1.channels.c1.transactionCapacity=50000</p>
<p class="a">#source</p>
<p class="a">a1.sources.r1.channels = c1</p>
<p class="a">a1.sources.r1.type = spooldir</p>
<p class="a">a1.sources.r1.spoolDir = /export/servers/intercept</p>
<p class="a">a1.sources.r1.batchSize= 50</p>
<p class="a">a1.sources.r1.inputCharset = UTF-8</p>
<p class="a">&nbsp;</p>
<p class="a">a1.sources.r1.interceptors =i1 i2</p>
<p class="a">a1.sources.r1.interceptors.i1.type =cn.itcast.iterceptor.CustomParameterInterceptor$Builder</p>
<p class="a">a1.sources.r1.interceptors.i1.fields_separator=\\u0009</p>
<p class="a">a1.sources.r1.interceptors.i1.indexs =0,1,3,5,6</p>
<p class="a">a1.sources.r1.interceptors.i1.indexs_separator
=\\u002c</p>
<p class="a">a1.sources.r1.interceptors.i1.encrypted_field_index
=0</p>
<p class="a">a1.sources.r1.interceptors.i2.type =
org.apache.flume.interceptor.TimestampInterceptor$Builder</p>
<p class="a">#sink</p>
<p class="a">a1.sinks.s1.channel = c1</p>
<p class="a">a1.sinks.s1.type = hdfs</p>
<p class="a">a1.sinks.s1.hdfs.path
=hdfs://192.168.52.100:8020/flume/intercept/%Y%m%d</p>
<p class="a">a1.sinks.s1.hdfs.filePrefix = event</p>
<p class="a">a1.sinks.s1.hdfs.fileSuffix = .log</p>
<p class="a">a1.sinks.s1.hdfs.rollSize = 10485760</p>
<p class="a">a1.sinks.s1.hdfs.rollInterval =20</p>
<p class="a">a1.sinks.s1.hdfs.rollCount = 0</p>
<p class="a">a1.sinks.s1.hdfs.batchSize = 1500</p>
<p class="a">a1.sinks.s1.hdfs.round = true</p>
<p class="a">a1.sinks.s1.hdfs.roundUnit = minute</p>
<p class="a">a1.sinks.s1.hdfs.threadsPoolSize = 25</p>
<p class="a">a1.sinks.s1.hdfs.useLocalTimeStamp = true</p>
<p class="a">a1.sinks.s1.hdfs.minBlockReplicas = 1</p>
<p class="a">a1.sinks.s1.hdfs.fileType =DataStream</p>
<p class="a">a1.sinks.s1.hdfs.writeFormat = Text</p>
<p class="a">a1.sinks.s1.hdfs.callTimeout = 60000</p>
<p class="a">a1.sinks.s1.hdfs.idleTimeout =60</p>



</div>
<h4>第五步：上传测试数据</h4>
<p>上传我们的测试数据到/export/servers/intercept 这个目录下面去，如果目录不存在则创建</p>
<p>mkdir&nbsp;
-p /export/servers/intercept</p>
<p>测试数据如下</p>
<p>&nbsp;</p>
<div>
<p class="a">13601249301 100&nbsp;&nbsp;&nbsp; 200&nbsp;&nbsp; 300&nbsp;&nbsp; 400&nbsp;&nbsp; 500&nbsp;&nbsp; 600&nbsp;&nbsp; 700</p>
<p class="a">13601249302 100&nbsp;&nbsp;&nbsp; 200&nbsp;&nbsp; 300&nbsp;&nbsp; 400&nbsp;&nbsp; 500&nbsp;&nbsp; 600&nbsp;&nbsp; 700</p>
<p class="a">13601249303 100&nbsp;&nbsp;&nbsp; 200&nbsp;&nbsp; 300&nbsp;&nbsp; 400&nbsp;&nbsp; 500&nbsp;&nbsp; 600&nbsp;&nbsp; 700</p>
<p class="a">13601249304 100&nbsp;&nbsp;&nbsp; 200&nbsp;&nbsp; 300&nbsp;&nbsp; 400&nbsp;&nbsp; 500&nbsp;&nbsp; 600&nbsp;&nbsp; 700</p>
<p class="a">13601249305 100&nbsp;&nbsp;&nbsp; 200&nbsp;&nbsp; 300&nbsp;&nbsp; 400&nbsp;&nbsp; 500&nbsp;&nbsp; 600&nbsp;&nbsp; 700</p>
<p class="a">13601249306 100&nbsp;&nbsp;&nbsp; 200&nbsp;&nbsp; 300&nbsp;&nbsp; 400&nbsp;&nbsp; 500&nbsp;&nbsp; 600&nbsp;&nbsp; 700</p>
<p class="a">13601249307 100&nbsp;&nbsp;&nbsp; 200&nbsp;&nbsp; 300&nbsp;&nbsp; 400&nbsp;&nbsp; 500&nbsp;&nbsp; 600&nbsp;&nbsp; 700</p>
<p class="a">13601249308 100&nbsp;&nbsp;&nbsp; 200&nbsp;&nbsp; 300&nbsp;&nbsp; 400&nbsp;&nbsp; 500&nbsp;&nbsp; 600&nbsp;&nbsp; 700</p>
<p class="a">13601249309 100&nbsp;&nbsp;&nbsp; 200&nbsp;&nbsp; 300&nbsp;&nbsp; 400&nbsp;&nbsp; 500&nbsp;&nbsp; 600&nbsp;&nbsp; 700</p>
<p class="a">13601249310 100&nbsp;&nbsp;&nbsp; 200&nbsp;&nbsp; 300&nbsp;&nbsp; 400&nbsp;&nbsp; 500&nbsp;&nbsp; 600&nbsp;&nbsp; 700</p>
<p class="a">13601249311 100&nbsp;&nbsp;&nbsp; 200&nbsp;&nbsp; 300&nbsp;&nbsp; 400&nbsp;&nbsp; 500&nbsp;&nbsp; 600&nbsp;&nbsp; 700</p>
<p class="a">13601249312 100&nbsp;&nbsp;&nbsp; 200&nbsp;&nbsp; 300&nbsp;&nbsp; 400&nbsp;&nbsp; 500&nbsp;&nbsp; 600&nbsp;&nbsp; 700</p>



</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>第六步：启动flume</h4>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin</p>
<p class="code">bin/flume-ng agent -c conf -f
conf/spool-interceptor-hdfs.conf -name a1 -Dflume.root.logger=DEBUG,console</p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">小结：一般不在flume上进行数据处理。数据的处理都在MR上进行，flume主要就是数据的收集。</span></p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 flume：13、14、更多flume案例一，通过拦截器实现不同类型的数据区分</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11081828.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 25 Jun 2019 03:28:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11081828.html</guid><description><![CDATA[<h2>1.6、flume案例一</h2>
<h3>1. 案例场景</h3>
<p>A、B两台日志服务机器实时生产日志主要类型为access.log、nginx.log、web.log</p>
<p>现在要求：</p>
<p>把A、B 机器中的access.log、nginx.log、web.log 采集汇总到C机器上然后统一收集到hdfs中。</p>
<p>但是在hdfs中要求的目录为：</p>
<p>/source/logs/access/20180101/**</p>
<p>/source/logs/nginx/20180101/**</p>
<p>/source/logs/web/20180101/**</p>
<h3>2. 场景分析</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625101006490-1510583683.png" alt="" /></p>
<h3>3. 数据流程处理分析</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625101027428-2100927462.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625112809022-1786547852.png" alt="" /></p>
<p>&nbsp;</p>
<h3>4、实现</h3>
<p>服务器A对应的IP为 192.168.52.100</p>
<p>服务器B对应的IP为 192.168.52.110</p>
<p>服务器C对应的IP为 192.168.52.120</p>
<p>&nbsp;</p>
<h4>采集端配置文件开发</h4>
<p>node01与node02服务器开发flume的配置文件</p>
<p>&nbsp;</p>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin/conf</p>
<p class="code">vim exec_source_avro_sink.conf</p>
<p>&nbsp;</p>
<div>
<p class="a"># Name the components on this agent</p>
<p class="a">a1.sources = r1 r2 r3</p>
<p class="a">a1.sinks = k1</p>
<p class="a">a1.channels = c1</p>
<p class="a">&nbsp;</p>
<p class="a"># Describe/configure the source</p>
<p class="a">a1.sources.r1.type = exec</p>
<p class="a">a1.sources.r1.command = tail -F /export/servers/taillogs/access.log</p>
<p class="a">a1.sources.r1.interceptors = i1</p>
<p class="a">a1.sources.r1.interceptors.i1.type = static</p>
<p class="a">##&nbsp; static拦截器的功能就是往采集到的数据的header中插入自己定## 义的key-value对</p>
<p class="a">a1.sources.r1.interceptors.i1.key = type</p>
<p class="a">a1.sources.r1.interceptors.i1.value = access</p>
<p class="a">&nbsp;</p>
<p class="a">a1.sources.r2.type = exec</p>
<p class="a">a1.sources.r2.command = tail -F /export/servers/taillogs/nginx.log</p>
<p class="a">a1.sources.r2.interceptors = i2</p>
<p class="a">a1.sources.r2.interceptors.i2.type = static</p>
<p class="a">a1.sources.r2.interceptors.i2.key = type</p>
<p class="a">a1.sources.r2.interceptors.i2.value = nginx</p>
<p class="a">&nbsp;</p>
<p class="a">a1.sources.r3.type = exec</p>
<p class="a">a1.sources.r3.command = tail -F /export/servers/taillogs/web.log</p>
<p class="a">a1.sources.r3.interceptors = i3</p>
<p class="a">a1.sources.r3.interceptors.i3.type = static</p>
<p class="a">a1.sources.r3.interceptors.i3.key = type</p>
<p class="a">a1.sources.r3.interceptors.i3.value = web</p>
<p class="a">&nbsp;</p>
<p class="a"># Describe the sink</p>
<p class="a">a1.sinks.k1.type = avro</p>
<p class="a">a1.sinks.k1.hostname = node03</p>
<p class="a">a1.sinks.k1.port = 41414</p>
<p class="a">&nbsp;</p>
<p class="a"># Use a channel which buffers events in memory</p>
<p class="a">a1.channels.c1.type = memory</p>
<p class="a">a1.channels.c1.capacity = 20000</p>
<p class="a">a1.channels.c1.transactionCapacity = 10000</p>
<p class="a">&nbsp;</p>
<p class="a"># Bind the source and sink to the channel</p>
<p class="a">a1.sources.r1.channels = c1</p>
<p class="a">a1.sources.r2.channels = c1</p>
<p class="a">a1.sources.r3.channels = c1</p>
<p class="a">a1.sinks.k1.channel = c1</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>服务端配置文件开发</h4>
<p>在node03上面开发flume配置文件</p>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin/conf</p>
<p class="code">vim avro_source_hdfs_sink.conf</p>
<p>&nbsp;</p>
<div>
<p class="a">a1.sources = r1</p>
<p class="a">a1.sinks = k1</p>
<p class="a">a1.channels = c1</p>
<p class="a">#定义source</p>
<p class="a">a1.sources.r1.type = avro</p>
<p class="a">a1.sources.r1.bind = 192.168.52.120</p>
<p class="a">a1.sources.r1.port =41414</p>
<p class="a">&nbsp;</p>
<p class="a">#添加时间拦截器</p>
<p class="a">a1.sources.r1.interceptors = i1</p>
<p class="a">a1.sources.r1.interceptors.i1.type = org.apache.flume.interceptor.TimestampInterceptor$Builder</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;</p>
<p class="a">#定义channels</p>
<p class="a">a1.channels.c1.type = memory</p>
<p class="a">a1.channels.c1.capacity = 20000</p>
<p class="a">a1.channels.c1.transactionCapacity = 10000</p>
<p class="a">&nbsp;</p>
<p class="a">#定义sink</p>
<p class="a">a1.sinks.k1.type = hdfs</p>
<p class="a">a1.sinks.k1.hdfs.path=hdfs://192.168.52.100:8020/source/logs/%{type}/%Y%m%d</p>
<p class="a">a1.sinks.k1.hdfs.filePrefix =events</p>
<p class="a">a1.sinks.k1.hdfs.fileType = DataStream</p>
<p class="a">a1.sinks.k1.hdfs.writeFormat = Text</p>
<p class="a">#时间类型</p>
<p class="a">a1.sinks.k1.hdfs.useLocalTimeStamp = true</p>
<p class="a">#生成的文件不按条数生成</p>
<p class="a">a1.sinks.k1.hdfs.rollCount = 0</p>
<p class="a">#生成的文件按时间生成</p>
<p class="a">a1.sinks.k1.hdfs.rollInterval = 30</p>
<p class="a">#生成的文件按大小生成</p>
<p class="a">a1.sinks.k1.hdfs.rollSize&nbsp; = 10485760</p>
<p class="a">#批量写入hdfs的个数</p>
<p class="a">a1.sinks.k1.hdfs.batchSize = 10000</p>
<p class="a">#flume操作hdfs的线程数（包括新建，写入等）</p>
<p class="a">a1.sinks.k1.hdfs.threadsPoolSize=10</p>
<p class="a">#操作hdfs超时时间</p>
<p class="a">a1.sinks.k1.hdfs.callTimeout=30000</p>
<p class="a">&nbsp;</p>
<p class="a">#组装source、channel、sink</p>
<p class="a">a1.sources.r1.channels = c1</p>
<p class="a">a1.sinks.k1.channel = c1</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>采集端文件生成脚本</h4>
<p>在node01与node02上面开发shell脚本，模拟数据生成</p>
<p class="code">cd /export/servers/shells</p>
<p class="code">vim server.sh</p>
<p>&nbsp;</p>
<div>
<p class="a">#!/bin/bash</p>
<p class="a">while true</p>
<p class="a">do&nbsp;</p>
<p class="a">&nbsp;date &gt;&gt; /export/servers/taillogs/access.log;</p>
<p class="a">&nbsp;date &gt;&gt; /export/servers/taillogs/web.log;</p>
<p class="a">&nbsp;date &gt;&gt; /export/servers/taillogs/nginx.log;</p>
<p class="a">&nbsp; sleep 0.5;</p>
<p class="a">done</p>
</div>
<p>&nbsp;</p>
<h4>顺序启动服务</h4>
<p>node03启动flume实现数据收集</p>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin</p>
<p>&nbsp;</p>
<div>
<p class="a">bin/flume-ng agent -c conf -f conf/avro_source_hdfs_sink.conf -name a1 -Dflume.root.logger=DEBUG,console</p>
</div>
<p>&nbsp;</p>
<p>node01与node02启动flume实现数据监控</p>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin</p>
<p>&nbsp;</p>
<div>
<p class="a">bin/flume-ng agent -c conf -f conf/exec_source_avro_sink.conf -name a1 -Dflume.root.logger=DEBUG,console</p>
</div>
<p>&nbsp;</p>
<p>node01与node02启动生成文件脚本</p>
<p class="code">cd /export/servers/shells</p>
<p class="code">sh server.sh</p>
<p>&nbsp;</p>
<h3>5、项目实现截图</h3>
<p>&nbsp;</p>]]></description></item><item><title>第1节 flume：12、flume的load_balance实现机制</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11081131.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 25 Jun 2019 02:04:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11081131.html</guid><description><![CDATA[<h2>1.5、flume的负载均衡load balancer</h2>
<p>负载均衡是用于解决一台机器(一个进程)无法解决所有请求而产生的一种算法。Load balancing Sink Processor 能够实现 load balance 功能，如下图Agent1 是一个路由节点，负责将 Channel 暂存的 Event 均衡到对应的多个 Sink组件上，而每个 Sink 组件分别连接到一个独立的 Agent 上，示例配置，如下所示：</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625100349122-696235864.png" alt="" /></p>
<p>在此处我们通过三台机器来进行模拟flume的负载均衡</p>
<p>三台机器规划如下：</p>
<p>node01：采集数据，发送到node02和node03机器上去</p>
<p>node02：接收node01的部分数据</p>
<p>node03：接收node01的部分数据</p>
<p>&nbsp;</p>
<h3>第一步：开发node01服务器的flume配置</h3>
<p>&nbsp;</p>
<p>node01服务器配置：</p>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin/conf</p>
<p class="code">vim load_balancer_client.conf</p>
<p>&nbsp;</p>
<div>
<p class="a">#agent name</p>
<p class="a">a1.channels = c1</p>
<p class="a">a1.sources = r1</p>
<p class="a">a1.sinks = k1 k2</p>
<p class="a">&nbsp;</p>
<p class="a">#set gruop</p>
<p class="a">a1.sinkgroups = g1</p>
<p class="a">&nbsp;</p>
<p class="a">#set channel</p>
<p class="a">a1.channels.c1.type = memory</p>
<p class="a">a1.channels.c1.capacity = 1000</p>
<p class="a">a1.channels.c1.transactionCapacity = 100</p>
<p class="a">&nbsp;</p>
<p class="a">a1.sources.r1.channels = c1</p>
<p class="a">a1.sources.r1.type = exec</p>
<p class="a">a1.sources.r1.command = tail -F /export/servers/taillogs/access_log</p>
<p class="a">&nbsp;</p>
<p class="a"># set sink1</p>
<p class="a">a1.sinks.k1.channel = c1</p>
<p class="a">a1.sinks.k1.type = avro</p>
<p class="a">a1.sinks.k1.hostname = node02</p>
<p class="a">a1.sinks.k1.port = 52020</p>
<p class="a">&nbsp;</p>
<p class="a"># set sink2</p>
<p class="a">a1.sinks.k2.channel = c1</p>
<p class="a">a1.sinks.k2.type = avro</p>
<p class="a">a1.sinks.k2.hostname = node03</p>
<p class="a">a1.sinks.k2.port = 52020</p>
<p class="a">&nbsp;</p>
<p class="a">#set sink group</p>
<p class="a">a1.sinkgroups.g1.sinks = k1 k2</p>
<p class="a">&nbsp;</p>
<p class="a">#set failover</p>
<p class="a">a1.sinkgroups.g1.processor.type = load_balance</p>
<p class="a">a1.sinkgroups.g1.processor.backoff = true</p>
<p class="a">a1.sinkgroups.g1.processor.selector = round_robin</p>
<p class="a">a1.sinkgroups.g1.processor.selector.maxTimeOut=10000</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>第二步：开发node02服务器的flume配置</h3>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin/conf</p>
<p class="code">vim load_banlancer_server.conf</p>
<p>&nbsp;</p>
<div>
<p class="a"># Name the components on this agent</p>
<p class="a">a1.sources = r1</p>
<p class="a">a1.sinks = k1</p>
<p class="a">a1.channels = c1</p>
<p class="a">&nbsp;</p>
<p class="a"># Describe/configure the source</p>
<p class="a">a1.sources.r1.type = avro</p>
<p class="a">a1.sources.r1.channels = c1</p>
<p class="a">a1.sources.r1.bind = node02</p>
<p class="a">a1.sources.r1.port = 52020</p>
<p class="a">&nbsp;</p>
<p class="a"># Describe the sink</p>
<p class="a">a1.sinks.k1.type = logger</p>
<p class="a">&nbsp;</p>
<p class="a"># Use a channel which buffers events in memory</p>
<p class="a">a1.channels.c1.type = memory</p>
<p class="a">a1.channels.c1.capacity = 1000</p>
<p class="a">a1.channels.c1.transactionCapacity = 100</p>
<p class="a">&nbsp;</p>
<p class="a"># Bind the source and sink to the channel</p>
<p class="a">a1.sources.r1.channels = c1</p>
<p class="a">a1.sinks.k1.channel = c1</p>
</div>
<p>&nbsp;</p>
<h3>第三步：开发node03服务器flume配置</h3>
<p>&nbsp;</p>
<p>node03服务器配置</p>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin/conf</p>
<p class="code">vim load_banlancer_server.conf</p>
<p>&nbsp;</p>
<div>
<p class="a"># Name the components on this agent</p>
<p class="a">a1.sources = r1</p>
<p class="a">a1.sinks = k1</p>
<p class="a">a1.channels = c1</p>
<p class="a">&nbsp;</p>
<p class="a"># Describe/configure the source</p>
<p class="a">a1.sources.r1.type = avro</p>
<p class="a">a1.sources.r1.channels = c1</p>
<p class="a">a1.sources.r1.bind = node03</p>
<p class="a">a1.sources.r1.port = 52020</p>
<p class="a">&nbsp;</p>
<p class="a"># Describe the sink</p>
<p class="a">a1.sinks.k1.type = logger</p>
<p class="a">&nbsp;</p>
<p class="a"># Use a channel which buffers events in memory</p>
<p class="a">a1.channels.c1.type = memory</p>
<p class="a">a1.channels.c1.capacity = 1000</p>
<p class="a">a1.channels.c1.transactionCapacity = 100</p>
<p class="a">&nbsp;</p>
<p class="a"># Bind the source and sink to the channel</p>
<p class="a">a1.sources.r1.channels = c1</p>
<p class="a">a1.sinks.k1.channel = c1</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>第四步：准备启动flume服务</h3>
<p>启动node03的flume服务</p>
<p>&nbsp;</p>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin</p>
<p class="code">bin/flume-ng agent -n a1 -c conf -f conf/load_balancer_server.conf -Dflume.root.logger=DEBUG,console</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>启动node02的flume服务</p>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin</p>
<p class="code">bin/flume-ng agent -n a1 -c conf -f conf/load_balancer_server.conf -Dflume.root.logger=DEBUG,console</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>启动node01的flume服务</p>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin</p>
<p class="code">bin/flume-ng agent -n a1 -c conf -f conf/load_balancer_client.conf -Dflume.root.logger=DEBUG,console</p>
<h3>第五步：node01服务器运行脚本产生数据</h3>
<p class="code">cd /export/servers/shells</p>
<p class="code">sh tail-file.sh</p>
<p>&nbsp;</p>]]></description></item><item><title>flume启动报错</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11080921.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 25 Jun 2019 01:29:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11080921.html</guid><description><![CDATA[<p><span style="color: #000000;">执行flume-ng agent -c conf -f conf/load_balancer_server.conf -n a1 -Dflume.root.logger=DEBUG,console ，报错：</span></p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">org.apache.flume.FlumeException: Failed to set up server socket</span><br />	at org.apache.flume.source.AvroSource.start(AvroSource.java:248)<br />	at org.apache.flume.source.EventDrivenSourceRunner.start(EventDrivenSourceRunner.java:44)<br />	at org.apache.flume.lifecycle.LifecycleSupervisor$MonitorRunnable.run(LifecycleSupervisor.java:249)<br />	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)<br />	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)<br />	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)<br />	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)<br />	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)<br />	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)<br />	at java.lang.Thread.run(Thread.java:748)<br /><span style="color: #ff0000;">Caused by: org.jboss.netty.channel.ChannelException: Failed to bind to: node03/192.168.8.120:52020</span><br />	at org.jboss.netty.bootstrap.ServerBootstrap.bind(ServerBootstrap.java:272)<br />	at org.apache.avro.ipc.NettyServer.&lt;init&gt;(NettyServer.java:106)<br />	at org.apache.flume.source.AvroSource.start(AvroSource.java:243)<br />	... 9 more<br /><span style="color: #ff0000;">Caused by: java.net.BindException: Address already in use</span></p>
<p>原因：上一次的flume进程还未关闭。</p>
<p>执行jps可以看到4191 Application ，这个就是flume的进程。原因是关闭flume时，使用了Ctrl+Z，所以导致前台关闭了flume，但是后台进程未关闭。</p>
<p>&nbsp;</p>
<p>解决方法：kill -9 4191. 另外，下次关闭flume，尽量使用Ctrl+C。</p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 flume：11、flume的failover机制实现高可用</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11080579.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 24 Jun 2019 18:08:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11080579.html</guid><description><![CDATA[<h2>1.4 高可用Flum-NG配置案例failover</h2>
<p>在完成单点的Flume NG搭建后，下面我们搭建一个高可用的Flume NG集群，架构图如下所示：</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625091320414-2141447474.png" alt="" /></p>
<p>&nbsp;</p>
<p>　　图中，我们可以看出，Flume的存储可以支持多种，这里只列举了HDFS和Kafka（如：存储最新的一周日志，并给Storm系统提供实时日志流）。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>1.4.1、角色分配</h3>
<p>Flume的Agent和Collector分布如下表所示：</p>
<table style="width: 241px;" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top">
<p>名称　</p>
</td>
<td valign="top">
<p>HOST</p>
</td>
<td valign="top">
<p>角色</p>
</td>
</tr>
<tr>
<td valign="top">
<p>Agent1</p>
</td>
<td valign="top">
<p>node01</p>
</td>
<td valign="top">
<p>Web Server</p>
</td>
</tr>
<tr>
<td valign="top">
<p>Collector1</p>
</td>
<td valign="top">
<p>node02</p>
</td>
<td valign="top">
<p>AgentMstr1</p>
</td>
</tr>
<tr>
<td valign="top">
<p>Collector2</p>
</td>
<td valign="top">
<p>node03</p>
</td>
<td valign="top">
<p>AgentMstr2</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>　　图中所示，Agent1数据分别流入到Collector1和Collector2，Flume NG本身提供了Failover机制，可以自动切换和恢复。在上图中，有3个产生日志服务器分布在不同的机房，要把所有的日志都收集到一个集群中存储。下 面我们开发配置Flume NG集群</p>
<p>&nbsp;</p>
<h3>1.4.2、node01安装配置flume与拷贝文件脚本</h3>
<p>将node03机器上面的flume安装包以及文件生产的两个目录拷贝到node01机器上面去</p>
<p>&nbsp;</p>
<p>node03机器执行以下命令</p>
<div>
<p class="a">cd /export/servers</p>
<p class="a">scp -r apache-flume-1.6.0-cdh5.14.0-bin/ node01:$PWD</p>
<p class="a">scp -r shells/ taillogs/ node01:$PWD</p>
</div>
<p>&nbsp;</p>
<p>node01机器配置agent的配置文件</p>
<p>cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin/conf</p>
<p>vim agent.conf</p>
<p>&nbsp;</p>
<p class="code">#agent1 name</p>
<p class="code">agent1.channels = c1</p>
<p class="code">agent1.sources = r1</p>
<p class="code">agent1.sinks = k1 k2</p>
<p class="code">#</p>
<p class="code">##set gruop</p>
<p class="code">agent1.sinkgroups = g1</p>
<p class="code">#</p>
<p class="code">##set channel</p>
<p class="code">agent1.channels.c1.type = memory</p>
<p class="code">agent1.channels.c1.capacity = 1000</p>
<p class="code">agent1.channels.c1.transactionCapacity = 100</p>
<p class="code">#</p>
<p class="code">agent1.sources.r1.channels = c1</p>
<p class="code">agent1.sources.r1.type = exec</p>
<p class="code">agent1.sources.r1.command = tail -F /export/servers/taillogs/access_log</p>
<p class="code">#</p>
<p class="code">agent1.sources.r1.interceptors = i1 i2</p>
<p class="code">agent1.sources.r1.interceptors.i1.type = static</p>
<p class="code">agent1.sources.r1.interceptors.i1.key = Type</p>
<p class="code">agent1.sources.r1.interceptors.i1.value = LOGIN</p>
<p class="code">agent1.sources.r1.interceptors.i2.type = timestamp</p>
<p class="code">#</p>
<p class="code">## set sink1</p>
<p class="code">agent1.sinks.k1.channel = c1</p>
<p class="code">agent1.sinks.k1.type = avro</p>
<p class="code">agent1.sinks.k1.hostname = node02</p>
<p class="code">agent1.sinks.k1.port = 52020</p>
<p class="code">#</p>
<p class="code">## set sink2</p>
<p class="code">agent1.sinks.k2.channel = c1</p>
<p class="code">agent1.sinks.k2.type = avro</p>
<p class="code">agent1.sinks.k2.hostname = node03</p>
<p class="code">agent1.sinks.k2.port = 52020</p>
<p class="code">#</p>
<p class="code">##set sink group</p>
<p class="code">agent1.sinkgroups.g1.sinks = k1 k2</p>
<p class="code">#</p>
<p class="code">##set failover</p>
<p class="code">agent1.sinkgroups.g1.processor.type = failover</p>
<p class="code">agent1.sinkgroups.g1.processor.priority.k1 = 10</p>
<p class="code">agent1.sinkgroups.g1.processor.priority.k2 = 1</p>
<p class="code">agent1.sinkgroups.g1.processor.maxpenalty = 10000</p>
<p class="code">#</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>1.4.3、node02与node03配置flumecollection</h3>
<p>node02机器修改配置文件</p>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin/conf</p>
<p class="code">vim collector.conf</p>
<p>&nbsp;</p>
<div>
<p class="a">#set Agent name</p>
<p class="a">a1.sources = r1</p>
<p class="a">a1.channels = c1</p>
<p class="a">a1.sinks = k1</p>
<p class="a">#</p>
<p class="a">##set channel</p>
<p class="a">a1.channels.c1.type = memory</p>
<p class="a">a1.channels.c1.capacity = 1000</p>
<p class="a">a1.channels.c1.transactionCapacity = 100</p>
<p class="a">#</p>
<p class="a">## other node,nna to nns</p>
<p class="a">a1.sources.r1.type = avro</p>
<p class="a">a1.sources.r1.bind = node02</p>
<p class="a">a1.sources.r1.port = 52020</p>
<p class="a">a1.sources.r1.interceptors = i1</p>
<p class="a">a1.sources.r1.interceptors.i1.type = static</p>
<p class="a">a1.sources.r1.interceptors.i1.key = Collector</p>
<p class="a">a1.sources.r1.interceptors.i1.value = node02</p>
<p class="a">a1.sources.r1.channels = c1</p>
<p class="a">#</p>
<p class="a">##set sink to hdfs</p>
<p class="a">a1.sinks.k1.type=hdfs</p>
<p class="a">a1.sinks.k1.hdfs.path= hdfs://node01:8020/flume/failover/</p>
<p class="a">a1.sinks.k1.hdfs.fileType=DataStream</p>
<p class="a">a1.sinks.k1.hdfs.writeFormat=TEXT</p>
<p class="a">a1.sinks.k1.hdfs.rollInterval=10</p>
<p class="a">a1.sinks.k1.channel=c1</p>
<p class="a">a1.sinks.k1.hdfs.filePrefix=%Y-%m-%d</p>
<p class="a">#</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>node03机器修改配置文件</p>
<p class="code">cd&nbsp; /export/servers/apache-flume-1.6.0-cdh5.14.0-bin/conf</p>
<p class="code">vim collector.conf</p>
<p>&nbsp;</p>
<div>
<p class="a">#set Agent name</p>
<p class="a">a1.sources = r1</p>
<p class="a">a1.channels = c1</p>
<p class="a">a1.sinks = k1</p>
<p class="a">#</p>
<p class="a">##set channel</p>
<p class="a">a1.channels.c1.type = memory</p>
<p class="a">a1.channels.c1.capacity = 1000</p>
<p class="a">a1.channels.c1.transactionCapacity = 100</p>
<p class="a">#</p>
<p class="a">## other node,nna to nns</p>
<p class="a">a1.sources.r1.type = avro</p>
<p class="a">a1.sources.r1.bind = node03</p>
<p class="a">a1.sources.r1.port = 52020</p>
<p class="a">a1.sources.r1.interceptors = i1</p>
<p class="a">a1.sources.r1.interceptors.i1.type = static</p>
<p class="a">a1.sources.r1.interceptors.i1.key = Collector</p>
<p class="a">a1.sources.r1.interceptors.i1.value = node03</p>
<p class="a">a1.sources.r1.channels = c1</p>
</div>
<div>
<p class="a">#</p>
<p class="a">##set sink to hdfs</p>
<p class="a">a1.sinks.k1.type=hdfs</p>
<p class="a">a1.sinks.k1.hdfs.path= hdfs://node01:8020/flume/failover/</p>
<p class="a">a1.sinks.k1.hdfs.fileType=DataStream</p>
<p class="a">a1.sinks.k1.hdfs.writeFormat=TEXT</p>
<p class="a">a1.sinks.k1.hdfs.rollInterval=10</p>
<p class="a">a1.sinks.k1.channel=c1</p>
<p class="a">a1.sinks.k1.hdfs.filePrefix=%Y-%m-%d</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>1.4.4、顺序启动命令</h3>
<p>node03机器上面启动flume</p>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin</p>
<p class="code">bin/flume-ng agent -n a1 -c conf -f conf/collector.conf -Dflume.root.logger=DEBUG,console</p>
<p>&nbsp;</p>
<p>node02机器上面启动flume</p>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin</p>
<p class="code">bin/flume-ng agent -n a1 -c conf -f conf/collector.conf -Dflume.root.logger=DEBUG,console</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>node01机器上面启动flume</p>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin</p>
<p class="code">bin/flume-ng agent -n agent1 -c conf -f conf/agent.conf -Dflume.root.logger=DEBUG,console</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>node01机器启动文件产生脚本</p>
<p class="code">cd&nbsp; /export/servers/shells</p>
<p class="code">sh tail-file.sh</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>1.4.5、 FAILOVER测试</h3>
<p>下面我们来测试下Flume NG集群的高可用（故障转移）。场景如下：我们在Agent1节点上传文件，由于我们配置Collector1的权重比Collector2大，所以 Collector1优先采集并上传到存储系统。然后我们kill掉Collector1，此时有Collector2负责日志的采集上传工作，之后，我 们手动恢复Collector1节点的Flume服务，再次在Agent1上次文件，发现Collector1恢复优先级别的采集工作。具体截图如下所 示：</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Collector1优先上传</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>HDFS集群中上传的log内容预览</p>
<p>&nbsp;</p>
<p>Collector1宕机，Collector2获取优先上传权限</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>重启Collector1服务，Collector1重新获得优先上传的权限</p>
<p align="left">&nbsp;</p>]]></description></item><item><title>第1节 flume：10、flume的更多组件介绍</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11080575.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 24 Jun 2019 17:59:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11080575.html</guid><description><![CDATA[<p>作业：flume如何实现收集mysql的数据，没隔几秒钟，查看mysql中的数据是否有变化，一旦有变化，把数据拿过来，存到hdfs上。</p>
<p>需要使用custom source。可网上搜索，github上。</p>]]></description></item><item><title>第1节 flume：9、flume的多个agent串联（级联）</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11080563.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 24 Jun 2019 17:13:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/25/11080563.html</guid><description><![CDATA[<h4><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625015747621-263725722.png" alt="" /></h4>
<p>&nbsp;</p>
<h4>3、两个agent级联</h4>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625011436802-1891470169.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625011448763-1500577895.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h5>需求分析：</h5>
<p>第一个agent负责收集文件当中的数据，通过网络发送到第二个agent当中去，第二个agent负责接收第一个agent发送的数据，并将数据保存到hdfs上面去</p>
<h5>第一步：node02安装flume</h5>
<p>将node03机器上面解压后的flume文件夹拷贝到node02机器上面去</p>
<p class="code">cd&nbsp; /export/servers</p>
<p class="code">scp -r apache-flume-1.6.0-cdh5.14.0-bin/ node02:$PWD</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190625011550865-1750810773.png" alt="" /></p>
<p>&nbsp;</p>
<p><span style="font-size: 0.83em;">第二步：node02配置flume配置文件</span></p>
<p>在node02机器配置我们的flume</p>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin/conf</p>
<p class="code">vim tail-avro-avro-logger.conf</p>
<p>&nbsp;</p>
<div>
<p class="a">##################</p>
<p class="a"># Name the components on this agent</p>
<p class="a">a1.sources = r1</p>
<p class="a">a1.sinks = k1</p>
<p class="a">a1.channels = c1</p>
<p class="a"># Describe/configure the source</p>
<p class="a">a1.sources.r1.type = exec</p>
<p class="a">a1.sources.r1.command = tail -F /export/servers/taillogs/access_log</p>
<p class="a">a1.sources.r1.channels = c1</p>
<p class="a"># Describe the sink</p>
<p class="a">##sink端的avro是一个数据发送者</p>
<p class="a">a1.sinks = k1</p>
<p class="a">a1.sinks.k1.type = avro</p>
<p class="a">a1.sinks.k1.channel = c1</p>
<p class="a">a1.sinks.k1.hostname = 192.168.52.120</p>
<p class="a">a1.sinks.k1.port = 4141</p>
<p class="a">a1.sinks.k1.batch-size = 10</p>
<p class="a"># Use a channel which buffers events in memory</p>
<p class="a">a1.channels.c1.type = memory</p>
<p class="a">a1.channels.c1.capacity = 1000</p>
<p class="a">a1.channels.c1.transactionCapacity = 100</p>
<p class="a"># Bind the source and sink to the channel</p>
<p class="a">a1.sources.r1.channels = c1</p>
<p class="a">a1.sinks.k1.channel = c1</p>
</div>
<h5>第三步：node02开发脚本文件，往文件写入数据</h5>
<p>直接将node03下面的脚本和数据拷贝到node02即可，node03机器上执行以下命令</p>
<div>
<p class="a">cd&nbsp; /export/servers</p>
<p class="a">scp -r shells/ taillogs/ node02:$PWD</p>
</div>
<p>&nbsp;</p>
<p align="left">&nbsp;</p>
<h5>第五步：node03开发flume配置文件</h5>
<p>在node03机器上开发flume的配置文件</p>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin/conf</p>
<p class="code">vim avro-hdfs.conf</p>
<p align="left">&nbsp;</p>
<div>
<p class="a"># Name the components on this agent</p>
<p class="a">a1.sources = r1</p>
<p class="a">a1.sinks = k1</p>
<p class="a">a1.channels = c1</p>
<p class="a"># Describe/configure the source</p>
<p class="a">##source中的avro组件是一个接收者服务</p>
<p class="a">a1.sources.r1.type = avro</p>
<p class="a">a1.sources.r1.channels = c1</p>
<p class="a">a1.sources.r1.bind = 192.168.52.120</p>
<p class="a">a1.sources.r1.port = 4141</p>
<p class="a"># Describe the sink</p>
<p class="a">a1.sinks.k1.type = hdfs</p>
<p class="a">a1.sinks.k1.hdfs.path = hdfs://node01:8020/avro/hdfs/%y-%m-%d/%H%M/</p>
<p class="a">a1.sinks.k1.hdfs.filePrefix = events-</p>
<p class="a">a1.sinks.k1.hdfs.round = true</p>
<p class="a">a1.sinks.k1.hdfs.roundValue = 10</p>
<p class="a">a1.sinks.k1.hdfs.roundUnit = minute</p>
<p class="a">a1.sinks.k1.hdfs.rollInterval = 3</p>
<p class="a">a1.sinks.k1.hdfs.rollSize = 20</p>
<p class="a">a1.sinks.k1.hdfs.rollCount = 5</p>
<p class="a">a1.sinks.k1.hdfs.batchSize = 1</p>
<p class="a">a1.sinks.k1.hdfs.useLocalTimeStamp = true</p>
<p class="a">#生成的文件类型，默认是Sequencefile，可用DataStream，则为普通文本</p>
<p class="a">a1.sinks.k1.hdfs.fileType = DataStream</p>
<p class="a"># Use a channel which buffers events in memory</p>
<p class="a">a1.channels.c1.type = memory</p>
<p class="a">a1.channels.c1.capacity = 1000</p>
<p class="a">a1.channels.c1.transactionCapacity = 100</p>
<p class="a">&nbsp;</p>
<p class="a"># Bind the source and sink to the channel</p>
<p class="a">a1.sources.r1.channels = c1</p>
<p class="a">a1.sinks.k1.channel = c1</p>
</div>
<h5>第六步：顺序启动</h5>
<p>node03机器启动flume进程</p>
<div>
<p class="a">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin</p>
<p class="a">bin/flume-ng agent -c conf -f conf/avro-hdfs.conf -n a1&nbsp; -Dflume.root.logger=INFO,console&nbsp;&nbsp;</p>
</div>
<p>&nbsp;</p>
<p>node02机器启动flume进程</p>
<div>
<p class="a">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin/</p>
<p class="a">bin/flume-ng agent -c conf -f conf/tail-avro-avro-logger.conf -n a1&nbsp; -Dflume.root.logger=INFO,console&nbsp;&nbsp;&nbsp;</p>
</div>
<p>&nbsp;</p>
<p align="left">node02机器启shell脚本生成文件</p>
<p class="code">cd&nbsp; /export/servers/shells</p>
<p class="code">sh tail-file.sh</p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 flume：8、flume采集某个文件内容到hdfs上</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/24/11078743.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 24 Jun 2019 10:36:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/24/11078743.html</guid><description><![CDATA[<p>&nbsp;&nbsp;</p>
<h4>2、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 采集文件内容到HDFS</h4>
<h5>需求分析：</h5>
<p>采集需求：比如业务系统使用log4j生成的日志，日志内容不断增加，需要把追加到日志文件中的数据实时采集到hdfs。</p>
<p>同一个日志文件的内容不断增加，hdfs上该文件对应的文件的内容也要同时增加。</p>
<p>&nbsp;</p>
<p>根据需求，首先定义以下3大要素</p>
<p class="1">l&nbsp; 采集源，即source&mdash;&mdash;监控文件内容更新 :&nbsp; exec&nbsp; &lsquo;tail -F file&rsquo;</p>
<p class="1">l&nbsp; 下沉目标，即sink&mdash;&mdash;HDFS文件系统&nbsp; :&nbsp; hdfs sink</p>
<p class="1">l&nbsp; Source和sink之间的传递通道&mdash;&mdash;channel，可用file channel 也可以用 内存channel</p>
<p>&nbsp;</p>
<h5>定义flume的配置文件</h5>
<p>node03开发配置文件</p>
<p class="code">cd /export/servers/apache-flume-1.6.0-cdh5.14.0-bin/conf</p>
<p class="code">vim tail-file.conf</p>
<p>&nbsp;</p>
<p>配置文件内容</p>
<p class="code">agent1.sources = source1</p>
<p class="code">agent1.sinks = sink1</p>
<p class="code">agent1.channels = channel1</p>
<p class="code">&nbsp;</p>
<p class="code"># Describe/configure tail -F source1</p>
<p class="code">agent1.sources.source1.type = exec</p>
<p class="code">agent1.sources.source1.command = tail -F /export/servers/taillogs/access_log</p>
<p class="code">agent1.sources.source1.channels = channel1</p>
<p class="code">&nbsp;</p>
<p class="code">#configure host for source</p>
<p class="code">#agent1.sources.source1.interceptors = i1</p>
<p class="code">#agent1.sources.source1.interceptors.i1.type = host</p>
<p class="code">#agent1.sources.source1.interceptors.i1.hostHeader = hostname</p>
<p class="code">&nbsp;</p>
<p class="code"># Describe sink1</p>
<p class="code">agent1.sinks.sink1.type = hdfs</p>
<p class="code">#a1.sinks.k1.channel = c1</p>
<p class="code">agent1.sinks.sink1.hdfs.path = hdfs://node01:8020/weblog/flume-collection/%y-%m-%d/%H-%M</p>
<p class="code">agent1.sinks.sink1.hdfs.filePrefix = access_log</p>
<p class="code">agent1.sinks.sink1.hdfs.maxOpenFiles = 5000</p>
<p class="code">agent1.sinks.sink1.hdfs.batchSize= 100</p>
<p class="code">agent1.sinks.sink1.hdfs.fileType = DataStream</p>
<p class="code">agent1.sinks.sink1.hdfs.writeFormat =Text</p>
<p class="code">agent1.sinks.sink1.hdfs.rollSize = 102400</p>
<p class="code">agent1.sinks.sink1.hdfs.rollCount = 1000000</p>
<p class="code">agent1.sinks.sink1.hdfs.rollInterval = 60</p>
<p class="code">agent1.sinks.sink1.hdfs.round = true</p>
<p class="code">agent1.sinks.sink1.hdfs.roundValue = 10</p>
<p class="code">agent1.sinks.sink1.hdfs.roundUnit = minute</p>
<p class="code">agent1.sinks.sink1.hdfs.useLocalTimeStamp = true</p>
<p class="code">&nbsp;</p>
<p class="code"># Use a channel which buffers events in memory</p>
<p class="code">agent1.channels.channel1.type = memory</p>
<p class="code">agent1.channels.channel1.keep-alive = 120</p>
<p class="code">agent1.channels.channel1.capacity = 500000</p>
<p class="code">agent1.channels.channel1.transactionCapacity = 600</p>
<p class="code">&nbsp;</p>
<p class="code"># Bind the source and sink to the channel</p>
<p class="code">agent1.sources.source1.channels = channel1</p>
<p class="code">agent1.sinks.sink1.channel = channel1</p>
<h5>启动flume</h5>
<p>cd&nbsp; /export/servers/apache-flume-1.6.0-cdh5.14.0-bin</p>
<p>&nbsp;</p>
<p class="code">bin/flume-ng agent -c conf -f conf/tail-file.conf -n agent1&nbsp; -Dflume.root.logger=INFO,console</p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 flume：7、flume的监控文件夹，实现数据收集到hdfs上</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/24/11078739.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 24 Jun 2019 10:34:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/24/11078739.html</guid><description><![CDATA[<p>&nbsp;</p>
<h3>1.2.2 采集案例</h3>
<h4>1、采集目录到HDFS</h4>
<h5>需求分析</h5>
<p>结构示意图：</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190624183401150-58163514.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>采集需求：某服务器的某特定目录下，会不断产生新的文件，每当有新文件出现，就需要把文件采集到HDFS中去</p>
<p>根据需求，首先定义以下3大要素</p>
<p class="1">l&nbsp; 数据源组件，即source &mdash;&mdash;监控文件目录 :&nbsp; spooldir</p>
<p class="1">spooldir特性：</p>
<p class="1">&nbsp;&nbsp; 1、监视一个目录，只要目录中出现新文件，就会采集文件中的内容</p>
<p class="1">&nbsp;&nbsp; 2、采集完成的文件，会被agent自动添加一个后缀：COMPLETED</p>
<p class="1">&nbsp;&nbsp; 3、所监视的目录中不允许重复出现相同文件名的文件</p>
<p class="1">l&nbsp; 下沉组件，即sink&mdash;&mdash;HDFS文件系统&nbsp; :&nbsp; hdfs sink</p>
<p class="1">l&nbsp; 通道组件，即channel&mdash;&mdash;可用file channel 也可以用内存channel</p>
<h5>flume配置文件开发</h5>
<p>配置文件编写：</p>
<p>&nbsp;</p>
<div>
<p class="a">cd&nbsp; /export/servers/apache-flume-1.6.0-cdh5.14.0-bin/conf</p>
<p class="a">mkdir -p /export/servers/dirfile</p>
<p class="a">vim spooldir.conf</p>
</div>
<p>&nbsp;</p>
<div>
<p class="a"># Name the components on this agent</p>
<p class="a">a1.sources = r1</p>
<p class="a">a1.sinks = k1</p>
<p class="a">a1.channels = c1</p>
<p class="a"># Describe/configure the source</p>
<p class="a">##注意：不能往监控目录中重复丢同名文件</p>
<p class="a">a1.sources.r1.type = spooldir</p>
<p class="a">a1.sources.r1.spoolDir = /export/servers/dirfile</p>
<p class="a">a1.sources.r1.fileHeader = true</p>
<p class="a"># Describe the sink</p>
<p class="a">a1.sinks.k1.type = hdfs</p>
<p class="a">a1.sinks.k1.channel = c1</p>
<p class="a">a1.sinks.k1.hdfs.path = hdfs://node01:8020/spooldir/files/%y-%m-%d/%H%M/</p>
<p class="a">a1.sinks.k1.hdfs.filePrefix = events-</p>
<p class="a">a1.sinks.k1.hdfs.round = true</p>
<p class="a">a1.sinks.k1.hdfs.roundValue = 10</p>
<p class="a">a1.sinks.k1.hdfs.roundUnit = minute</p>
<p class="a">a1.sinks.k1.hdfs.rollInterval = 3</p>
<p class="a">a1.sinks.k1.hdfs.rollSize = 20</p>
<p class="a">a1.sinks.k1.hdfs.rollCount = 5</p>
<p class="a">a1.sinks.k1.hdfs.batchSize = 1</p>
<p class="a">a1.sinks.k1.hdfs.useLocalTimeStamp = true</p>
<p class="a">#生成的文件类型，默认是Sequencefile，可用DataStream，则为普通文本</p>
<p class="a">a1.sinks.k1.hdfs.fileType = DataStream</p>
<p class="a"># Use a channel which buffers events in memory</p>
<p class="a">a1.channels.c1.type = memory</p>
<p class="a">a1.channels.c1.capacity = 1000</p>
<p class="a">a1.channels.c1.transactionCapacity = 100</p>
<p class="a"># Bind the source and sink to the channel</p>
<p class="a">a1.sources.r1.channels = c1</p>
<p class="a">a1.sinks.k1.channel = c1</p>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Channel参数解释：</p>
<p>capacity：默认该通道中最大的可以存储的event数量</p>
<p>trasactionCapacity：每次最大可以从source中拿到或者送到sink中的event数量</p>
<p>keep-alive：event添加到通道中或者移出的允许时间</p>
<p>&nbsp;</p>
<h5>启动flume</h5>
<p class="code">bin/flume-ng agent -c ./conf -f ./conf/spooldir.conf -n a1 -Dflume.root.logger=INFO,console</p>
<p>&nbsp;</p>
<h5>上传文件到指定目录</h5>
<p>将不同的文件上传到下面目录里面去，注意文件不能重名</p>
<div>
<p class="a">cd /export/servers/dirfile</p>
</div>
<p>&nbsp;</p>]]></description></item><item><title>第1节 flume：6、flume的入门测试案例</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/24/11078141.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 24 Jun 2019 09:06:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/24/11078141.html</guid><description><![CDATA[<p>案例：使用网络telent命令向一台机器发送一些网络数据，然后通过flume采集网络端口数据。</p>
<h3>1.2.1 Flume的安装部署</h3>
<h4>第一步：下载解压修改配置文件</h4>
<p>Flume的安装非常简单，只需要解压即可，当然，前提是已有hadoop环境</p>
<p>上传安装包到数据源所在节点上</p>
<p>这里我们采用第三台机器来进行安装</p>
<p class="code">tar -zxvf flume-ng-1.6.0-cdh5.14.0.tar.gz -C /export/servers/</p>
<p class="code">cd&nbsp; /export/servers/apache-flume-1.6.0-cdh5.14.0-bin/conf</p>
<p class="code">cp&nbsp; flume-env.sh.template flume-env.sh</p>
<p class="code">vim flume-env.sh</p>
<p class="code">export JAVA_HOME=/export/servers/jdk1.8.0_141</p>
<p>&nbsp;</p>
<h4>第二步：开发配置文件</h4>
<p>根据数据采集的需求<strong>配置采集方案</strong>，描述在配置文件中(文件名可任意自定义)</p>
<p>&nbsp;</p>
<p>配置我们的网络收集的配置文件</p>
<p>在flume的conf目录下新建一个配置文件（采集方案）</p>
<p>vim&nbsp;&nbsp; /export/servers/apache-flume-1.6.0-cdh5.14.0-bin/conf/netcat-logger.conf</p>
<p class="code"># 定义这个agent中各组件的名字</p>
<p class="code">a1.sources = r1</p>
<p class="code">a1.sinks = k1</p>
<p class="code">a1.channels = c1</p>
<p class="code">&nbsp;</p>
<p class="code"># 描述和配置source组件：r1</p>
<p class="code">a1.sources.r1.type = netcat</p>
<p class="code">a1.sources.r1.bind = 192.168.52.120</p>
<p class="code">a1.sources.r1.port = 44444</p>
<p class="code">&nbsp;</p>
<p class="code"># 描述和配置sink组件：k1</p>
<p class="code">a1.sinks.k1.type = logger</p>
<p class="code">&nbsp;</p>
<p class="code"># 描述和配置channel组件，此处使用是内存缓存的方式</p>
<p class="code">a1.channels.c1.type = memory</p>
<p class="code">a1.channels.c1.capacity = 1000</p>
<p class="code">a1.channels.c1.transactionCapacity = 100</p>
<p class="code">&nbsp;</p>
<p class="code"># 描述和配置source&nbsp; channel&nbsp;&nbsp; sink之间的连接关系</p>
<p class="code">a1.sources.r1.channels = c1</p>
<p class="code">a1.sinks.k1.channel = c1</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>第三步：启动配置文件</h4>
<p><strong>指定采集方案配置文件</strong>，在相应的节点上启动flume agent</p>
<p>&nbsp;</p>
<p>先用一个最简单的例子来测试一下程序环境是否正常</p>
<p>启动agent去采集数据</p>
<p class="code">bin/flume-ng agent -c conf -f conf/netcat-logger.conf -n a1&nbsp; -Dflume.root.logger=INFO,console</p>
<p>-c conf&nbsp;&nbsp; 指定flume自身的配置文件所在目录</p>
<p>-f conf/netcat-logger.con&nbsp; 指定我们所描述的采集方案</p>
<p>-n a1&nbsp; 指定我们这个agent的名字</p>
<p>&nbsp;</p>
<h4>第四步：安装telent准备测试</h4>
<p>在node02机器上面安装telnet客户端，用于模拟数据的发送</p>
<p class="code">yum -y install telnet</p>
<p class="code">telnet&nbsp; node03&nbsp; 44444&nbsp;&nbsp; # 使用telnet模拟数据发送</p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 flume：4、离线项目处理的整个架构图；5、flume的基本介绍；</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/24/11077868.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 24 Jun 2019 08:32:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/24/11077868.html</guid><description><![CDATA[<p>第1节 flume：4、离线项目处理的整个架构图</p>
<p>辅助系统工具：flume，azkaban,sqoop。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190624162709081-782107764.png" alt="" /></p>
<p>在一个完整的离线大数据处理系统中，除了hdfs+mapreduce+hive组成分析系统的核心之外，还需要数据采集、结果数据导出、任务调度等不可或缺的辅助系统，而这些辅助工具在hadoop生态体系中都有便捷的开源框架，如图所示：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190624162857502-1322408780.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;第1节 flume：5、flume的基本介绍；</p>
<p>&nbsp;</p>
<h1>1. 日志采集框架Flume</h1>
<h2>91.1 Flume介绍</h2>
<h3>1.1.1 概述</h3>
<p class="1">u&nbsp; Flume是一个分布式、可靠、和高可用的海量日志采集、聚合和传输的系统。</p>
<p class="1">u&nbsp; Flume可以采集文件，socket数据包、文件、文件夹、kafka等各种形式源数据，又可以将采集到的数据(下沉sink)输出到HDFS、hbase、hive、kafka等众多外部存储系统中</p>
<p class="1">u&nbsp; 一般的采集需求，通过对flume的简单配置即可实现</p>
<p class="1">u&nbsp; Flume针对特殊场景也具备良好的自定义扩展能力，</p>
<p class="1">因此，flume可以适用于大部分的日常数据采集场景</p>
<p>&nbsp;</p>
<h3>1.1.2 运行机制</h3>
<p class="1">1、&nbsp; Flume分布式系统中最<strong>核心的角色是</strong><strong>agent</strong>，flume采集系统就是由一个个agent所连接起来形成</p>
<p class="1"><strong>2、 </strong><strong>每一个agent</strong><strong>相当于一个数据传递员</strong><a href="file:///D:/Study/BigData/heima/stage2/7%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A6%BB%E7%BA%BF%E7%AC%AC%E4%B8%83%E5%A4%A9/%E7%AC%AC%E4%B8%83%E5%A4%A9%E6%95%99%E6%A1%88_%E8%BE%85%E5%8A%A9%E7%B3%BB%E7%BB%9F%E4%B9%8Bflume%E2%80%94%E2%80%94azkaban%E2%80%94%E2%80%94sqoop.docx#_msocom_1">[M1：Source 到 Channel 到 Sink之间传递数据的形式是Event事件；Event事件是一个数据流单元。]</a>&nbsp;<strong>，内部有三个组件：</strong></p>
<p class="1">a)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Source：采集组件，用于跟数据源对接，以获取数据</p>
<p class="1">b)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sink：下沉组件，用于往下一级agent传递数据或者往最终存储系统传递数据</p>
<p class="1">c)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Channel：传输通道组件，用于从source将数据传递到sink</p>
<p class="1">&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190624163032854-1833647233.png" alt="" /></p>
<h3>1.1.3 Flume采集系统结构图</h3>
<h4>1. 简单结构</h4>
<p>单个agent采集数据</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190624163058402-289722716.png" alt="" /></p>
<h4>2. 复杂结构</h4>
<p>多级agent之间串联</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190624163113877-433756564.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>mysql的sql语句练习的2个网址</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/23/11072312.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 23 Jun 2019 04:10:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/23/11072312.html</guid><description><![CDATA[<p>sql语句练习：</p>
<p><a href="https://blog.csdn.net/mrbcy/article/details/68965271" target="_blank">https://blog.csdn.net/mrbcy/article/details/68965271</a>&nbsp;完成。</p>
<p><a href="https://blog.csdn.net/flycat296/article/details/63681089" target="_blank">https://blog.csdn.net/flycat296/article/details/63681089</a></p>
<p>&nbsp;</p>
<h2><span lang="EN-US">hive</span><span style="font-family: 宋体; mso-ascii-font-family: 'Calibri Light'; mso-ascii-theme-font: major-latin; mso-fareast-font-family: 宋体; mso-fareast-theme-font: major-fareast; mso-hansi-font-family: 'Calibri Light'; mso-hansi-theme-font: major-latin;">语句综合练习</span></h2>
<p class="MsoNormal"><span lang="EN-US">以下网址中的表为背景表，完成以下练习题：</span></p>
<p class="MsoNormal"><span lang="EN-US"><a href="https://blog.csdn.net/mrbcy/article/details/68965271">https://blog.csdn.net/mrbcy/article/details/68965271</a></span></p>
<p>1、查询"01"课程比"02"课程成绩高的学生的信息及课程分数&nbsp;</p>
<p>&nbsp;</p>
<p class="code"><span style="color: #ffffff;">SELECT a.* ,b.s_score AS 01_score,c.s_score AS 02_score FROM</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp;&nbsp; student a</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp; LEFT JOIN score b ON a.s_id=b.s_id AND b.c_id='01'</span></p>
<p class="code"><span style="color: #ffffff;">LEFT JOIN score c ON a.s_id=c.s_id AND c.c_id = '02'&nbsp; WHERE b.s_score&gt;c.s_score;</span></p>
<p>&nbsp;</p>
<p>2、查询"01"课程比"02"课程成绩低的学生的信息及课程分数</p>
<p>&nbsp;</p>
<p class="code"><span style="color: #ffffff;">SELECT a.* ,b.s_score AS 01_score,c.s_score AS 02_score FROM</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp;&nbsp; student a LEFT JOIN score b ON a.s_id=b.s_id AND b.c_id='01'</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp;&nbsp;&nbsp; JOIN score c ON a.s_id=c.s_id AND c.c_id='02' WHERE b.s_score&lt;c.s_score;</span></p>
<p><span style="color: #ffffff;">&nbsp;</span></p>
<p>&nbsp;</p>
<p>3、查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩</p>
<p>&nbsp;</p>
<p class="code"><span style="color: #ffffff;">SELECT b.s_id,b.s_name,ROUND(AVG(a.s_score),2) AS avg_score FROM</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp;&nbsp; student b</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp;&nbsp; JOIN score a ON b.s_id = a.s_id</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp;&nbsp; GROUP BY b.s_id,b.s_name HAVING ROUND(AVG(a.s_score),2)&gt;=60;</span></p>
<p><span style="color: #ffffff;">&nbsp;</span></p>
<p>4、查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- (包括有成绩的和无成绩的)</p>
<p>&nbsp;</p>
<p class="code"><span style="color: #ffffff;">SELECT b.s_id,b.s_name,ROUND(AVG(a.s_score),2) AS avg_score FROM</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp;&nbsp; student b</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp;&nbsp; LEFT JOIN score a ON b.s_id = a.s_id</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp;&nbsp; GROUP BY b.s_id,b.s_name HAVING ROUND(AVG(a.s_score),2)&lt;60</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp;&nbsp; UNION ALL</span></p>
<p class="code"><span style="color: #ffffff;">SELECT a.s_id,a.s_name,0 AS avg_score FROM</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp;&nbsp; student a</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp;&nbsp; WHERE a.s_id NOT IN (</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SELECT DISTINCT s_id FROM score);</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>-- 5、查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩</p>
<p class="code"><span style="color: #ffffff;">SELECT a.s_id,a.s_name,COUNT(b.c_id) AS sum_course,SUM(b.s_score) AS sum_score FROM</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp;&nbsp; student a</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp;&nbsp; LEFT JOIN score b ON a.s_id=b.s_id</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp;&nbsp; GROUP BY a.s_id,a.s_name;</span></p>
<p><span style="color: #ffffff;">&nbsp;</span></p>
<p>&nbsp;</p>
<p>-- 6、查询"李"姓老师的数量</p>
<p>&nbsp;</p>
<p><span style="color: #ffffff;">select count(t_id) from techer where t_name like '李%';</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>-- 7、查询学过"张三"老师授课的同学的信息</p>
<p class="code"><span style="color: #ffffff;">SELECT a.*</span></p>
<p class="code"><span style="color: #ffffff;">FROM student a LEFT JOIN score b ON a.s_id = b.s_id WHERE b.c_id&nbsp; IN&nbsp; (</span></p>
<p class="code"><span style="color: #ffffff;">SELECT c.c_id</span></p>
<p class="code"><span style="color: #ffffff;">FROM course c LEFT JOIN techer t ON c.t_id = t.t_id WHERE t.t_name = '张三'</span></p>
<p class="code"><span style="color: #ffffff;">) ;</span></p>
<p><span style="color: #ffffff;">&nbsp;</span></p>
<p>&nbsp;</p>
<p>-- 8、查询没学过"张三"老师授课的同学的信息</p>
<p class="code"><span style="color: #ffffff;">SELECT s.*</span></p>
<p class="code"><span style="color: #ffffff;">FROM student s LEFT JOIN (</span></p>
<p class="code"><span style="color: #ffffff;">SELECT a.s_id</span></p>
<p class="code"><span style="color: #ffffff;">FROM student a LEFT JOIN score b ON a.s_id = b.s_id WHERE b.c_id&nbsp; IN&nbsp; (</span></p>
<p class="code"><span style="color: #ffffff;">SELECT c.c_id</span></p>
<p class="code"><span style="color: #ffffff;">FROM course c LEFT JOIN techer t ON c.t_id = t.t_id WHERE t.t_name = '张三'</span></p>
<p class="code"><span style="color: #ffffff;">)</span></p>
<p class="code"><span style="color: #ffffff;">) ss ON s.s_id = ss.s_id WHERE ss.s_id IS NULL;</span></p>
<p><span style="color: #ffffff;">&nbsp;</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p align="left">-- 9、查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息</p>
<p align="left">&nbsp;</p>
<p class="code"><span style="color: #ffffff;">select a.* from</span></p>
<p class="code"><span style="color: #ffffff;">&nbsp;&nbsp;&nbsp; student a,score b,score c</span></p>
<p class="code"><span style="color: #ffffff;">where a.s_id = b.s_id&nbsp; and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';</span></p>
<p>&nbsp;</p>
<p>-- 10、查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息</p>
<p class="code"><span style="color: #ffffff;">SELECT qq.*</span></p>
<p class="code"><span style="color: #ffffff;">FROM (</span></p>
<p class="code"><span style="color: #ffffff;">SELECT s.*</span></p>
<p class="code"><span style="color: #ffffff;">FROM student s LEFT JOIN score sco ON s.s_id = sco.s_id LEFT JOIN course c ON sco.c_id = c.c_id WHERE c.c_id='01'&nbsp;</span></p>
<p class="code"><span style="color: #ffffff;">) qq</span></p>
<p class="code"><span style="color: #ffffff;">LEFT JOIN (</span></p>
<p class="code"><span style="color: #ffffff;">SELECT stu.*</span></p>
<p class="code"><span style="color: #ffffff;">FROM student stu LEFT JOIN score mysco ON stu.s_id = mysco.s_id LEFT JOIN course cou ON mysco.c_id = cou.c_id WHERE cou.c_id='02'&nbsp;</span></p>
<p class="code"><span style="color: #ffffff;">) pp</span></p>
<p class="code"><span style="color: #ffffff;">ON qq.s_id = pp.s_id WHERE pp.s_id IS NULL;</span></p>
<p><span style="color: #ffffff;">&nbsp;</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>-- 11、查询没有学全所有课程的同学的信息</p>
<p class="code">&nbsp;</p>
<p class="code"><span style="color: #ffffff;">SELECT ss.s_id</span></p>
<p class="code"><span style="color: #ffffff;">FROM (</span></p>
<p class="code"><span style="color: #ffffff;">SELECT stu.s_id,COUNT(stu.s_id) AS num</span></p>
<p class="code"><span style="color: #ffffff;">FROM student stu LEFT JOIN score sco ON stu.s_id = sco.s_id LEFT JOIN course cou ON sco.c_id = cou.c_id</span></p>
<p class="code"><span style="color: #ffffff;">GROUP BY stu.s_id</span></p>
<p class="code"><span style="color: #ffffff;">) ss WHERE ss.num &lt; 3</span></p>
<p><span style="color: #ffffff;">&nbsp;</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>-- 12、查询至少有一门课与学号为"01"的同学所学相同的同学的信息</p>
<p class="code"><span style="color: #ffffff;">SELECT stu.*</span></p>
<p class="code"><span style="color: #ffffff;">FROM student stu LEFT JOIN</span></p>
<p class="code"><span style="color: #ffffff;">(</span></p>
<p class="code"><span style="color: #ffffff;">SELECT s.s_id</span></p>
<p class="code"><span style="color: #ffffff;">FROM score s WHERE s.c_id IN(</span></p>
<p class="code"><span style="color: #ffffff;">SELECT&nbsp; c_id FROM score WHERE s_id = '01'</span></p>
<p class="code"><span style="color: #ffffff;">)GROUP BY s_id</span></p>
<p class="code"><span style="color: #ffffff;">) pp ON stu.s_id = pp.s_id WHERE pp.s_id IS NOT&nbsp; NULL;</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 12.0pt; mso-bidi-font-size: 11.0pt; font-family: 'Calibri','sans-serif'; mso-ascii-theme-font: minor-latin; mso-fareast-font-family: 宋体; mso-fareast-theme-font: minor-fareast; mso-hansi-theme-font: minor-latin; mso-bidi-font-family: 'Times New Roman'; mso-bidi-theme-font: minor-bidi; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;" lang="EN-US">&nbsp;</span></p>]]></description></item><item><title>第4节 hive调优：2、数据倾斜</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/23/11072148.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 23 Jun 2019 03:25:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/23/11072148.html</guid><description><![CDATA[<p>数据的倾斜：<br />	主要就是合理的控制我们的map个数以及reduce个数<br />	<br />	第一个问题：maptask的个数怎么定的？？？与我们文件的block块相关，默认一个block块就是对应一个maptask<br />	第二个问题：reduceTask的个数怎么定的？？？是我们自己手动设置的，爱设几个设几个，没人管你<br />	<br />	第三个问题：是不是maptask的个数越多越好：不一定：有时候有些小文件，都要启动一个maptask，分配资源的时间超过了数据处理的时间<br />				减少mapTask的个数：设置map端的小文件合并：使用combineHiveInputFormat来实现对我们小文件的合并，减少maptask的个数  或者使用本地模式也可以解决小文件的问题<br />				增加maptask的个数：我们可以多设置几个reduce，然后使用distribte  by将我们的数据打散<br />				set mapreduce.job.reduces =10;<br />				create table a_1 as<br />				select * from a<br />				distribute by rand(123);<br />	第四个问题：控制reduceTask的个数：<br />				reduce个数设置方法：<br />					（1）每个Reduce处理的数据量默认是256MB<br />					hive.exec.reducers.bytes.per.reducer=256123456<br />					（2）每个任务最大的reduce数，默认为1009<br />					hive.exec.reducers.max=1009<br />					（3）计算reducer数的公式<br />					N=min(参数2，总输入数据量/参数1)</p>
<p>				直接凭感觉设置reduce的个数：<br />				set mapreduce.job.reduces = 15;<br />	<br />查看执行计划：<br />	explain extended select * from course;<br />	<br />	<br />并行执行：有时候有些sql之间是不相关的，可以并行的一起执行，那么就可以用并行执行</p>
<p>严格模式: 如果开启hive的严格模式，有以下三个限制<br />	1、分区表需要带上分区字段<br />	2、order by 必须使用limit<br />	3、笛卡尔积不能执行</p>
<p>jvm的重用：我们的container的里面的任务执行完成之后，不要马上释放资源，留着资源给下一个任务执行<br />	<br />	<br />推测执行：maptask的推测执行以及reducetask的推测执行：<br />		  一般都直接关闭maptask以及reducetask的推测执行<br />		  set mapreduce.map.speculative=false;关闭map端的推测执行<br />		  set mapreduce.reduce.speculative=false;  关闭reduce端的推测执行<br />		  <br />压缩与存储：压缩：snappy  源始数据存储：TextFile<br />			处理之后的数据存储：ORC  PARQUET</p>
<p><span style="color: #ff0000;">===================================================</span></p>
<h3>9.3 数据倾斜</h3>
<h4>9.3.1 Map数</h4>
<p align="left"><strong>1</strong><strong>）通常情况下，作业会通过input</strong><strong>的目录产生一个或者多个map</strong><strong>任务。</strong></p>
<p align="left">主要的决定因素有：input的文件总个数，input的文件大小，集群设置的文件块大小(目前为128M，可在hive中通过set dfs.block.size;命令查看到，该参数不能自定义修改)；</p>
<p align="left"><strong>2</strong><strong>）举例：</strong></p>
<p align="left">a)&nbsp;&nbsp;假设input目录下有1个文件a，大小为780M，那么hadoop会将该文件a分隔成7个块（6个128m的块和1个12m的块），从而产生7个map数。</p>
<p align="left">b)&nbsp;假设input目录下有3个文件a，b，c大小分别为10m，20m，150m，那么hadoop会分隔成4个块（10m，20m，128m，22m），从而产生4个map数。即，如果文件大于块大小(128m)，那么会拆分，如果小于块大小，则把该文件当成一个块。</p>
<p align="left"><strong>3</strong><strong>）是不是map</strong><strong>数越多越好？</strong></p>
<p align="left">答案是否定的。如果一个任务有很多小文件（远远小于块大小128m），则每个小文件也会被当做一个块，用一个map任务来完成，而一个map任务启动和初始化的时间远远大于逻辑处理的时间，就会造成很大的资源浪费。而且，同时可执行的map数是受限的。</p>
<p align="left"><strong>4</strong><strong>）是不是保证每个map</strong><strong>处理接近128m</strong><strong>的文件块，就高枕无忧了？</strong></p>
<p align="left">答案也是不一定。比如有一个127m的文件，正常会用一个map去完成，但这个文件只有一个或者两个小字段，却有几千万的记录，如果map处理的逻辑比较复杂，用一个map任务去做，肯定也比较耗时。</p>
<p align="left">针对上面的问题3和4，我们需要采取两种方式来解决：即减少map数和增加map数；</p>
<h4>9.3.2 小文件进行合并</h4>
<p align="left">在map执行前合并小文件，减少map数：</p>
<p align="left">1）参数设置（下面的API属于hadoop低版本的API）</p>
<p align="left">set mapred.max.split.size=112345600;</p>
<p align="left">set mapred.min.split.size.per.node=112345600;</p>
<p align="left">set mapred.min.split.size.per.rack=112345600;</p>
<p align="left">set hive.input.format= org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;</p>
<p align="left">这个参数表示执行前进行小文件合并，前面三个参数确定合并文件块的大小，大于文件块大小128m的，按照128m来分隔，小于128m，大于100m的，按照100m来分隔，把那些小于100m的（包括小文件和分隔大文件剩下的），进行合并。</p>
<h4>9.3.3 如何适当的增加map数</h4>
<p align="left">当input的文件都很大，任务逻辑复杂，map执行非常慢的时候，可以考虑增加Map数，来使得每个map处理的数据量减少，从而提高任务的执行效率。</p>
<p align="left">假设有这样一个任务：</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="548">
<p align="left">Select data_desc,</p>
<p align="left">count(1),</p>
<p align="left">count(distinct id),</p>
<p align="left">sum(case when &hellip;),</p>
<p align="left">sum(case when &hellip;),</p>
<p align="left">sum(&hellip;)</p>
<p align="left">from a group by data_desc</p>


</td>


</tr>


</tbody>


</table>
<p align="left">如果表a只有一个文件，大小为120M，但包含几千万的记录，如果用1个map去完成这个任务，肯定是比较耗时的，这种情况下，我们要考虑将这一个文件合理的拆分成多个，这样就可以用多个map任务去完成。</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="548">
<p align="left">set mapreduce.job.reduces =10;</p>
<p align="left">create table a_1 as</p>
<p align="left">select * from a</p>
<p align="left">distribute by rand(123);</p>


</td>


</tr>


</tbody>


</table>
<p align="left">这样会将a表的记录，随机的分散到包含10个文件的a_1表中，再用a_1代替上面sql中的a表，则会用10个map任务去完成。</p>
<p align="left">每个map任务处理大于12M（几百万记录）的数据，效率肯定会好很多。</p>
<p align="left">看上去，貌似这两种有些矛盾，一个是要合并小文件，一个是要把大文件拆成小文件，这点正是重点需要关注的地方，根据实际情况，控制map数量需要遵循两个原则：使大数据量利用合适的map数；使单个map任务处理合适的数据量；</p>
<h4>9.3.4 reduce数</h4>
<p><strong>1</strong><strong>）调整reduce</strong><strong>个数方法一</strong></p>
<p align="left">（1）每个Reduce处理的数据量默认是256MB</p>
<p align="left">hive.exec.reducers.bytes.per.reducer=256123456</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （2）每个任务最大的reduce数，默认为1009</p>
<p align="left">hive.exec.reducers.max=1009</p>
<p align="left">（3）计算reducer数的公式</p>
<p align="left">N=min(参数2，总输入数据量/参数1)</p>
<p align="left"><strong>2</strong><strong>）调整reduce</strong><strong>个数方法二</strong></p>
<p align="left">在hadoop的mapred-default.xml文件中修改</p>
<p align="left">设置每个job的Reduce个数</p>
<p align="left">set mapreduce.job.reduces = 15;</p>
<p align="left"><strong>3</strong><strong>）reduce</strong><strong>个数并不是越多越好</strong></p>
<p align="left">1）过多的启动和初始化reduce也会消耗时间和资源；</p>
<p align="left">2）另外，有多少个reduce，就会有多少个输出文件，如果生成了很多个小文件，那么如果这些小文件作为下一个任务的输入，则也会出现小文件过多的问题；</p>
<p align="left">在设置reduce个数的时候也需要考虑这两个原则：处理大数据量利用合适的reduce数；使单个reduce任务处理数据量大小要合适；</p>
<h3>9.4 使用EXPLAIN（执行计划）</h3>
<p>1）基本语法</p>
<p>EXPLAIN [EXTENDED | DEPENDENCY | AUTHORIZATION] query</p>
<p>2）案例实操</p>
<p>（1）查看下面这条语句的执行计划</p>
<p>hive (default)&gt; explain select * from course;</p>
<p>hive (default)&gt; explain select s_id ,avg(s_score) avgscore from score group by s_id;</p>
<p>（2）查看详细执行计划</p>
<p>hive (default)&gt; explain extended select * from course;</p>
<p>hive (default)&gt; explain extended select s_id ,avg(s_score) avgscore from score group by s_id;</p>
<h3>9.5 并行执行</h3>
<p>Hive会将一个查询转化成一个或者多个阶段。这样的阶段可以是MapReduce阶段、抽样阶段、合并阶段、limit阶段。或者Hive执行过程中可能需要的其他阶段。默认情况下，Hive一次只会执行一个阶段。不过，某个特定的job可能包含众多的阶段，而这些阶段可能并非完全互相依赖的，也就是说有些阶段是可以并行执行的，这样可能使得整个job的执行时间缩短。不过，如果有更多的阶段可以并行执行，那么job可能就越快完成。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 通过设置参数hive.exec.parallel值为true，就可以开启并发执行。不过，在共享集群中，需要注意下，如果job中并行阶段增多，那么集群利用率就会增加。</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="520">
<p>set hive.exec.parallel=true;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //打开任务并行执行</p>
<p>set hive.exec.parallel.thread.number=16;&nbsp; //同一个sql允许最大并行度，默认为8。</p>


</td>


</tr>


</tbody>


</table>
<p>当然，得是在系统资源比较空闲的时候才有优势，否则，没资源，并行也起不来。</p>
<h3>9.6 严格模式</h3>
<p>Hive提供了一个严格模式，可以防止用户执行那些可能意向不到的不好的影响的查询。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 通过设置属性hive.mapred.mode值为默认是非严格模式nonstrict 。开启严格模式需要修改hive.mapred.mode值为strict，开启严格模式可以禁止3种类型的查询。</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="555">
<p>&lt;property&gt;</p>
<p>&nbsp;&nbsp;&nbsp; &lt;name&gt;hive.mapred.mode&lt;/name&gt;</p>
<p>&nbsp;&nbsp;&nbsp; &lt;value&gt;strict&lt;/value&gt;</p>
<p>&nbsp;&nbsp;&nbsp; &lt;description&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The mode in which the Hive operations are being performed.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In strict mode, some risky queries are not allowed to run. They include:</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cartesian Product.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; No partition being picked up for a query.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Comparing bigints and strings.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Comparing bigints and doubles.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Orderby without limit.</p>
<p>&nbsp;&nbsp;&nbsp; &lt;/description&gt;</p>
<p>&nbsp; &lt;/property&gt;</p>


</td>


</tr>


</tbody>


</table>
<p>1）对于分区表，除非where语句中含有分区字段过滤条件来限制范围，否则不允许执行。换句话说，就是用户不允许扫描所有分区。进行这个限制的原因是，通常分区表都拥有非常大的数据集，而且数据增加迅速。没有进行分区限制的查询可能会消耗令人不可接受的巨大资源来处理这个表。</p>
<p>2）对于使用了order by语句的查询，要求必须使用limit语句。因为order by为了执行排序过程会将所有的结果数据分发到同一个Reducer中进行处理，强制要求用户增加这个LIMIT语句可以防止Reducer额外执行很长一段时间。</p>
<p>3）限制笛卡尔积的查询。对关系型数据库非常了解的用户可能期望在执行JOIN查询的时候不使用ON语句而是使用where语句，这样关系数据库的执行优化器就可以高效地将WHERE语句转化成那个ON语句。不幸的是，Hive并不会执行这种优化，因此，如果表足够大，那么这个查询就会出现不可控的情况。</p>
<h3>9.7 JVM重用</h3>
<p>JVM重用是Hadoop调优参数的内容，其对Hive的性能具有非常大的影响，特别是对于很难避免小文件的场景或task特别多的场景，这类场景大多数执行时间都很短。</p>
<p>Hadoop的默认配置通常是使用派生JVM来执行map和Reduce任务的。这时JVM的启动过程可能会造成相当大的开销，尤其是执行的job包含有成百上千task任务的情况。JVM重用可以使得JVM实例在同一个job中重新使用N次。N的值可以在Hadoop的mapred-site.xml文件中进行配置。通常在10-20之间，具体多少需要根据具体业务场景测试得出。</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="548">
<p>&lt;property&gt;</p>
<p>&nbsp; &lt;name&gt;mapreduce.job.jvm.numtasks&lt;/name&gt;</p>
<p>&nbsp; &lt;value&gt;10&lt;/value&gt;</p>
<p>&nbsp; &lt;description&gt;How many tasks to run per jvm. If set to -1, there is</p>
<p>&nbsp; no limit.</p>
<p>&nbsp; &lt;/description&gt;</p>
<p>&lt;/property&gt;</p>


</td>


</tr>


</tbody>


</table>
<p>&nbsp;</p>
<p>我们也可以在hive当中通过</p>
<p class="code">&nbsp;&nbsp;set&nbsp;&nbsp;mapred.job.reuse.jvm.num.tasks=10;</p>
<p>这个设置来设置我们的jvm重用</p>
<p>这个功能的缺点是，开启JVM重用将一直占用使用到的task插槽，以便进行重用，直到任务完成后才能释放。如果某个&ldquo;不平衡的&rdquo;job中有某几个reduce task执行的时间要比其他Reduce task消耗的时间多的多的话，那么保留的插槽就会一直空闲着却无法被其他的job使用，直到所有的task都结束了才会释放。</p>
<h3>9.8 推测执行</h3>
<p>在分布式集群环境下，因为程序Bug（包括Hadoop本身的bug），负载不均衡或者资源分布不均等原因，会造成同一个作业的多个任务之间运行速度不一致，有些任务的运行速度可能明显慢于其他任务（比如一个作业的某个任务进度只有50%，而其他所有任务已经运行完毕），则这些任务会拖慢作业的整体执行进度。为了避免这种情况发生，Hadoop采用了推测执行（Speculative Execution）机制，它根据一定的法则推测出&ldquo;拖后腿&rdquo;的任务，并为这样的任务启动一个备份任务，让该任务与原始任务同时处理同一份数据，并最终选用最先成功运行完成任务的计算结果作为最终结果。</p>
<p>设置开启推测执行参数：Hadoop的mapred-site.xml文件中进行配置</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="548">
<p>&lt;property&gt;</p>
<p>&nbsp; &lt;name&gt;mapreduce.map.speculative&lt;/name&gt;</p>
<p>&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p>&nbsp; &lt;description&gt;If true, then multiple instances of some map tasks</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;may be executed in parallel.&lt;/description&gt;</p>
<p>&lt;/property&gt;</p>
<p>&nbsp;</p>
<p>&lt;property&gt;</p>
<p>&nbsp; &lt;name&gt;mapreduce.reduce.speculative&lt;/name&gt;</p>
<p>&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p>&nbsp; &lt;description&gt;If true, then multiple instances of some reduce tasks</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; may be executed in parallel.&lt;/description&gt;</p>
<p>&lt;/property&gt;</p>


</td>


</tr>


</tbody>


</table>
<p>不过hive本身也提供了配置项来控制reduce-side的推测执行：</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="548">
<p>&nbsp; &lt;property&gt;</p>
<p>&nbsp;&nbsp;&nbsp; &lt;name&gt;hive.mapred.reduce.tasks.speculative.execution&lt;/name&gt;</p>
<p>&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</p>
<p>&nbsp;&nbsp;&nbsp; &lt;description&gt;Whether speculative execution for reducers should be turned on. &lt;/description&gt;</p>
<p>&nbsp; &lt;/property&gt;</p>


</td>


</tr>


</tbody>


</table>
<p>关于调优这些推测执行变量，还很难给一个具体的建议。如果用户对于运行时的偏差非常敏感的话，那么可以将这些功能关闭掉。如果用户因为输入数据量很大而需要执行长时间的map或者Reduce task的话，那么启动推测执行造成的浪费是非常巨大大。</p>
<h3>9.9 压缩</h3>
<p>参见前面</p>
<p><span style="color: #ff0000;">======================================================================</span></p>
<p>课程回顾:<br />1、数据仓库的概念：  了解<br />	数据仓库的分层：分为三层：<br />		第一层：源数据层 ：贴源层  ODS层<br />		第二层：数据仓库层：DW层  这一层主要负责sql的数据分析<br />		第三层：应用层：APP层 数据展示层，所有的数据展示都在这一层做<br />2、hive的基本概念： 了解<br />	hive不存储数据，也不会计算数据<br />	数据的存储：hdfs<br />	数据的计算：MapReduce<br />	hive的元数据：映射关系：hive的表模型与hdfs的数据之间的一个映射关系，默认保持在derby,一般都会改成mysql或者oracle等等<br />	查看mysql的运行状态：<br />		serivce mysqld status<br />	启动mysql的服务进程<br />		service mysqld  start<br />		/etc/init.d/mysqld start<br />	停止mysql的服务进程<br />		service  mysqld  stop<br />	<br />	hive的交互方式：  搞定<br />		第一种：shell客户端进行交互  bin/hive  <br />		第二种：使用beeline进行连接 必须要启动 hiveserver2的这个服务  <br />			服务启动命令   bin/hive   --service  hiveserver2 <br />		第三种：hive -e   "select   xxx"<br />				hive  -f  xxx.sql</p>
<p>hive的基本操作<br />	创建数据库<br />	创建数据库表：  搞定<br />		表模型：内部表：管理表  删表的时候删除数据<br />				外部表： 删表的时候不会删除数据   external  <br />				分区表： 分文件夹  partitioned  by   (month string)<br />				分桶表： 分文件  按照某个字段进行数据的打散，分到多个文件里面去  clustered&nbsp; by  into  xxx buckets <br />		hive表加载数据：<br />			load  data  [local]  inpath  'xxx'  into table   xxxx  partition(month= 'xxx')<br />			insert  overwrite table xxx partition(month='xxx')  select   xxxx</p>
<p>		hive表的数据导出：了解 <br />			insert  overwrite local directory  </p>
<p><br />hive的查询语法： 搞定<br />	group by 要注意：  group  by的字段要么出现在select字段后面，要么group  by的字段少，要么就不出现</p>
<p>	排序：<br />	order  by  :全局的排序  只能有一个reduce来处理全局的排序，数据量大的话，可能会比较慢<br />	distribte  by   id   +  sort  by  id    =  cluster  by  id </p>
<p><br />hive的shell参数：hive如何设置一些参数  了解<br />	第一种设置方式：hive-site.xml<br />	第二种设置方式  bin/hive  -hiveconf xxx=xxx<br />	第三种设置方式：set  xxx=xxxx</p>
<p>hive函数： 熟悉自定义流程<br />	hive的自定义函数：<br />		UDF: 一行数据进去，一行数据出来<br />		UDTF: 一行进多行出<br />		UDAF: 多行进一行出  count()<br />		hive的UDF自定义<br />			流程需要熟悉<br />				继承UDF  覆写evaluate   打包丢到lib下  add jar   创建临时函数进行关联<br />				<br />hive的数据压缩：snappy   知道<br />hive的存储格式：	  知道<br />	行式存储：TextFile   sequenceFile<br />	列式存储：ORC   parquet</p>
<p>存储与压缩相结合<br />	存储格式用orc  压缩方式用snappy</p>
<p>	<br />hive的调优： 好好看一看	<br />	fetch抓取：尽量避免mr的执行<br />	表的优化：<br />	数据倾斜：控制map的个数以及reduce的个数<br />	explain：查看执行计划<br />	并行执行：多个sql可以一起执行<br />	严格模式：order  by必须要带limit   分区表必须要带分区字段   笛卡尔积不能执行<br />	jvm的重用： maptask使用完成的资源不要释放，可以留着给其他的任务继续运行<br />	推测执行：关闭推测执行<br />	压缩与存储：</p>]]></description></item><item><title>第4节 hive调优：动态分区调整问题</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/23/11072055.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 23 Jun 2019 02:54:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/23/11072055.html</guid><description><![CDATA[<p>&nbsp;</p>
<p>&nbsp;执行如下截图中的语句时卡住了：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190623105136069-1105813253.png" alt="" /></p>
<p>原因：yarn未启动，<span class="text">hive底层是要提交mapreduce到yarn上才能计算结果的。</span></p>
<p><span class="text">之前启动yarn时，未执行jps查看是否已经启动。其实未启动成功：</span></p>
<p><span class="text" style="background-color: #000000; color: #ffffff;">[root@node01 ~]# start-yarn.sh </span></p>
<p><span class="text" style="background-color: #000000; color: #ffffff;">starting yarn daemons resourcemanager running as process 3220. Stop it first.</span></p>
<p><span class="text">具体原因未知。</span></p>
<p><span class="text">解决方法：重新启动dfs、yarn、jobhistory。</span></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="em-widget-msg-container em-widget-msg-txt"><span class="text">&nbsp;</span></div>
<p>&nbsp;</p>]]></description></item><item><title>linux高级命令</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/22/11070632.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 22 Jun 2019 14:13:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/22/11070632.html</guid><description><![CDATA[<p>1.查看内存和释放内存：</p>
<p>查看内存：free -m</p>
<p>释放内存：echo 1 &gt; /proc/sys/vm/drop_caches</p>
<p>&nbsp;</p>
<p>2.查看用户和用户组：</p>
<p>cat /etc/passwd</p>
<p>结果如下：</p>
<p>root:x:0:0:root:/root:/bin/bash<br />bin:x:1:1:bin:/bin:/sbin/nologin<br />daemon:x:2:2:daemon:/sbin:/sbin/nologin<br />adm:x:3:4:adm:/var/adm:/sbin/nologin<br />lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br />sync:x:5:0:sync:/sbin:/bin/sync<br />shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown<br />halt:x:7:0:halt:/sbin:/sbin/halt<br />mail:x:8:12:mail:/var/spool/mail:/sbin/nologin<br />uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin<br />operator:x:11:0:operator:/root:/sbin/nologin<br />games:x:12:100:games:/usr/games:/sbin/nologin<br />gopher:x:13:30:gopher:/var/gopher:/sbin/nologin<br />ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin<br />nobody:x:99:99:Nobody:/:/sbin/nologin<br />dbus:x:81:81:System message bus:/:/sbin/nologin<br />rpc:x:32:32:Rpcbind Daemon:/var/lib/rpcbind:/sbin/nologin<br />vcsa:x:69:69:virtual console memory owner:/dev:/sbin/nologin<br />abrt:x:173:173::/etc/abrt:/sbin/nologin<br />rpcuser:x:29:29:RPC Service User:/var/lib/nfs:/sbin/nologin<br />nfsnobody:x:65534:65534:Anonymous NFS User:/var/lib/nfs:/sbin/nologin<br />haldaemon:x:68:68:HAL daemon:/:/sbin/nologin<br />ntp:x:38:38::/etc/ntp:/sbin/nologin<br />saslauth:x:499:76:Saslauthd user:/var/empty/saslauth:/sbin/nologin<br />postfix:x:89:89::/var/spool/postfix:/sbin/nologin<br />sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br />oprofile:x:16:16:Special user account to be used by OProfile:/home/oprofile:/sbin/nologin<br />tcpdump:x:72:72::/:/sbin/nologin<br />mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/bash<br />apache:x:48:48:Apache:/var/www:/sbin/nologin<br />zookeeper:x:498:498:ZooKeeper:/var/lib/zookeeper:/sbin/nologin<br />mailnull:x:47:47::/var/spool/mqueue:/sbin/nologin<br />smmsp:x:51:51::/var/spool/mqueue:/sbin/nologin<br />solr:x:497:497:Solr:/var/lib/solr:/sbin/nologin<br />hbase:x:496:496:HBase:/var/lib/hbase:/sbin/nologin<br />hive:x:495:495:Hive:/var/lib/hive:/sbin/nologin<br />sentry:x:494:494:Sentry:/var/lib/sentry:/sbin/nologin<br />hdfs:x:493:492:Hadoop HDFS:/var/lib/hadoop-hdfs:/bin/bash<br />yarn:x:492:491:Hadoop Yarn:/var/lib/hadoop-yarn:/bin/bash<br />impala:x:491:490:Impala:/var/lib/impala:/bin/bash<br />mapred:x:490:489:Hadoop MapReduce:/var/lib/hadoop-mapreduce:/bin/bash<br />hue:x:500:500::/home/hue:/bin/bash</p>
<p>&nbsp;</p>
<p>3.&nbsp;vim&nbsp; 撤销、回退操作：</p>
<p class="postTitle">u：撤销上一步的操作；</p>
<div id="cnblogs_post_body" class="blogpost-body">
<p>Ctrl+r：恢复上一步被撤销的操作。</p>
<p>&nbsp;</p>
<p>4. 查看IP地址和对应端口号，目的是查看某个端口号是绑定的IP的值：</p>
<p>netstat -nlp | grep 50070</p>
<p>这里查看到50070绑定的是127.0.0.1，还是192.168.8.100</p>
<p>&nbsp;</p>
<p>5. 查看java进程：</p>
<p>把以下的自定义命令写到/etc/profile中：</p>
<p>alias jpsv="jps | grep -v Jps | grep -v 'process information unavailable'"</p>
<p>&nbsp;</p>
<p>6.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>



</div>]]></description></item><item><title>第4节 hive调优：1、2、fetch抓取和表的优化</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/22/11068390.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 22 Jun 2019 04:10:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/22/11068390.html</guid><description><![CDATA[<p>hive的调优：<br />第一个调优：fetch抓取，能够避免使用mr的，就尽量不要用mr，因为mr太慢了<br />	set hive.fetch.task.conversion=more  表示我们的全局查找，字段查找，limit查找都不走mr<br />	这个属性配置有三个取值  more  minimal  none  如果配置成none，所有的都要走mr程序<br />	<br />	hive的本地模式：<br />	set hive.exec.mode.local.auto=true  开启本地模式，解决多个小文件输入的时候，分配资源时间超过数据的计算时间<br />	set hive.exec.mode.local.auto.inputbytes.max=51234560; 设置输入的数据临界值，如果小于这值都认为是小任务模式，启动本地模式来执行<br />	set hive.exec.mode.local.auto.input.files.max=10;  设置输入文件个数的临界值，如果小于这个数量，那么也认为是小任务模式</p>
<p><span style="color: #ff0000;">（</span>注：mapreduce中还有一个小任务模式：</p>
<p>hadoop当中的小任务模式 ubermode：<br />启动一个maptask，分配资源花了30s，然后maptask去处理一个小文件，花了3s<br />hadoop当中的小任务模式：<br />mapreduce.job.ubertask.enable 设置我们需要开启hadoop任务的小任务模式 小任务模式可以根据我们输入的数据量做判断，如果输入的数据量比较小<br />输入10个文件，每个文件2KB，输入的数据总量也就是20KB，10个小文件，占用10个block块，每个block块对应要启动一个maptask<br />可以考虑使用ubermode 小任务模式来实现所有的数据就在一个maptask里面去处理。</p>
<p>set mapreduce.job.ubertask.enable; //查看该参数的值。</p>
<p>set mapreduce.job.ubertask.enable=true; //设置该参数的值<span style="color: #ff0000;">）</span></p>
<p><br />	<br />第二个优化：hive表的优化<br />	去重的优化：<br />		select count(distinct s_id) from score;这种写法所有的去重数据都会在一个reduce当中去，造成数据处理比较慢<br />		select count(1) from (select s_id from score group by s_id) bysid; 这种写法，使用了一个嵌套子查询，先对数据进行group  by去重，然后再进行统计<br />	尽量避免大sql，可以将一个很大的sql拆成多段，分步的去执行<br />	<br />	大表join大表的优化：<br />		空key的过滤<br />			<br />			不过滤：<br />			INSERT OVERWRITE TABLE jointable<br />			SELECT a.* FROM nullidtable a JOIN ori b ON a.id = b.id;<br />			结果：<br />			No rows affected (152.135 seconds)</p>
<p>			过滤：过滤掉我们所有的为null的id，使得我们的输入数据量变少<br />			INSERT OVERWRITE TABLE jointable<br />			SELECT a.* FROM (SELECT * FROM nullidtable WHERE id IS NOT NULL ) a JOIN ori b ON a.id = b.id;<br />			结果：<br />			No rows affected (141.585 seconds)</p>
<p>		空key的转换<br />			如果规定这些空key过滤不调，那么我们可以对空key进行转换<br />				SELECT a.*<br />				FROM nullidtable a<br />				LEFT JOIN ori b ON CASE WHEN a.id IS NULL THEN 'hive' ELSE a.id END = b.id;<br />			如果空key比较多，那么就会将大量的空key转换成 hive，那么就会遇到一个问题，数据倾斜<br />			数据倾斜的表现形式：有一个reduce处理的数据量远远比其他reduce处理的数据量要大，造成其他的reduce数据都处理完了，这个还没处理完<br />			<br />			怎么发现的数据倾斜，如何出现的数据倾斜，怎么解决的数据倾斜<br />		<br />		空key的打散<br />			SELECT a.*<br />			FROM nullidtable a<br />			LEFT JOIN ori b ON CASE WHEN a.id IS NULL THEN concat('hive', rand()) ELSE a.id END = b.id;<br />			通过将空key打散成不同的随机字符串，就可以解决我们hive的数据倾斜的问题</p>
<p>hive第三个优化：map端的join<br />		hive已经开启了自动的map端的join功能，不管是我们的大表join小表，还是小表join大表，都会将我们的小表加载到内存当中来<br />		首先第一步：启动一个local的task，寻找哪个表的数据是小表数据<br />	<br />	<br />hive的group  by优化：能在map端聚合的数据，就尽量在map端进行聚合<br />					多加一层mr的程序，让我们的数据实现均衡的负载，避免数据的倾斜<br />					</p>
<p>count(distinct)的优化：<br />	这种写法效率低下：SELECT count(DISTINCT id) FROM bigtable;<br />	可以准换成这种写法：SELECT count(id) FROM (SELECT id FROM bigtable GROUP BY id) a;<br />					</p>
<p>笛卡尔积：任何时候都要避免笛卡尔积，避免无效的on条件<br />	select from   A   left join  B  -- on A.id  = B.id<br />	<br />使用分区裁剪，列裁剪：<br />	分区裁剪：如果是我们的分区表，那么查询的时候，尽量带上我们的分区条件<br />	列裁剪：尽量避免使用select  * ,需要查询哪些列，就选择哪些列<br />	<br />动态分区调整：<br />	分区表的数据加载两种方式：<br />		load  data  inpath  '/export/xxx' into table xxx partition(month = 'xxx')<br />		insert  overwrite table  xxx partition (month = 'xxx') select  xxx<br />		<br />使用动态分区动态的添加数据<br />如果要使用动态分区添加数据，最后一个字段一定要是我们的分区字段<br />INSERT overwrite TABLE ori_partitioned_target PARTITION (p_time)<br />SELECT id, time, uid, keyword, url_rank, click_num, click_url, p_time<br />FROM ori_partitioned;</p>
<p><span style="color: #ff0000;">==========================================================</span></p>
<h2>九、调优</h2>
<h3>9.1 Fetch抓取（Hive可以避免进行MapReduce）</h3>
<p>Hive中对某些情况的查询可以不必使用MapReduce计算。例如：SELECT * FROM employees;在这种情况下，Hive可以简单地读取employee对应的存储目录下的文件，然后输出查询结果到控制台。</p>
<p>在hive-default.xml.template文件中hive.fetch.task.conversion默认是more，老版本hive默认是minimal，该属性修改为more以后，在全局查找、字段查找、limit查找等都不走mapreduce。</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="548">
<p>&lt;property&gt;</p>
<p>&nbsp;&nbsp;&nbsp; &lt;name&gt;hive.fetch.task.conversion&lt;/name&gt;</p>
<p>&nbsp;&nbsp;&nbsp; &lt;value&gt;more&lt;/value&gt;</p>
<p>&nbsp;&nbsp;&nbsp; &lt;description&gt;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Expects one of [none, minimal, more].</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Some select queries can be converted to single FETCH task minimizing latency.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Currently the query should be single sourced not having any subquery and should not have</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; any aggregations or distincts (which incurs RS), lateral views and joins.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0. none : disable hive.fetch.task.conversion</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;1. minimal : SELECT STAR, FILTER on partition columns, LIMIT only 所有的都要走MR</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. more&nbsp;&nbsp;&nbsp; : SELECT, FILTER, LIMIT only (support TABLESAMPLE and virtual columns)</p>
<p>&nbsp;&nbsp;&nbsp; &lt;/description&gt;</p>
<p>&nbsp; &lt;/property&gt;</p>

</td>

</tr>

</tbody>

</table>
<p>案例实操：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1）把hive.fetch.task.conversion设置成none，然后执行查询语句，都会执行mapreduce程序。</p>
<p>hive (default)&gt; set hive.fetch.task.conversion=none;</p>
<p>hive (default)&gt; select * from score;</p>
<p>hive (default)&gt; select s_score from score;</p>
<p>hive (default)&gt; select s_score from score limit 3;</p>
<p>2）把hive.fetch.task.conversion设置成more，然后执行查询语句，如下查询方式都不会执行mapreduce程序。</p>
<p>hive (default)&gt; set hive.fetch.task.conversion=more;</p>
<p>hive (default)&gt; select * from score;</p>
<p>hive (default)&gt; select s_score from score;</p>
<p>hive (default)&gt; select s_score from score limit 3;</p>
<p>9.2 本地模式</p>
<p>大多数的Hadoop Job是需要Hadoop提供的完整的可扩展性来处理大数据集的。不过，有时Hive的输入数据量是非常小的。在这种情况下，为查询触发执行任务时消耗可能会比实际job的执行时间要多的多。对于大多数这种情况，Hive可以通过本地模式在单台机器上处理所有的任务。对于小数据集，执行时间可以明显被缩短。</p>
<p>用户可以通过设置hive.exec.mode.local.auto的值为true，来让Hive在适当的时候自动启动这个优化。</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="548">
<p>set hive.exec.mode.local.auto=true;&nbsp; //开启本地mr</p>
<p>//设置local mr的最大输入数据量，当输入数据量小于这个值时采用local&nbsp; mr的方式，默认为134217728，即128M</p>
<p>set hive.exec.mode.local.auto.inputbytes.max=51234560;</p>
<p>//设置local mr的最大输入文件个数，当输入文件个数小于这个值时采用local mr的方式，默认为4</p>
<p>set hive.exec.mode.local.auto.input.files.max=10;</p>

</td>

</tr>

</tbody>

</table>
<p>案例实操：</p>
<p>1）开启本地模式，并执行查询语句</p>
<p>hive (default)&gt; set hive.exec.mode.local.auto=true;&nbsp;</p>
<p>hive (default)&gt; select * from score cluster by s_id;</p>
<p>18 rows selected (1.568 seconds)</p>
<p>2）关闭本地模式，并执行查询语句</p>
<p>hive (default)&gt; set hive.exec.mode.local.auto=false;&nbsp;</p>
<p>hive (default)&gt; select * from score cluster by s_id;</p>
<p>18 rows selected (11.865 seconds)</p>
<h3>9.2 表的优化</h3>
<h4>9.2.1 Join</h4>
<p><strong>Join</strong><strong>原则：</strong></p>
<p align="left">1）小表Join大表，</p>
<p align="left">将key相对分散，并且数据量小的表放在join的左边，这样可以有效减少内存溢出错误发生的几率；再进一步，可以使用Group让小的维度表（1000条以下的记录条数）先进内存。在map端完成reduce。</p>
<p align="left">select&nbsp; count(distinct s_id)&nbsp; from score;</p>
<p align="left">select count(s_id) from score group by s_id; 在map端进行聚合，效率更高</p>
<p align="left">select count(1) from (select s_id from score group by s_id) t;</p>
<p align="left">&nbsp;</p>
<p align="left">&nbsp;</p>
<p>2）多个表关联时，最好分拆成小段，避免大sql（无法控制中间Job）</p>
<p>3）大表Join大表</p>
<p>（1）空KEY过滤</p>
<p align="left">有时join超时是因为某些key对应的数据太多，而相同key对应的数据都会发送到相同的reducer上，从而导致内存不够。此时我们应该仔细分析这些异常的key，很多情况下，这些key对应的数据是异常数据，我们需要在SQL语句中进行过滤。例如key对应的字段为空，操作如下：</p>
<p align="left">环境准备：</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p align="left">create table ori(id bigint, time bigint, uid string, keyword string, url_rank int, click_num int, click_url string) row format delimited fields terminated by '\t';</p>
<p align="left">&nbsp;</p>
<p align="left">create table nullidtable(id bigint, time bigint, uid string, keyword string, url_rank int, click_num int, click_url string) row format delimited fields terminated by '\t';</p>
<p align="left">&nbsp;</p>
<p align="left">create table jointable(id bigint, time bigint, uid string, keyword string, url_rank int, click_num int, click_url string) row format delimited fields terminated by '\t';</p>
<p align="left">&nbsp;</p>
<p align="left">load data local inpath '/export/servers/hivedatas/hive_big_table/*' into table ori;</p>
<p align="left">load data local inpath '/export/servers/hivedatas/hive_have_null_id/*' into table nullidtable;</p>

</td>

</tr>

</tbody>

</table>
<p align="left">&nbsp;</p>
<p align="left">不过滤：</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p align="left">INSERT OVERWRITE TABLE jointable</p>
<p align="left">SELECT a.* FROM nullidtable a JOIN ori b ON a.id = b.id;</p>
<p align="left">结果：</p>
<p align="left">No rows affected (152.135 seconds)</p>

</td>

</tr>

</tbody>

</table>
<p align="left">&nbsp;</p>
<p align="left">过滤：</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="548">
<p align="left">INSERT OVERWRITE TABLE jointable</p>
<p align="left">SELECT a.* FROM (SELECT * FROM nullidtable WHERE id IS NOT NULL) a JOIN ori b ON a.id = b.id;</p>
<p align="left">结果：</p>
<p align="left">No rows affected (141.585 seconds)</p>

</td>

</tr>

</tbody>

</table>
<p>&nbsp;（2）空key转换</p>
<p>有时虽然某个key为空对应的数据很多，但是相应的数据不是异常数据，必须要包含在join的结果中，此时我们可以表a中key为空的字段赋一个随机的值，使得数据随机均匀地分布到不同的reducer上。例如：</p>
<p>不随机分布：</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>set hive.exec.reducers.bytes.per.reducer=32123456;</p>
<p>set mapreduce.job.reduces=7;</p>
<p>INSERT OVERWRITE TABLE jointable</p>
<p>SELECT a.*</p>
<p>FROM nullidtable a</p>
<p>LEFT JOIN ori b ON CASE WHEN a.id IS NULL THEN 'hive' ELSE a.id END = b.id;</p>
<p>No rows affected (41.668 seconds)&nbsp;&nbsp; 52.477</p>

</td>

</tr>

</tbody>

</table>
<p><strong>结果：这样的后果就是所有为</strong><strong>null</strong><strong>值的</strong><strong>id</strong><strong>全部都变成了相同的字符串，及其容易造成数据的倾斜（所有的</strong><strong>key</strong><strong>相同，相同</strong><strong>key</strong><strong>的数据会到同一个</strong><strong>reduce</strong><strong>当中去）</strong></p>
<p>&nbsp;（3）空key打散</p>
<p><strong>为了解决这种情况，我们可以通过</strong><strong>hive</strong><strong>的</strong><strong>rand</strong><strong>函数，随机地给每一个为空的</strong><strong>id</strong><strong>赋上一个随机值，这样就不会造成数据倾斜</strong></p>
<p>随机分布：</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="548">
<p align="left">set hive.exec.reducers.bytes.per.reducer=32123456;</p>
<p>set mapreduce.job.reduces=7;</p>
<p align="left">INSERT OVERWRITE TABLE jointable</p>
<p align="left">SELECT a.*</p>
<p align="left">FROM nullidtable a</p>
<p align="left">LEFT JOIN ori b ON CASE WHEN a.id IS NULL THEN concat('hive', rand()) ELSE a.id END = b.id;</p>
<p align="left">No rows affected (42.594 seconds)</p>

</td>

</tr>

</tbody>

</table>
<p><strong>&nbsp;</strong></p>
<p><strong>&nbsp;</strong></p>
<p><strong>&nbsp;</strong></p>
<p><strong>&nbsp;</strong></p>
<p><strong>4</strong><strong>）案例实操</strong></p>
<p>（0）需求：测试大表JOIN小表和小表JOIN大表的效率 （新的版本当中已经没有区别了，旧的版本当中需要使用小表）</p>
<p>（1）建大表、小表和JOIN后表的语句</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="510">
<p>create table bigtable(id bigint, time bigint, uid string, keyword string, url_rank int, click_num int, click_url string) row format delimited fields terminated by '\t';</p>
<p>&nbsp;</p>
<p>create table smalltable(id bigint, time bigint, uid string, keyword string, url_rank int, click_num int, click_url string) row format delimited fields terminated by '\t';</p>
<p>&nbsp;</p>
<p>create table jointable2(id bigint, time bigint, uid string, keyword string, url_rank int, click_num int, click_url string) row format delimited fields terminated by '\t';</p>

</td>

</tr>

</tbody>

</table>
<p>（2）分别向大表和小表中导入数据</p>
<p>hive (default)&gt; load data local inpath '/export/servers/hivedatas/big_data' into table bigtable;</p>
<p>hive (default)&gt;load data local inpath '/export/servers/hivedatas/small_data' into table smalltable;</p>
<p>（3）关闭mapjoin功能（默认是打开的）</p>
<p>set hive.auto.convert.join = false;</p>
<p>（4）执行小表JOIN大表语句</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="508">
<p>INSERT OVERWRITE TABLE jointable2</p>
<p>SELECT b.id, b.time, b.uid, b.keyword, b.url_rank, b.click_num, b.click_url</p>
<p>FROM smalltable s</p>
<p>left JOIN bigtable&nbsp; b</p>
<p>ON b.id = s.id;</p>

</td>

</tr>

</tbody>

</table>
<p>Time taken: 67.411 seconds&nbsp;</p>
<p>&nbsp;</p>
<p>（5）执行大表JOIN小表语句</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="508">
<p>INSERT OVERWRITE TABLE jointable2</p>
<p>SELECT b.id, b.time, b.uid, b.keyword, b.url_rank, b.click_num, b.click_url</p>
<p>FROM bigtable&nbsp; b</p>
<p>left JOIN smalltable&nbsp; s</p>
<p>ON s.id = b.id;</p>

</td>

</tr>

</tbody>

</table>
<p>Time taken: 69.376seconds</p>
<p>可以看出大表join小表或者小表join大表，就算是关闭map端join的情况下，在新的版本当中基本上没有区别了（hive为了解决数据倾斜的问题，会自动进行过滤）</p>
<h4>9.2.2 MapJoin</h4>
<p>如果不指定MapJoin或者不符合MapJoin的条件，那么Hive解析器会将Join操作转换成Common Join，即：在Reduce阶段完成join。容易发生数据倾斜。可以用MapJoin把小表全部加载到内存在map端进行join，避免reducer处理。</p>
<p>1）开启MapJoin参数设置：</p>
<p>（1）设置自动选择Mapjoin</p>
<p>set hive.auto.convert.join = true; 默认为true</p>
<p>（2）大表小表的阈值设置（默认25M以下认为是小表）：</p>
<p>set hive.mapjoin.<strong>smalltable</strong>.filesize=25123456;</p>
<p>2）MapJoin工作机制</p>
<p>&nbsp;</p>
<p>首先是Task A，它是一个Local Task（在客户端本地执行的Task），负责扫描小表b的数据，将其转换成一个HashTable的数据结构，并写入本地的文件中，之后将该文件加载到DistributeCache中。</p>
<p>接下来是Task B，该任务是一个没有Reduce的MR，启动MapTasks扫描大表a,在Map阶段，根据a的每一条记录去和DistributeCache中b表对应的HashTable关联，并直接输出结果。</p>
<p>由于MapJoin没有Reduce，所以由Map直接输出结果文件，有多少个Map Task，就有多少个结果文件。</p>
<p><strong>案例实操：</strong></p>
<p>（1）开启Mapjoin功能</p>
<p>set hive.auto.convert.join = true; 默认为true</p>
<p>（2）执行小表JOIN大表语句</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="508">
<p>INSERT OVERWRITE TABLE jointable2</p>
<p>SELECT b.id, b.time, b.uid, b.keyword, b.url_rank, b.click_num, b.click_url</p>
<p>FROM smalltable s</p>
<p>JOIN bigtable&nbsp; b</p>
<p>ON s.id = b.id;</p>

</td>

</tr>

</tbody>

</table>
<p>Time taken: 31.814 seconds</p>
<p>&nbsp;</p>
<p>（3）执行大表JOIN小表语句</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="510">
<p>INSERT OVERWRITE TABLE jointable2</p>
<p>SELECT b.id, b.time, b.uid, b.keyword, b.url_rank, b.click_num, b.click_url</p>
<p>FROM bigtable&nbsp; b</p>
<p>JOIN smalltable&nbsp; s</p>
<p>ON s.id = b.id;</p>

</td>

</tr>

</tbody>

</table>
<p>Time taken: 28.46 seconds</p>
<h4>9.2.3 Group By</h4>
<p>默认情况下，Map阶段同一Key数据分发给一个reduce，当一个key数据过大时就倾斜了。</p>
<p>&nbsp;&nbsp;&nbsp; 并不是所有的聚合操作都需要在Reduce端完成，很多聚合操作都可以先在Map端进行部分聚合，最后在Reduce端得出最终结果。</p>
<p>1）开启Map端聚合参数设置</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （1）是否在Map端进行聚合，默认为True</p>
<p>set hive.map.aggr = true;</p>
<p>（2）在Map端进行聚合操作的条目数目</p>
<p>&nbsp;&nbsp;&nbsp; set hive.groupby.mapaggr.checkinterval = 100000;</p>
<p>（3）有数据倾斜的时候进行负载均衡（默认是false）</p>
<p>&nbsp;&nbsp;&nbsp; set hive.groupby.skewindata = true;</p>
<p>&nbsp;&nbsp;&nbsp; 当选项设定为 true，生成的查询计划会有两个MR Job。第一个MR Job中，Map的输出结果会随机分布到Reduce中，每个Reduce做部分聚合操作，并输出结果，这样处理的结果是相同的Group By Key有可能被分发到不同的Reduce中，从而达到负载均衡的目的；第二个MR Job再根据预处理的数据结果按照Group By Key分布到Reduce中（这个过程可以保证相同的Group By Key被分布到同一个Reduce中），最后完成最终的聚合操作。</p>
<h4>9.2.4 Count(distinct)</h4>
<p>数据量小的时候无所谓，数据量大的情况下，由于COUNT DISTINCT操作需要用一个Reduce Task来完成，这一个Reduce需要处理的数据量太大，就会导致整个Job很难完成，一般COUNT DISTINCT使用先GROUP BY再COUNT的方式替换：</p>
<p>环境准备：</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>create table bigtable(id bigint, time bigint, uid string, keyword string, url_rank int, click_num int, click_url string) row format delimited fields terminated by '\t';</p>
<p>&nbsp;</p>
<p>load data local inpath '/home/admin/softwares/data/100万条大表数据（id除以10取整）/bigtable' into table bigtable;</p>

</td>

</tr>

</tbody>

</table>
<p>&nbsp;</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="548">
<p>set hive.exec.reducers.bytes.per.reducer=32123456;</p>
<p>SELECT count(DISTINCT id) FROM bigtable;</p>
<p>结果：</p>
<p>c0</p>
<p>10000</p>
<p>Time taken: 35.49 seconds, Fetched: 1 row(s)</p>

</td>

</tr>

</tbody>

</table>
<p><strong>可以转换成：</strong></p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="548">
<p>set hive.exec.reducers.bytes.per.reducer=32123456;</p>
<p>SELECT count(id) FROM (SELECT id FROM bigtable GROUP BY id) a;</p>
<p>结果：</p>
<p>Stage-Stage-1: Map: 1&nbsp; Reduce: 4&nbsp;&nbsp; Cumulative CPU: 13.07 sec&nbsp;&nbsp; HDFS Read: 120749896 HDFS Write: 464 SUCCESS</p>
<p>Stage-Stage-2: Map: 3&nbsp; Reduce: 1&nbsp;&nbsp; Cumulative CPU: 5.14 sec&nbsp;&nbsp; HDFS Read: 8987 HDFS Write: 7 SUCCESS</p>
<p>_c0</p>
<p>10000</p>
<p>Time taken: 51.202 seconds, Fetched: 1 row(s)</p>

</td>

</tr>

</tbody>

</table>
<p>虽然会多用一个Job来完成，但在数据量大的情况下，这个绝对是值得的。</p>
<h4>9.2.5 笛卡尔积</h4>
<p>尽量避免笛卡尔积，即避免join的时候不加on条件，或者无效的on条件，Hive只能使用1个reducer来完成笛卡尔积。</p>
<h4>9.2.6 使用分区剪裁、列剪裁</h4>
<p>在SELECT中，只拿需要的列，如果有，尽量使用分区过滤，少用SELECT *。</p>
<p>在分区剪裁中，当使用外关联时，如果将副表的过滤条件写在Where后面，那么就会先全表关联，之后再过滤，比如：</p>
<p>环境准备：</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>create table ori(id bigint, time bigint, uid string, keyword string, url_rank int, click_num int, click_url string) row format delimited fields terminated by '\t';</p>
<p>&nbsp;</p>
<p>create table bigtable(id bigint, time bigint, uid string, keyword string, url_rank int, click_num int, click_url string) row format delimited fields terminated by '\t';</p>
<p>&nbsp;</p>
<p>load data local inpath '/home/admin/softwares/data/加递增id的原始数据/ori' into table ori;</p>
<p>&nbsp;</p>
<p>load data local inpath '/home/admin/softwares/data/100万条大表数据（id除以10取整）/bigtable' into table bigtable;</p>

</td>

</tr>

</tbody>

</table>
<p>先关联再Where：</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="548">
<p>SELECT a.id</p>
<p>FROM bigtable a</p>
<p>LEFT JOIN ori b ON a.id = b.id</p>
<p>WHERE b.id &lt;= 10;</p>

</td>

</tr>

</tbody>

</table>
<p>正确的写法是写在ON后面：先Where再关联</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="548">
<p>SELECT a.id</p>
<p>FROM ori a</p>
<p>LEFT JOIN bigtable b ON (a.id &lt;= 10 AND a.id = b.id);</p>

</td>

</tr>

</tbody>

</table>
<p>或者直接写成子查询：</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="548">
<p>SELECT a.id</p>
<p>FROM bigtable a</p>
<p>RIGHT JOIN (SELECT id</p>
<p>FROM ori</p>
<p>WHERE id &lt;= 10</p>
<p>) b ON a.id = b.id;</p>

</td>

</tr>

</tbody>

</table>
<h4>9.2.7 动态分区调整</h4>
<p>关系型数据库中，对分区表Insert数据时候，数据库自动会根据分区字段的值，将数据插入到相应的分区中，Hive中也提供了类似的机制，即动态分区(Dynamic Partition)，只不过，使用Hive的动态分区，需要进行相应的配置。</p>
<p>&nbsp;</p>
<p>说白了就是以第一个表的分区规则，来对应第二个表的分区规则，将第一个表的所有分区，全部拷贝到第二个表中来，第二个表在加载数据的时候，不需要指定分区了，直接用第一个表的分区即可</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>1）开启动态分区参数设置</p>
<p>（1）开启动态分区功能（默认true，开启）</p>
<p>set hive.exec.dynamic.partition=true;</p>
<p>（2）设置为非严格模式（动态分区的模式，默认strict，表示必须指定至少一个分区为静态分区，nonstrict模式表示允许所有的分区字段都可以使用动态分区。）</p>
<p>set hive.exec.dynamic.partition.mode=nonstrict;</p>
<p>（3）在所有执行MR的节点上，最大一共可以创建多少个动态分区。</p>
<p>set&nbsp; hive.exec.max.dynamic.partitions=1000;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （4）在每个执行MR的节点上，最大可以创建多少个动态分区。该参数需要根据实际的数据来设定。比如：源数据中包含了一年的数据，即day字段有365个值，那么该参数就需要设置成大于365，如果使用默认值100，则会报错。</p>
<p>set hive.exec.max.dynamic.partitions.pernode=100</p>
<p>（5）整个MR Job中，最大可以创建多少个HDFS文件。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在linux系统当中，每个linux用户最多可以开启1024个进程，每一个进程最多可以打开2048个文件，即持有2048个文件句柄，下面这个值越大，就可以打开文件句柄越大</p>
<p>set hive.exec.max.created.files=100000;</p>
<p>（6）当有空分区生成时，是否抛出异常。一般不需要设置。</p>
<p>set hive.error.on.empty.partition=false;</p>
<p>2）案例实操</p>
<p>需求：将ori中的数据按照时间(如：20111231234568)，插入到目标表ori_partitioned的相应分区中。</p>
<p>（1）准备数据原表</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="548">
<p align="left">create table ori_partitioned(id bigint, time bigint, uid string, keyword string, url_rank int, click_num int, click_url string)</p>
<p align="left">PARTITIONED BY (p_time bigint)</p>
<p align="left">row format delimited fields terminated by '\t';</p>
<p align="left">&nbsp;</p>
<p align="left">load data local inpath '/export/servers/hivedatas/small_data' into&nbsp; table ori_partitioned partition (p_time='20111230000010');</p>
<p align="left">&nbsp;</p>
<p align="left">load data local inpath '/export/servers/hivedatas/small_data' into&nbsp; table ori_partitioned partition (p_time='20111230000011');</p>

</td>

</tr>

</tbody>

</table>
<p align="left">（2）创建分区表</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="548">
<div>
<p align="left">create table ori_partitioned_target(id bigint, time bigint, uid string, keyword string, url_rank int, click_num int, click_url string) PARTITIONED BY (p_time STRING) row format delimited fields terminated by '\t';</p>

</div>

</td>

</tr>

</tbody>

</table>
<p>（3）分析</p>
<p>如果按照之前介绍的往指定一个分区中Insert数据，那么这个需求很不容易实现。这时候就需要使用动态分区来实现。</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="539">
<p align="left">set hive.exec.dynamic.partition = true;</p>
<p align="left">set hive.exec.dynamic.partition.mode = nonstrict;</p>
<p align="left">set hive.exec.max.dynamic.partitions = 1000;</p>
<p align="left">set hive.exec.max.dynamic.partitions.pernode = 100;</p>
<p align="left">set hive.exec.max.created.files = 100000;</p>
<p align="left">set hive.error.on.empty.partition = false;</p>
<p align="left">&nbsp;</p>
<p align="left">INSERT overwrite TABLE ori_partitioned_target PARTITION (p_time)</p>
<p align="left">SELECT id, time, uid, keyword, url_rank, click_num, click_url, p_time</p>
<p align="left">FROM ori_partitioned;</p>

</td>

</tr>

</tbody>

</table>
<p>注意：在<strong>PARTITION (month,day)</strong>中指定分区字段名即可；</p>
<p>在SELECT子句的最后几个字段，必须对应前面<strong>PARTITION (month,day)</strong>中指定的分区字段，包括顺序。</p>
<p>查看分区</p>
<p>hive&gt; show partitions ori_partitioned_target;</p>
<p>OK</p>
<p>p_time=20111230000010</p>
<p>p_time=20111230000011</p>
<h4>9.2.8 分桶</h4>
<p>参见分桶表</p>]]></description></item><item><title>第3节 hive高级用法：16、17、18</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/22/11068313.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 22 Jun 2019 03:46:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/22/11068313.html</guid><description><![CDATA[<p>第3节 hive高级用法：16、hive当中常用的几种数据存储格式对比；17、存储方式与压缩格式相结合；18、总结</p>
<p>&nbsp;</p>
<p>hive当中的数据存储格式：<br />	行式存储：textFile  sequenceFile 都是行式存储<br />	列式存储：orc   parquet   可以使我们的数据压缩的更小，压缩的更快</p>
<p>	数据查询的时候尽量不要用select *  只选取我们需要的字段即可<br />		<br />		hive的数据存储格式：用的比较多的一种行式存储 ： textfile<br />							 用的比较多的列式存储： orc  parquet<br />							 其中orc底层有自带的一种压缩算法，会对数据进行压缩的比较厉害<br />	<br />		实际工作当中，很多时候，列式存储的数据格式都是选择orc或者parquet  压缩方式都是选择snappy。</p>
<p>&nbsp;</p>
<p>课程总结：<br />1、数据仓库的基本概念：<br />	数据仓库一般分为三层架构    理解<br />		源数据层：贴源层  ODS层<br />		数据仓库层： dw层 主要用于我们的各种数据分析统计<br />		数据应用层：APP层  application 应用层，主要用于我们数据的报表展示等 </p>
<p>2、hive的基本概念：理解  数据仓库的工具  ，既不会生产数据，也不会消费数据，数据从外部来，提供开放给外部用<br />		数据存储：用的是hdfs<br />		数据的计算：MapReduce   所以一定要启动hadoop集群</p>
<p>	hive的安装：使用mysql作为元数据存储  搞定<br />	<br />3、hive的基本操作：建库语法  搞定<br />			        建表语法： 搞定	<br />						内部表：管理表  删表的时候会删除hdfs的数据<br />						外部表： external  关键字创建外部表，删表的时候不会删除hdfs的数据<br />						分区表：分文件夹  partitioned   by      <br />						分桶表：分文件  clustered  by   into   xx  buckets <br />			修改表  删除表  了解<br />						<br />	hive当中数据的加载：<br />		第一种加载数据的方式：load   data   local  <br />		第二种加载数据的方式：  insert  overwritae  table   xx   select   xxx<br />		</p>
<p>4、hive的查询语法：group  by  语法要注意<br />	select  xxx from  group  by xxx,abc</p>
<p>5、hive的shell参数  了解<br />	1、hive-site.xml  全局的配置<br />	2、进入hive客户端之前的一些配置 -hiveconfi   <br />	3、进入hive客户端以后的一些配置  set   xxx=xxx<br />	<br />6、hive的函数以及udf函数<br />	尝试看看能不能自定义udf函数，解析json格式的数据<br />	自定义函数的流程  最少要知道继承那个类 UDF  重写哪个方法  evaluate<br />	<br />7、hive的数据压缩： 搞定<br />	map输出的数据进行压缩<br />	reduce输出的数据进行压缩<br />	常用的压缩方式：snappy</p>
<p>8、hive的数据存储格式：<br />		行式存储：TextFile,SequenceFile<br />		列式存储：ORC  ,parquet<br />		<br />9、hive的压缩与存储相结合： 搞定<br />		最常用的列式存储：ORC  parquet，压缩方式  snappy</p>
<p>===================================================================================</p>
<h3>7.5 主流文件存储格式对比实验</h3>
<p>从存储文件的压缩比和查询速度两个角度对比。</p>
<p><strong>存储文件的压缩比测试：</strong></p>
<p>0）测试数据 参见log.data</p>
<p>&nbsp;</p>
<p>1）TextFile</p>
<p>（1）创建表，存储数据格式为TEXTFILE</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="510">
<p>create table log_text (</p>
<p>track_time string,</p>
<p>url string,</p>
<p>session_id string,</p>
<p>referer string,</p>
<p>ip string,</p>
<p>end_user_id string,</p>
<p>city_id string</p>
<p>)</p>
<p>ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'</p>
<p>STORED AS TEXTFILE ;</p>

</td>

</tr>

</tbody>

</table>
<p>（2）向表中加载数据</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="510">
<p>load data local inpath '/export/servers/hivedatas/log.data' into table log_text ;</p>

</td>

</tr>

</tbody>

</table>
<p>（3）查看表中数据大小</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="510">
<p>dfs -du -h /user/hive/warehouse/myhive.db/log_text;</p>
<p>&nbsp;</p>

</td>

</tr>

</tbody>

</table>
<p>18.1 M&nbsp; /user/hive/warehouse/log_text/log.data</p>
<p>2）ORC</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （1）创建表，存储数据格式为ORC</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="510">
<p>create table log_orc(</p>
<p>track_time string,</p>
<p>url string,</p>
<p>session_id string,</p>
<p>referer string,</p>
<p>ip string,</p>
<p>end_user_id string,</p>
<p>city_id string</p>
<p>)</p>
<p>ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'</p>
<p>STORED AS orc ;</p>

</td>

</tr>

</tbody>

</table>
<p>（2）向表中加载数据</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="510">
<p>insert into table log_orc select * from log_text ;</p>

</td>

</tr>

</tbody>

</table>
<p>（3）查看表中数据大小</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="510">
<p>dfs -du -h /user/hive/warehouse/myhive.db/log_orc;</p>

</td>

</tr>

</tbody>

</table>
<p>2.8 M&nbsp; /user/hive/warehouse/log_orc/123456_0</p>
<p>3）Parquet</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （1）创建表，存储数据格式为parquet</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="510">
<p>create table log_parquet(</p>
<p>track_time string,</p>
<p>url string,</p>
<p>session_id string,</p>
<p>referer string,</p>
<p>ip string,</p>
<p>end_user_id string,</p>
<p>city_id string</p>
<p>)</p>
<p>ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'</p>
<p>STORED AS PARQUET ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>

</td>

</tr>

</tbody>

</table>
<p>（2）向表中加载数据</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="510">
<p>insert into table log_parquet select * from log_text ;</p>

</td>

</tr>

</tbody>

</table>
<p>（3）查看表中数据大小</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="510">
<p>dfs -du -h /user/hive/warehouse/myhive.db/log_parquet;</p>

</td>

</tr>

</tbody>

</table>
<p>13.1 M &nbsp;/user/hive/warehouse/log_parquet/123456_0</p>
<p>存储文件的压缩比总结：</p>
<p>ORC &gt; &nbsp;Parquet &gt; &nbsp;textFile</p>
<p><strong>存储文件的查询速度测试：</strong></p>
<p>1）TextFile</p>
<p>hive (default)&gt; select count(*) from log_text;</p>
<p>_c0</p>
<p>100000</p>
<p>Time taken: 21.54 seconds, Fetched: 1 row(s)</p>
<p>2）ORC</p>
<p>hive (default)&gt; select count(*) from log_orc;</p>
<p>_c0</p>
<p>100000</p>
<p>Time taken: 20.867 seconds, Fetched: 1 row(s)</p>
<p>3）Parquet</p>
<p>hive (default)&gt; select count(*) from log_parquet;</p>
<p>_c0</p>
<p>100000</p>
<p>Time taken: 22.922 seconds, Fetched: 1 row(s)</p>
<p>存储文件的查询速度总结：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ORC &gt; TextFile &gt; Parquet</p>
<p>&nbsp;</p>
<h2>八、存储和压缩结合</h2>
<p>官网：<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+ORC">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+ORC</a></p>
<p>ORC存储方式的压缩：</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="182">
<p>Key</p>

</td>
<td valign="top" width="111">
<p>Default</p>

</td>
<td valign="top" width="255">
<p>Notes</p>

</td>

</tr>
<tr>
<td valign="top" width="182">
<p>orc.compress</p>

</td>
<td valign="top" width="111">
<p>ZLIB</p>

</td>
<td valign="top" width="255">
<p>high level compression (one of NONE, ZLIB, SNAPPY)</p>

</td>

</tr>
<tr>
<td valign="top" width="182">
<p>orc.compress.size</p>

</td>
<td valign="top" width="111">
<p>262,144</p>

</td>
<td valign="top" width="255">
<p>number of bytes in each compression chunk</p>

</td>

</tr>
<tr>
<td valign="top" width="182">
<p>orc.stripe.size</p>

</td>
<td valign="top" width="111">
<p>67,108,864</p>

</td>
<td valign="top" width="255">
<p>number of bytes in each stripe</p>

</td>

</tr>
<tr>
<td valign="top" width="182">
<p>orc.row.index.stride</p>

</td>
<td valign="top" width="111">
<p>10,000</p>

</td>
<td valign="top" width="255">
<p>number of rows between index entries (must be &gt;= 1000)</p>

</td>

</tr>
<tr>
<td valign="top" width="182">
<p>orc.create.index</p>

</td>
<td valign="top" width="111">
<p>true</p>

</td>
<td valign="top" width="255">
<p>whether to create row indexes</p>

</td>

</tr>
<tr>
<td valign="top" width="182">
<p>orc.bloom.filter.columns</p>

</td>
<td valign="top" width="111">
<p>""</p>

</td>
<td valign="top" width="255">
<p>comma separated list of column names for which bloom filter should be created</p>

</td>

</tr>
<tr>
<td valign="top" width="182">
<p>orc.bloom.filter.fpp</p>

</td>
<td valign="top" width="111">
<p>0.05</p>

</td>
<td valign="top" width="255">
<p>false positive probability for bloom filter (must &gt;0.0 and &lt;1.0)</p>

</td>

</tr>

</tbody>

</table>
<p>1）创建一个非压缩的的ORC存储方式</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （1）建表语句</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="510">
<p>create table log_orc_none(</p>
<p>track_time string,</p>
<p>url string,</p>
<p>session_id string,</p>
<p>referer string,</p>
<p>ip string,</p>
<p>end_user_id string,</p>
<p>city_id string</p>
<p>)</p>
<p>ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'</p>
<p>STORED AS orc tblproperties ("orc.compress"="NONE");</p>

</td>

</tr>

</tbody>

</table>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （2）插入数据</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="510">
<p>insert into table log_orc_none select * from log_text;</p>

</td>

</tr>

</tbody>

</table>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （3）查看插入后数据</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="510">
<p>dfs -du -h /user/hive/warehouse/myhive.db/log_orc_none;</p>

</td>

</tr>

</tbody>

</table>
<p>7.7 M&nbsp; /user/hive/warehouse/log_orc_none/123456_0</p>
<p>2）创建一个SNAPPY压缩的ORC存储方式</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （1）建表语句</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="510">
<p>create table log_orc_snappy(</p>
<p>track_time string,</p>
<p>url string,</p>
<p>session_id string,</p>
<p>referer string,</p>
<p>ip string,</p>
<p>end_user_id string,</p>
<p>city_id string</p>
<p>)</p>
<p>ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'</p>
<p>STORED AS orc tblproperties ("orc.compress"="SNAPPY");</p>

</td>

</tr>

</tbody>

</table>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （2）插入数据</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="510">
<p>insert into table log_orc_snappy select * from log_text;</p>

</td>

</tr>

</tbody>

</table>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （3）查看插入后数据</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="510">
<p>dfs -du -h /user/hive/warehouse/myhive.db/log_orc_snappy;</p>

</td>

</tr>

</tbody>

</table>
<p>3.8 M &nbsp;/user/hive/warehouse/log_orc_snappy/123456_0</p>
<p>3）上一节中默认创建的ORC存储方式，导入数据后的大小为</p>
<p>2.8 M&nbsp; /user/hive/warehouse/log_orc/123456_0</p>
<p>比Snappy压缩的还小。原因是orc存储文件默认采用ZLIB压缩。比snappy压缩的小。</p>
<p><strong>4</strong><strong>）存储方式和压缩总结：</strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在实际的项目开发当中，hive表的数据存储格式一般选择：orc或parquet。压缩方式一般选择snappy。</p>]]></description></item><item><title>第3节 hive高级用法：15、hive的数据存储格式介绍</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/21/11067345.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 21 Jun 2019 15:53:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/21/11067345.html</guid><description><![CDATA[<p>hive当中的数据存储格式：<br />	行式存储：textFile  sequenceFile 都是行式存储<br />	列式存储：orc   parquet   可以使我们的数据压缩的更小，压缩的更快</p>
<p>	数据查询的时候尽量不要用select *  只选取我们需要的字段即可<br />		<br />		hive的数据存储格式：用的比较多的一种行式存储 ： textfile<br />							 用的比较多的列式存储： orc  parquet<br />							 其中orc底层有自带的一种压缩算法，会对数据进行压缩的比较厉害<br />	<br />		实际工作当中，很多时候，列式存储的数据格式都是选择orc或者parquet  压缩方式都是选择snappy。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190622092343747-449165248.bmp" alt="" /></p>
<h2>七、hive的数据存储格式</h2>
<p>Hive支持的存储数的格式主要有：TEXTFILE（行式存储）&nbsp;、SEQUENCEFILE(行式存储)、ORC（列式存储）、PARQUET（列式存储）。</p>
<h3>7.1 列式存储和行式存储</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190622092920966-649643628.png" alt="" /></p>
<p>上图左边为逻辑表，右边第一个为行式存储，第二个为列式存储。</p>
<p><strong>行存储的特点：</strong><strong>&nbsp;</strong>查询满足条件的一整行数据的时候，列存储则需要去每个聚集的字段找到对应的每个列的值，行存储只需要找到其中一个值，其余的值都在相邻地方，所以此时行存储查询的速度更快。</p>
<p><strong>列存储的特点：</strong><strong>&nbsp;</strong>因为每个字段的数据聚集存储，在查询只需要少数几个字段的时候，能大大减少读取的数据量；每个字段的数据类型一定是相同的，列式存储可以针对性的设计更好的设计压缩算法。</p>
<p>TEXTFILE和SEQUENCEFILE的存储格式都是基于行存储的；</p>
<p>ORC和PARQUET是基于列式存储的。</p>
<h3>7.2 TEXTFILE格式</h3>
<p>默认格式，数据不做压缩，磁盘开销大，数据解析开销大。可结合Gzip、Bzip2使用(系统自动检查，执行查询时自动解压)，但使用这种方式，hive不会对数据进行切分，从而无法对数据进行并行操作。</p>
<h3>7.3 ORC格式</h3>
<p>Orc (Optimized Row Columnar)是hive 0.11版里引入的新的存储格式。</p>
<p>可以看到每个Orc文件由1个或多个stripe组成，每个stripe250MB大小，这个Stripe实际相当于RowGroup概念，不过大小由4MB-&gt;250MB，这样能提升顺序读的吞吐率。每个Stripe里有三部分组成，分别是Index Data,Row Data,Stripe Footer：</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190622092909877-322414867.png" alt="" /></p>
<p>&nbsp;</p>
<p>一个orc文件可以分为若干个Stripe</p>
<p>一个stripe可以分为三个部分</p>
<p>indexData：某些列的索引数据</p>
<p>rowData :真正的数据存储</p>
<p>StripFooter：stripe的元数据信息</p>
<p align="left">&nbsp;&nbsp; 1）Index Data：一个轻量级的index，默认是每隔1W行做一个索引。这里做的索引只是记录某行的各字段在Row Data中的offset。</p>
<p align="left">&nbsp; &nbsp; 2）Row Data：存的是具体的数据，先取部分行，然后对这些行按列进行存储。对每个列进行了编码，分成多个Stream来存储。</p>
<p align="left">&nbsp; &nbsp; 3）Stripe Footer：存的是各个stripe的元数据信息</p>
<p align="left">每个文件有一个File Footer，这里面存的是每个Stripe的行数，每个Column的数据类型信息等；每个文件的尾部是一个PostScript，这里面记录了整个文件的压缩类型以及FileFooter的长度信息等。在读取文件时，会seek到文件尾部读PostScript，从里面解析到File Footer长度，再读FileFooter，从里面解析到各个Stripe信息，再读各个Stripe，即从后往前读。</p>
<h3>7.4 PARQUET格式</h3>
<p align="left">Parquet是面向分析型业务的列式存储格式，由Twitter和Cloudera合作开发，2015年5月从Apache的孵化器里毕业成为Apache顶级项目。</p>
<p align="left">Parquet文件是以二进制方式存储的，所以是不可以直接读取的，文件中包括该文件的数据和元数据，因此Parquet格式文件是自解析的。</p>
<p align="left">通常情况下，在存储Parquet数据的时候会按照Block大小设置行组的大小，由于一般情况下每一个Mapper任务处理数据的最小单位是一个Block，这样可以把每一个行组由一个Mapper任务处理，增大任务执行并行度。Parquet文件的格式如下图所示。</p>
<p align="left"><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190622092841919-2124851580.png" alt="" /></p>
<p>&nbsp;</p>
<p align="left">上图展示了一个Parquet文件的内容，一个文件中可以存储多个行组，文件的首位都是该文件的Magic Code，用于校验它是否是一个Parquet文件，Footer length记录了文件元数据的大小，通过该值和文件长度可以计算出元数据的偏移量，文件的元数据中包括每一个行组的元数据信息和该文件存储数据的Schema信息。除了文件中每一个行组的元数据，每一页的开始都会存储该页的元数据，在Parquet中，有三种类型的页：数据页、字典页和索引页。数据页用于存储当前行组中该列的值，字典页存储该列值的编码字典，每一个列块中最多包含一个字典页，索引页用来存储当前行组下该列的索引，目前Parquet中还不支持索引页。</p>
<p>&nbsp;</p>]]></description></item><item><title>执行jar包报错：udfFull.jar中没有主清单属性</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/21/11067057.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 21 Jun 2019 14:12:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/21/11067057.html</guid><description><![CDATA[<p>&nbsp;</p>
<p>在windows系统的cmd命令行窗口中执行： java -jar udfFull.jar {"movie":"1287","rate":"5","timeStamp":"978302039","uid":"1"}</p>
<p>报错1：<span style="color: #ff0000;">udfFull.jar中没有主清单属性</span></p>
<p>原因：jar包中的META-INF文件夹下的MANIFEST.MF文件缺少定义jar接口类。</p>
<p>说白了就是没有指定class类。这里说明一下MANIFEST.MF就是一个清单文件，通俗点将就相当于WINDOWS中ini配置文件。用来配置程序的一些信息。</p>
<p>解决方法：在MANIFEST.MF文件中添加一个入口类，添加这一行：Main-Class: TransferJsonUDF （TransferJsonUDF是含有main方法的入口类）</p>
<p>&nbsp;</p>
<p>继续执行，报另一个错误：<span style="color: #ff0000;">找不到或无法加载主类 TransferJsonUDF</span></p>
<p>原因：入口类配置得不对。</p>
<p>解决方法：入口类配置修改为： Main-Class: cn.itcast.hive.udf.TransferJsonUDF （即在入口类前面添加其类路径 cn.itcast.hive.udf.）</p>
<p>&nbsp;</p>
<p>再次运行，成功：</p>
<p><span style="background-color: #003300; color: #ffffff;">D:\Study\BigData\heima&gt;java -jar udfFull.jar {"movie":"1287","rate":"5","timeStamp":"978302039","uid":"1"}</span><br /><span style="background-color: #003300; color: #ffffff;">1287    5       978302039       1</span></p>
<p>&nbsp;</p>
<p><span style="background-color: #ffffff; color: #000000;">另外，linux中执行该命令，如果后面带参数，则需要在参数两边加上单引号''. 否则执行可能有异常，可以这么写：</span></p>
<p><span style="background-color: #ffffff; color: #000000;">java -jar udfFull.jar '{"movie":"914","rate":"3","timeStamp":"978301968","uid":"1"}'</span></p>
<p>&nbsp;</p>]]></description></item><item><title>第3节 hive高级用法：14、hive的数据压缩</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/21/11066448.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 21 Jun 2019 11:33:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/21/11066448.html</guid><description><![CDATA[<h2>六、hive的数据压缩</h2>
<p>在实际工作当中，hive当中处理的数据，一般都需要经过压缩，前期我们在学习hadoop的时候，已经配置过hadoop的压缩，我们这里的hive也是一样的可以使用压缩来节省我们的MR处理的网络带宽</p>
<p>&nbsp;</p>
<h3>6.1、MR支持的压缩编码</h3>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="106">
<p>压缩格式</p>
</td>
<td valign="top" width="114">
<p>工具</p>
</td>
<td valign="top" width="114">
<p>算法</p>
</td>
<td valign="top" width="114">
<p>文件扩展名</p>
</td>
<td valign="top" width="101">
<p>是否可切分</p>
</td>
</tr>
<tr>
<td valign="top" width="106">
<p>DEFAULT</p>
</td>
<td valign="top" width="114">
<p>无</p>
</td>
<td valign="top" width="114">
<p>DEFAULT</p>
</td>
<td valign="top" width="114">
<p>.deflate</p>
</td>
<td valign="top" width="101">
<p>否</p>
</td>
</tr>
<tr>
<td valign="top" width="106">
<p>Gzip</p>
</td>
<td valign="top" width="114">
<p>gzip</p>
</td>
<td valign="top" width="114">
<p>DEFAULT</p>
</td>
<td valign="top" width="114">
<p>.gz</p>
</td>
<td valign="top" width="101">
<p>否</p>
</td>
</tr>
<tr>
<td valign="top" width="106">
<p>bzip2</p>
</td>
<td valign="top" width="114">
<p>bzip2</p>
</td>
<td valign="top" width="114">
<p>bzip2</p>
</td>
<td valign="top" width="114">
<p>.bz2</p>
</td>
<td valign="top" width="101">
<p>是</p>
</td>
</tr>
<tr>
<td valign="top" width="106">
<p>LZO</p>
</td>
<td valign="top" width="114">
<p>lzop</p>
</td>
<td valign="top" width="114">
<p>LZO</p>
</td>
<td valign="top" width="114">
<p>.lzo</p>
</td>
<td valign="top" width="101">
<p>否</p>
</td>
</tr>
<tr>
<td valign="top" width="106">
<p>LZ4</p>
</td>
<td valign="top" width="114">
<p>无</p>
</td>
<td valign="top" width="114">
<p>LZ4</p>
</td>
<td valign="top" width="114">
<p>.lz4</p>
</td>
<td valign="top" width="101">
<p>否</p>
</td>
</tr>
<tr>
<td valign="top" width="106">
<p>Snappy</p>
</td>
<td valign="top" width="114">
<p>无</p>
</td>
<td valign="top" width="114">
<p>Snappy</p>
</td>
<td valign="top" width="114">
<p>.snappy</p>
</td>
<td valign="top" width="101">
<p>否</p>
</td>
</tr>
</tbody>
</table>
<p>为了支持多种压缩/解压缩算法，Hadoop引入了编码/解码器，如下表所示</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td width="217">
<p>压缩格式</p>
</td>
<td width="331">
<p>对应的编码/解码器</p>
</td>
</tr>
<tr>
<td width="217">
<p>DEFLATE</p>
</td>
<td width="331">
<p>org.apache.hadoop.io.compress.DefaultCodec</p>
</td>
</tr>
<tr>
<td width="217">
<p>gzip</p>
</td>
<td width="331">
<p>org.apache.hadoop.io.compress.GzipCodec</p>
</td>
</tr>
<tr>
<td width="217">
<p>bzip2</p>
</td>
<td width="331">
<p>org.apache.hadoop.io.compress.BZip2Codec</p>
</td>
</tr>
<tr>
<td width="217">
<p>LZO</p>
</td>
<td width="331">
<p>com.hadoop.compression.lzo.LzopCodec</p>
</td>
</tr>
<tr>
<td width="217">
<p>LZ4</p>
</td>
<td width="331">
<p>org.apache.hadoop.io.compress.Lz4Codec</p>
</td>
</tr>
<tr>
<td width="217">
<p>Snappy</p>
</td>
<td width="331">
<p>org.apache.hadoop.io.compress.SnappyCodec</p>
</td>
</tr>
</tbody>
</table>
<p>压缩性能的比较</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="bottom" width="106">
<p>压缩算法</p>
</td>
<td valign="bottom" width="113">
<p>原始文件大小</p>
</td>
<td valign="bottom" width="113">
<p>压缩文件大小</p>
</td>
<td valign="bottom" width="133">
<p>压缩速度</p>
</td>
<td valign="bottom" width="81">
<p>解压速度</p>
</td>
</tr>
<tr>
<td valign="top" width="106">
<p>gzip</p>
</td>
<td valign="top" width="113">
<p>8.3GB</p>
</td>
<td valign="top" width="113">
<p>1.8GB</p>
</td>
<td valign="top" width="133">
<p>17.5MB/s</p>
</td>
<td valign="top" width="81">
<p>58MB/s</p>
</td>
</tr>
<tr>
<td valign="top" width="106">
<p>bzip2</p>
</td>
<td valign="top" width="113">
<p>8.3GB</p>
</td>
<td valign="top" width="113">
<p>1.1GB</p>
</td>
<td valign="top" width="133">
<p>2.4MB/s</p>
</td>
<td valign="top" width="81">
<p>9.5MB/s</p>
</td>
</tr>
<tr>
<td valign="top" width="106">
<p>LZO</p>
</td>
<td valign="top" width="113">
<p>8.3GB</p>
</td>
<td valign="top" width="113">
<p>2.9GB</p>
</td>
<td valign="top" width="133">
<p>49.3MB/s</p>
</td>
<td valign="top" width="81">
<p>74.6MB/s</p>
</td>
</tr>
</tbody>
</table>
<p><a href="http://google.github.io/snappy/">http://google.github.io/snappy/</a></p>
<p>On a single core of a Core i7 processor in 64-bit mode, Snappy compresses at about 250 MB/sec or more and decompresses at about 500 MB/sec or more.</p>
<h3>6.2、压缩配置参数</h3>
<p>要在Hadoop中启用压缩，可以配置如下参数（mapred-site.xml文件中）：</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="180">
<p>参数</p>
</td>
<td valign="top" width="227">
<p>默认值</p>
</td>
<td valign="top" width="83">
<p>阶段</p>
</td>
<td valign="top" width="68">
<p>建议</p>
</td>
</tr>
<tr>
<td valign="top" width="180">
<p>io.compression.codecs&nbsp;&nbsp;</p>
<p>（在core-site.xml中配置）</p>
</td>
<td valign="top" width="227">
<p>org.apache.hadoop.io.compress.DefaultCodec, org.apache.hadoop.io.compress.GzipCodec, org.apache.hadoop.io.compress.BZip2Codec,</p>
<p>org.apache.hadoop.io.compress.Lz4Codec</p>
</td>
<td valign="top" width="83">
<p>输入压缩</p>
</td>
<td valign="top" width="68">
<p>Hadoop使用文件扩展名判断是否支持某种编解码器</p>
</td>
</tr>
<tr>
<td valign="top" width="180">
<p>mapreduce.map.output.compress</p>
</td>
<td valign="top" width="227">
<p>false</p>
</td>
<td valign="top" width="83">
<p>mapper输出</p>
</td>
<td valign="top" width="68">
<p>这个参数设为true启用压缩</p>
</td>
</tr>
<tr>
<td valign="top" width="180">
<p>mapreduce.map.output.compress.codec</p>
</td>
<td valign="top" width="227">
<p>org.apache.hadoop.io.compress.DefaultCodec</p>
</td>
<td valign="top" width="83">
<p>mapper输出</p>
</td>
<td valign="top" width="68">
<p>使用LZO、LZ4或snappy编解码器在此阶段压缩数据</p>
</td>
</tr>
<tr>
<td valign="top" width="180">
<p>mapreduce.output.fileoutputformat.compress</p>
</td>
<td valign="top" width="227">
<p>false</p>
</td>
<td valign="top" width="83">
<p>reducer输出</p>
</td>
<td valign="top" width="68">
<p>这个参数设为true启用压缩</p>
</td>
</tr>
<tr>
<td valign="top" width="180">
<p>mapreduce.output.fileoutputformat.compress.codec</p>
</td>
<td valign="top" width="227">
<p>org.apache.hadoop.io.compress. DefaultCodec</p>
</td>
<td valign="top" width="83">
<p>reducer输出</p>
</td>
<td valign="top" width="68">
<p>使用标准工具或者编解码器，如gzip和bzip2</p>
</td>
</tr>
<tr>
<td valign="top" width="180">
<p>mapreduce.output.fileoutputformat.compress.type</p>
</td>
<td valign="top" width="227">
<p>RECORD</p>
</td>
<td valign="top" width="83">
<p>reducer输出</p>
</td>
<td valign="top" width="68">
<p>SequenceFile输出使用的压缩类型：NONE和BLOCK</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>6.3、开启Map输出阶段压缩</h3>
<p>开启map输出阶段压缩可以减少job中map和Reduce task间数据传输量。具体配置如下：</p>
<p><strong>案例实操：</strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1）开启hive中间传输数据压缩功能</p>
<p>hive (default)&gt;set hive.exec.compress.intermediate=true;</p>
<p>2）开启mapreduce中map输出压缩功能</p>
<p>hive (default)&gt;set mapreduce.map.output.compress=true;</p>
<p>3）设置mapreduce中map输出数据的压缩方式</p>
<p>hive (default)&gt;set mapreduce.map.output.compress.codec= org.apache.hadoop.io.compress.SnappyCodec;</p>
<p>4）执行查询语句</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select count(1) from score;</p>
<h3>6.4 开启Reduce输出阶段压缩</h3>
<p>当Hive将输出写入到表中时，输出内容同样可以进行压缩。属性hive.exec.compress.output控制着这个功能。用户可能需要保持默认设置文件中的默认值false，这样默认的输出就是非压缩的纯文本文件了。用户可以通过在查询语句或执行脚本中设置这个值为true，来开启输出结果压缩功能。</p>
<p><strong>案例实操：</strong></p>
<p>1）开启hive最终输出数据压缩功能</p>
<p>hive (default)&gt;set hive.exec.compress.output=true;</p>
<p>2）开启mapreduce最终输出数据压缩</p>
<p>hive (default)&gt;set mapreduce.output.fileoutputformat.compress=true;</p>
<p>3）设置mapreduce最终数据输出压缩方式</p>
<p align="left">hive (default)&gt; set mapreduce.output.fileoutputformat.compress.codec = org.apache.hadoop.io.compress.SnappyCodec;</p>
<p>4）设置mapreduce最终数据输出压缩为块压缩</p>
<p>hive (default)&gt;set mapreduce.output.fileoutputformat.compress.type=BLOCK;</p>
<p>5）测试一下输出结果是否是压缩文件</p>
<p>insert overwrite local directory '/export/servers/snappy' select * from score distribute by s_id sort by s_id desc;</p>]]></description></item><item><title>第3节 hive高级用法：13、hive的函数</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/20/11062148.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 20 Jun 2019 15:43:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/20/11062148.html</guid><description><![CDATA[<h3>4.2、Hive参数配置方式</h3>
<p><em>Hive</em><em>参数大全：</em></p>
<p><em>https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties</em></p>
<p>&nbsp;</p>
<p>开发Hive应用时，不可避免地需要设定Hive的参数。设定Hive的参数可以调优HQL代码的执行效率，或帮助定位问题。然而实践中经常遇到的一个问题是，为什么设定的参数没有起作用？这通常是错误的设定方式导致的。</p>
<p>&nbsp;</p>
<p><strong>对于一般参数，有以下三种设定方式：</strong></p>
<p class="1">l&nbsp; 配置文件</p>
<p class="1">l&nbsp; 命令行参数</p>
<p class="1">l&nbsp; 参数声明</p>
<p><strong>&nbsp;</strong></p>
<p><strong>配置文件</strong>：Hive的配置文件包括</p>
<p class="1">l&nbsp; 用户自定义配置文件：$HIVE_CONF_DIR/hive-site.xml</p>
<p class="1">l&nbsp; 默认配置文件：$HIVE_CONF_DIR/hive-default.xml</p>
<p>用户自定义配置会覆盖默认配置。</p>
<p>另外，Hive也会读入Hadoop的配置，因为Hive是作为Hadoop的客户端启动的，Hive的配置会覆盖Hadoop的配置。</p>
<p>配置文件的设定对本机启动的所有Hive进程都有效。</p>
<p>&nbsp;</p>
<p><strong>命令行参数</strong>：启动Hive（客户端或Server方式）时，可以在命令行添加-hiveconf param=value来设定参数，例如：</p>
<p>bin/hive -hiveconf hive.root.logger=INFO,console</p>
<p>这一设定对本次启动的Session（对于Server方式启动，则是所有请求的Sessions）有效。</p>
<p>&nbsp;</p>
<p><strong>参数声明</strong>：可以在HQL中使用SET关键字设定参数，例如：</p>
<p>set mapred.reduce.tasks=100;</p>
<p>这一设定的作用域也是session级的。</p>
<p>&nbsp;</p>
<p>上述三种设定方式的优先级依次递增。即参数声明覆盖命令行参数，命令行参数覆盖配置文件设定。注意某些系统级的参数，例如log4j相关的设定，必须用前两种方式设定，因为那些参数的读取在Session建立以前已经完成了。</p>
<p>&nbsp;</p>
<p>参数声明&nbsp; &gt;&nbsp;&nbsp; 命令行参数&nbsp;&nbsp; &gt;&nbsp; 配置文件参数（hive）</p>
<h2>五、Hive函数</h2>
<h3>5.1、内置函数</h3>
<p><em>内容较多，见《Hive</em><em>官方文档》</em></p>
<p align="left"><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF</a></p>
<p>1）查看系统自带的函数</p>
<p>hive&gt; show functions;</p>
<p>2）显示自带的函数的用法</p>
<p>hive&gt; desc function upper;</p>
<p>3）详细显示自带的函数的用法</p>
<p>hive&gt; desc function extended upper;</p>
<p>&nbsp;</p>
<h3>5.2 Hive自定义函数</h3>
<p>1）Hive 自带了一些函数，比如：max/min等，但是数量有限，自己可以通过自定义UDF来方便的扩展。</p>
<p>2）当Hive提供的内置函数无法满足你的业务处理需要时，此时就可以考虑使用用户自定义函数（UDF：user-defined function）。</p>
<p>3）根据用户自定义函数类别分为以下三种：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （1）UDF（User-Defined-Function）</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一进一出</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （2）UDAF（User-Defined Aggregation Function）</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 聚集函数，多进一出</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 类似于：count/max/min</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （3）UDTF（User-Defined Table-Generating Functions）</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一进多出</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如lateral view explore()</p>
<p>4）官方文档地址</p>
<p>https://cwiki.apache.org/confluence/display/Hive/HivePlugins</p>
<p>5）编程步骤：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （1）继承org.apache.hadoop.hive.ql. exec.UDF</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （2）需要实现evaluate函数；evaluate函数支持重载；</p>
<p>6）注意事项</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （1）UDF必须要有返回类型，可以返回null，但是返回类型不能为void；</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （2）UDF中常用Text/LongWritable等类型，不推荐使用java类型；</p>
<p align="left">&nbsp;</p>
<h3>5.3、UDF开发实例</h3>
<h4>简单UDF示例</h4>
<h5>第一步：创建maven&nbsp; java 工程，导入jar包</h5>
<h5>第二步：开发java类继承UDF，并重载evaluate 方法</h5>
<h5>第三步：将我们的项目打包，并上传到hive的lib目录下</h5>
<h5>第四步：添加我们的jar包</h5>
<p class="code"><span lang="EN-US">add jar /export/servers/hive-1.1.0-cdh5.14.0/lib/udf.jar;</span></p>
<h5>第五步：设置函数与我们的自定义函数关联</h5>
<p class="code"><span lang="EN-US">create temporary function touppercase as 'cn.itcast.udf.ItcastUDF';</span></p>
<h5>第六步：使用自定义函数</h5>
<p class="code">select touppercase('abc');</p>
<h4>Json数据解析UDF开发（作业）</h4>
<p>作业：</p>
<p>有原始json数据如下：</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>{"movie":"1193","rate":"5","timeStamp":"978300760","uid":"1"}</p>
<p>{"movie":"661","rate":"3","timeStamp":"978302109","uid":"1"}</p>
<p>{"movie":"914","rate":"3","timeStamp":"978301968","uid":"1"}</p>
<p>{"movie":"3408","rate":"4","timeStamp":"978300275","uid":"1"}</p>
<p>{"movie":"2355","rate":"5","timeStamp":"978824291","uid":"1"}</p>
<p>{"movie":"1197","rate":"3","timeStamp":"978302268","uid":"1"}</p>
<p>{"movie":"1287","rate":"5","timeStamp":"978302039","uid":"1"}</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>需要将数据导入到hive数据仓库中</p>
<p>我不管你中间用几个表，最终我要得到一个结果表：</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="142">
<p>movie</p>
</td>
<td valign="top" width="142">
<p>rate</p>
</td>
<td valign="top" width="142">
<p>timestamp</p>
</td>
<td valign="top" width="142">
<p>uid</p>
</td>
</tr>
<tr>
<td valign="top" width="142">
<p>1197</p>
</td>
<td valign="top" width="142">
<p>3</p>
</td>
<td valign="top" width="142">
<p>978302268</p>
</td>
<td valign="top" width="142">
<p>1</p>
</td>
</tr>
</tbody>
</table>
<p>注：全在hive中完成，可以用自定义函数</p>
<p>第一步：自定义udf函数，将我们json数据给解析出来，解析成四个字段，整成一个\t分割的一行</p>
<p>第二步：注册我们的自定义函数</p>
<p>第三步：创建一个临时表，加载json格式的数据，加载到临时表里面的一个字段里面去</p>
<p>第四步：insert&nbsp; overwrite&nbsp; local&nbsp; directory&nbsp; &nbsp;&nbsp;将临时表当中的数据通过我们的自定义函数，给查询出来，放到本地路径下面去</p>
<p>第五步：通过load&nbsp; data的方式，将我们得数据加载到新表当中去</p>
<p align="left">&nbsp;</p>
<p>答：</p>
<p>1. 在linux系统的路径/export/servers/moviedatas下，新建movie.csv，将原始的json数据保存到该文件下，作为原始数据。</p>
<p>2. 将原始数据载入到临时表movie1中：</p>
<p>load data local inpath '/export/servers/moviedatas/movie.csv' overwrite into table movie1;</p>
<p>3. 将转换后的数据存到本地目录transferedData中：</p>
<p>insert overwrite local directory '/export/servers/moviedatas/transferedData' row format delimited fields terminated by '\t' select transferJson(sourceData) from movie1;</p>
<p>4. 将转换后的数据插入到结果表movie表中：</p>
<p>load data local inpath '/export/servers/moviedatas/transferedData/000000_0' into table movie;</p>
<p>代码：</p>
<pre>TransferJsonUDF ：</pre>
<pre>package cn.itcast.hive.udf;<br /><br />import org.apache.hadoop.hive.ql.exec.UDF;<br />import org.apache.hadoop.io.Text;<br /><br />public class TransferJsonUDF extends UDF {<br />    /*<br />    原始数据格式：{"movie":"1193","rate":"5","timeStamp":"978300760","uid":"1"}<br />                  {"movie":"661","rate":"3","timeStamp":"978302109","uid":"1"}<br />     注意：各个系统的换行标志：<br />        win                   用   \r\n<br />        linux/unix            用   \n<br />        Mac   OS              用   \r<br />     */<br /><br />    public Text evaluate(final Text s){<br />        if(s == null)<br />            return null;<br /><br />        String str = s.toString().replace("\"","").replace("{","").replace("}","");<br /><br />        String[] split = str.split("[\r\n]");<br />        StringBuffer sb = new StringBuffer();<br />        for(String tmp:split){<br />            String[] split2 = tmp.split(",");<br />            for(int i=0; i &lt; split2.length; i++){<br />                //split2[i]的格式  movie:1193<br />                if(i==split2.length-1){<br />                    sb.append(split2[i].split(":")[1]).append("\n");<br />                }else{<br />                    sb.append(split2[i].split(":")[1]).append("\t");<br />                }<br />            }<br />        }<br />        return new Text(sb.toString().substring(0,sb.toString().length()-1));<br />    }<br /><br />//    public static void main(String[] args) {<br />//        Text text = evaluate(new Text("{\"movie\":\"1193\",\"rate\":\"5\",\"timeStamp\":\"978300760\",\"uid\":\"1\"}\n" +<br />//                "{\"movie\":\"661\",\"rate\":\"3\",\"timeStamp\":\"978302109\",\"uid\":\"1\"}"));<br />////        Text text = evaluate(new Text("{\"movie\":\"1193\",\"rate\":\"5\",\"timeStamp\":\"978300760\",\"uid\":\"1\"}"));<br />////        Text text = evaluate(new Text(args[0]));<br />//        System.out.println(text.toString());<br />//    }<br />}</pre>
<p>&nbsp;</p>
<p align="left">&nbsp;</p>]]></description></item><item><title>hive纯命令行</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/20/11061858.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 20 Jun 2019 14:36:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/20/11061858.html</guid><description><![CDATA[<p>vim /etc/profile<br />export HIVE_HOME=/export/servers/hive...<br />export PATH=:$HIVE_HOME/bin:$PATH</p>
<p>前台启动hive：<br />hive --service hiveserver2<br />客户端连接：<br />beeline<br />!connect jdbc:hive2://node03:10000</p>
<p>create database [if not exists] myhive location '/myhive2';<br />use myhive;<br />desc database myhive2;<br />desc database extended myhive2;<br />drop database myhive2 [cascade];</p>
<p>create table [if not exists] stu (sid string,sname string);</p>
<p>create table stu2 as select * from stu;<br />create table stu3 like stu;<br />desc [formatted] stu2;</p>
<p>create external table [if not exists] student (sid string,sname string,ssex string,sbirth string) partitioned by (year string,month string,day string) row format delimited fields terminated by '\t' stored as textfile location '/user/stu';</p>
<p>&nbsp;</p>
<p>load data local inpath '/export/servers/hivedatas/score.csv' [overwrite] into table score;</p>
<p>load data inpath '/hivedatas/score.csv' into table score partition(year='2018',month='06',day='18');</p>
<p>insert overwrite table score5 partition(month='201801') select sid,sname,sscore from score; (注意不能使用select * from score，否则报错：Error: Error while compiling statement: FAILED: SemanticException [Error 10044]: Line 1:23 Cannot insert into target table because column number/types are different ''201902'': Table insclause-0 has 3 columns, but query has 4 columns. (state=42000,code=10044))</p>
<p>select * from score where month='201806' <br />union all <br />select * from score where month='201807';</p>
<p>show partitions score;</p>
<p>alter table score add partition(month='201808') partition(month='201809') ;</p>
<p>alter table score drop partition(month='201809');</p>
<p>msck repair table score4;<br />==============================================<br />truncate table score6;(只能清空管理表)</p>
<p>from score <br />insert overwrite table score_fir partition(month='201806') select sid,cid <br />insert overwrite table score_sec partition(month='201806') select cid,sscore;</p>
<p>小结：create as select , insert select。</p>
<p>SELECT [ALL | DISTINCT] select_expr, select_expr, ...</p>
<p>FROM table_reference</p>
<p>[WHERE where_condition]</p>
<p>[GROUP BY col_list [HAVING condition]]</p>
<p>[CLUSTER BY col_list</p>
<p>&nbsp; | [DISTRIBUTE BY col_list] [SORT BY| ORDER BY col_list]</p>
<p>]</p>
<p>[LIMIT number]</p>
<p>&nbsp;</p>
<p>select sid as myid, cid myid2 from score;</p>
<p>select count(distinct sid) from score;</p>
<p>select max(sscore),min(sscore),sum(sscore),avg(sscore) from score;</p>
<p>select * from score where sscore like '_9%';</p>
<p>select * from score where sscore rlike '9';</p>
<p>select sid,avg(sscore) from score group by sid;</p>
<p>select s_id ,avg(s_score) avgscore from score group by s_id having avgscore &gt; 85;</p>
<p>select s.sid,s.sscore,stu.sname,stu.sbirth from score s left join student stu on s.sid = stu.sid;</p>
<p>select * from student s left | right | full [outer] join score b on s.sid = b.sid; 左右全 外连接</p>
<p>select sid, avg(sscore) avgScore from score group by sid order by sid, avgScore desc; 按照别名排序</p>
<p><span style="color: #7030a0;" lang="EN-US">set mapreduce.job.reduces=3;</span></p>
<p>select * from score sort by sscore;</p>
<p>insert overwrite local directory '/export/servers/hivedatas/sort'&nbsp; row format delimited fields terminated by '\t' select * from score sort by sscore;</p>
<p><span style="color: #7030a0;" lang="EN-US">set mapreduce.job.reduces=7;</span></p>
<p>insert overwrite local directory '/export/servers/hivedatas/sort'&nbsp; row format delimited fields terminated by '\t' select * from distribute by sid sort by sscore;</p>
<p>insert overwrite local directory '/export/servers/hivedatas/cluster' row format delimited fields terminated by '\t' select * from score cluster by sid;</p>
<p>bin/hive -hiveconf hive.root.logger=INFO,console</p>
<p>show functions;</p>
<p>show function [extended] split;</p>
<p>set hive.exec.compress.intermediate=true;<br />set mapreduce.map.output.compress=true;<br />set mapreduce.map.output.compress.codec= org.apache.hadoop.io.compress.SnappyCodec;<br />set hive.exec.compress.output=true;<br />set mapreduce.output.fileoutputformat.compress=true;<br />set mapreduce.output.fileoutputformat.compress.codec = org.apache.hadoop.io.compress.SnappyCodec;<br />set mapreduce.output.fileoutputformat.compress.type=BLOCK;</p>
<p class="MsoNormal"><span style="mso-hansi-font-family: 'Times New Roman'; background: yellow; mso-highlight: yellow;" lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal">&nbsp;</p>
<p class="MsoNormal">&nbsp;</p>
<p class="MsoNormal">&nbsp;</p>
<p class="MsoNormal">&nbsp;</p>
<p class="MsoNormal">&nbsp;</p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 hive基本操作：12、hive当中的hql语法</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/20/11061444.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 20 Jun 2019 13:22:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/20/11061444.html</guid><description><![CDATA[<p>&nbsp;</p>
<h3>3.2、 hive查询语法</h3>
<h4>3.2.1、SELECT</h4>
<p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select</a></p>
<p>&nbsp; 基本的Select操作</p>
<p>&uuml;&nbsp; 语法结构</p>
<p>SELECT [ALL | DISTINCT] select_expr, select_expr, ...</p>
<p>FROM table_reference</p>
<p>[WHERE where_condition]</p>
<p>[GROUP BY col_list [HAVING condition]]</p>
<p>[CLUSTER BY col_list</p>
<p>&nbsp; | [DISTRIBUTE BY col_list] [SORT BY| ORDER BY col_list]</p>
<p>]</p>
<p>[LIMIT number]</p>
<p>&nbsp;</p>
<p><em>注：1</em><em>、order by </em><em>会对输入做全局排序，因此只有一个reducer</em><em>，会导致当输入规模较大时，需要较长的计算时间。</em></p>
<p><em>2</em><em>、sort by</em><em>不是全局排序，其在数据进入reducer</em><em>前完成排序。因此，如果用sort by</em><em>进行排序，并且设置mapred.reduce.tasks&gt;1</em><em>，则sort by</em><em>只保证每个reducer</em><em>的输出有序，不保证全局有序。</em></p>
<p><em>3</em><em>、distribute by(</em><em>字段)</em><em>根据指定的字段将数据分到不同的reducer</em><em>，且分发算法是hash</em><em>散列。</em></p>
<p><em>4</em><em>、Cluster by(</em><em>字段) </em><em>除了具有Distribute by</em><em>的功能外，还会对该字段进行排序。</em></p>
<p><em>&nbsp;</em></p>
<p><em>&nbsp;</em></p>
<p><em>因此，如果分桶和sort</em><em>字段是同一个时，此时，cluster by = distribute by + sort by</em></p>
<p>&nbsp;</p>
<p>分桶表的作用：最大的作用是用来提高join操作的效率；</p>
<p>（思考这个问题：</p>
<p>select a.id,a.name,b.addr from a join b on a.id = b.id;</p>
<p>如果a表和b表已经是分桶表，而且分桶的字段是id字段</p>
<p>做这个join操作时，还需要全表做笛卡尔积吗？）</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h5>全表查询</h5>
<p class="code">select * from score;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h5>选择特定列查询</h5>
<p class="code">select s_id ,c_id from score;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h5>列别名</h5>
<p>1）重命名一个列。</p>
<p>2）便于计算。</p>
<p>3）紧跟列名，也可以在列名和别名之间加入关键字&lsquo;AS&rsquo;</p>
<p>&nbsp;</p>
<p class="code">select s_id as myid ,c_id from score;</p>
<p>&nbsp;</p>
<h4>3.2.2、常用函数</h4>
<p>1）求总行数（count）</p>
<p>select count(1) from score;</p>
<p>2）求分数的最大值（max）</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select max(s_score) from score;</p>
<p>3）求分数的最小值（min）</p>
<p>select min(s_score) from score;</p>
<p>4）求分数的总和（sum）</p>
<p>select sum(s_score) from score;</p>
<p>5）求分数的平均值（avg）</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select avg(s_score) from score;</p>
<p>&nbsp;</p>
<h4>3.2.3、LIMIT语句</h4>
<p>典型的查询会返回多行数据。LIMIT子句用于限制返回的行数。</p>
<p class="code">select * from score limit 3;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>3.2.4、WHERE语句</h4>
<p>1）使用WHERE 子句，将不满足条件的行过滤掉。</p>
<p>2）WHERE 子句紧随 FROM 子句。</p>
<p>3）案例实操</p>
<p>查询出分数大于60的数据</p>
<p class="code">select * from score where s_score &gt; 60;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h4>3.2.5、比较运算符（BETWEEN/IN/ IS NULL）</h4>
<p>1）下面表中描述了谓词操作符，这些操作符同样可以用于JOIN&hellip;ON和HAVING语句中。</p>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="142">
<p>操作符</p>
</td>
<td valign="top" width="113">
<p>支持的数据类型</p>
</td>
<td valign="top" width="293">
<p>描述</p>
</td>
</tr>
<tr>
<td valign="top" width="142">
<p>A=B</p>
</td>
<td valign="top" width="113">
<p>基本数据类型</p>
</td>
<td valign="top" width="293">
<p>如果A等于B则返回TRUE，反之返回FALSE</p>
</td>
</tr>
<tr>
<td valign="top" width="142">
<p>A&lt;=&gt;B</p>
</td>
<td valign="top" width="113">
<p>基本数据类型</p>
</td>
<td valign="top" width="293">
<p>如果A和B都为NULL，则返回TRUE，其他的和等号（=）操作符的结果一致，如果任一为NULL则结果为NULL</p>
</td>
</tr>
<tr>
<td valign="top" width="142">
<p>A&lt;&gt;B, A!=B</p>
</td>
<td valign="top" width="113">
<p>基本数据类型</p>
</td>
<td valign="top" width="293">
<p>A或者B为NULL则返回NULL；如果A不等于B，则返回TRUE，反之返回FALSE</p>
</td>
</tr>
<tr>
<td valign="top" width="142">
<p>A&lt;B</p>
</td>
<td valign="top" width="113">
<p>基本数据类型</p>
</td>
<td valign="top" width="293">
<p>A或者B为NULL，则返回NULL；如果A小于B，则返回TRUE，反之返回FALSE</p>
</td>
</tr>
<tr>
<td valign="top" width="142">
<p>A&lt;=B</p>
</td>
<td valign="top" width="113">
<p>基本数据类型</p>
</td>
<td valign="top" width="293">
<p>A或者B为NULL，则返回NULL；如果A小于等于B，则返回TRUE，反之返回FALSE</p>
</td>
</tr>
<tr>
<td valign="top" width="142">
<p>A&gt;B</p>
</td>
<td valign="top" width="113">
<p>基本数据类型</p>
</td>
<td valign="top" width="293">
<p>A或者B为NULL，则返回NULL；如果A大于B，则返回TRUE，反之返回FALSE</p>
</td>
</tr>
<tr>
<td valign="top" width="142">
<p>A&gt;=B</p>
</td>
<td valign="top" width="113">
<p>基本数据类型</p>
</td>
<td valign="top" width="293">
<p>A或者B为NULL，则返回NULL；如果A大于等于B，则返回TRUE，反之返回FALSE</p>
</td>
</tr>
<tr>
<td valign="top" width="142">
<p>A [NOT] BETWEEN B AND C</p>
</td>
<td valign="top" width="113">
<p>基本数据类型</p>
</td>
<td valign="top" width="293">
<p>如果A，B或者C任一为NULL，则结果为NULL。如果A的值大于等于B而且小于或等于C，则结果为TRUE，反之为FALSE。如果使用NOT关键字则可达到相反的效果。</p>
</td>
</tr>
<tr>
<td valign="top" width="142">
<p>A IS NULL</p>
</td>
<td valign="top" width="113">
<p>所有数据类型</p>
</td>
<td valign="top" width="293">
<p>如果A等于NULL，则返回TRUE，反之返回FALSE</p>
</td>
</tr>
<tr>
<td valign="top" width="142">
<p>A IS NOT NULL</p>
</td>
<td valign="top" width="113">
<p>所有数据类型</p>
</td>
<td valign="top" width="293">
<p>如果A不等于NULL，则返回TRUE，反之返回FALSE</p>
</td>
</tr>
<tr>
<td valign="top" width="142">
<p>IN(数值1, 数值2)</p>
</td>
<td valign="top" width="113">
<p>所有数据类型</p>
</td>
<td valign="top" width="293">
<p>使用 IN运算显示列表中的值</p>
</td>
</tr>
<tr>
<td valign="top" width="142">
<p>A [NOT] LIKE B</p>
</td>
<td valign="top" width="113">
<p>STRING 类型</p>
</td>
<td valign="top" width="293">
<p>B是一个SQL下的简单正则表达式，如果A与其匹配的话，则返回TRUE；反之返回FALSE。B的表达式说明如下：&lsquo;x%&rsquo;表示A必须以字母&lsquo;x&rsquo;开头，&lsquo;%x&rsquo;表示A必须以字母&rsquo;x&rsquo;结尾，而&lsquo;%x%&rsquo;表示A包含有字母&rsquo;x&rsquo;,可以位于开头，结尾或者字符串中间。如果使用NOT关键字则可达到相反的效果。</p>
</td>
</tr>
<tr>
<td valign="top" width="142">
<p>A RLIKE B, A REGEXP B</p>
</td>
<td valign="top" width="113">
<p>STRING 类型</p>
</td>
<td valign="top" width="293">
<p>B是一个正则表达式，如果A与其匹配，则返回TRUE；反之返回FALSE。匹配使用的是JDK中的正则表达式接口实现的，因为正则也依据其中的规则。例如，正则表达式必须和整个字符串A相匹配，而不是只需与其字符串匹配。</p>
</td>
</tr>
</tbody>
</table>
<p>2）案例实操</p>
<p>（1）查询分数等于80的所有的数据</p>
<p>select * from score where s_score = 80;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （2）查询分数在80到100的所有数据</p>
<p>select * from score where s_score between 80 and 100;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （3）查询成绩为空的所有数据</p>
<p>select * from score where s_score is null;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （4）查询成绩是80和90的数据</p>
<p>select * from score where s_score in(80,90);</p>
<h4>3.2.6、LIKE和RLIKE</h4>
<p>1）使用LIKE运算选择类似的值</p>
<p>2）选择条件可以包含字符或数字:</p>
<p><span style="color: #ff0000;">% 代表零个或多个字符(任意个字符)。</span></p>
<p><span style="color: #ff0000;">_ 代表一个字符。</span></p>
<p>3）RLIKE子句是Hive中这个功能的一个扩展，其可以通过Java的正则表达式这个更强大的语言来指定匹配条件。</p>
<p>4）案例实操</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （1）查找以8开头的所有成绩</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select * from score where s_score like '8%';</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （2）查找第二个数值为9的所有成绩数据</p>
<p>select * from score where s_score like '_9%';</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （3）查找成绩中含9的所有成绩数据</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select * from score where s_score rlike '[9]';&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>&nbsp;</p>
<h6>逻辑运算符（AND/OR/NOT）</h6>
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="277">
<p>操作符</p>
</td>
<td valign="top" width="271">
<p>含义</p>
</td>
</tr>
<tr>
<td valign="top" width="277">
<p>AND</p>
</td>
<td valign="top" width="271">
<p>逻辑并</p>
</td>
</tr>
<tr>
<td valign="top" width="277">
<p>OR</p>
</td>
<td valign="top" width="271">
<p>逻辑或</p>
</td>
</tr>
<tr>
<td valign="top" width="277">
<p>NOT</p>
</td>
<td valign="top" width="271">
<p>逻辑否</p>
</td>
</tr>
</tbody>
</table>
<p>案例实操</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （1）查询成绩大于80，并且s_id是01的数据</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select * from score where s_score &gt;80 and s_id = '01';</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （2）查询成绩大于80，或者s_id&nbsp; 是01的数</p>
<p>select * from score where s_score &gt; 80 or s_id = '01';</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （3）查询s_id&nbsp; 不是 01和02的学生</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select * from score where s_id not in ('01','02');</p>
<h4>3.2.7、分组</h4>
<h5>GROUP BY语句</h5>
<p>GROUP BY语句通常会和聚合函数一起使用，按照一个或者多个列队结果进行分组，然后对每个组执行聚合操作。</p>
<p>案例实操：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （1）计算每个学生的平均分数</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select s_id ,avg(s_score) from score group by s_id;&nbsp;<a href="file:///D:/Study/BigData/heima/stage2/6%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A6%BB%E7%BA%BF%E7%AC%AC%E5%85%AD%E5%A4%A9/2%E3%80%81%E7%A6%BB%E7%BA%BF%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F_%E7%AC%AC6%E5%A4%A9%EF%BC%88hive%E9%83%A8%E5%88%86%EF%BC%89.docx#_msocom_1"><br /></a></p>
<p>　　　　<span style="color: #ff0000;">注意group&nbsp; by的字段，必须是select后面的字段，select后面的字段不能比group&nbsp; by的字段多</span></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （2）计算每个学生最高成绩</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select s_id ,max(s_score) from score group by s_id;</p>
<h5>HAVING语句</h5>
<p>1）having与where不同点</p>
<p>（1）where针对表中的列发挥作用，查询数据；having针对查询结果中的列发挥作用，筛选数据。</p>
<p>（2）where后面不能写分组函数，而having后面可以使用分组函数。</p>
<p>（3）having只用于group by分组统计语句。</p>
<p>2）案例实操：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 求每个学生的平均分数</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select s_id ,avg(s_score) from score group by s_id;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 求每个学生平均分数大于85的人</p>
<p>select s_id ,avg(s_score) avgscore from score group by s_id having avgscore &gt; 85;</p>
<h4>3.2.8、JOIN语句</h4>
<h5>3.2.8.1、等值JOIN</h5>
<p>Hive支持通常的SQL JOIN语句，但是只支持等值连接，不支持非等值连接。</p>
<p>案例操作</p>
<p>（1）&nbsp;&nbsp;&nbsp; 查询分数对应的姓名</p>
<p>SELECT s.s_id,s.s_score,stu.s_name,stu.s_birth&nbsp; FROM score s LEFT JOIN student stu ON s.s_id = stu.s_id</p>
<h5>3.2.8.2、表的别名</h5>
<p>1）好处</p>
<p>（1）使用别名可以简化查询。</p>
<p>（2）使用表名前缀可以提高执行效率。</p>
<p>2）案例实操</p>
<p>合并老师与课程表</p>
<p>select * from techer t join course c on t.t_id = c.t_id;</p>
<h5>3.2.8.3、内连接（INNER JOIN）</h5>
<p>内连接：只有进行连接的两个表中都存在与连接条件相匹配的数据才会被保留下来。</p>
<p>select * from techer t inner join course c on t.t_id = c.t_id;</p>
<h5>3.2.8.4、左外连接（LEFT OUTER JOIN）</h5>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 左外连接：JOIN操作符左边表中符合WHERE子句的所有记录将会被返回。</p>
<p>查询老师对应的课程</p>
<p>select * from techer t left join course c on t.t_id = c.t_id;</p>
<p>&nbsp;</p>
<h5>3.2.8.5、右外连接（RIGHT OUTER JOIN）</h5>
<p>右外连接：JOIN操作符右边表中符合WHERE子句的所有记录将会被返回。</p>
<p>select * from techer t right join course c on t.t_id = c.t_id;</p>
<h5>3.2.8.6、满外连接（FULL OUTER JOIN）</h5>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 满外连接：将会返回所有表中符合WHERE语句条件的所有记录。如果任一表的指定字段没有符合条件的值的话，那么就使用NULL值替代。</p>
<p>SELECT * FROM techer t FULL JOIN course c ON t.t_id = c.t_id ;</p>
<h5>3.2.8.7、多表连接</h5>
<p align="left">注意：连接 n个表，至少需要n-1个连接条件。例如：连接三个表，至少需要两个连接条件。</p>
<p align="left">多表连接查询，查询老师对应的课程，以及对应的分数，对应的学生</p>
<p>select * from techer t</p>
<p>left join course c</p>
<p>on t.t_id = c.t_id</p>
<p>left join score s</p>
<p>on s.c_id = c.c_id</p>
<p>left join student stu</p>
<p>on s.s_id = stu.s_id;</p>
<p>大多数情况下，Hive会对每对JOIN连接对象启动一个MapReduce任务。本例中会首先启动一个MapReduce job对表techer和表course进行连接操作，然后会再启动一个MapReduce job将第一个MapReduce job的输出和表score;进行连接操作。</p>
<h4>3.2.9、 排序</h4>
<h5>3.2.9.1 全局排序（Order By）</h5>
<p>Order By：全局排序，一个reduce</p>
<p>1）使用 ORDER BY 子句排序</p>
<p>ASC（ascend）: 升序（默认）</p>
<p>DESC（descend）: 降序</p>
<p>2）ORDER BY 子句在SELECT语句的结尾。</p>
<p>3）案例实操</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （1）查询学生的成绩，并按照分数降序排列</p>
<p>SELECT * FROM student s LEFT JOIN score sco ON s.s_id = sco.s_id ORDER BY sco.s_score DESC;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （2）查询学生的成绩，并按照分数升序排列</p>
<p>SELECT * FROM student s LEFT JOIN score sco ON s.s_id = sco.s_id ORDER BY sco.s_score asc;</p>
<h5>3.2.9.2 按照别名排序</h5>
<p>按照分数的平均值排序</p>
<p>select s_id ,avg(s_score) avg from score group by s_id order by avg;</p>
<h5>3.2.9.3 多个列排序</h5>
<p>按照学生id和平均成绩进行排序</p>
<p>select s_id ,avg(s_score) avg from score group by s_id order by s_id,avg;</p>
<h5>3.2.9.4 每个MapReduce内部排序（Sort By）局部排序</h5>
<p>Sort By：每个MapReduce内部进行排序，对全局结果集来说不是排序。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1）设置reduce个数</p>
<p>set mapreduce.job.reduces=3;</p>
<p>2）查看设置reduce个数</p>
<p>set mapreduce.job.reduces;</p>
<p>3）查询成绩按照成绩降序排列</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select * from score sort by s_score;</p>
<p>1）将查询结果导入到文件中（按照成绩降序排列）</p>
<p>insert overwrite local directory '/export/servers/hivedatas/sort' select * from score sort by s_score;</p>
<h5>3.2.9.5 分区排序（DISTRIBUTE BY）</h5>
<p>Distribute By：类似MR中partition，进行分区，结合sort by使用。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #ff0000;"> 注意，Hive要求DISTRIBUTE BY语句要写在SORT BY语句之前。</span></p>
<p>对于distribute by进行测试，一定要分配多reduce进行处理，否则无法看到distribute by的效果。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>案例实操：</p>
<p>（1）&nbsp;&nbsp;&nbsp; 先按照学生id进行分区，再按照学生成绩进行排序。</p>
<p>&nbsp;</p>
<p>设置reduce的个数，将我们对应的s_id划分到对应的reduce当中去</p>
<p>set mapreduce.job.reduces=7;</p>
<p>通过distribute by&nbsp; 进行数据的分区</p>
<p>insert overwrite local directory '/export/servers/hivedatas/sort' select * from score distribute by s_id sort by s_score;</p>
<h5>3.2.9.6 CLUSTER BY</h5>
<p>当distribute by和sort by字段相同时，可以使用cluster by方式。</p>
<p>cluster by除了具有distribute by的功能外还兼具sort by的功能。</p>
<p><span style="color: #ff0000;">但是排序只能是顺序排序，不能指定排序规则为ASC或者DESC，如果指定asc或desc，则报错。</span></p>
<p>1） 以下两种写法等价</p>
<p>select * from score cluster by s_id;</p>
<p>select * from score distribute by s_id sort by s_id;</p>
<p>&nbsp;</p>
<p>hive删除表中的部分结果：</p>
<p>无法使用delete from table_name where ....这种语句。</p>
<p>只能通过删除hdfs的该表目录下的分区目录，来删除某个分区的所有记录。</p>
<p>eg.删除score表的分区month='201810'的所有记录。</p>
<p>在beeline下直接执行hdfs命令：</p>
<p>dfs -ls /user/hive/warehouse/myhive.db/score/; 确认是否存在该分区</p>
<p>dfs -rm -f -r /user/hive/warehouse/myhive.db/score/month=201810/; 删除该分区的目录</p>
<p>dfs -ls /user/hive/warehouse/myhive.db/score/; 再次确认该分区是否已删除</p>
<p>select * from score; 最终确认记录是否已删除，查询score的记录。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div>&nbsp;</div>]]></description></item><item><title>mysql limit关键字</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/20/11061361.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 20 Jun 2019 13:07:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/20/11061361.html</guid><description><![CDATA[<p>select * from table_name limit [index, ] length;</p>
<p>limit后面跟2个参数：</p>
<p>　　index：索引号，从0开始计算，表示从哪一行开始；</p>
<p>　　length：长度，表示要查询的记录条数。</p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 hive基本操作：11、hive当中的分桶表以及修改表删除表数据加载数据导出等</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/19/11055767.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 19 Jun 2019 15:34:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/19/11055767.html</guid><description><![CDATA[<h5>分桶表</h5>
<p>将数据按照指定的字段进行分成多个桶中去，说白了就是将数据按照字段进行划分，可以将数据按照字段划分到多个文件当中去</p>
<p class="code">开启hive的桶表功能</p>
<p class="code">set hive.enforce.bucketing=true;</p>
<p>&nbsp;</p>
<p class="code">设置reduce的个数</p>
<p class="code">set mapreduce.job.reduces=3;</p>
<p>&nbsp;</p>
<p>创建桶表</p>
<p class="code">create table course (c_id string,c_name string,t_id string) clustered by(c_id) into 3 buckets row format delimited fields terminated by '\t';</p>
<p>&nbsp;</p>
<p>桶表的数据加载，由于桶表的数据加载通过hdfs&nbsp; dfs&nbsp; -put文件或者通过load&nbsp; data均不好使，只能通过insert&nbsp; overwrite</p>
<p>&nbsp;</p>
<p>创建普通表，并通过insert&nbsp; overwrite的方式将普通表的数据通过查询的方式加载到桶表当中去</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>创建普通表：</p>
<p class="code">create table course_common (c_id string,c_name string,t_id string) row format delimited fields terminated by '\t';</p>
<p>&nbsp;</p>
<p>普通表中加载数据</p>
<p class="code">load data local inpath '/export/servers/hivedatas/course.csv' into table course_common;</p>
<p>&nbsp;</p>
<p>通过insert&nbsp; overwrite给桶表中加载数据</p>
<p class="code">insert overwrite table course select * from course_common cluster by(c_id);</p>
<h5>修改表</h5>
<h6>表重命名</h6>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 基本语法：</p>
<p class="code">&nbsp;&nbsp;&nbsp; alter&nbsp; table&nbsp; old_table_name&nbsp; rename&nbsp; to&nbsp; new_table_name;</p>
<p class="code">&nbsp;&nbsp;&nbsp; 把表score4修改成score5</p>
<p class="code">&nbsp;&nbsp;&nbsp; alter table score4 rename to score5;</p>
<h6>增加/修改列信息</h6>
<p>（1）查询表结构</p>
<p class="code">desc score5;</p>
<p>（2）添加列</p>
<p class="code">alter table score5 add columns (mycol string, mysco string);</p>
<p>（3）查询表结构</p>
<p class="code">desc score5;</p>
<p>（4）更新列</p>
<p class="code">alter table score5 change column mysco mysconew int;</p>
<p>（5）查询表结构</p>
<p class="code">desc score5;</p>
<h5>删除表</h5>
<p class="code">drop table score5;</p>
<p class="code">&nbsp;</p>
<h5>hive表中加载数据</h5>
<h6>直接向分区表中插入数据</h6>
<p class="code">create table score3 like score;</p>
<p>&nbsp;</p>
<p class="code">insert into table score3 partition(month ='201807') values ('001','002','100'); （<span style="color: #ff0000;">一般不这么做，插入一条数据就会增加一个小文件</span>）</p>
<h6>通过查询插入数据（掌握）</h6>
<p>通过load方式加载数据</p>
<p class="code">load data local inpath '/export/servers/hivedatas/score.csv' overwrite into table score partition(month='201806');</p>
<p>&nbsp;</p>
<p>通过查询方式加载数据</p>
<p class="code">create table score4 like score;</p>
<p class="code">insert <span style="color: #ff0000;">overwrite&nbsp;</span>table score4 partition(month = '201806') select s_id,c_id,s_score from score;</p>
<p><span style="color: #ff0000;">&nbsp;{注意：</span></p>
<p><span style="color: #ff0000;">1.此处不能使用select * from score，否则报错：Error: Error while compiling statement: FAILED: SemanticException [Error 10044]: Line 1:23 Cannot insert into target table because column number/types are different ''201902'': Table insclause-0 has 3 columns, but query has 4 columns. (state=42000,code=10044)</span></p>
<p><span style="color: #ff0000;">2.关键字overwrite 必须要有</span></p>
<p><span style="color: #ff0000;">}</span></p>
<p>&nbsp;</p>
<h6>多插入模式（用得不多）</h6>
<p>常用于实际生产环境当中，将一张表拆开成两部分或者多部分</p>
<p>给score表加载数据</p>
<p class="code">load data local inpath '/export/servers/hivedatas/score.csv' overwrite into table score partition(month='201806');</p>
<p>&nbsp;</p>
<p>创建第一部分表：</p>
<p class="code">create table score_first( s_id string,c_id&nbsp; string) partitioned by (month string) row format delimited fields terminated by '\t' ;</p>
<p>&nbsp;</p>
<p>创建第二部分表：</p>
<p class="code">create table score_second(c_id string,s_score int) partitioned by (month string) row format delimited fields terminated by '\t';</p>
<p>&nbsp;</p>
<p>分别给第一部分与第二部分表加载数据</p>
<p class="code">from score insert overwrite table score_first partition(month='201806') select s_id,c_id insert overwrite table score_second partition(month = '201806')&nbsp; select c_id,s_score;&nbsp;&nbsp;</p>
<p>&nbsp;</p>
<h6>查询语句中创建表并加载数据（as select）</h6>
<p>将查询的结果保存到一张表当中去</p>
<p class="code">create table score5 as select * from score;</p>
<p>&nbsp;</p>
<h6>创建表时通过location指定加载数据路径</h6>
<p>1）创建表，并指定在hdfs上的位置</p>
<p>&nbsp;</p>
<p class="code">create external table score6 (s_id string,c_id string,s_score int) row format delimited fields terminated by '\t' location '/myscore6';</p>
<p>&nbsp;</p>
<p>2）上传数据到hdfs上</p>
<p class="code">&nbsp;&nbsp;&nbsp; hdfs dfs -mkdir -p /myscore6</p>
<p class="code">&nbsp;&nbsp;&nbsp; hdfs dfs -put score.csv /myscore6;</p>
<p>3）查询数据</p>
<p class="code">select * from score6;</p>
<p>&nbsp;</p>
<h6>export导出与import 导入 hive表数据（内部表操作）</h6>
<p class="code">create table techer2 like techer;</p>
<p class="code">export table techer to&nbsp; '/export/techer';</p>
<p class="code">import table techer2 from '/export/techer';</p>
<p class="code">&nbsp;</p>
<h5>hive表中的数据导出（了解）</h5>
<p>将hive表中的数据导出到其他任意目录，例如linux本地磁盘，例如hdfs，例如mysql等等</p>
<h6>insert导出</h6>
<p>1）将查询的结果导出到本地</p>
<p class="code">insert overwrite local directory '/export/servers/exporthive' select * from score;</p>
<p>2）将查询的结果格式化导出到本地</p>
<p class="code">insert overwrite local directory '/export/servers/exporthive' row format delimited fields terminated by '\t' collection items terminated by '#' select * from student;</p>
<p>3）将查询的结果导出到HDFS上(没有local)</p>
<p class="code">insert overwrite directory '/export/servers/exporthive' row format delimited fields terminated by '\t' collection items terminated by<a href="file:///D:/Study/BigData/heima/stage2/6%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A6%BB%E7%BA%BF%E7%AC%AC%E5%85%AD%E5%A4%A9/2%E3%80%81%E7%A6%BB%E7%BA%BF%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F_%E7%AC%AC6%E5%A4%A9%EF%BC%88hive%E9%83%A8%E5%88%86%EF%BC%89.docx#_msocom_1">[a1]</a>&nbsp; '#' select * from score;</p>
<p class="code">（<span style="color: #ff0000;">对于集合类型我们使用#来进行分割，因为这个表里面没有集合类型，所以加不加这个结果都一样</span>）</p>
<h6>Hadoop命令导出到本地</h6>
<p class="code">dfs -get /export/servers/exporthive/000000_0 /export/servers/exporthive/local.txt;</p>
<h6>hive shell 命令导出</h6>
<p>基本语法：（hive -f/-e 执行语句或者脚本 &gt; file）</p>
<p class="code">bin/hive -e "select * from myhive.score;" &gt; /export/servers/exporthive/score.txt</p>
<h6>export导出到HDFS上</h6>
<p class="code">export table score to '/export/exporthive/score';</p>
<h6>sqoop导出</h6>
<p>后续单独讲。</p>
<p>&nbsp;</p>
<h5>清空表数据</h5>
<p>只能清空管理表，也就是内部表</p>
<p class="code">truncate table score6;</p>
<p>清空外部表会报错（</p>
<p><span style="color: #ff0000;">Error: Error while compiling statement: FAILED: SemanticException [Error 10146]: Cannot truncate non-managed table score5. (state=42000,code=10146)</span></p>
<p>）</p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 hive基本操作：10、外部分区表综合练习</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/19/11055758.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 19 Jun 2019 15:33:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/19/11055758.html</guid><description><![CDATA[<p class="1">外部分区表综合练习：</p>
<p class="1">需求描述：现在有一个文件score.csv文件，存放在集群的这个目录下/export/servers/scoredatas/month=201806，这个文件每天都会生成，存放到对应的日期文件夹下面去，文件别人也需要公用，不能移动。需求，创建hive对应的表，并将数据加载到表中，进行数据统计分析，且删除表之后，数据不能删除</p>
<p class="1">&nbsp;</p>
<p class="1">需求实现:</p>
<p class="1">数据准备：</p>
<p class="code">hdfs dfs -mkdir -p /scoredatas/month=201806</p>
<p class="code">hdfs dfs -put score.csv /scoredatas/month=201806/</p>
<p>&nbsp;</p>
<p class="1">创建外部分区表，并指定文件数据存放目录</p>
<p class="1">&nbsp;</p>
<p class="code">create external table score4(s_id string, c_id string,s_score int) partitioned by (month string) row format delimited fields terminated by '\t' location '/scoredatas';</p>
<p class="1">&nbsp;</p>
<p class="1">&nbsp;</p>
<p class="1">进行表的修复,说白了就是建立我们表与我们数据文件之间的一个关系映射</p>
<p class="code"><span style="color: #ff0000;">msck&nbsp; repair&nbsp;&nbsp; table&nbsp; score4;</span></p>
<p>&nbsp;</p>
<p>修复成功之后即可看到数据已经全部加载到表当中去了</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>第二种实现方式，上传数据之后手动添加分区即可</p>
<p>数据准备：</p>
<p class="code">hdfs dfs -mkdir -p /scoredatas/month=201806</p>
<p class="code">hdfs dfs -put score.csv /scoredatas/month=201806</p>
<p>&nbsp;</p>
<p>修改表，进行手动添加方式</p>
<p class="code">alter table score4 add partition(month='201806');</p>]]></description></item><item><title>第2节 hive基本操作：9、hive当中创建外部表的语法及外部表的操作&amp;分区表的语法和操作</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/19/11048747.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 18 Jun 2019 16:04:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/19/11048747.html</guid><description><![CDATA[<p>&nbsp;</p>
<h5>外部表：</h5>
<h6>外部表说明：</h6>
<p class="1">外部表因为是指定其他的hdfs路径的数据加载到表当中来，所以hive表会认为自己不完全独占这份数据，所以删除hive表的时候，数据仍然存放在hdfs当中，不会删掉</p>
<h6>管理表和外部表的使用场景：</h6>
<p>每天将收集到的网站日志定期流入HDFS文本文件。在外部表（原始日志表）的基础上做大量的统计分析，用到的中间表、结果表使用内部表存储，数据通过SELECT+INSERT进入内部表。</p>
<p class="1">&nbsp;</p>
<h6>操作案例</h6>
<p class="1">分别创建老师与学生表外部表，并向表中加载数据</p>
<p class="1">创建老师表：</p>
<p class="1">&nbsp;</p>
<p class="code">create external table teacher (t_id string,t_name string) row format delimited fields terminated by '\t';</p>
<p>&nbsp;</p>
<p class="1">创建学生表：</p>
<p class="code">create external table student (s_id string,s_name string,s_birth string , s_sex string ) row format delimited fields terminated by '\t';</p>
<p>&nbsp;</p>
<p class="1">从本地文件系统向表中加载数据</p>
<p class="code">load data local inpath '/export/servers/hivedatas/student.csv' into table student;</p>
<p class="1">&nbsp;</p>
<p class="1">加载数据并覆盖已有数据</p>
<p class="code">load data local inpath '/export/servers/hivedatas/student.csv' overwrite &nbsp;into table student;</p>
<p class="1">&nbsp;</p>
<p class="1">从hdfs文件系统向表中加载数据（需要提前将数据上传到hdfs文件系统，其实就是一个移动文件的操作）</p>
<p class="code">cd /export/servers/hivedatas</p>
<p class="code">hdfs dfs -mkdir -p /hivedatas</p>
<p class="code">hdfs dfs -put techer.csv /hivedatas/</p>
<p class="code">load data inpath '/hivedatas/techer.csv' into table techer;</p>
<p class="1">&nbsp;</p>
<p class="1">如果删掉student表，hdfs的数据仍然存在，并且重新创建表之后，表中就直接存在数据了,因为我们的student表使用的是外部表，drop table之后，表当中的数据依然保留在hdfs上面了</p>
<h5>分区表：</h5>
<p>在大数据中，最常用的一种思想就是分治，我们可以把大的文件切割划分成一个个的小的文件，这样每次操作一个小的文件就会很容易了，同样的道理，在hive当中也是支持这种思想的，就是我们可以把大的数据，按照每天，或者每小时进行切分成一个个的小的文件，这样去操作小的文件就会容易得多了</p>
<p>&nbsp;</p>
<p>创建分区表语法</p>
<p class="code">create table score(s_id string,c_id string, s_score int) partitioned by (month string) row format delimited fields terminated by '\t';</p>
<p>&nbsp;</p>
<p>创建一个表带多个分区</p>
<p class="code">create table score2 (s_id string,c_id string, s_score int) partitioned by (year string,month string,day string) row format delimited fields terminated by '\t';</p>
<p>&nbsp;</p>
<p>加载数据到分区表中（<span style="color: #ff0000;">month=&rsquo;201806&rsquo;，如等号后面为数字时，引号可以省略，并且等号两边可以有空格</span>）</p>
<p class="code">load data local inpath '/export/servers/hivedatas/score.csv' into table score partition (month='201806');</p>
<p>&nbsp;</p>
<p>加载数据到一个多分区的表中去</p>
<p class="code">load data local inpath '/export/servers/hivedatas/score.csv' into table score2 partition(year='2018',month='06',day='01');</p>
<p class="1">&nbsp;</p>
<p class="1">多分区联合查询使用union&nbsp; all来实现</p>
<p class="code">select * from score where month = '201806' union all select * from score where month = '201810';</p>
<p class="1">&nbsp;</p>
<p class="1">查看分区</p>
<p class="code">show&nbsp; partitions&nbsp; score;</p>
<p class="1">&nbsp;</p>
<p class="1">添加一个分区</p>
<p class="code">alter table score add partition(month='201805');</p>
<p class="1">&nbsp;</p>
<p class="1">同时添加多个分区</p>
<p class="code">alter table score add partition(month='201804') partition(month = '201803');</p>
<p class="1">&nbsp;</p>
<p class="1">注意：添加分区之后就可以在hdfs文件系统当中看到表下面多了一个文件夹</p>
<p class="1">&nbsp;</p>
<p class="1">删除分区</p>
<p class="code">alter table score drop partition(month = '201806');</p>
<p class="1">&nbsp;</p>]]></description></item><item><title>第2节 hive基本操作：6、7、8</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/18/11048707.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 18 Jun 2019 15:55:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/18/11048707.html</guid><description><![CDATA[<p>第1节 hive安装：6、hive的基本操作；7、创建数据库的语法；8、hive当中创建内部表的语法。</p>
<p>hive的基本操作：<br />	创建数据库与创建数据库表操作<br />		创建数据库操作：create  database  if   not  exists  xxx;<br />		创建数据库表的操作：<br />			CREATE [EXTERNAL] TABLE [IF NOT EXISTS] table_name  创建表的三个关键字段<br />			   [(col_name data_type [COMMENT col_comment], ...)]   定义我们的列名，以及列的类型<br />			   [COMMENT table_comment]   注释信息，只能用英文或者拼音，不接受中文<br />			   [PARTITIONED BY (col_name data_type [COMMENT col_comment], ...)]   分区：这里的是hive的分区，分的是文件夹<br />			   [CLUSTERED BY (col_name, col_name, ...)    分桶：按照字段进行划分文件<br />			   [SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS]   stored  by   划分到多少个桶里面去<br />			   [ROW FORMAT row_format]    指定字段之间的分隔符<br />			   [STORED AS file_format]    数据的存储格式为哪一种<br />			   [LOCATION hdfs_path]        指定我们这个表在hdfs的哪一个位置</p>
<p>			   <br />	hive当中的第一种表模型：管理表 又叫做 内部表 <br />			最明显的一个特征：删除表的时候，会把hdfs的数据同步删除<br />		创建内部表的语法  create  table  stu (id int ,name string);  <br />		注意创建内部表不要带external关键字<br />		创建内部表：指定分隔符，指定文件存储格式，指定hdfs的存放位置<br />		create table if not exists stu2(id int ,name string ) row format delimited fields terminated by '\t' stored as textfile location '/user/stu2';<br />		根据查询结果创建表<br />		create table stu3 as select * from stu2; 这种语法就会把我们stu2里面的数据以及表结构都复制到stu3里面来<br />		复制表结构<br />		create table stu4 like stu2;  只会把stu2的表结构复制给stu4 ,不会复制数据</p>
<p><span style="color: #ff0000;">======================================================================</span></p>
<h3>&nbsp;3.1、创建数据库与创建数据库表</h3>
<h4>创建数据库操作</h4>
<h5>创建数据库</h5>
<p class="code">create database if not exists myhive;</p>
<p class="code">use&nbsp; myhive;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>说明：hive的表存放位置模式是由hive-site.xml当中的一个属性指定的</p>
<p class="code">&lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;</p>
<p class="code">&lt;value&gt;/user/hive/warehouse&lt;/value&gt; 《不配置的话，默认值就是这个》</p>
<h5>创建数据库并指定hdfs存储位置</h5>
<p class="code">create database myhive2 location '/myhive2';</p>
<p>&nbsp;</p>
<h5>修改数据库</h5>
<p>可以使用alter&nbsp; database&nbsp; 命令来修改数据库的一些属性。但是数据库的元数据信息是不可更改的，包括数据库的名称以及数据库所在的位置</p>
<p class="code">alter&nbsp; database&nbsp; myhive2&nbsp; set&nbsp; dbproperties('createtime'='20180611');</p>
<h5>查看数据库详细信息</h5>
<p>查看数据库基本信息</p>
<p class="code">desc&nbsp; database&nbsp; myhive2;</p>
<p>查看数据库更多详细信息</p>
<p class="code">desc database extended&nbsp; myhive2;&nbsp;&nbsp;</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618235724012-562008281.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618235731723-854183001.png" alt="" /></p>
<h5>删除数据库</h5>
<p>删除一个空数据库，如果数据库下面有数据表，那么就会报错</p>
<p class="code">drop&nbsp; database&nbsp; myhive2;</p>
<p>&nbsp;</p>
<p>强制删除数据库，包含数据库下面的表一起删除</p>
<p>drop&nbsp; database&nbsp; myhive&nbsp; cascade;&nbsp;&nbsp; 不要执行了</p>
<h4>创建数据库表操作</h4>
<h5>创建数据库表语法</h5>
<p>CREATE [EXTERNAL] TABLE [IF NOT EXISTS] table_name</p>
<p>&nbsp;&nbsp; [(col_name data_type [COMMENT col_comment], ...)]</p>
<p>&nbsp;&nbsp; [COMMENT table_comment]</p>
<p>&nbsp;&nbsp; [PARTITIONED BY (col_name data_type [COMMENT col_comment], ...)]</p>
<p>&nbsp;&nbsp; [CLUSTERED BY (col_name, col_name, ...)</p>
<p>&nbsp;&nbsp; [SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS]</p>
<p>&nbsp;&nbsp; [ROW FORMAT row_format]</p>
<p>&nbsp;&nbsp; [STORED AS file_format]</p>
<p>&nbsp;&nbsp; [LOCATION hdfs_path]</p>
<p>&nbsp;</p>
<p>说明：</p>
<p>1、CREATE TABLE 创建一个指定名字的表。如果相同名字的表已经存在，则抛出异常；用户可以用 IF NOT EXISTS 选项来忽略这个异常。</p>
<p>2、EXTERNAL关键字可以让用户创建一个外部表，在建表的同时指定一个指向实际数据的路径（LOCATION），Hive 创建内部表时，会将数据移动到数据仓库指向的路径；若创建外部表，仅记录数据所在的路径，不对数据的位置做任何改变。在删除表的时候，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据。</p>
<p>3、LIKE 允许用户复制现有的表结构，但是不复制数据。</p>
<p>4、ROW FORMAT DELIMITED [FIELDS TERMINATED BY char] [COLLECTION ITEMS TERMINATED BY char]&nbsp; [MAP KEYS TERMINATED BY char] [LINES TERMINATED BY char] <strong>|</strong> SERDE serde_name [WITH SERDEPROPERTIES (property_name=property_value, property_name=property_value, ...)]</p>
<p>用户在建表的时候可以自定义 SerDe 或者使用自带的 SerDe。如果没有指定 ROW FORMAT 或者 ROW FORMAT DELIMITED，将会使用自带的 SerDe。在建表的时候，用户还需要为表指定列，用户在指定表的列的同时也会指定自定义的 SerDe，Hive通过 SerDe 确定表的具体的列的数据。</p>
<p>5、STORED AS</p>
<p>SEQUENCEFILE|TEXTFILE|RCFILE</p>
<p>如果文件数据是纯文本，可以使用 STORED AS TEXTFILE。如果数据需要压缩，使用 STORED AS SEQUENCEFILE。</p>
<p>&nbsp;</p>
<p class="1">6、CLUSTERED BY</p>
<p class="1">对于每一个表（table）或者分区， Hive可以进一步组织成桶，也就是说桶是更为细粒度的数据范围划分。Hive也是 针对某一列进行桶的组织。Hive采用对列值哈希，然后除以桶的个数求余的方式决定该条记录存放在哪个桶当中。</p>
<p class="1">把表（或者分区）组织成桶（Bucket）有两个理由：</p>
<p class="1">（1）获得更高的查询处理效率。桶为表加上了额外的结构，Hive 在处理有些查询时能利用这个结构。具体而言，连接两个在（包含连接列的）相同列上划分了桶的表，可以使用 Map 端连接 （Map-side join）高效的实现。比如JOIN操作。对于JOIN操作两个表有一个相同的列，如果对这两个表都进行了桶操作。那么将保存相同列值的桶进行JOIN操作就可以，可以大大较少JOIN的数据量。</p>
<p class="1">（2）使取样（sampling）更高效。在处理大规模数据集时，在开发和修改查询的阶段，如果能在数据集的一小部分数据上试运行查询，会带来很多方便。</p>
<p class="1">&nbsp;</p>
<h5>管理表</h5>
<h6>hive建表初体验</h6>
<p class="code">use myhive;</p>
<p class="code">create table stu(id int,name string);</p>
<p class="code">insert into stu values (1,"zhangsan");</p>
<p class="code">select * from stu;</p>
<p>&nbsp;</p>
<h6>Hive建表时候的字段类型</h6>
<p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<table style="width: 633px;" border="0" cellspacing="0" cellpadding="0">
<thead>
<tr>
<td width="69">
<p align="left"><strong>分类</strong></p>





</td>
<td width="98">
<p align="left"><strong>类型</strong></p>





</td>
<td width="267">
<p align="left"><strong>描述</strong></p>





</td>
<td width="198">
<p align="left"><strong>字面量示例</strong></p>





</td>





</tr>





</thead>
<tbody>
<tr>
<td width="69">
<p align="left">原始类型</p>





</td>
<td width="98">
<p align="left">BOOLEAN</p>





</td>
<td width="267">
<p align="left">true/false</p>





</td>
<td width="198">
<p align="left">TRUE</p>





</td>





</tr>
<tr>
<td width="69">&nbsp;</td>
<td width="98">
<p align="left">TINYINT</p>





</td>
<td width="267">
<p align="left">1字节的有符号整数 -128~127</p>





</td>
<td width="198">
<p align="left">1Y</p>





</td>





</tr>
<tr>
<td width="69">&nbsp;</td>
<td width="98">
<p align="left">SMALLINT</p>





</td>
<td width="267">
<p align="left">2个字节的有符号整数，-32768~32767</p>





</td>
<td width="198">
<p align="left">1S</p>





</td>





</tr>
<tr>
<td width="69">&nbsp;</td>
<td width="98">
<p align="left">INT</p>





</td>
<td width="267">
<p align="left">4个字节的带符号整数</p>





</td>
<td width="198">
<p align="left">1</p>





</td>





</tr>
<tr>
<td width="69">&nbsp;</td>
<td width="98">
<p align="left">BIGINT</p>





</td>
<td width="267">
<p align="left">8字节带符号整数</p>





</td>
<td width="198">
<p align="left">1L</p>





</td>





</tr>
<tr>
<td width="69">&nbsp;</td>
<td width="98">
<p align="left">FLOAT</p>





</td>
<td width="267">
<p align="left">4字节单精度浮点数1.0</p>





</td>
<td width="198">&nbsp;</td>





</tr>
<tr>
<td width="69">&nbsp;</td>
<td width="98">
<p align="left">DOUBLE</p>





</td>
<td width="267">
<p align="left">8字节双精度浮点数</p>





</td>
<td width="198">
<p align="left">1.0</p>





</td>





</tr>
<tr>
<td width="69">&nbsp;</td>
<td width="98">
<p align="left">DEICIMAL</p>





</td>
<td width="267">
<p align="left">任意精度的带符号小数</p>





</td>
<td width="198">
<p align="left">1.0</p>





</td>





</tr>
<tr>
<td width="69">&nbsp;</td>
<td width="98">
<p align="left">STRING</p>





</td>
<td width="267">
<p align="left">字符串，变长</p>





</td>
<td width="198">
<p align="left">&ldquo;a&rdquo;,&rsquo;b&rsquo;</p>





</td>





</tr>
<tr>
<td width="69">&nbsp;</td>
<td width="98">
<p align="left">VARCHAR</p>





</td>
<td width="267">
<p align="left">变长字符串</p>





</td>
<td width="198">
<p align="left">&ldquo;a&rdquo;,&rsquo;b&rsquo;</p>





</td>





</tr>
<tr>
<td width="69">&nbsp;</td>
<td width="98">
<p align="left">CHAR</p>





</td>
<td width="267">
<p align="left">固定长度字符串</p>





</td>
<td width="198">
<p align="left">&ldquo;a&rdquo;,&rsquo;b&rsquo;</p>





</td>





</tr>
<tr>
<td width="69">&nbsp;</td>
<td width="98">
<p align="left">BINARY</p>





</td>
<td width="267">
<p align="left">字节数组</p>





</td>
<td width="198">
<p align="left">无法表示</p>





</td>





</tr>
<tr>
<td width="69">&nbsp;</td>
<td width="98">
<p align="left">TIMESTAMP</p>





</td>
<td width="267">
<p align="left">时间戳，毫秒值精度</p>





</td>
<td width="198">
<p align="left">122327493795</p>





</td>





</tr>
<tr>
<td width="69">&nbsp;</td>
<td width="98">
<p align="left">DATE</p>





</td>
<td width="267">
<p align="left">日期</p>





</td>
<td width="198">
<p align="left">&lsquo;2016-03-29&rsquo;</p>





</td>





</tr>
<tr>
<td width="69">
<p align="left">&nbsp;</p>





</td>
<td width="98">
<p align="left"><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types#LanguageManualTypes-Intervals">INTERVAL</a></p>





</td>
<td width="267">
<p align="left">时间频率间隔</p>





</td>
<td width="198">
<p align="left">&nbsp;</p>





</td>





</tr>
<tr>
<td width="69">
<p align="left">复杂类型</p>





</td>
<td width="98">
<p align="left">ARRAY</p>





</td>
<td width="267">
<p align="left">有序的的同类型的集合</p>





</td>
<td width="198">
<p align="left">array(1,2)</p>





</td>





</tr>
<tr>
<td width="69">&nbsp;</td>
<td width="98">
<p align="left">MAP</p>





</td>
<td width="267">
<p align="left">key-value,key必须为原始类型，value可以任意类型</p>





</td>
<td width="198">
<p align="left">map(&lsquo;a&rsquo;,1,&rsquo;b&rsquo;,2)</p>





</td>





</tr>
<tr>
<td width="69">&nbsp;</td>
<td width="98">
<p align="left">STRUCT</p>





</td>
<td width="267">
<p align="left">字段集合,类型可以不同</p>





</td>
<td width="198">
<p align="left">struct(&lsquo;1&rsquo;,1,1.0), named_stract(&lsquo;col1&rsquo;,&rsquo;1&rsquo;,&rsquo;col2&rsquo;,1,&rsquo;clo3&rsquo;,1.0)</p>





</td>





</tr>
<tr>
<td width="69">&nbsp;</td>
<td width="98">
<p align="left">UNION</p>





</td>
<td width="267">
<p align="left">在有限取值范围内的一个值</p>





</td>
<td width="198">
<p align="left">create_union(1,&rsquo;a&rsquo;,63)</p>





</td>





</tr>





</tbody>





</table>
<p><strong>创建表并指定字段之间的分隔符</strong></p>
<p class="code">create&nbsp; table if not exists stu2(id int ,name string) row format delimited fields terminated by '\t' stored as textfile location '/user/stu2';</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618235909827-2127255874.png" alt="" /></p>
<h6>根据查询结果创建表</h6>
<p class="code">create table stu3 as select * from stu2;（拷贝表结构和数据）</p>
<h6>根据已经存在的表结构创建表</h6>
<p class="code">create table stu4 like stu2; （只拷贝表结构）</p>
<h6>查询表的类型</h6>
<p class="code">desc formatted&nbsp; stu2;</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190619000043323-152662972.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 hive安装：2、3、4、5、（多看几遍）</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/18/11044583.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 18 Jun 2019 04:36:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/18/11044583.html</guid><description><![CDATA[<p>第1节 hive安装：</p>
<p>2、数据仓库的基本概念；</p>
<p>3、hive的基本介绍；</p>
<p>4、hive的基本架构以及与hadoop的关系以及RDBMS的对比等</p>
<p>5、hive的安装之（使用mysql作为元数据信息存储）</p>
<p>&nbsp;</p>
<p>课程内容：hive<br />1、数据仓库的基本概念  了解<br />2、hive基本概念<br />	hive的安装部署  搞定<br />3、hive的基本操作 <br />		建库建表操作    掌握 搞定   <br />		hive的基本语法    掌握 搞定  <br />		<br />4、hive的shell参数 了解<br />5、hive的函数  内置函数 了解<br />			   自定义函数  自定义udf函数  搞定  <br />6、hive的数据压缩  搞定</p>
<p><br />7、hive的数据存储格式  搞定<br />8、存储与压缩相结合  背下来  <br />9、hive的调优</p>
<p>10、hive语句的综合联系  作业</p>
<p>&nbsp;</p>
<p><br />数据仓库的基本介绍：<br />1、数据仓库的基本概念 <br />	名字叫做data  warehourse 数据仓库<br />	仓库：主要用于存储东西的，不会生产东西，也不会消耗东西<br />	数据仓库：不会产生任何的数据，也不会消耗任何的数据，只是用于存储这些数据<br />			   主要用于分析性报告和决策支持<br />	<br />2、数据仓库的主要特征：<br />	面向主题：有确切的分析目标<br />	集成性：相关的数据都会弄到数据仓库当中来，便于我们下一步的分析<br />	非易失性：数据一旦进入到数据仓库之后，不会轻易的改变<br />	时变性：根据一些不同的指标求取，会产生不同的一些分析维度<br />	<br />3、数据库与数据仓库的区别：<br />	数据库：OLTP  On-Line Transaction Processing  联机事务处理  主要用于我们业务数据库当中的增删改查<br />	数据仓库 OLAP     On-Line Analytical Processing    联机分析处理  主要用于我们的数据的分析查询等操作，操作的都是历史数据，不会新增 也不会修改，更加不会删除数据<br />	最基本的区别：数据仓库主要用于统计分析，数据库主要用于事务处理</p>
<p>	kettle：来实现数据仓库的开发，主要是用于处理数据库当中的数据</p>
<p>4、数据仓库的分层：数据仓库主要分为三层  <br />				源数据层：贴源层  ODS层  主要是获取我们的源数据 <br />				数据仓库层：DW层  主要对我们的贴源层的数据进一步的分析，得出我们想要的结果<br />				数据应用层：APP层  主要对我们应用层分析之后得到的结果做进一步的展示<br />	数据在各个层级之间流动的一个过程，可以称之为ETL过程  （抽取Extra, 转化Transfer, 装载Load）的过程<br />	<br />5、数据仓库的元数据管理：主要用于记录数据库表之间的关系，数据库表字段的含义等等<br />						  还有包括一些数据处理的规则，数据装载的周期，数据导出的周期等等<br />	</p>
<p>&nbsp;</p>
<p>hive的基本介绍：<br />	1、hive是什么：基于hadoop的一个数据仓库的工具。可以hdfs上面结构化的数据映射成为一张表<br />	<br />	数据结构：<br />		结构化的数据：字段个数一定，字段之间的分隔符一定<br />		半结构化的数据：例如xml，json等<br />		非结构化的数据：没有任何规律格式的数据</p>
<p>	<br />	hive底层的数据存储都是使用HDFS，数据的统计计算都是使用的MapReduce,<br />	说白了可以将hive理解为一个MapReduce的客户端工具，你写的hql语句会翻译成MapReduce的任务去执行<br />	<br />	2、为什么要使用hive？&nbsp; 写MR太复杂了，不会，sql相对简单一些。<br />	<br />	3、hive一些特点：<br />		可扩展：扩展的是我们的hadoop集群<br />		延展性：支持用户的自定义函数<br />		容错性：良好的容错<br />	<br />	hive的架构：<br />		用户接口：主要是为了我们编辑sql语句，然后提交给hive<br />		解析器：包含三大块：<br />				编译器：主要将我们的sql语句进行编译成一个MR的任务<br />				优化器：主要是对我们的sql语句进行优化<br />				执行器：提交mr的任务，进行执行<br />		元数据库：hive的元数据  表与hdfs数据之间的映射关系 默认使用的是derby，一般都会改成mysql<br />	<br />	<br />	<br />	<br />hive的安装：使用mysql作为元数据存储<br />			mysql使用yum源在线的方式进行安装<br />			hive的配置文件的修改  <br />				hive-env.sh:<br />					HADOOP_HOME=/export/servers/hadoop-2.6.0-cdh5.14.0<br />					export HIVE_CONF_DIR=/export/servers/hive-1.1.0-cdh5.14.0/conf<br />					注意：一定要指向到我们hive的配置文件的路径<br />	<br />	<br />hive的交互方式：<br />第一种方式  bin/hive<br />第二种方式：使用beeline客户端来进行连接<br />	启动服务端hiveserver2    <br />		bin/hive --service hiveserver2  前台启动<br />		nohup bin/hive --service hiveserver2 2&gt;&amp;1   &amp;  进程后台启动<br />	启动客户端，使用beeline的方式连接我们的服务端<br />		bin/beeline<br />		beeline&gt; !connect jdbc:hive2://node03.hadoop.com:10000<br />		输入用户名root   密码  123456即可连接上<br />	<br />第三种交互方式：使用hive  -e不进入hive客户端直接执行sql语句<br />		bin/hive -e "use myhive;select * from test;"<br />		bin/hive -f hive.sql   通过 -f  指定我们需要执行的sql脚本文件</p>
<p><span style="color: #ff0000;">===============================================================================</span></p>
<h2>一、 数据仓库</h2>
<h3>1． 数据仓库的基本概念</h3>
<p class="Default">数据仓库，</p>
<p align="left">英文名称为Data Warehouse，可简写为DW或DWH。数据仓库的目的是构建面向分析的集成化数据环境，为企业提供决策支持（Decision Support）。它出于分析性报告和决策支持目的而创建。</p>
<p align="left">数据仓库本身并不&ldquo;生产&rdquo;任何数据，同时自身也不需要&ldquo;消费&rdquo;任何的数据，数据来源于外部，并且开放给外部应用，这也是为什么叫&ldquo;仓库&rdquo;，而不叫&ldquo;工厂&rdquo;的原因。</p>
<h3>2． 数据仓库的主要特征</h3>
<p align="left">数据仓库是面向主题的（Subject-Oriented ）、集成的（Integrated）、非易失的（Non-Volatile）和时变的（Time-Variant ）数据集合，用以支持管理决策。</p>
<h4>2.1． 面向主题</h4>
<p align="left">传统数据库中，最大的特点是面向应用进行数据的组织，各个业务系统可能是相互分离的。而数据仓库则是面向主题的。主题是一个抽象的概念，是较高层次上企业信息系统中的数据综合、归类并进行分析利用的抽象。在逻辑意义上，它是对应企业中某一宏观分析领域所涉及的分析对象。</p>
<p>操作型处理（传统数据）对数据的划分并不适用于决策分析。而基于主题组织的数据则不同，它们被划分为各自独立的领域，每个领域有各自的逻辑内涵但互不交叉，在抽象层次上对数据进行完整、一致和准确的描述。一些主题相关的数据通常分布在多个操作型系统中。</p>
<h4>2.2． 集成性</h4>
<p>通过对分散、独立、异构的数据库数据进行抽取、清理、转换和汇总便得到了数据仓库的数据，这样保证了数据仓库内的数据关于整个企业的一致性。</p>
<p>数据仓库中的综合数据不能从原有的数据库系统直接得到。因此在数据进入数据仓库之前，必然要经过统一与综合，这一步是数据仓库建设中最关键、最复杂的一步，所要完成的工作有：</p>
<p>（1）要统一源数据中所有矛盾之处，如字段的同名异义、异名同义、单位不统一、字长不一致，等等。</p>
<p>（2）进行数据综合和计算。数据仓库中的数据综合工作可以在从原有数据库抽取数据时生成，但许多是在数据仓库内部生成的，即进入数据仓库以后进行综合生成的。</p>
<p>下图说明一个保险公司综合数据的简单处理过程，其中数据仓库中与&ldquo;保险&rdquo; 主题有关的数据来自于多个不同的操作型系统。这些系统内部数据的命名可能不同，数据格式也可能不同。把不同来源的数据存储到数据仓库之前，需要去除这些不一致。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618103835648-819438535.png" alt="" /></p>
<p>&nbsp;</p>
<h4>2.3． 非易失性（不可更新性）</h4>
<p>操作型数据库主要服务于日常的业务操作，使得数据库需要不断地对数据实时更新，以便迅速获得当前最新数据，不至于影响正常的业务运作。在数据仓库中只要保存过去的业务数据，不需要每一笔业务都实时更新数据仓库，而是根据商业需要每隔一段时间把一批较新的数据导入数据仓库。</p>
<p>数据仓库的数据反映的是一段相当长的时间内历史数据的内容，是不同时点</p>
<p>的数据库快照的集合，以及基于这些快照进行统计、综合和重组的导出数据。</p>
<p>数据非易失性主要是针对应用而言。数据仓库的用户对数据的操作大多是数据查询或比较复杂的挖掘，一旦数据进入数据仓库以后，一般情况下被较长时间保留。数据仓库中一般有大量的查询操作，但修改和删除操作很少。因此，数据经加工和集成进入数据仓库后是极少更新的，通常只需要定期的加载和更新。</p>
<h4>2.4． 时变性</h4>
<p>数据仓库包含各种粒度的历史数据。数据仓库中的数据可能与某个特定日期、星期、月份、季度或者年份有关。数据仓库的目的是通过分析企业过去一段时间业务的经营状况，挖掘其中隐藏的模式。虽然数据仓库的用户不能修改数据，但并不是说数据仓库的数据是永远不变的。分析的结果只能反映过去的情况，当业务变化后，挖掘出的模式会失去时效性。因此数据仓库的数据需要更新，以适应决策的需要。从这个角度讲，数据仓库建设是一个项目，更是一个过程 。数据仓库的数据随时间的变化表现在以下几个方面。</p>
<p>（1）&nbsp;&nbsp;&nbsp; 数据仓库的数据时限一般要远远长于操作型数据的数据时限。</p>
<p>（2）&nbsp;&nbsp;&nbsp; 操作型系统存储的是当前数据，而数据仓库中的数据是历史数据。</p>
<p>（3）&nbsp;&nbsp;&nbsp; 数据仓库中的数据是按照时间顺序追加的，它们都带有时间属性。</p>
<h3>3． 数据仓库与数据库区别</h3>
<p>数据库与数据仓库的区别实际讲的是 OLTP 与 OLAP 的区别。</p>
<p>操作型处理，叫联机事务处理 OLTP（On-Line Transaction Processing，），也可以称面向交易的处理系统，它是针对具体业务在数据库联机的日常操作，通常对少数记录进行查询、修改。用户较为关心操作的响应时间、数据的安全性、完整性和并发支持的用户数等问题。传统的数据库系统作为数据管理的主要手段，主要用于操作型处理。</p>
<p>分析型处理，叫联机分析处理 OLAP（On-Line Analytical Processing）一般针对某些主题的历史数据进行分析，支持管理决策。</p>
<p align="left">首先要明白，数据仓库的出现，并不是要取代数据库。</p>
<p align="left">l&nbsp; 数据库是面向事务的设计，数据仓库是面向主题设计的。</p>
<p>l&nbsp; 数据库一般存储业务数据，数据仓库存储的一般是历史数据。</p>
<p>l&nbsp; 数据库设计是尽量避免冗余，一般针对某一业务应用进行设计，比如一张简单的User表，记录用户名、密码等简单数据即可，符合业务应用，但是不符合分析。数据仓库在设计是有意引入冗余，依照分析需求，分析维度、分析指标进行设计。</p>
<p>l&nbsp; 数据库是为捕获数据而设计，数据仓库是为分析数据而设计。</p>
<p>以银行业务为例。数据库是事务系统的数据平台，客户在银行做的每笔交易都会写入数据库，被记录下来，这里，可以简单地理解为用数据库记账。数据仓库是分析系统的数据平台，它从事务系统获取数据，并做汇总、加工，为决策者提供决策的依据。比如，某银行某分行一个月发生多少交易，该分行当前存款余额是多少。如果存款又多，消费交易又多，那么该地区就有必要设立ATM了。</p>
<p>显然，银行的交易量是巨大的，通常以百万甚至千万次来计算。事务系统是实时的，这就要求时效性，客户存一笔钱需要几十秒是无法忍受的，这就要求数据库只能存储很短一段时间的数据。而分析系统是事后的，它要提供关注时间段内所有的有效数据。这些数据是海量的，汇总计算起来也要慢一些，但是，只要能够提供有效的分析数据就达到目的了。</p>
<p>数据仓库，是在数据库已经大量存在的情况下，为了进一步挖掘数据资源、为了决策需要而产生的，它决不是所谓的&ldquo;大型数据库&rdquo;。</p>
<p>&nbsp;</p>
<h3>4、数据仓库分层架构</h3>
<p>按照数据流入流出的过程，数据仓库架构可分为三层&mdash;&mdash;<strong>源数据</strong>、<strong>数据仓库</strong>、<strong>数据应用。</strong></p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618103846109-1308685689.png" alt="" /></p>
<p>&nbsp;</p>
<p>数据仓库的数据来源于不同的源数据，并提供多样的数据应用，数据自下而上流入数据仓库后向上层开放应用，而数据仓库只是中间集成化数据管理的一个平台。</p>
<p>l&nbsp; 源数据层（ODS）：此层数据无任何更改，直接沿用外围系统数据结构和数据，不对外开放；为临时存储层，是接口数据的临时存储区域，为后一步的数据处理做准备。</p>
<p>l&nbsp; 数据仓库层（DW）：也称为细节层，DW层的数据应该是一致的、准确的、干净的数据，即对源系统数据进行了清洗（去除了杂质）后的数据。</p>
<p>l&nbsp; 数据应用层（DA或APP）：前端应用直接读取的数据源；根据报表、专题分析需求而计算生成的数据。</p>
<p>数据仓库从各数据源获取数据及在数据仓库内的数据转换和流动都可以认为是ETL（抽取Extra, 转化Transfer, 装载Load）的过程，ETL是数据仓库的流水线，也可以认为是数据仓库的血液，它维系着数据仓库中数据的新陈代谢，而数据仓库日常的管理和维护工作的大部分精力就是保持ETL的正常和稳定。</p>
<p>&nbsp;</p>
<p>为什么要对数据仓库分层？</p>
<p>用空间换时间，通过大量的预处理来提升应用系统的用户体验（效率），因此数据仓库会存在大量冗余的数据；不分层的话，如果源业务系统的业务规则发生变化将会影响整个数据清洗过程，工作量巨大。</p>
<p>通过数据分层管理可以简化数据清洗的过程，因为把原来一步的工作分到了多个步骤去完成，相当于把一个复杂的工作拆成了多个简单的工作，把一个大的黑盒变成了一个白盒，每一层的处理逻辑都相对简单和容易理解，这样我们比较容易保证每一个步骤的正确性，当数据发生错误的时候，往往我们只需要局部调整某个步骤即可。</p>
<h3>5、数据仓库元数据管理</h3>
<p>元数据（Meta Date），主要记录数据仓库中模型的定义、各层级间的映射关系、监控数据仓库的数据状态及ETL的任务运行状态。一般会通过元数据资料库（Metadata Repository）来统一地存储和管理元数据，其主要目的是使数据仓库的设计、部署、操作和管理能达成协同和一致。</p>
<p>元数据是数据仓库管理系统的重要组成部分，元数据管理是企业级数据仓库中的关键组件，贯穿数据仓库构建的整个过程，直接影响着数据仓库的构建、使用和维护。</p>
<p>l&nbsp; 构建数据仓库的主要步骤之一是ETL。这时元数据将发挥重要的作用，它定义了源数据系统到数据仓库的映射、数据转换的规则、数据仓库的逻辑结构、数据更新的规则、数据导入历史记录以及装载周期等相关内容。数据抽取和转换的专家以及数据仓库管理员正是通过元数据高效地构建数据仓库。</p>
<p>l&nbsp; 用户在使用数据仓库时，通过元数据访问数据，明确数据项的含义以及定制报表。</p>
<p>l&nbsp; 数据仓库的规模及其复杂性离不开正确的元数据管理，包括增加或移除外部数据源，改变数据清洗方法，控制出错的查询以及安排备份等。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618103914274-637041711.png" alt="" /></p>
<p>&nbsp;</p>
<p>元数据可分为<span style="color: #ff0000;">技术元数据和业务元数据</span>。技术元数据为开发和管理数据仓库的IT 人员使用，它描述了与数据仓库开发、管理和维护相关的数据，包括数据源信息、数据转换描述、数据仓库模型、数据清洗与更新规则、数据映射和访问权限等。而业务元数据为管理层和业务分析人员服务，从业务角度描述数据，包括商务术语、数据仓库中有什么数据、数据的位置和数据的可用性等，帮助业务人员更好地理解数据仓库中哪些数据是可用的以及如何使用。</p>
<p>由上可见，元数据不仅定义了数据仓库中数据的模式、来源、抽取和转换规则等，而且是整个数据仓库系统运行的基础，元数据把数据仓库系统中各个松散的组件联系起来，组成了一个有机的整体。</p>
<p>&nbsp;</p>
<h2>二、Hive基本概念</h2>
<h3>2.1、Hive简介</h3>
<h4>什么是Hive</h4>
<p>Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供类SQL查询功能。</p>
<p>其本质是将SQL转换为MapReduce的任务进行运算，底层由HDFS来提供数据的存储，说白了hive可以理解为一个将SQL转换为MapReduce的任务的工具，甚至更进一步可以说hive就是一个MapReduce的客户端</p>
<h4>为什么使用Hive</h4>
<ul>
<li>直接使用hadoop所面临的问题</li>




























</ul>
<p>人员学习成本太高</p>
<p>项目周期要求太短</p>
<p>MapReduce实现复杂查询逻辑开发难度太大</p>
<p>&nbsp;</p>
<ul>
<li>为什么要使用Hive</li>




























</ul>
<p>操作接口采用类SQL语法，提供快速开发的能力。</p>
<p>避免了去写MapReduce，减少开发人员的学习成本。</p>
<p>功能扩展很方便。</p>
<h4>Hive的特点</h4>
<ul>
<li>可扩展</li>




























</ul>
<p>Hive可以自由的扩展集群的规模，一般情况下不需要重启服务。</p>
<p>&nbsp;</p>
<ul>
<li>延展性</li>




























</ul>
<p>Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。</p>
<p>&nbsp;</p>
<ul>
<li>容错</li>




























</ul>
<p>良好的容错性，节点出现问题SQL仍可完成执行。</p>
<h3>2.2、 Hive架构</h3>
<h4>架构图</h4>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618122622210-813458738.png" alt="" /></p>
<p>&nbsp;</p>
<h4>基本组成</h4>
<p align="left">用户接口：包括CLI、JDBC/ODBC、WebGUI。其中，CLI(command line interface)为shell命令行；JDBC/ODBC是Hive的JAVA实现，与传统数据库JDBC类似；WebGUI是通过浏览器访问Hive。</p>
<p align="left">元数据存储：通常是存储在关系数据库如mysql/derby中。Hive 将元数据存储在数据库中。Hive 中的元数据包括表的名字，表的列和分区及其属性，表的属性（是否为外部表等），表的数据所在目录等。</p>
<p>解释器、编译器、优化器、执行器:完成HQL 查询语句从词法分析、语法分析、编译、优化以及查询计划的生成。生成的查询计划存储在HDFS 中，并在随后有MapReduce 调用执行。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>2.3、Hive与Hadoop的关系</h3>
<p>Hive利用HDFS存储数据，利用MapReduce查询分析数据</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618122636193-866420215.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>2.4、Hive与传统数据库对比 [a1]<br />
hive用于海量数据的离线数据分析</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618122650050-711047989.png" alt="" /></p>
<p><em>总结：hive</em><em>具有sql</em><em>数据库的外表，但应用场景完全不同，hive</em><em>只适合用来做批量数据统计分析</em></p>
<h3>2.5、Hive的数据存储</h3>
<p class="2">1、Hive中所有的数据都存储在 HDFS 中，没有专门的数据存储格式（可支持Text，SequenceFile，ParquetFile，ORC格式RCFILE等）</p>
<p>SequenceFile是hadoop中的一种文件格式：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
文件内容是以序列化的kv对象来组织的</p>
<p>&nbsp;</p>
<p>2、只需要在创建表的时候告诉 Hive 数据中的列分隔符和行分隔符，Hive 就可以解析数据。</p>
<p>3、Hive 中包含以下数据模型：DB、Table，External Table，Partition，Bucket。</p>
<p class="1" align="left">&sup2;&nbsp; db：在hdfs中表现为${hive.metastore.warehouse.dir}目录下一个文件夹</p>
<p class="1" align="left">&sup2;&nbsp; table：在hdfs中表现所属db目录下一个文件夹</p>
<p class="1" align="left">&sup2;&nbsp; external table：与table类似，不过其数据存放位置可以在任意指定路径</p>
<p class="1" align="left">&sup2;&nbsp; partition：在hdfs中表现为table目录下的子目录</p>
<p class="1" align="left">&sup2;&nbsp; bucket：在hdfs中表现为同一个表目录下根据hash散列之后的多个文件</p>
<p class="1" align="left">&nbsp;</p>
<h3>2.6、HIVE的安装部署</h3>
<p>我们在此处选择第三台机器作为我们hive的安装机器</p>
<h4>2.6.1 安装</h4>
<h5>2.6.1.1、derby版hive直接使用：</h5>
<p>1、解压hive</p>
<p class="code">cd /export/softwares</p>
<p class="code">tar -zxvf hive-1.1.0-cdh5.14.0.tar.gz -C
../servers/</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618122719210-460595930.png" alt="" /></p>
<p>1、直接启动&nbsp; bin/hive</p>
<p class="code">cd ../servers/</p>
<p class="code">cd hive-1.1.0-cdh5.14.0/</p>
<p class="code">bin/hive</p>
<p class="code">hive&gt; create database mytest;</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618122726344-919673040.png" alt="" /></p>
<p>缺点：多个地方安装hive后，每一个hive是拥有一套自己的元数据，大家的库、表就不统一；</p>
<h5>2.6.1.2、使用mysql共享hive元数据</h5>
<h6>mysql数据库的安装（使用rpm包的方式进行安装，不推荐）</h6>
<p>第一步：查看系统自带的mysql的rpm包</p>
<p>rpm -qa | grep mysql</p>
<p>rpm -e mysql-libs-5.1.73-8.el6_8.x86_64
--nodeps</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618122748512-1419389616.png" alt="" /></p>
<p>第二步：安装mysql的rpm包</p>
<p>rpm&nbsp;&nbsp;
-ivh&nbsp; *.rpm</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618122754414-1060583349.png" alt="" /></p>
<p>第三步：启动mysql的服务</p>
<p>service&nbsp;
mysqld&nbsp; start</p>
<p>&nbsp;</p>
<p>第四步：查看mysql初始化密码</p>
<p>more /root/.mysql_secret</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618122815256-1132033466.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618122830448-2116742826.png" alt="" /></p>
<p>第五步：使用随记密码登录mysql并更新密码</p>
<p>mysql&nbsp;
-uroot &ndash;p </p>
<p>SET PASSWORD = PASSWORD('123456');</p>
<p>&nbsp;</p>
<p>第六步：开启mysql远程连接</p>
<p>grant all privileges on *.* to 'root'@'%'
identified by '123456' with grant option;</p>
<p>flush privileges;</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618122842163-145792912.png" alt="" /></p>
<p>第七步：设置mysql的开机启动</p>
<p class="code">chkconfig --add mysqld</p>
<p class="code">chkconfig mysqld on</p>
<h6>mysql数据库的安装（使用yum源进行安装，强烈推荐）</h6>
<p>第一步：在线安装mysql相关的软件包</p>
<p class="code">yum&nbsp;
install&nbsp; mysql&nbsp; mysql-server&nbsp;
mysql-devel</p>
<p>第二步：启动mysql的服务</p>
<p class="code">/etc/init.d/mysqld start</p>
<p>第三步：通过mysql安装自带脚本进行设置</p>
<p class="code">/usr/bin/mysql_secure_installation</p>
<p>第四步：进入mysql的客户端然后进行授权</p>
<p class="code">&nbsp;grant all
privileges on *.* to 'root'@'%' identified by '123456' with grant option;</p>
<p class="code">&nbsp;flush
privileges;</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618122920299-1190859833.png" alt="" /></p>
<h6>修改hive的配置文件</h6>
<p>修改hive-env.sh&nbsp; </p>
<p>添加我们的hadoop的环境变量</p>
<p class="code">cd&nbsp; /export/servers/hive-1.1.0-cdh5.14.0/conf</p>
<p class="code">cp hive-env.sh.template hive-env.sh</p>
<p class="code">vim hive-env.sh</p>
<div>
<p class="a">HADOOP_HOME=/export/servers/hadoop-2.6.0-cdh5.14.0</p>
<p class="a"># Hive Configuration Directory can be controlled
by:</p>
<p class="a"><span style="color: #ff0000;">export
HIVE_CONF_DIR=/export/servers/hive-1.1.0-cdh5.14.0/conf</span></p>































</div>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190618122951363-1035043648.png" alt="" /></p>
<p>&nbsp;</p>
<p>修改hive-site.xml</p>
<p class="code">cd /export/servers/hive-1.1.0-cdh5.14.0/conf</p>
<p class="code">vim hive-site.xml</p>
<p>&nbsp;</p>
<div>
<p class="a">&lt;?xml-stylesheet type="text/xsl"
href="configuration.xsl"?&gt;</p>
<p class="a">&lt;configuration&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;value&gt;jdbc:mysql://node03.hadoop.com:3306/hive?createDatabaseIfNotExist=true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/property&gt;</p>
<p class="a">&nbsp;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;value&gt;root&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;value&gt;123456&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;name&gt;hive.cli.print.current.db&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;name&gt;hive.cli.print.header&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;value&gt;true&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;name&gt;hive.server2.thrift.bind.host&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;value&gt;node03.hadoop.com&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/property&gt;</p>
<p class="a">&lt;!--</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;property&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;name&gt;hive.metastore.uris&lt;/name&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;value&gt;thrift://node03.hadoop.com:9083&lt;/value&gt;</p>
<p class="a">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/property&gt;</p>
<p class="a">--&gt;</p>
<p class="a">&lt;/configuration&gt;</p>































</div>
<p>&nbsp;</p>
<p>上传mysql的lib驱动包</p>
<p>将mysql的lib驱动包上传到hive的lib目录下</p>
<p class="code">cd /export/servers/hive-1.1.0-cdh5.14.0/lib</p>
<p>将mysql-connector-java-5.1.38.jar 上传到这个目录下</p>
<p>&nbsp;</p>
<h4>2.6.2 使用方式</h4>
<h5>第一种交互方式：Hive交互shell</h5>
<p class="code">cd /export/servers/hive-1.1.0-cdh5.14.0</p>
<p class="code">bin/hive</p>
<p>&nbsp;</p>
<p>查看所有的数据库</p>
<p class="code">hive (default)&gt; show databases;</p>
<p>&nbsp;</p>
<p>创建一个数据库</p>
<p class="code">hive (default)&gt; create database myhive;</p>
<p>使用该数据库并创建数据库表</p>
<p class="code">hive (default)&gt; use myhive;</p>
<p class="code">hive (myhive)&gt; create table test(id int,name string);</p>
<p>&nbsp;</p>
<p>以上命令操作完成之后，一定要确认mysql里面出来一个数据库hive</p>
<h5>第二种交互方式：Hive JDBC服务</h5>
<h6>启动hiveserver2服务</h6>
<p>前台启动</p>
<p class="code">cd&nbsp; /export/servers/hive-1.1.0-cdh5.14.0</p>
<p class="code">bin/hive --service hiveserver2</p>
<p>&nbsp;</p>
<p>后台启动</p>
<p class="code">cd&nbsp; /export/servers/hive-1.1.0-cdh5.14.0</p>
<p class="code">nohup bin/hive --service hiveserver2 2&gt;&amp;1 &amp;</p>
<h6>beeline连接hiveserver2</h6>
<p class="code">bin/beeline</p>
<p class="code">beeline&gt; !connect jdbc:hive2://node03.hadoop.com:10000</p>
<p>注意：如果使用beeline方式连接hiveserver2，一定要保证hive在mysql当中的元数据库已经创建成功，不然就会拒绝连接</p>
<h5>第三种交互方式：Hive命令</h5>
<p>使用 &ndash;e&nbsp; 参数来直接执行hql的语句（注意use myhive;select * from test; <strong>中间是分号隔开，而不是冒号！</strong>）</p>
<p class="code">bin/hive -e "use myhive;select * from test;"</p>
<p>&nbsp;</p>
<p>使用 &ndash;f &nbsp;参数通过指定文本文件来执行hql的语句</p>
<p>vim hive.sql</p>
<p class="code">use myhive;select * from test;</p>
<p>&nbsp;</p>
<p class="code">bin/hive -f hive.sql</p>
<p>更多参数参考以下</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190620154642045-1824801150.png" alt="" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div><hr align="left" size="1" width="33%" />
<div><ol>
<li>&nbsp;<a href="file:///D:/Study/BigData/heima/stage2/6%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%A6%BB%E7%BA%BF%E7%AC%AC%E5%85%AD%E5%A4%A9/2%E3%80%81%E7%A6%BB%E7%BA%BF%E8%AE%A1%E7%AE%97%E7%B3%BB%E7%BB%9F_%E7%AC%AC6%E5%A4%A9%EF%BC%88hive%E9%83%A8%E5%88%86%EF%BC%89.docx#_msoanchor_1">[a1]</a>查询语言。由于 SQL 被广泛的应用在数据仓库中，因此，专门针对 Hive 的特性设计了类 SQL 的查询语言 HQL。熟悉 SQL 开发的开发者可以很方便的使用 Hive 进行开发。 </li>
<li>数据存储位置。Hive 是建立在
Hadoop 之上的，所有 Hive 的数据都是存储在
HDFS 中的。而数据库则可以将数据保存在块设备或者本地文件系统中。 </li>
<li>数据格式。Hive 中没有定义专门的数据格式，数据格式可以由用户指定，用户定义数据格式需要指定三个属性：列分隔符（通常为空格、&rdquo;\t&rdquo;、&rdquo;\x001&Prime;）、行分隔符（&rdquo;\n&rdquo;）以及读取文件数据的方法（Hive 中默认有三个文件格式 TextFile，SequenceFile 以及 RCFile）。由于在加载数据的过程中，不需要从用户数据格式到 Hive 定义的数据格式的转换，因此，Hive 在加载的过程中不会对数据本身进行任何修改，而只是将数据内容复制或者移动到相应的 HDFS 目录中。而在数据库中，不同的数据库有不同的存储引擎，定义了自己的数据格式。所有数据都会按照一定的组织存储，因此，数据库加载数据的过程会比较耗时。
</li>
<li>数据更新。由于 Hive 是针对数据仓库应用设计的，而数据仓库的内容是读多写少的。因此，Hive 中不支持对数据的改写和添加，所有的数据都是在加载的时候中确定好的。而数据库中的数据通常是需要经常进行修改的，因此可以使用 INSERT INTO ...&nbsp; VALUES 添加数据，使用 UPDATE
... SET 修改数据。 </li>
<li>索引。之前已经说过，Hive 在加载数据的过程中不会对数据进行任何处理，甚至不会对数据进行扫描，因此也没有对数据中的某些 Key 建立索引。Hive 要访问数据中满足条件的特定值时，需要暴力扫描整个数据，因此访问延迟较高。由于 MapReduce 的引入， Hive 可以并行访问数据，因此即使没有索引，对于大数据量的访问，Hive 仍然可以体现出优势。数据库中，通常会针对一个或者几个列建立索引，因此对于少量的特定条件的数据的访问，数据库可以有很高的效率，较低的延迟。由于数据的访问延迟较高，决定了 Hive 不适合在线数据查询。 </li>
<li>执行。Hive 中大多数查询的执行是通过 Hadoop 提供的 MapReduce 来实现的，而数据库通常有自己的执行引擎。
</li>
<li>执行延迟。之前提到，Hive 在查询数据的时候，由于没有索引，需要扫描整个表，因此延迟较高。另外一个导致 Hive 执行延迟高的因素是 MapReduce 框架。由于 MapReduce 本身具有较高的延迟，因此在利用 MapReduce 执行 Hive 查询时，也会有较高的延迟。相对的，数据库的执行延迟较低。当然，这个低是有条件的，即数据规模较小，当数据规模大到超过数据库的处理能力的时候，Hive 的并行计算显然能体现出优势。 </li>
<li>可扩展性。由于 Hive 是建立在 Hadoop 之上的，因此 Hive 的可扩展性是和 Hadoop 的可扩展性是一致的（世界上最大的 Hadoop 集群在 Yahoo!，2009年的规模在
4000 台节点左右）。而数据库由于 ACID 语义的严格限制，扩展行非常有限。目前最先进的并行数据库 Oracle 在理论上的扩展能力也只有 100 台左右。 </li>
<li>数据规模。由于 Hive 建立在集群上并可以利用 MapReduce 进行并行计算，因此可以支持很大规模的数据；对应的，数据库可以支持的数据规模较小。</li>





























</ol>
<p>&nbsp;</p>




</div>




</div>
<div>
<div>
<div id="_com_1" class="msocomtxt">
<p class="MsoCommentText"><span lang="EN-US">&nbsp;</span></p>













<!--[if !supportAnnotations]--></div>













<!--[endif]--></div>













</div>]]></description></item><item><title>第1节 yarn：15、关于yarn中常用的参数设置</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/17/11042767.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 17 Jun 2019 15:04:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/17/11042767.html</guid><description><![CDATA[<h4>第一个参数：container分配最小内存</h4>
<p>&nbsp;yarn.scheduler.minimum-allocation-mb&nbsp;&nbsp; &nbsp; 1024&nbsp;&nbsp; 给应用程序container分配的最小内存</p>
<h4>第二个参数：container分配最大内存</h4>
<p>&nbsp;yarn.scheduler.maximum-allocation-mb&nbsp; &nbsp; 8192&nbsp; 给应用程序container分配的最大内存</p>
<h4>第三个参数：每个container的最小虚拟内核个数</h4>
<p>yarn.scheduler.minimum-allocation-vcores &nbsp; 1 &nbsp; 每个container默认给分配的最小的虚拟内核个数</p>
<h4>第四个参数：每个container的最大虚拟内核个数</h4>
<p>yarn.scheduler.maximum-allocation-vcores&nbsp;&nbsp; &nbsp;32&nbsp; 每个container可以分配的最大的虚拟内核的个数</p>
<h4>第五个参数：nodeManager可以分配的内存大小</h4>
<p>yarn.nodemanager.resource.memory-mb&nbsp;&nbsp; 8192&nbsp; nodemanager可以分配的最大内存大小，默认8192Mb</p>
<p>在我们浏览yarn的管理界面的时候会发现一个问题</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190617231809574-629732986.png" alt="" /></p>
<p>我们可以在yarn-site.xml当中修改以下两个参数来改变默认值。</p>
<p>&nbsp;</p>
<p>定义每台机器的内存使用大小</p>
<table border="1" cellpadding="0">
<tbody>
<tr>
<td>
<p align="left">yarn.nodemanager.resource.memory-mb</p>
</td>
<td>
<p align="left">8192</p>
</td>
</tr>
</tbody>
</table>
<p>定义每台机器的虚拟内核使用大小</p>
<table border="1" cellpadding="0">
<tbody>
<tr>
<td>
<p align="left">yarn.nodemanager.resource.cpu-vcores</p>
</td>
<td>
<p align="left">8</p>
</td>
</tr>
</tbody>
</table>
<p>定义交换区空间可以使用的大小（交换区空间就是讲一块硬盘拿出来做内存使用）</p>
<p>这里指定的是nodemanager的2.1倍</p>
<table border="1" cellpadding="0">
<tbody>
<tr>
<td>
<p align="left">yarn.nodemanager.vmem-pmem-ratio</p>
</td>
<td>
<p align="left">2.1</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">=================================================================================</span></p>
<p>&nbsp;</p>
<p>总结回顾：</p>
<p>尽量搞定：<br />1、共同好友：求取哪些人两两之间有共同好友，需要使用两个mapreduce来实现<br />2、倒排索引的建立 某个单词在文章当中出现了多少次<br />3、自定义inputFormat合并小文件 合并小文件成sequenceFile 使用SequenceFileOutputFormat来将我们的文件输出成sequenceFile<br />4、自定义outputformat 将我们的数据输出到不同的目录下面去<br />5、分组求取topN 自定义groupingComparator实现我们分组求TopN</p>
<p>mapreduce的其他补充：了解<br />mapreduce的参数优化：随便背两个<br />yarn资源调度： 三种调度器 得要知道</p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 yarn：14、yarn集群当中的三种调度器</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/17/11042739.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 17 Jun 2019 14:57:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/17/11042739.html</guid><description><![CDATA[<h4>yarn当中的调度器介绍：</h4>
<h5>第一种调度器：FIFO Scheduler&nbsp; （队列调度器）</h5>
<p>把应用按提交的顺序排成一个队列，这是一个先进先出队列，在进行资源分配的时候，先给队列中最头上的应用进行分配资源，待最头上的应用需求满足后再给下一个分配，以此类推。</p>
<p>FIFO Scheduler是最简单也是最容易理解的调度器，也不需要任何配置，但它并不适用于共享集群。大的应用可能会占用所有集群资源，这就导致其它应用被阻塞。在共享集群中，更适合采用Capacity Scheduler或Fair Scheduler，这两个调度器都允许大任务和小任务在提交的同时获得一定的系统资源。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190617225632139-19550488.png" alt="" /></p>
<h5>第二种调度器：capacity&nbsp; scheduler（容量调度器，apache版本默认使用的调度器）</h5>
<p>Capacity 调度器允许多个组织共享整个集群，每个组织可以获得集群的一部分计算能力。通过为每个组织分配专门的队列，然后再为每个队列分配一定的集群资源，这样整个集群就可以通过设置多个队列的方式给多个组织提供服务了。除此之外，队列内部又可以垂直划分，这样一个组织内部的多个成员就可以共享这个队列资源了，在一个队列内部，资源的调度是采用的是先进先出(FIFO)策略。</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190617225642292-2015824703.png" alt="" /></p>
<h5>第三种调度器：Fair Scheduler（公平调度器，CDH版本的hadoop默认使用的调度器）</h5>
<p>Fair调度器的设计目标是为所有的应用分配公平的资源（对公平的定义可以通过参数来设置）。公平调度在也可以在多个队列间工作。举个例子，假设有两个用户A和B，他们分别拥有一个队列。当A启动一个job而B没有任务时，A会获得全部集群资源；当B启动一个job后，A的job会继续运行，不过一会儿之后两个任务会各自获得一半的集群资源。如果此时B再启动第二个job并且其它job还在运行，则它将会和B的第一个job共享B这个队列的资源，也就是B的两个job会用于四分之一的集群资源，而A的job仍然用于集群一半的资源，结果就是资源最终在两个用户之间平等的共享</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190617225651085-1370874366.png" alt="" /></p>
<p>使用哪种调度器取决于yarn-site.xml当中的</p>
<p>yarn.resourcemanager.scheduler.class&nbsp; 这个属性的配置</p>
<p><span style="color: #ff0000;">====================================================================</span></p>
<p>yarn当中的调度器：<br />解决多个任务一起提交，或者陆续的有任务提交上来，或者多个任务如何并行的情况</p>
<p>第一种调度器：FIFO  队列调度器 先进先出  这种调度方式没有人使用<br />先给第一个提交的任务分配资源，优先满足第一个任务<br />存在一个很大的缺陷<br />有一个大任务：需要30G的内存空间  集群总共内存才20G<br />又来一个小任务：需要的内存空间  300M  没有资源可分配了，这个任务就不能执行，只能等着</p>
<p><br />第二种调度方式：capacity Scheduler   容量的调度器<br />	可以对我们集群当中的资源进行划分，划分好几块<br />	可以允许我们多个任务一起同时执行，资源均匀分配<br />	apache的的hadoop默认使用的调度方式<br />	<br />第三种调度方式：Fair  Scheduler  公平调度器<br />CDH版本的hadoop默认使用的调度方式<br />可以保证任务获取到最大的资源<br />如果集群总共100G内存<br />第一个任务提交：把所有的资源都分配给第一个任务  分配给100G<br />第二个任务提交：如果第一个任务还没有完成，把第一个任务里面的资源分配一块出来给第二个任务，分配30G给第二个任务。</p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 yarn：13、yarn资源调度的介绍</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/17/11042020.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 17 Jun 2019 12:27:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/17/11042020.html</guid><description><![CDATA[<h2>&nbsp;Yarn资源调度</h2>
<p>yarn集群的监控管理界面：</p>
<p><a href="http://192.168.52.100:8088/cluster">http://192.168.52.100:8088/cluster</a></p>
<p>jobHistoryServer查看界面：</p>
<p><a href="http://192.168.52.100:19888/jobhistory">http://192.168.52.100:19888/jobhistory</a></p>
<h3>yarn的介绍：</h3>
<p>yarn是hadoop集群当中的资源管理系统模块，从hadoop2.x开始引入yarn来进行管理集群当中的资源（主要是服务器的各种硬件资源，包括CPU，内存，磁盘，网络IO等）以及运行在yarn上面的各种任务。</p>
<p>总结一句话就是说：yarn主要就是为了调度资源，管理任务等</p>
<p>其调度分为两个层级来说：</p>
<p class="code">一级调度管理：</p>
<p class="code">计算资源管理(CPU,内存，网络IO，磁盘)</p>
<p class="code">App生命周期管理 （每一个应用执行的情况，都需要汇报给ResourceManager）</p>
<p class="code">二级调度管理：</p>
<p class="code">&nbsp; &nbsp; 任务内部的计算模型管理&nbsp; (AppMaster的任务精细化管理)</p>
<p class="code">&nbsp;&nbsp;&nbsp; 多样化的计算模型</p>
<p>yarn的官网文档说明：</p>
<p><a href="http://hadoop.apache.org/docs/r2.7.5/hadoop-yarn/hadoop-yarn-site/YARN.html">http://hadoop.apache.org/docs/r2.7.5/hadoop-yarn/hadoop-yarn-site/YARN.html</a></p>
<h3>Yarn的主要组件介绍与作用</h3>
<h4>yarn当中的各个主要组件的介绍</h4>
<p>ResourceManager：yarn集群的主节点，主要用于接收客户端提交的任务，并对任务进行分配。</p>
<p>NodeManager：yarn集群的从节点，主要用于任务的计算</p>
<p>ApplicationMaster：当有新的任务提交到ResourceManager的时候，ResourceManager会在某个从节点nodeManager上面启动一个ApplicationMaster进程，负责这个任务执行的资源的分配，任务的生命周期的监控等</p>
<p>Container：资源的分配单位，ApplicationMaster启动之后，与ResourceManager进行通信，向ResourceManager提出资源申请的请求，然后ResourceManager将资源分配给ApplicationMaster，这些资源的表示，就是一个个的container</p>
<p>JobHistoryServer：这是yarn提供的一个查看已经完成的任务的历史日志记录的服务，我们可以启动jobHistoryServer来观察已经完成的任务的所有详细日志信息</p>
<p>TimeLineServer：hadoop2.4.0以后出现的新特性，主要是为了监控所有运行在yarn平台上面的所有任务（例如MR，Storm，Spark，HBase等等）</p>
<p>&nbsp;</p>
<p>yarn的发展历程以及详细介绍：</p>
<p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-yarn/">https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-yarn/</a></p>
<h4>yarn当中各个主要组件的作用：</h4>
<p>resourceManager主要作用：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 处理客户端请求</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 启动/监控ApplicationMaster</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 监控NodeManager</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 资源分配与调度</p>
<p>NodeManager主要作用：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 单个节点上的资源管理和任务管理</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 接收并处理来自resourceManager的命令</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 接收并处理来自ApplicationMaster的命令</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 管理抽象容器container</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 定时向RM汇报本节点资源使用情况和各个container的运行状态</p>
<p>ApplicationMaster主要作用：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 数据切分</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 为应用程序申请资源</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 任务监控与容错</p>
<p>负责协调来自ResourceManager的资源，开通NodeManager监视容的执行和资源使用（CPU,内存等的资源分配）</p>
<p>&nbsp;</p>
<p>Container主要作用：</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对任务运行环境的抽象</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 任务运行资源（节点，内存，cpu）</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 任务启动命令</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 任务运行环境</p>
<p>&nbsp;</p>
<h3>yarn的架构</h3>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190617223953406-2057265972.png" alt="" /></p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">======================================================================================</span>&nbsp;</p>
<p>yarn集群的主要架构：<br />resourceManager：集群当中的主节点，主要用于接收客户单的提交的任务请求，分配资源<br />NodeManager：yarn集群当中的从节点，主要负责提供计算能力，接收AppMaster分配的任务，进行执行<br />ApplicationMaster：客户端每提交一个任务，主节点resourceManager就会启动一个appMaster全权负责管理这个任务，包括资源的申请，资源的额调度，任务的执行情况汇报给resourceManager等等<br />container：资源分配的单位，ApplicationMaster申请到的资源都分配给一个的container，然后在container里面运行一个个的maptask或者reducetask<br />jobHistory：<span style="color: #ff0000;">已经完成的</span>历史任务的界面查看；</p>
<p>vim yarn-site.xml，里面的一个配置：yarn.log-aggregation-enable ，设置为true。启动日志聚合功能，将所有的日志聚合到一起，然后可以访问</p>
<p><a href="http://192.168.52.100:19888/jobhistory">http://192.168.52.100:19888/jobhistory</a>看到所有的日志。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190617223350494-2070815534.png" alt="" /></p>
<p>&nbsp;</p>
<p>TimeLineServer：hadoop2.4.0以后出来的新特性 主要用于查看<span style="color: #ff0000;">正在执行的</span>任务情况</p>
<p>hadoop当中的小任务模式 ubermode：<br />启动一个maptask，分配资源花了30s，然后maptask去处理一个小文件，花了3s<br />hadoop当中的小任务模式：<br />mapreduce.job.ubertask.enable 设置我们需要开启hadoop任务的小任务模式 小任务模式可以根据我们输入的数据量做判断，如果输入的数据量比较小<br />输入10个文件，每个文件2KB，输入的数据总量也就是20KB，10个小文件，占用10个block块，每个block块对应要启动一个maptask<br />可以考虑使用ubermode 小任务模式来实现所有的数据就在一个maptask里面去处理。</p>
<p>set mapreduce.job.ubertask.enable; //查看该参数的值。</p>
<p>set mapreduce.job.ubertask.enable=true; //设置该参数的值</p>
<p>&nbsp;</p>]]></description></item><item><title>第3节 mapreduce高级：12、mapreduce相关的参数调整</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/17/11041964.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 17 Jun 2019 12:16:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/17/11041964.html</guid><description><![CDATA[<h3>5.1 多job串联</h3>
<p>一个稍复杂点的处理逻辑往往需要多个mapreduce程序串联处理，多job的串联可以借助mapreduce框架的JobControl实现</p>
<p>示例代码：</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ControlledJob cJob1 = new ControlledJob(job1.getConfiguration());</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ControlledJob cJob2 = new ControlledJob(job2.getConfiguration());</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ControlledJob cJob3 = new ControlledJob(job3.getConfiguration());</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cJob1.setJob(job1);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cJob2.setJob(job2);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cJob3.setJob(job3);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 设置作业依赖关系</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cJob2.addDependingJob(cJob1);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cJob3.addDependingJob(cJob2);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; JobControl jobControl = new JobControl("RecommendationJob");</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jobControl.addJob(cJob1);</p>
<p>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jobControl.addJob(cJob2);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jobControl.addJob(cJob3);</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 新建一个线程来运行已加入JobControl中的作业，开始进程并等待结束</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread jobControlThread = new Thread(jobControl);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jobControlThread.start();</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (!jobControl.allFinished()) {</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.sleep(500);</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jobControl.stop();</p>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;</p>
</td>
</tr>
<tr>
<td valign="top" width="568">
<p>&nbsp;</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>5.3 Configuration对象高级应用</p>
<h2>mapreduce参数优化</h2>
<p>MapReduce重要配置参数</p>
<h3>11.1 资源相关参数</h3>
<p>以下调整参数都在mapred-site.xml这个配置文件当中有</p>
<p>//以下参数是在用户自己的mr应用程序中配置就可以生效</p>
<p>(1) mapreduce.map.memory.mb: 一个Map Task可使用的资源上限（单位:MB），默认为1024。如果Map Task实际使用的资源量超过该值，则会被强制杀死。</p>
<p>(2) mapreduce.reduce.memory.mb: 一个Reduce Task可使用的资源上限（单位:MB），默认为1024。如果Reduce Task实际使用的资源量超过该值，则会被强制杀死。</p>
<p>(3) mapred.child.java.opts&nbsp; 配置每个map或者reduce使用的内存的大小，默认是200M</p>
<p>&nbsp;(4) mapreduce.map.cpu.vcores: 每个Map task可使用的最多cpu core数目, 默认值: 1</p>
<p>(5) mapreduce.reduce.cpu.vcores: 每个Reduce task可使用的最多cpu core数目, 默认值: 1</p>
<p>&nbsp;</p>
<p>//shuffle性能优化的关键参数，应在yarn启动之前就配置好</p>
<p>(6)mapreduce.task.io.sort.mb&nbsp;&nbsp; 100&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //shuffle的环形缓冲区大小，默认100m</p>
<p>(7)mapreduce.map.sort.spill.percent&nbsp;&nbsp; 0.8&nbsp;&nbsp;&nbsp; //环形缓冲区溢出的阈值，默认80%</p>
<p>&nbsp;</p>
<p>//应该在yarn启动之前就配置在服务器的配置文件中才能生效</p>
<p>以下配置都在yarn-site.xml配置文件当中配置</p>
<p>(8) yarn.scheduler.minimum-allocation-mb &nbsp; 1024&nbsp;&nbsp; 给应用程序container分配的最小内存</p>
<p>(9) yarn.scheduler.maximum-allocation-mb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 8192&nbsp; 给应用程序container分配的最大内存</p>
<p>以下图片是对container的说明：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190617202002814-166197034.png" alt="" /></p>
<p>&nbsp;</p>
<p>(10) yarn.scheduler.minimum-allocation-vcores&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp;&nbsp;&nbsp;</p>
<p>(11)yarn.scheduler.maximum-allocation-vcores 32</p>
<p>(12)yarn.nodemanager.resource.memory-mb&nbsp;&nbsp; 8192&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>11.2 容错相关参数</h3>
<p>(1) mapreduce.map.maxattempts: 每个Map Task最大重试次数，一旦重试参数超过该值，则认为Map Task运行失败，默认值：4。</p>
<p>(2) mapreduce.reduce.maxattempts: 每个Reduce Task最大重试次数，一旦重试参数超过该值，则认为Map Task运行失败，默认值：4。</p>
<p>(3) mapreduce.job.maxtaskfailures.per.tracker: 当失败的Map Task失败比例超过该值为，整个作业则失败，默认值为0. 如果你的应用程序允许丢弃部分输入数据，则该该值设为一个大于0的值，比如5，表示如果有低于5%的Map Task失败（如果一个Map Task重试次数超过mapreduce.map.maxattempts，则认为这个Map Task失败，其对应的输入数据将不会产生任何结果），整个作业仍认为成功。</p>
<p>&nbsp;(5) mapreduce.task.timeout: Task超时时间，默认值为600000毫秒，经常需要设置的一个参数，该参数表达的意思为：如果一个task在一定时间内没有任何进入，即不会读取新的数据，也没有输出数据，则认为该task处于block状态，可能是卡住了，也许永远会卡主，为了防止因为用户程序永远block住不退出，则强制设置了一个该超时时间（单位毫秒）。如果你的程序对每条输入数据的处理时间过长（比如会访问数据库，通过网络拉取数据等），建议将该参数调大，该参数过小常出现的错误提示是&ldquo;AttemptID:attempt_14267829456721_123456_m_000224_0 Timed out after 300 secsContainer killed by the ApplicationMaster.&rdquo;。</p>
<h3>11.3 本地运行mapreduce 作业</h3>
<p>设置以下几个参数:</p>
<p>mapreduce.framework.name=local</p>
<p>mapreduce.jobtracker.address=local</p>
<p>fs.defaultFS=local</p>
<h3>11.4 效率和稳定性相关参数</h3>
<p>(1) mapreduce.map.speculative: 是否为Map Task打开推测执行机制，默认为true，如果为true，如果Map执行时间比较长，那么集群就会推测这个Map已经卡住了，会重新启动同样的Map进行并行的执行，哪个先执行完了，就采取哪个的结果来作为最终结果，一般直接关闭推测执行</p>
<p>(2) mapreduce.reduce.speculative: 是否为Reduce Task打开推测执行机制，默认为true，如果reduce执行时间比较长，那么集群就会推测这个reduce已经卡住了，会重新启动同样的reduce进行并行的执行，哪个先执行完了，就采取哪个的结果来作为最终结果，一般直接关闭推测执行</p>
<p>&nbsp;(3) mapreduce.input.fileinputformat.split.minsize: FileInputFormat做切片时的最小切片大小，默认为0</p>
<p><span style="text-decoration: line-through;">(4)mapreduce.input.fileinputformat.split.maxsize:&nbsp; FileInputFormat</span><span style="text-decoration: line-through;">做切片时的最大切片大小（已过时的配置，2.7.5</span><span style="text-decoration: line-through;">当中直接把这个配置写死了，写成了Integer.maxValue</span><span style="text-decoration: line-through;">的值）</span></p>
<p>(切片的默认大小就等于blocksize，即 134217728)</p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">==================================================================================</span></p>
<p><br />mapreduce的参数优化：<br />使用的是虚拟内核的概念，实体机的一个cpu核数，可能虚拟出来好多个虚拟内核<br />mapreduce.map.cpu.vcores: 每个Map task可使用的最多cpu core数目, 默认值: 1<br />mapreduce.reduce.cpu.vcores: 每个Reduce task可使用的最多cpu core数目, 默认值: 1</p>
<p><br />环形缓冲区的大小  其实就是搞了一个100M内存的数组<br />mapreduce.task.io.sort.mb   100         //shuffle的环形缓冲区大小，默认100m<br />mapreduce.map.sort.spill.percent   0.8    //环形缓冲区溢出的阈值，默认80%</p>
<p>yarn的资源调度配置参数<br />(8) yarn.scheduler.minimum-allocation-mb	  1024  每个container最小的内存<br />(9) yarn.scheduler.maximum-allocation-mb	  8192	每个container最大的内幕才能</p>
<p>(10) yarn.scheduler.minimum-allocation-vcores	1	 每个container给定的最小的虚拟内核数<br />(11)yarn.scheduler.maximum-allocation-vcores	32    每个container给定的最大的虚拟内核数<br />yarn.nodemanager.resource.memory-mb   8192   每个nodemanager分配的最大内存是多少</p>
<p>&nbsp;</p>
<p>容错相关的参数<br />) mapreduce.job.maxtaskfailures.per.tracker: 当失败的Map Task失败比例超过该值为，整个作业则失败，默认值为0. <br />如果你的应用程序允许丢弃部分输入数据，则该该值设为一个大于0的值，比如5，<br />表示如果有低于5%的Map Task失败（如果一个Map Task重试次数超过mapreduce.map.maxattempts，<br />则认为这个Map Task失败，其对应的输入数据将不会产生任何结果），整个作业仍认为成功。<br />默认值是0，表示maptask不允许任何的数据处理失败</p>
<p><br />效率和稳定性相关的参数：<br />mapreduce.map.speculative:  map端的推测执行  如果一个maptask很长时间没有运行完成，集群可能会认为这个maptask由于某些原因卡住了<br />					        集群会启动同样的一个maptaks去执行相同的任务，哪个maptask先执行完成就以哪个maptask的结果为准，杀死另外一个没有执行完的maptask<br />							推测执行会造成集群的资源更加紧张。一般都直接关闭推测执行</p>
<p>mapreduce.reduce.speculative：  reduce端的推测执行  一般直接关闭reduce端的推测执行<br /> </p>
<p>切片的最大值和最小值的调整：可以调整我们的切片文件的大小，默认的切片文件128M      </p>]]></description></item><item><title>第3节 mapreduce高级：10、11、分组求取topN</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/17/11041953.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 17 Jun 2019 12:13:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/17/11041953.html</guid><description><![CDATA[<p>只要修改OrderReducer.java的reduce方法，修改为：</p>
<pre>int i = 0;<br />for(NullWritable nullWritable:values){<br />    if(i&gt;=2) break;<br />    context.write(key,NullWritable.get());<br />    i++;<br />}<br /><br /><br /></pre>]]></description></item><item><title>第3节 mapreduce高级：8、9、自定义分区实现分组求取top1</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/17/11041136.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 17 Jun 2019 09:40:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/17/11041136.html</guid><description><![CDATA[<h2>自定义GroupingComparator求取topN</h2>
<p>GroupingComparator是mapreduce当中reduce端的一个功能组件，主要的作用是决定哪些数据作为一组，调用一次reduce的逻辑，默认是每个不同的key，作为多个不同的组，每个组调用一次reduce逻辑，我们可以自定义GroupingComparator实现不同的key作为同一个组，调用一次reduce逻辑</p>
<h3>3.1 需求</h3>
<p>有如下订单数据</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="189">
<p>订单id</p>
</td>
<td valign="top" width="189">
<p>商品id</p>
</td>
<td valign="top" width="189">
<p>成交金额</p>
</td>
</tr>
<tr>
<td valign="top" width="189">
<p>Order_0000001</p>
</td>
<td valign="top" width="189">
<p>Pdt_01</p>
</td>
<td valign="top" width="189">
<p>222.8</p>
</td>
</tr>
<tr>
<td valign="top" width="189">
<p>Order_0000001</p>
</td>
<td valign="top" width="189">
<p>Pdt_05</p>
</td>
<td valign="top" width="189">
<p>25.8</p>
</td>
</tr>
<tr>
<td valign="top" width="189">
<p>Order_0000002</p>
</td>
<td valign="top" width="189">
<p>Pdt_03</p>
</td>
<td valign="top" width="189">
<p>522.8</p>
</td>
</tr>
<tr>
<td valign="top" width="189">
<p>Order_0000002</p>
</td>
<td valign="top" width="189">
<p>Pdt_04</p>
</td>
<td valign="top" width="189">
<p>122.4</p>
</td>
</tr>
<tr>
<td valign="top" width="189">
<p>Order_0000002</p>
</td>
<td valign="top" width="189">
<p>Pdt_05</p>
</td>
<td valign="top" width="189">
<p>722.4</p>
</td>
</tr>
<tr>
<td valign="top" width="189">
<p>Order_0000003</p>
</td>
<td valign="top" width="189">
<p>Pdt_01</p>
</td>
<td valign="top" width="189">
<p>222.8</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>现在需要求出每一个订单中成交金额最大的一笔交易</p>
<h3>3.2 分析</h3>
<p>1、利用&ldquo;订单id和成交金额&rdquo;作为key，可以将map阶段读取到的所有订单数据按照id分区，按照金额排序，发送到reduce</p>
<p>2、在reduce端利用groupingcomparator将订单id相同的kv聚合成组，然后取第一个即是最大值</p>
<p>&nbsp;</p>
<p>分组求取topN：<br />第一个问题:订单id相同的数据，一定要发送到同一个reduce里面去</p>
<p>&nbsp;分区与分组的区别：</p>
<p><em id="__mceDel">分区：决定了我们的数据去到哪一个reduce里面去<br />分组：决定了我们一个reduce内部的数据，哪些作为一个集合  相同key的数据对应的value形成一个集合</em></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190617192124725-729407193.png" alt="" width="4151" height="1314" /></p>
<p>&nbsp;</p>
<p>详见代码</p>]]></description></item><item><title>第3节 mapreduce高级：7、自定义outputformat实现输出到不同的文件夹下面</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/17/11041026.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 17 Jun 2019 09:28:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/17/11041026.html</guid><description><![CDATA[<h3>2.1 需求</h3>
<p>现在有一些订单的评论数据，需求，将订单的好评与差评进行区分开来，将最终的数据分开到不同的文件夹下面去，数据内容参见资料文件夹，其中数据第九个字段表示好评，中评，差评。0：好评，1：中评，2：差评</p>
<p>数据内容类似如下：</p>
<p>1 2018-03-15 22:29:06 2018-03-15 22:29:06 我想再来一个 \N 1 3 hello 来就来吧 0 2018-03-14 22:29:03<br />2	2018-03-15 22:42:08	2018-03-15 22:42:08	好的	\N	1	1	添加一个吧	说走咱就走啊	0	2018-03-14 22:42:04</p>
<h3>2.2 分析</h3>
<p>程序的关键点是要在一个mapreduce程序中根据数据的不同输出两类结果到不同目录，这类灵活的输出需求可以通过自定义outputformat来实现</p>
<h3>2.3 实现</h3>
<p>实现要点：</p>
<p class="1">1、 在mapreduce中访问外部资源</p>
<p class="1">2、自定义outputformat，改写其中的recordwriter，改写具体输出数据的方法write()</p>
<p class="1"><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190617162853807-750132497.png" alt="" /></p>
<p>&nbsp;</p>
<p class="1">&nbsp;详见代码</p>
<pre></pre>]]></description></item><item><title>递归删除N天前的文件夹及子文件夹下的特定文件</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/17/11037991.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 17 Jun 2019 01:37:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/17/11037991.html</guid><description><![CDATA[<p>@echo off<br />rem 设置被删除文件夹路径<br />set SrcDir=D:\tmp\test\<br />rem 设置文件保存天数<br />set Days=2<br />rem /p指定搜索文件的路径  /s 在子目录中搜索  /m 指定格式，默认为*.*   </p>
<p>rem /d 选择文件，其上一次修改日期大于等于(+)、或者小于等于(-) 用 "yyyy/MM/dd" 格式指定的日期; 或选择文件，其上一次修改日期大于或等于 (+)当前日期加 "dd" 天，或者小于或等于 (-) 当前日期减 "dd" 天。有效的 "dd" 天数可以是0 - 32768 范围内的任何数字。如果没有指定，"+" 被当作默认符号。</p>
<p>rem /c 指定执行的命令   <br />rem del命令（删除文件，不是文件夹） /p 删除 每一个文件前提示确认 /f 强制删除  /q 不询问是否删除   /a 按指定属性删除 /s 从所有子目录删除指定文件</p>
<p>forfiles /p %SrcDir% /s /m *.txt /d -%Days% /c "cmd /c del /f /q /a @path"<br />rem pause</p>
<p>&nbsp;</p>]]></description></item><item><title>第3节 mapreduce高级：5、6、通过inputformat实现小文件合并成为sequenceFile格式</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/16/11031189.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 16 Jun 2019 04:39:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/16/11031189.html</guid><description><![CDATA[<h3>1.1 需求</h3>
<p>无论hdfs还是mapreduce，对于小文件都有损效率，实践中，又难免面临处理大量小文件的场景，此时，就需要有相应解决方案&nbsp;</p>
<h3>1.2 分析</h3>
<p>小文件的优化无非以下几种方式：</p>
<p class="1">1、&nbsp; 在数据采集的时候，就将小文件或小批数据合成大文件再上传HDFS；</p>
<p class="1">2、&nbsp; 在业务处理之前，在HDFS上使用mapreduce程序对小文件进行合并。</p>
<p>　　自定义inputformat，将hdfs上面已经存在的多个小文件合并成一个sequenceFile，<br />　　sequenceFile也是一种文件格式：里面装的内容就是一个个的小文件的内容的字节数组；</p>
<p class="1">3、&nbsp; 在mapreduce处理时，可采用combineInputFormat提高效率。</p>
<h3>1.3 实现</h3>
<p>本节实现的是上述第二种方式</p>
<p>程序的核心机制：</p>
<p>自定义一个InputFormat</p>
<p>改写RecordReader，实现一次读取一个完整文件封装为KV</p>
<p>在输出时使用SequenceFileOutPutFormat输出合并文件</p>
<p>&nbsp;</p>
<p>自定义inputformat实现文件一次性全部读取到BytesWritable里面去</p>
<p><em id="__mceDel">第一步：获取到文件的切片<br />第二步：通过fileSystem，打开文件的输入流<br />第三步：通过工具类将我们的输入流拷贝到字节数组当中去<br />第四步：将我们字节数组的内容全部封装到BytesWritable里面去</em></p>
<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190616121539039-411822520.png" alt="" width="1317" height="878" /></p>
<p>&nbsp;详见代码</p>]]></description></item><item><title>第3节 mapreduce高级：4、倒排索引的建立</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/16/11031111.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 16 Jun 2019 04:08:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/16/11031111.html</guid><description><![CDATA[<h2>倒排索引建立</h2>
<h3>需求分析</h3>
<p>需求：有大量的文本（文档、网页），需要建立搜索索引</p>
<p>最终实现的结果就是哪个单词在哪个文章当中出现了多少次</p>
<p>&nbsp;</p>
<p>思路分析：</p>
<p>首选将文档的内容全部读取出来，加上文档的名字作为key，文档的value为1，组织成这样的一种形式的数据</p>
<p>map端数据输出</p>
<p>hello-a.txt 1<br />tom-a.txt 1<br />hello-a.txt 1<br />jerry-a.txt 1</p>
<p>到reduce阶段<br />hello-a.txt &lt;1,1&gt;</p>
<p>reduce端数据输出</p>
<p>hello-a.txt 2</p>
<p>tom-a.txt 1</p>
<p>jerry-a.txt 1</p>
<p>&nbsp;</p>
<p>&nbsp;详见代码</p>]]></description></item><item><title>第3节 mapreduce高级：2、3、课程大纲&amp;共同好友求取步骤一、二</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/15/11029304.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 15 Jun 2019 15:26:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/15/11029304.html</guid><description><![CDATA[<p>第五天课程大纲：<br />1、社交粉丝的数据分析：求共同好友<br />2、倒排索引的建立<br />3、自定义inputFormat合并小文件 <br />4、自定义outputformat<br />5、分组求topN<br />6、MapReduce的其他补充  了解<br />7、mapreduce的参数优化  理解<br />8、yarn的资源调度管理</p>
<h2>例子1：社交粉丝数据分析</h2>
<h3>逻辑分析</h3>
<p>以下是qq的好友列表数据，冒号前是一个用户，冒号后是该用户的所有好友（数据中的好友关系是单向的，<span style="color: #ff0000;">即A的好友列表中有B，但B可能把A删除了</span>）</p>
<p>A:B,C,D,F,E,O</p>
<p>B:A,C,E,K</p>
<p>C:F,A,D,I</p>
<p>D:A,E,F,L</p>
<p>E:B,C,D,M,L</p>
<p>F:A,B,C,D,E,O,M</p>
<p>G:A,C,D,E,F</p>
<p>H:A,C,D,E,O</p>
<p>I:A,O</p>
<p>J:B,O</p>
<p>K:A,C,D</p>
<p>L:D,E,F</p>
<p>M:E,F,G</p>
<p>O:A,H,I,J</p>
<p>求出哪些人两两之间有共同好友，及他俩的共同好友都有谁？</p>
<p>教案上的解题思路（<span style="color: #ff0000;">未使用该思路</span>）：</p>
<table style="width: 568px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="568">
<p>第一步&nbsp;</p>
<p>map</p>
<p>读一行&nbsp;&nbsp; A:B,C,D,F,E,O</p>
<p>输出&nbsp;&nbsp;&nbsp; &lt;B,A&gt;&lt;C,A&gt;&lt;D,A&gt;&lt;F,A&gt;&lt;E,A&gt;&lt;O,A&gt;</p>
<p>在读一行&nbsp;&nbsp; B:A,C,E,K</p>
<p>输出&nbsp;&nbsp; &lt;A,B&gt;&lt;C,B&gt;&lt;E,B&gt;&lt;K,B&gt;</p>
<p>&nbsp;</p>
<p>REDUCE</p>
<p>拿到的数据比如&lt;C,A&gt;&lt;C,B&gt;&lt;C,E&gt;&lt;C,F&gt;&lt;C,G&gt;......</p>
<p>输出：&nbsp;</p>
<p>&lt;A-B,C&gt;</p>
<p>&lt;A-E,C&gt;</p>
<p>&lt;A-F,C&gt;</p>
<p>&lt;A-G,C&gt;</p>
<p>&lt;B-E,C&gt;</p>
<p>&lt;B-F,C&gt;.....</p>
<p>&nbsp;</p>
<p>第二步</p>
<p>map</p>
<p>读入一行&lt;A-B,C&gt;</p>
<p>直接输出&lt;A-B,C&gt;</p>
<p>&nbsp;</p>
<p>reduce</p>
<p>读入数据&nbsp; &lt;A-B,C&gt;&lt;A-B,F&gt;&lt;A-B,G&gt;.......</p>
<p>输出： A-B&nbsp; C,F,G,.....</p>






</td>






</tr>






</tbody>






</table>
<p><span style="color: #ff0000;">实际思路：</span></p>
<p><span style="color: #000000;">可以使用多个mapreduce来实现</span><br /><span style="color: #000000;">B是哪些用户的好友？？？</span><br /><span style="color: #000000;">B 出现在这么多人的好友列表里面  ：A-E-F-J</span><br /><span style="color: #000000;">那么就可以说  A-E   B   A-F   B   A-J   B  E-F  B  E-J  B    F-J  B</span></p>
<p>问题：如何求某一个好友，出现在哪些用户列表里面<br />B-A  C-A  D-A   F-A   E-A  O-A <br />B-E  C-E  D-E   M-E   L-E</p>
<p>如果以B作为key2   以用户 作为Value2<br />相同B的数据都会到同一个reduce里面形成一个集合   B  &lt;A,E&gt;<br />然后在reduce当中将我们的数据转换成这样的一种形式  key3: A-E-F-J   value3:B</p>
<p><br />以冒号切开，下标为1的字段再用逗号切开，然后循环遍历</p>
<p>用户列表 			好友<br />F-D-O-I-H-B-K-G-C-	A<br />E-A-J-F-	B<br />K-A-B-E-F-G-H-	C<br />G-K-C-A-E-L-F-H-	D<br />G-F-M-B-H-A-L-D-	E<br />M-D-L-A-C-G-	F<br />M-	G<br />O-	H<br />C-O-	I<br />O-	J<br />B-	K<br />E-D-	L<br />F-E-	M<br />J-I-H-A-F-	O</p>
<p>&nbsp;</p>
<p><br />E-A-J-F-	B      			E  A  J  F   对切割之后的数组进行排序  A  E   F  J<br />G-K-C-A-E-L-F-H-	D    	G  K  C  A  E  L F  H    对切割之后的数组进行排序    A  C  E  F  G   H  L </p>
<p><br />首先对这些字符串进行切割，按照 -进行切开成为一个数组，然后再对数组进行排序，然后双层for循环遍历往外发送数据给reduce</p>
<p><br />key2  value2 <br />A-E   B  <br />  <br />E-J   B-<br />E-F   B<br />A-J   B-<br />A-F   B-<br />J-F   B-</p>
<p>G-K   D-<br />G-C   D-<br />G-A   D-<br />G-E   D-<br />G-L   D-<br />G-F   D-<br />G-H   D-</p>
<p>A-E   D </p>
<p>到reduce阶段形成这种形式<br />A-E   &lt;B,D&gt;<br />可以求出  A-E  有共同好友 B和 D</p>
<p>&nbsp;</p>
<p>详见代码</p>]]></description></item><item><title>第2节 mapreduce深入学习：16、17、map端的join算法的实现</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/15/11029115.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 15 Jun 2019 14:27:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/15/11029115.html</guid><description><![CDATA[<p>map端的join算法，适用于小表join大表的时候，一次性把小表的数据全部装载到内存当中来：</p>
<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190615221257876-851658824.png" alt="" width="1199" height="799" /></p>
<p>&nbsp;详见代码</p>]]></description></item><item><title>第2节 mapreduce深入学习：15、reduce端的join算法的实现</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/15/11028591.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 15 Jun 2019 11:27:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/15/11028591.html</guid><description><![CDATA[<p>reduce端的join算法：</p>
<p>例子：</p>
<p>商品表数据 product：&nbsp;<br />pid<br />p0001,小米5,1000,2000<br />p0002,锤子T1,1000,3000</p>
<p>订单表数据&nbsp;order：&nbsp;<br />			  　　　　　　&nbsp; &nbsp; &nbsp;pid<br />1001,20150710,p0001,2<br />1002,20150710,p0002,3<br />1002,20150710,p0003,3</p>
<p>mapReduce可以实现sql语句的功能：select 。。。。。。from   product p  left join   order  o  on  p.pid = o.pid</p>
<p>&nbsp;</p>
<p>思路：将关联的条件作为<span lang="EN-US">map输出的<span lang="EN-US">key。</span></span></p>
<p>&nbsp;</p>
<p>缺点：这种方式中，join的操作是在reduce阶段完成，reduce端的处理压力太大，map节点的运算负载则很低，资源利用率不高，且在reduce阶段极易产生数据倾斜。</p>
<p>替代解决方案： map端join实现方式。</p>
<p>&nbsp;</p>
<p>&nbsp;详见代码</p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 mapreduce深入学习：14、mapreduce数据压缩-使用snappy进行压缩</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/15/11028335.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 15 Jun 2019 09:54:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/15/11028335.html</guid><description><![CDATA[<p>第2节 mapreduce深入学习：14、mapreduce数据压缩-使用snappy进行压缩</p>
<p>文件压缩有两大好处，节约磁盘空间，加速数据在网络和磁盘上的传输。</p>
<h4><span style="font-family: 宋体; mso-ascii-font-family: 'Calibri Light'; mso-ascii-theme-font: major-latin; mso-fareast-font-family: 宋体; mso-fareast-theme-font: major-fareast; mso-hansi-font-family: 'Calibri Light'; mso-hansi-theme-font: major-latin;">方式一：在代码中进行设置压缩</span></h4>
<p><span style="font-family: 宋体; mso-ascii-font-family: 'Calibri Light'; mso-ascii-theme-font: major-latin; mso-fareast-font-family: 宋体; mso-fareast-theme-font: major-fareast; mso-hansi-font-family: 'Calibri Light'; mso-hansi-theme-font: major-latin;">代码：</span></p>
<pre>FlowMain：</pre>
<pre><span style="color: #000080; font-weight: bold;">public static void </span>main(String[] args) <span style="color: #000080; font-weight: bold;">throws </span>Exception {<br /><span style="color: #808080; font-style: italic;">//        设置我们的map阶段的压缩<br /></span>Configuration configuration = <span style="color: #000080; font-weight: bold;">new </span>Configuration();<br />        configuration.set(<span style="color: #008000; font-weight: bold;">"mapreduce.map.output.compress"</span>,<span style="color: #008000; font-weight: bold;">"true"</span>);<br />        configuration.set(<span style="color: #008000; font-weight: bold;">"mapreduce.map.output.compress.codec"</span>,<span style="color: #008000; font-weight: bold;">"org.apache.hadoop.io.compress.SnappyCodec"</span>);<br /><br /><span style="color: #808080; font-style: italic;">//        设置我们的reduce阶段的压缩<br /></span>configuration.set(<span style="color: #008000; font-weight: bold;">"mapreduce.output.fileoutputformat.compress"</span>,<span style="color: #008000; font-weight: bold;">"true"</span>);<br />        configuration.set(<span style="color: #008000; font-weight: bold;">"mapreduce.output.fileoutputformat.compress.type"</span>,<span style="color: #008000; font-weight: bold;">"RECORD"</span>);<br />        configuration.set(<span style="color: #008000; font-weight: bold;">"mapreduce.output.fileoutputformat.compress.codec"</span>,<span style="color: #008000; font-weight: bold;">"org.apache.hadoop.io.compress.SnappyCodec"</span>);<br />        <span style="color: #000080; font-weight: bold;">int </span>run = ToolRunner.<span style="font-style: italic;">run</span>(configuration, <span style="color: #000080; font-weight: bold;">new </span>FlowMain(), args);<br />        System.<span style="font-style: italic;">exit</span>(run);<br />    }</pre>
<h4><span style="font-family: 宋体; mso-ascii-font-family: 'Calibri Light'; mso-ascii-theme-font: major-latin; mso-fareast-font-family: 宋体; mso-fareast-theme-font: major-fareast; mso-hansi-font-family: 'Calibri Light'; mso-hansi-theme-font: major-latin;">方式二：配置全局的</span><span lang="EN-US">MapReduce</span><span style="font-family: 宋体; mso-ascii-font-family: 'Calibri Light'; mso-ascii-theme-font: major-latin; mso-fareast-font-family: 宋体; mso-fareast-theme-font: major-fareast; mso-hansi-font-family: 'Calibri Light'; mso-hansi-theme-font: major-latin;">压缩</span></h4>
<p class="MsoNormal"><span style="font-family: 宋体; mso-ascii-font-family: Calibri; mso-ascii-theme-font: minor-latin; mso-fareast-font-family: 宋体; mso-fareast-theme-font: minor-fareast; mso-hansi-font-family: Calibri; mso-hansi-theme-font: minor-latin;">我们可以修改</span><span lang="EN-US">mapred-site.xml</span><span style="font-family: 宋体; mso-ascii-font-family: Calibri; mso-ascii-theme-font: minor-latin; mso-fareast-font-family: 宋体; mso-fareast-theme-font: minor-fareast; mso-hansi-font-family: Calibri; mso-hansi-theme-font: minor-latin;">配置文件，然后重启集群，以便对所有的</span><span lang="EN-US">mapreduce</span><span style="font-family: 宋体; mso-ascii-font-family: Calibri; mso-ascii-theme-font: minor-latin; mso-fareast-font-family: 宋体; mso-fareast-theme-font: minor-fareast; mso-hansi-font-family: Calibri; mso-hansi-theme-font: minor-latin;">任务进行压缩（<span style="color: #ff0000;">一般不这么配置</span>）</span></p>
<p class="MsoNormal"><span lang="EN-US">map</span><span style="font-family: 宋体; mso-ascii-font-family: Calibri; mso-ascii-theme-font: minor-latin; mso-fareast-font-family: 宋体; mso-fareast-theme-font: minor-fareast; mso-hansi-font-family: Calibri; mso-hansi-theme-font: minor-latin;">输出数据进行压缩</span></p>
<p class="code"><span lang="EN-US">&lt;property&gt;</span></p>
<p class="code"><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.map.output.compress&lt;/name&gt;</span></p>
<p class="code"><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</span></p>
<p class="code"><span lang="EN-US">&lt;/property&gt;</span></p>
<p class="code"><span lang="EN-US">&lt;property&gt;</span></p>
<p class="code"><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;mapreduce.map.output.compress.codec&lt;/name&gt;</span></p>
<p class="code"><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;org.apache.hadoop.io.compress.SnappyCodec&lt;/value&gt;</span></p>
<p class="code"><span lang="EN-US">&lt;/property&gt;</span></p>
<p class="MsoNormal"><span lang="EN-US">reduce</span><span style="font-family: 宋体; mso-ascii-font-family: Calibri; mso-ascii-theme-font: minor-latin; mso-fareast-font-family: 宋体; mso-fareast-theme-font: minor-fareast; mso-hansi-font-family: Calibri; mso-hansi-theme-font: minor-latin;">输出数据进行压缩</span></p>
<p class="code" style="margin-left: 42.0pt; text-indent: -42.0pt; mso-char-indent-count: -3.5;"><span lang="EN-US">&lt;property&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p class="code" style="margin-left: 42.0pt; text-indent: -42.0pt; mso-char-indent-count: -3.5;"><span lang="EN-US">　　&lt;name&gt;mapreduce.output.fileoutputformat.compress&lt;/name&gt;</span></p>
<p class="code"><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;true&lt;/value&gt;</span></p>
<p class="code"><span lang="EN-US">&lt;/property&gt;</span></p>
<p class="code" style="margin-left: 48.0pt; text-indent: -48.0pt; mso-char-indent-count: -4.0;"><span lang="EN-US">&lt;property&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
<p class="code" style="margin-left: 48.0pt; text-indent: -48.0pt; mso-char-indent-count: -4.0;"><span lang="EN-US">　　&lt;name&gt;mapreduce.output.fileoutputformat.compress.type&lt;/name&gt;</span></p>
<p class="code"><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;RECORD&lt;/value&gt;</span></p>
<p class="code"><span lang="EN-US">&lt;/property&gt;</span></p>
<p class="code" style="margin-left: 42.0pt; text-indent: -42.0pt; mso-char-indent-count: -3.5;"><span lang="EN-US">&nbsp;&lt;property&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p class="code" style="margin-left: 42.0pt; text-indent: -42.0pt; mso-char-indent-count: -3.5;"><span lang="EN-US">　　&lt;name&gt;mapreduce.output.fileoutputformat.compress.codec&lt;/name&gt;</span></p>
<p>&nbsp;</p>
<p class="code"><span lang="EN-US">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;org.apache.hadoop.io.compress.SnappyCodec&lt;/value&gt; </span></p>
<p class="code"><span lang="EN-US">&lt;/property&gt;</span></p>
<h4>&nbsp;</h4>
<h4>运行结果：生成如下的压缩文件。</h4>
<h4>注意：我们不方便人工打开这些压缩文件，但是程序会自动按照其后缀名解压缩这些文件，然后传递给下一步使用。</h4>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190615175555178-1137545769.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 mapreduce深入学习：13、mapreduce的整个运行过程（多看几遍）</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/15/11028195.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 15 Jun 2019 09:19:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/15/11028195.html</guid><description><![CDATA[<p>两个问题：</p>
<p>1、mapTaks的个数怎么确认：与block块相关<br />2、reducetask的个数怎么确认：没法确认，需要反复的设置尝试，找到最优值。&nbsp; 手动进行设置  job.setNumReduceTask(N)</p>
<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190615164835189-269379416.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 mapreduce深入学习：12、reducetask运行机制（多看几遍）</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/15/11028068.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 15 Jun 2019 08:48:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/15/11028068.html</guid><description><![CDATA[<p>ReduceTask的运行的整个过程 背下来<br />1、启动线程到mapTask那里去拷贝数据，拉取属于每一个reducetask自己内部的数据<br />2、数据的合并，拉取过来的数据进行合并，合并的过程，有可能在内存当中，有可能在磁盘当中，有可能在内存和磁盘当中，合并的时候同时要进行分组操作<br />3、调用reduce逻辑<br />4、数据输出</p>
<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190615164633782-364212979.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 mapreduce深入学习：11、maptask运行机制（多看几遍）</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/15/11027981.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 15 Jun 2019 08:27:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/15/11027981.html</guid><description><![CDATA[<p>mapTask运行机制详解以及mapTask的并行度<br />在mapTask当中，一个文件的切片大小使用默认值是128M，就是跟我们一个block块对应大小一样</p>
<p>MapTask运行的整个过程  背下来<br />1、TextInputFormat读取数据<br />2、调用map逻辑，默认是一个切片（就是一个block块）对应一个mapTask<br />3、数据写入到环形缓冲区，默认环形缓冲区的大小是100M，换型缓冲区其实就是一个数组<br />4、数据一直往环形缓冲区当中写，数据在环形缓冲区当中实现分区，排序，规约，分组等<br />5、等到数据写到环形缓冲区的80%的时候，启动溢写线程，将内存当中80M的数据，溢写到磁盘上面去<br />6、等到maptask完成之后，磁盘上面可能存在很多的小文件，这些小文件已经做好了局部排序，分区，规约等步骤，再把这些小文件合并成一个大的文件<br />7、等待reduce阶段来拉取这个文件</p>
<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190615162553256-1418344781.png" alt="" /></p>
<p>mapTask的一些基础设置配置（mapred-site.xml中）：</p>
<p>设置一：设置环型缓冲区的内存值大小（默认设置如下）</p>
<table border="1" cellpadding="0">
<tbody>
<tr>
<td>
<p align="left">mapreduce.task.io.sort.mb</p>
</td>
<td>
<p align="left">100</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>设置二：设置溢写百分比（默认设置如下）</p>
<table border="1" cellpadding="0">
<tbody>
<tr>
<td>
<p align="left">mapreduce.map.sort.spill.percent</p>
</td>
<td>
<p align="left">0.80</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>设置三：设置溢写数据目录（默认设置）</p>
<table border="1" cellpadding="0">
<tbody>
<tr>
<td>
<p align="left">mapreduce.cluster.local.dir</p>
</td>
<td>
<p align="left">${hadoop.tmp.dir}/mapred/local</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>设置四：设置一次最多合并多少个溢写文件（默认设置如下）</p>
<table border="1" cellpadding="0">
<tbody>
<tr>
<td>
<p align="left">mapreduce.task.io.sort.factor</p>
</td>
<td>
<p align="left">10</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>]]></description></item><item><title>第2节 mapreduce深入学习：10、手机号码进行分区</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/15/11026710.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sat, 15 Jun 2019 02:26:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/15/11026710.html</guid><description><![CDATA[<h3>需求三：手机号码分区</h3>
<p>在需求一的基础上，继续完善，将不同的手机号分到不同的数据文件的当中去，需要自定义分区来实现，这里我们自定义来模拟分区，将以下数字开头的手机号进行分开</p>
<p class="code">135 开头数据到一个分区文件</p>
<p class="code">136 开头数据到一个分区文件</p>
<p class="code">137 开头数据到一个分区文件</p>
<p class="code">138 开头数据到一个分区文件</p>
<p class="code">139 开头数据到一个分区文件</p>
<p class="code">其他分区</p>
<p class="code">&nbsp;</p>
<p class="code">注意：</p>
<p class="code">必须到集群上运行，<span style="color: #ff0000;">否则报错：</span></p>
<p><span style="color: #ff0000;">java.lang.Exception: java.io.IOException: Illegal partition for 13726230503 (2)</span><br /><span style="color: #ff0000;">	at org.apache.hadoop.mapred.LocalJobRunner$Job.run(LocalJobRunner.java:406)</span><br /><span style="color: #ff0000;">Caused by: java.io.IOException: Illegal partition for 13726230503 (2)</span></p>
<p>&nbsp;</p>
<p class="code">代码（只列出需求一的基础上修改的部分）：</p>
<pre>FlowMain:</pre>
<pre>TextInputFormat.addInputPath(job,new Path(args[0]));</pre>
<pre>job.setPartitionerClass(FlowPartition.class);</pre>
<pre>job.setNumReduceTasks(6);</pre>
<pre>TextOutputFormat.setOutputPath(job,new Path(args[1]));<br /><br /></pre>
<pre>//    args[0]=/flowCount/in/data_flow.dat<br />//    args[1]=/flowCount/3partition<br />// hadoop jar flowCount_partition.jar cn.itcast.demo3.flowCount.FlowMain  /flowCount/in/data_flow.dat /flowCount/3partition</pre>
<pre></pre>
<pre>FlowPartition:</pre>
<pre>package cn.itcast.demo3.flowCount;<br /><br />import org.apache.hadoop.io.Text;<br />import org.apache.hadoop.mapreduce.Partitioner;<br /><br />public class FlowPartition extends Partitioner&lt;Text,FlowBean&gt;{<br /><br />    @Override<br />    public int getPartition(Text text, FlowBean flowBean, int i) {<br />        String num = text.toString();<br />        if(num != null ){<br />            if(num.startsWith("135"))<br />                return 0;<br />            else if(num.startsWith("136"))<br />                return 1;<br />            else if(num.startsWith("137"))<br />                return 2;<br />            else if(num.startsWith("138"))<br />                return 3;<br />            else if(num.startsWith("139"))<br />                return 4;<br />            else<br />                return 5;<br />        }<br />        return 5;<br />    }<br />}</pre>
<pre><br /><br /><br /><br /></pre>
<p class="code">&nbsp;</p>]]></description></item><item><title>第2节 mapreduce深入学习：9、手机上行流量排序</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/14/11025864.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 14 Jun 2019 15:08:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/14/11025864.html</guid><description><![CDATA[<p>&nbsp;</p>
<p>还是上次那个例子，需求二：上行流量倒序排序（递减排序）</p>
<p>分析，以需求一的输出数据作为排序的输入数据，自定义FlowBean,以FlowBean为map输出的key，以手机号作为Map输出的value，因为MapReduce程序会对Map阶段输出的key进行排序。</p>
<pre>&nbsp;详见代码<br /><br /><br />注意：如果使用FlowBean作为Map阶段输出的key，则必须实现WritableComparable接口，<span style="color: #ff0000;">否则报错:</span></pre>
<p><span style="color: #ff0000;">java.lang.Exception: java.lang.ClassCastException: class cn.itcast.demo3.flowSort.FlowBean</span><br /><span style="color: #ff0000;">	at org.apache.hadoop.mapred.LocalJobRunner$Job.run(LocalJobRunner.java:406)</span><br /><span style="color: #ff0000;">Caused by: java.lang.ClassCastException: class cn.itcast.demo3.flowSort.FlowBean</span><br /><span style="color: #ff0000;">	at java.lang.Class.asSubclass(Class.java:3404)</span></p>]]></description></item><item><title>第2节 mapreduce深入学习：8、手机流量汇总求和</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/14/11025858.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 14 Jun 2019 15:05:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/14/11025858.html</guid><description><![CDATA[<p>第2节 mapreduce深入学习：8、手机流量汇总求和</p>
<p>例子：MapReduce综合练习之上网流量统计。</p>
<p>数据格式参见资料夹</p>
<h3>需求一：统计求和</h3>
<p>统计每个手机号的上行流量总和，下行流量总和，上行总流量之和，下行总流量之和</p>
<p>分析：以手机号码作为key值，上行流量，下行流量，上行总流量，下行总流量四个字段作为value值，然后以这个key，和value作为map阶段的输出，reduce阶段的输入。</p>
<p>data_flow.dat内容类似下面的：</p>
<p>1363157985066 13726230503 00-FD-07-A4-72-B8:CMCC 120.196.100.82 i02.c.aliimg.com 游戏娱乐 24 27 2481 24681 200</p>
<p>字段说明：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190614230146266-1458563515.png" alt="" /></p>
<p>&nbsp;</p>
<p>注意：将相同手机号的数据放到一起，以手机号作为key2！</p>
<p>&nbsp;</p>
<p>&nbsp;详见代码</p>
<p>&nbsp;</p>
<p>&nbsp;运行结果类似于：</p>
<p>13480253104 上行流量=3, 下行流量=3, 上行总流量=180, 下行总流量=180</p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 mapreduce深入学习：7、MapReduce的规约过程combiner</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/14/11025441.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 14 Jun 2019 13:01:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/14/11025441.html</guid><description><![CDATA[<p>第2节 mapreduce深入学习：7、MapReduce的规约过程combiner</p>
<p>每一个 map 都可能会产生大量的本地输出，Combiner 的作用就是对 map 端的输出先做一次合并，以减少在 map 和 reduce 节点之间的数据传输量，以提高网络IO 性能，是 MapReduce 的一种优化手段之一。</p>
<p>&nbsp;&nbsp; combiner 是 MR 程序中 Mapper 和 Reducer 之外的一种组件</p>
<p>&nbsp;&nbsp; combiner 组件的父类就是 Reducer</p>
<p>&nbsp;&nbsp; combiner 和 reducer 的区别在于运行的位置：</p>
<p>Combiner 是在每一个 maptask 所在的节点运行 Reducer 是接收全局所有 Mapper 的输出结果；</p>
<p>&nbsp;&nbsp; combiner 的意义就是对每一个 maptask 的输出进行局部汇总，以减小网络传输量</p>
<p>&nbsp;&nbsp; 具体实现步骤：</p>
<p>1、自定义一个 combiner 继承 Reducer，重写 reduce 方法</p>
<p>2、在 job 中设置：&nbsp; job.setCombinerClass(CustomCombiner.class)</p>
<p>&nbsp;</p>
<p>combiner 能够应用的前提是不能影响最终的业务逻辑，而且，combiner 的输出 kv 应该跟 reducer 的输入 kv 类型要对应起来。</p>
<p>&nbsp;</p>
<p>代码：</p>
<pre>SortMain：<br />添加如下代码</pre>
<pre>//设置第五步：规约<br />job.setCombinerClass(SortCombiner.class);<br /><br /></pre>
<pre>SortCombiner：</pre>
<pre>package cn.itcast.demo2.sort;<br /><br />import org.apache.hadoop.io.Text;<br />import org.apache.hadoop.mapreduce.Reducer;<br /><br />import java.io.IOException;<br />/**<br /> * 注意自定义combiner的话，输入类型和输出类型，都是key2  value2<br /> * 作用：减少输出到reduce的key2的个数<br /> */<br />public class SortCombiner extends Reducer&lt;PairSort,Text,PairSort,Text&gt; {<br />    @Override<br />    protected void reduce(PairSort key, Iterable&lt;Text&gt; values, Context context) throws IOException, InterruptedException {<br />        //这里面写规约的逻辑<br />        for (Text value:values){<br />            context.write(key,value);<br />        }<br />    }<br />}</pre>]]></description></item><item><title>第2节 mapreduce深入学习：6、MapReduce当中的计数器</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/14/11025316.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 14 Jun 2019 12:19:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/14/11025316.html</guid><description><![CDATA[<p>第2节 mapreduce深入学习：6、 MapReduce当中的计数器</p>
<p>计数器是收集作业统计信息的有效手段之一，用于质量控制或应用级统计。计数器还可辅助诊断系统故障。如果需要将日志信息传输到map 或reduce 任务， 更好的方法通常是看能否用一个计数器值来记录某一特定事件的发生。对于大型分布式作业而言，使用计数器更为方便。除了因为获取计数器值比输出日志更方便，还有根据计数器值统计特定事件的发生次数要比分析一堆日志文件容易得多。</p>
<p>hadoop内置计数器列表</p>
<table style="width: 633px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="217">
<p>MapReduce任务计数器</p>
</td>
<td valign="top" width="416">
<p>org.apache.hadoop.mapreduce.TaskCounter</p>
</td>
</tr>
<tr>
<td valign="top" width="217">
<p>文件系统计数器</p>
</td>
<td valign="top" width="416">
<p>org.apache.hadoop.mapreduce.FileSystemCounter</p>
</td>
</tr>
<tr>
<td valign="top" width="217">
<p>FileInputFormat计数器</p>
</td>
<td valign="top" width="416">
<p>org.apache.hadoop.mapreduce.lib.input.FileInputFormatCounter</p>
</td>
</tr>
<tr>
<td valign="top" width="217">
<p>FileOutputFormat计数器</p>
</td>
<td valign="top" width="416">
<p>org.apache.hadoop.mapreduce.lib.output.FileOutputFormatCounter</p>
</td>
</tr>
<tr>
<td valign="top" width="217">
<p>作业计数器</p>
</td>
<td valign="top" width="416">
<p>org.apache.hadoop.mapreduce.JobCounter</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>每次mapreduce执行完成之后，我们都会看到一些日志记录出来，其中最重要的一些日志记录如下截图：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190614205904747-1165359981.png" alt="" /></p>
<p>&nbsp;</p>
<p>所有的这些都是MapReduce的计数器的功能，既然MapReduce当中有计数器的功能，我们如何实现自己的计数器？？？</p>
<p>需求1：以上面排序以及序列化为案例，统计map接收到的数据记录条数；需求2：统计reduce端数据的输入的key有多少个，对应的value有多少个。</p>
<p>第一种方式定义计数器，通过context上下文对象可以获取我们的计数器，进行记录。</p>
<p>&nbsp;</p>
<p>第二种方式定义计数器，通过enum枚举类型来定义计数器。</p>
<p>&nbsp;详见代码</p>
<p>&nbsp;</p>
<p class="code"><strong>运行结果：</strong></p>
<p>19/06/14 20:52:37 INFO mapred.JobClient: MAP_COUNTER<br />19/06/14 20:52:37 INFO mapred.JobClient:     MAP_INPUT_RECORDS=8<br />19/06/14 20:52:37 INFO mapred.JobClient:   cn.itcast.demo2.sort.SortReducer$Counter<br />19/06/14 20:52:37 INFO mapred.JobClient:     REDUCE_INPUT_KEY_TOTAL=7<br />19/06/14 20:52:37 INFO mapred.JobClient:     REDUCE_INPUT_VALUE_TOTAL=8</p>]]></description></item><item><title>第2节 mapreduce深入学习：4, 5</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/14/11021987.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 14 Jun 2019 07:01:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/14/11021987.html</guid><description><![CDATA[<p>第2节 mapreduce深入学习：4、mapreduce的序列化以及自定义排序</p>
<p>&nbsp;</p>
<p>序列化（Serialization）是指把结构化对象转化为字节流。</p>
<p>反序列化（Deserialization）是序列化的逆过程。把字节流转为结构化对象。 当要在进程间传递对象或持久化对象的时候，就需要序列化对象成字节流</p>
<p>反之当要将接收到或从磁盘读取的字节流转换为对象，就要进行反序列化。</p>
<p>Java 的序列化（Serializable）是一个重量级序列化框架，一个对象被序列化后，会附带很多额外的信息（各种校验信息，header，继承体系&hellip;），不便于在网络中高效传输；所以，hadoop 自己开发了一套序列化机制（Writable），精简，高效。不用像 java 对象类一样传输多层的父子关系，需要哪个属性就传输哪个属性值，大大的减少网络传输的开销。</p>
<p>Writable是Hadoop的序列化格式，hadoop定义了这样一个Writable接口。 一个类要支持可序列化只需实现这个接口即可。</p>
<pre>另外Writable有一个子接口是WritableComparable，writableComparable是既可实现序列化，也可以对key进行比较，我们这里可以通过自定义key实现WritableComparable来实现我们的排序功能</pre>
<p>mapreduce的排序以及序列化：要求第一列按照字典顺序进行排列，第一列相同的时候，第二列按照升序进行排列</p>
<p>a 1<br />a	9<br />b	3<br />a	7<br />b	8<br />b	10<br />a	5<br />a	9</p>
<p>最终排序结果<br />a	1<br />a	5<br />a	7<br /><span style="color: #ff0000;">a	9</span><br /><span style="color: #ff0000;">a	9</span><br />b	3<br />b	8<br />b	10</p>
<p>在mapreduce当中默认是对key2 记住，要对谁排序，就得要把谁封装成k2 <br />需要对两个字段进行排序<br />两个字段进行比较，可不可以封装成一个对象，对象里面两个字段，对象实现writableComparable接口，就可以实现序列化，也可以实现排序了.</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190614110342436-352961134.png" alt="" /></p>
<pre>详见代码</pre>]]></description></item><item><title>notepad++新建文档时，会出现语法错误的红色下波浪线</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/13/11014651.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 13 Jun 2019 02:22:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/13/11014651.html</guid><description><![CDATA[<p>notepad++新建文档时，会出现语法错误的红色下波浪线：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190613101713893-1629578543.png" alt="" /></p>
<p>原因：新建文档时默认设置语言为PHP。</p>
<p>解决方法：修改默认语言为java或JavaScript，如下：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190613101617351-1953097645.png" alt="" /></p>
<p>小结：打开文档时，也可能出现下波浪线，可在此处修改语言：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190613102051730-81908262.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>第2节 mapreduce深入学习：2、3</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/12/11013575.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 12 Jun 2019 15:55:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/12/11013575.html</guid><description><![CDATA[<p><span style="color: #888888;"><span style="color: #000000;">第2节 mapreduce深入学习：2、MapReduce的分区；3、分区案例的补充完成运行实现</span></span></p>
<p>在MapReduce中，通过我们指定分区，会将同一个分区的数据发送到同一个reduce当中进行处理，例如我们为了数据的统计，我们可以把一批类似的数据发送到同一个reduce当中去，在同一个reduce当中统计相同类型的数据，就可以实现类似数据的分区，统计等</p>
<p>说白了就是相同类型的数据，送到一起去处理，在reduce当中默认分区只有1个。</p>
<p>MapReduce当中的分区类图：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190614203437756-1538028877.png" alt="" /></p>
<p>&nbsp;</p>
<p>mapreduce的分区以及与reduceTask的个数，物以类聚，人以群分，相同的数据去到同一个reduce</p>
<p> 分区主要就是把相同的一批数据，发送到同一个reduce里面去<br />	相同key的数据发送到同一个reduce里面去</p>
<p>例子：需求：将以下数据进行分开处理</p>
<p>详细数据参见partition.csv&nbsp; 这个文本文件，其中第五个字段表示开奖结果数值，现在需求将15以上的结果以及15以下的结果进行分开成两个文件进行保存。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190614203632206-1673038941.png" alt="" /></p>
<p>思路图解：<br /><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190613232852960-1221632147.png" alt="" /></p>
<p>&nbsp;</p>
<p>注意：分区的案例，只能打成jar包发布到集群上面去运行，本地模式已经不能正常运行了。</p>
<p>打成jar包提交到集群上面去运行：<br />hadoop jar partition.jar  cn.itcast.demo1.partition.PartitionerMain /partition_in  /partition_out</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;详见代码</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>参考：</p>
<p>mapReduce编程步骤： 背下来<br />map阶段两个步骤<br />	1、读取文件，解析成key,value对  k1,  v1<br />	2、自定义map逻辑，接收第一步的k1   v1  转换成新的k2  v2输出<br />shuffle阶段四个步骤<br />	3、分区，相同key的数据发送到同一个reduce，value形成一个集合<br />	4、排序  默认规则排序，按照字段顺序排列<br />	5、规约  小型的reducer，发生在map阶段，可以在map阶段对数据做一次聚合，减少数据传输到reduce量<br />	6、分组   主要作用就是形成集合</p>
<p>reduce阶段两个步骤<br />	7、自定义reduce逻辑，接收k2  v2   的数据，准换成新的k3  v3输出<br />	8、输出数据</p>]]></description></item><item><title>积分</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/12/11013345.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 12 Jun 2019 15:00:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/12/11013345.html</guid><description><![CDATA[<p><span style="color: #ff0000;">积分详情介绍</span></p>
<p>1.成功通过阶段考核并升级的学员，积攒50积分。<br />2.升级时在班级群分享学习方法和技巧，分享一次积攒10~20积分。3.学完一个阶段后，写一篇500字以上的学习感受或者学习技术分享帖。30积分。<br />4.成功就业后，一篇800字以上的学习感受或者学习技术分享帖。50积分。<br />5.成功在群里帮其他学员解答一次问题，月底统一找班主任申请积分。积攒2~10积分/次。(需要提供截图证明/次)<br />6.每周都积极配合并参与班主任和导师的指导去学习并完成的学员，积攒5积分/周。</p>
<p>PS:每次兑换后，积分清零。</p>
<p>&nbsp;（200积分可兑换一本传智播客原创书籍；260积分可兑换一个博学谷定制U形枕；300积分可兑换一个博学谷定制精美笔本套盒+U盘；400积分可兑换一套博学谷定制鼠标+鼠标垫）</p>
<p>&nbsp;</p>
<p><span style="color: #ff0000;">我获得的积分</span>：</p>
<p>1.帮助&nbsp;广州-邓文杰(1162230175)&nbsp;&nbsp;2~10积分；</p>
<p>2.</p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 MapReduce入门：11、mapreduce程序的入门-2</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/03/10970920.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 03 Jun 2019 15:49:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/03/10970920.html</guid><description><![CDATA[<h3>1.5、WordCount示例编写</h3>
<p>&nbsp;详见代码</p>
<p>&nbsp;</p>
<p>&nbsp;提醒：本地运行完成之后，就可以打成jar包放到服务器上面去运行了，实际工作当中，都是将代码打成jar包，开发main方法作为程序的入口，然后放到集群上面去运行。</p>
<p>打包步骤如下：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190612200505985-361030061.png" alt="" /></p>
<p>会产生2个jar包，一个是包含所有依赖jar包的jar包，一个是不含依赖包的jar包（03hdfs-1.0-SNAPSHOT.jar），我们使用不含依赖包的jar包（original-03hdfs-1.0-SNAPSHOT.jar）：</p>
<p>改名为wordcount.jar，拷贝到node01节点/export/servers/路径下，然后执行jar包：</p>
<p>[root@node01 servers]# hadoop jar wordcount.jar cn.itcast.wordcount.JobMain</p>
<p>如下报错：</p>
<p><span style="color: #ff0000;">1.Exception in thread "main" org.apache.hadoop.mapred.FileAlreadyExistsException: Output directory hdfs://node01:8020/wordcountout2 already exists</span></p>
<p>原因：目标文件夹的路径已存在。</p>
<p><span style="color: #ff0000;">2.19/06/12 19:47:18 INFO mapreduce.Job: Job job_1560328381126_0001 failed with state FAILED due to: Task failed task_1560328381126_0001_m_000000</span></p>
<p><span style="color: #ff0000;">Job failed as tasks failed. failedMaps:1 failedReduces:0</span></p>
<p><span style="color: #ff0000;">&nbsp;查看jobhistory的报错日志为：</span></p>
<pre><span style="color: #ff0000;">2019-06-12 19:47:15,657 WARN [uber-SubtaskRunner] org.apache.hadoop.mapred.LocalContainerLauncher: Exception running local (uberized) 'child' : java.lang.RuntimeException: java.lang.ClassNotFoundException: Class cn.itcast.wordcount.WordCountMapper not found
</span></pre>
<p>&nbsp;原因：jobMain.java中缺少一句话：<em id="__mceDel" style="font-family: 'Courier New'; font-size: 12px;">job.setJarByClass(JobMain.class);</em></p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 MapReduce入门：mapreduce的wordcount程序执行问题</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/03/10970899.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 03 Jun 2019 15:42:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/03/10970899.html</guid><description><![CDATA[<p>执行时报错：</p>
<p><span style="color: #ff0000;">19/06/03 23:00:41 INFO Configuration.deprecation: session.id is deprecated. Instead, use dfs.metrics.session-id</span><br /><span style="color: #ff0000;">19/06/03 23:00:41 INFO jvm.JvmMetrics: Initializing JVM Metrics with processName=JobTracker, sessionId=</span><br /><span style="color: #ff0000;">Exception in thread "main" java.lang.UnsatisfiedLinkError: org.apache.hadoop.io.nativeio.NativeIO$Windows.createDirectoryWithMode0(Ljava/lang/String;I)V</span></p>
<p>&nbsp;</p>
<p>原因：一般是windows本地环境没有配置好，或者hadoop客户端版本不对。</p>
<p>　　此处是hadoop版本问题。</p>
<p>解决方法：官网上下载hadoop-2.6.0-cdh5.14.0源码，在windows系统上重新编译，然后解压缩到非系统盘的没有中文字符的路径下（D:\Develop\hadoop-2.6.0-cdh5.14.0）。</p>
<p>　　　　配置环境变量&nbsp;HADOOP_HOME=D:\Develop\hadoop-2.6.0-cdh5.14.0</p>
<p>　　　　　　　　　　PATH中添加&nbsp;%HADOOP_HOME%\bin;%HADOOP_HOME%\sbin;</p>
<p>　　　　重启电脑，即可。</p>
<p>　　可以测试hadoop是否安装成功：&nbsp;　　hadoop version</p>
<p>&nbsp;</p>]]></description></item><item><title>第1节 MapReduce入门：11、mapreduce程序的入门</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/06/01/10958292.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Fri, 31 May 2019 20:00:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/06/01/10958292.html</guid><description><![CDATA[<h3 align="left">1.1、理解MapReduce思想</h3>
<p>MapReduce思想在生活中处处可见。或多或少都曾接触过这种思想。MapReduce的思想核心是&ldquo;<strong>分而治之</strong>&rdquo;，适用于大量复杂的任务处理场景（大规模数据处理场景）。即使是发布过论文实现分布式计算的谷歌也只是实现了这种思想，而不是自己原创。</p>
<p>Map负责&ldquo;分&rdquo;，即把复杂的任务分解为若干个&ldquo;简单的任务&rdquo;来并行处理。可以进行拆分的前提是这些小任务可以并行计算，彼此间几乎没有依赖关系。</p>
<p>Reduce负责&ldquo;合&rdquo;，即对map阶段的结果进行全局汇总。</p>
<p>这两个阶段合起来正是MapReduce思想的体现。</p>
<p><span style="color: #000000;"><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190602221115771-161395099.png" alt="" /></span></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190602231016727-1568380041.png" alt="" width="1252" height="613" /></p>
<p>&nbsp;</p>
<h3 align="left">1.2、Hadoop MapReduce设计构思</h3>
<p>1.如何对付大数据处理：分而治之</p>
<p>&nbsp;2. 构建抽象模型：Map和Reduce</p>
<p>map: (k1; v1) &rarr; [(k2; v2)]</p>
<p>reduce: (k2; [v2]) &rarr; [(k3; v3)]</p>
<p>3.统一构架，隐藏系统层细节</p>
<h3 align="left">1.3、MapReduce框架结构</h3>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190602222210312-1827064360.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190602222318342-670868586.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190602222325508-1693152277.png" alt="" /></p>
<h3>1.4、MapReduce编程规范及示例编写</h3>
<p>mapReduce编程模型的总结：</p>
<p class="code">MapReduce的开发一共有八个步骤其中map阶段分为2个步骤，shuffle阶段4个步骤，reduce阶段分为2个步骤</p>
<h5>Map阶段2个步骤</h5>
<p class="code">第一步：设置inputFormat类，将我们的数据切分成key，value对&nbsp;<span style="color: #ff0000;">(k1,v1)</span>，输入到第二步</p>
<p class="code">第二步：自定义map逻辑，处理我们第一步的输入数据，然后转换成新的key，value对进行输出<span style="color: #ff0000;">&nbsp;(k2,v2)</span></p>
<h5>shuffle阶段4个步骤（可以全部不用管）</h5>
<p class="code">第三步：对输出的key，value对&nbsp;<span style="color: #ff0000;">(k2,v2)</span> 进行<span style="color: #ff0000;">分区</span></p>
<p class="code">第四步：对不同分区的数据按照相同的key进行字典顺序的<span style="color: #ff0000;">排序</span></p>
<p class="code">第五步：对分组后的数据进行<span style="color: #ff0000;">规约</span>(combine操作)，降低数据的网络拷贝（可选步骤）（减少输出的k2的数据量）</p>
<p class="code">第六步：对排序后的额数据进行<span style="color: #ff0000;">分组</span>，分组的过程中，将相同key的value放到一个集合当中（调用一次reduce逻辑）</p>
<h5>reduce阶段2个步骤</h5>
<p class="code">第七步：对多个map的任务进行合并，排序，写reduce函数自己的逻辑，对输入的key，value对进行处理，转换成新的key，value对<span style="color: #ff0000;">&nbsp;(k3,v3)</span>&nbsp;进行输出</p>
<p class="code">第八步：设置outputformat将输出的key，value对&nbsp;<span style="color: #ff0000;">(k3,v3)</span>&nbsp;数据进行保存到文件中</p>
<p>八个步骤背下来！</p>
<p>每一个步骤都是一个class类，将八个步骤的class类组织到一起就是我们的mapreduce的程序。<img src="https://img2018.cnblogs.com/blog/1325651/201906/1325651-20190602231357476-1004680749.png" alt="" width="1500" height="733" /></p>
<p>&nbsp;</p>
<div>注意：分区和分组是不一样的，详见如下步骤描述：</div>
<div>&nbsp;假如数据数据是这样的&nbsp;&nbsp;（a,1）,(b,1),(c,1),(d,1),（a,2）,(b,2),(c,2),(d,2),（a,3）,(b,3),(c,3),(d,3)，</div>
<div>
<div>&nbsp;我们reducetask的数量是&nbsp;2，所以现在数据先分两个区。</div>
<div>
<div>&nbsp;1区：（a,1）,(b,1)，（a,2）,(b,2),（a,3）,(b,3)<br />2区：(c,1),(d,1),(c,2),(d,2),(c,3),(d,3)；</div>
<div>
<p>现在分好区了，reducetask1 拿到分区1的数据：（a,1）,(b,1)，（a,2）,(b,2),（a,3）,(b,3)<br />，现在对这些数据进行分组，其中有两个key，所以分成了两个组： 组1 （a，List（1，2，3））  组2 （b，List（1，2，3））</p>
<div>&nbsp;reducetask2上面类似的操作&nbsp;分成了两组。</div>


</div>


</div>


</div>]]></description></item><item><title>hdfs深入：10、hdfs的javaAPI操作</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/31/10952959.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 30 May 2019 16:26:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/31/10952959.html</guid><description><![CDATA[<pre>    /**<br />     * 递归遍历hdfs中所有的文件路径<br />     */<br />    @Test<br />    public void getAllHdfsFilePath() throws URISyntaxException, IOException {<br />        //获取fs的客户端<br />        FileSystem fileSystem = FileSystem.get(new URI("hdfs://node01:8020"), new Configuration());<br /><br />        Path path = new Path("/");<br />        FileStatus[] fileStatuses = fileSystem.listStatus(path);<br /><br />        //循环遍历fileStatuses，如果是文件，打印文件的路径，如果是文件夹，继续递归进去<br />        for (FileStatus fileStatus : fileStatuses){<br />            if (fileStatus.isDirectory()){//文件夹<br />                getDirectoryFiles(fileSystem,fileStatus);<br />            }else{ //文件<br />                System.out.println(fileStatus.getPath().toString());<br />            }<br />        }<br /><br />        //方法二：<br />        System.out.println("方法二：利用官方提供API");<br />        RemoteIterator&lt;LocatedFileStatus&gt; locatedFileStatusRemoteIterator = fileSystem.listFiles(new Path("/"), true);<br /><br />        while (locatedFileStatusRemoteIterator.hasNext()){<br />            LocatedFileStatus next = locatedFileStatusRemoteIterator.next();<br />            System.out.println(next.getPath());<br />        }<br /><br />        //关闭fs的客户端<br />        fileSystem.close();<br />    }<br /><br />    /**<br />     * 递归获取文件路径<br />     */<br />    public void getDirectoryFiles(FileSystem fileSystem,FileStatus fileStatus) throws IOException {<br />        //通过fileStatus获取文件夹路径<br />        Path path = fileStatus.getPath(); //该fileStatus必定为一个文件夹<br />        FileStatus[] fileStatuses = fileSystem.listStatus(path);<br />        for (FileStatus status:fileStatuses){<br />            if (fileStatus.isDirectory()){<br />                getDirectoryFiles(fileSystem,status);<br />            }else{<br />                System.out.println(fileStatus.getPath().toString());<br />            }<br />        }<br />    }<br /><br />    /**<br />     * 下载hdfs文件到本地<br />     */<br />    @Test<br />    public void copyHdfsToLocal() throws Exception {<br /><br />        FileSystem fileSystem = FileSystem.get(new URI("hdfs://node01:8020"), new Configuration());<br /><br />        FSDataInputStream inputStream = fileSystem.open(new Path("hdfs://node01:8020/aa/haha2.txt"));<br /><br />        FileOutputStream outputStream = new FileOutputStream(new File("d:\\install-log.txt"));<br /><br />        IOUtils.copy(inputStream,outputStream);<br />        IOUtils.closeQuietly(inputStream);<br />        IOUtils.closeQuietly(outputStream);<br /><br />        //方法二：利用官方API<br />        //有报错：java.lang.UnsatisfiedLinkError: org.apache.hadoop.io.nativeio.NativeIO$Windows.createFileWithMode0(Ljava/lang/String;JJJI)Ljava/io/FileDescriptor;<br />        fileSystem.copyToLocalFile(new Path("hdfs://node01:8020/aa/haha2.txt"),new Path("file:///d:\\install-log2.txt"));<br /><br />        fileSystem.close();<br />    }<br /><br />    /**<br />     * hdfs上面创建文件夹<br />     */<br />    @Test<br />    public void createHdfsDir() throws  Exception{<br />        FileSystem fileSystem = FileSystem.get(new URI("hdfs://node01:8020"), new Configuration());<br />        fileSystem.mkdirs(new Path("/aa/bb/cc/"));<br />        fileSystem.close();<br />    }<br /><br />    /**<br />     * hdfs的文件上传<br />     */<br />    @Test<br />    public void uploadFileToHdfs() throws  Exception{<br />        FileSystem fileSystem = FileSystem.get(new URI("hdfs://node01:8020"), new Configuration());<br />        //注：new Path()中的字符串参数如果省略file:///或hdfs://的话，默认会在参数前添加hdfs://node01:8020，即，默认是hdfs路径<br />        fileSystem.copyFromLocalFile(false,new Path("file:///d:\\output.txt"),new Path("/aa/bb/cc"));<br /><br />        //第二种方法：通过流的方式<br />        //输出流，负责将数据输出到hdfs的路径上面去<br />        FSDataOutputStream outputStream = fileSystem.create(new Path("/aa/bb/cc/empSel.hdfs"));<br />        //通过输入流读取本地文件系统的文件<br />        InputStream inputStream = new FileInputStream(new File("d:\\empSel.txt"));<br />        IOUtils.copy(inputStream,outputStream);<br />        IOUtils.closeQuietly(inputStream);<br />        IOUtils.closeQuietly(outputStream);<br />        fileSystem.close();<br />    }<br /><br />    /**<br />     * hdfs的权限校验机制<br />     */<br />    @Test<br />    public  void hdfsPermission() throws  Exception{<br />        /*<br />            在所有节点的hdfs-site.xml中设置开启权限验证：<br />            &lt;property&gt;<br />                &lt;name&gt;dfs.permissions&lt;/name&gt;<br />                &lt;value&gt;true&lt;/value&gt;<br />            &lt;/property&gt;<br />            普通的filesystem，执行时会报错：org.apache.hadoop.security.AccessControlException:<br />            Permission denied: user=Administrator, access=READ, inode="/config/core-site.xml":root:supergroup:-rw-------<br />            FileSystem fileSystem = FileSystem.get(new URI("hdfs://node01:8020"), new Configuration());<br />         */<br />        //通过伪造用户来获取分布式文件系统的客户端<br />        FileSystem fileSystem = FileSystem.get(new URI("hdfs://node01:8020"), new Configuration(), "root");<br />        //从hdfs上下载文件到本地<br />        FSDataInputStream inputStream = fileSystem.open(new Path("/config/core-site.xml"));<br />        FileOutputStream outputStream = new FileOutputStream(new File("d:\\core-site.txt"));<br />        IOUtils.copy(inputStream,outputStream);<br />        IOUtils.closeQuietly(inputStream);<br />        IOUtils.closeQuietly(outputStream);<br />//        fileSystem.copyFromLocalFile(new Path("file:///d:\\transferIndex.txt"),new Path("/aa/bb/cc/"));<br />//        fileSystem.delete(new Path("/aa/bb/cc/"),false);<br />        fileSystem.close();<br />    }<br /><br />    /**<br />     * hdfs在上传小文件的时候进行合并<br />     * 在我们的hdfs 的shell命令模式下，可以通过命令行将很多的hdfs文件合并成一个大文件下载到本地：<br />     *      hdfs dfs -getmerge /config/*.xml  ./hello.xml<br />     *  上传时也能将小文件合并到一个大文件里面去。<br />     */<br />    @Test<br />    public void mergeFile()throws  Exception{<br />        //获取分布式文件系统<br />        FileSystem fileSystem = FileSystem.get(new URI("hdfs://192.168.8.100:8020"), new Configuration(),"root");<br />        FSDataOutputStream outputStream = fileSystem.create(new Path("/bigFile.xml"));<br /><br />        //获取本地所有小文件的输入流<br />        //首先获取本地文件系统<br />        LocalFileSystem localFileSystem = FileSystem.getLocal(new Configuration());<br />        FileStatus[] fileStatuses = localFileSystem.listStatus(new Path("file:///D:\\上传小文件合并"));<br />        for (FileStatus fileStatus:fileStatuses){<br />            Path path = fileStatus.getPath();<br />            FSDataInputStream fsDataInputStream = localFileSystem.open(path);<br />            IOUtils.copy(fsDataInputStream,outputStream);<br />            IOUtils.closeQuietly(fsDataInputStream);<br />        }<br />        IOUtils.closeQuietly(outputStream);<br />        fileSystem.close();<br />        localFileSystem.close();<br />    }</pre>]]></description></item><item><title>IDEA、Eclipse快捷键对比</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/30/10952800.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 30 May 2019 15:40:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/30/10952800.html</guid><description><![CDATA[<p>&nbsp;　　　　　　　　　　　　　　<span style="font-size: 18pt;"><strong>IDEA、Eclipse快捷键对比</strong></span></p>
<table style="height: 643px; border-color: #000000; border-width: 1px; background-color: #cfd0c7; width: 806px; border-style: solid;" border="1">
<tbody>
<tr>
<td style="text-align: center;"><span style="font-size: 16px;"><strong>序号</strong></span></td>
<td style="text-align: center;"><span style="font-size: 16px;"><strong>功能</strong></span></td>
<td style="text-align: center;"><span style="font-size: 16px;"><strong>IDEA</strong></span></td>
<td style="text-align: center;"><span style="font-size: 16px;"><strong>Eclipse</strong></span></td>
</tr>
<tr>
<td style="text-align: center;">1</td>
<td>很多功能：导入包，处理异常，强转cast</td>
<td>Alt+Enter</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">2</td>
<td>导入包，自动修正？？？</td>
<td>Ctrl+Enter</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">3</td>
<td>生成左侧变量</td>
<td>Ctrl+Alt+V</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">4</td>
<td>生成右侧对象</td>
<td>Ctrl+Alt+Space</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">5</td>
<td>复制行</td>
<td>Ctrl+D</td>
<td>Ctrl+Alt+&darr;</td>
</tr>
<tr>
<td style="text-align: center;">6</td>
<td>删除行</td>
<td>Ctrl+X，Ctrl+Y</td>
<td>Ctrl+D</td>
</tr>
<tr>
<td style="text-align: center;">7</td>
<td>快速实现接口方法</td>
<td>Ctrl+I</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">8</td>
<td>搜索java文件</td>
<td rowspan="2">双击shift</td>
<td>Ctrl+Shift+R</td>
</tr>
<tr>
<td style="text-align: center;">9</td>
<td>搜索class文件</td>
<td>Ctrl+Shift+T</td>
</tr>
<tr>
<td style="text-align: center;">10</td>
<td>覆写父类的方法</td>
<td>
<p>Ctrl+O，</p>
<p>或者直接输入父类的方法名，会自动提示覆写</p>
</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">11</td>
<td>向上/下移动选中行</td>
<td>Ctrl+Shift+&uarr;/&darr;</td>
<td>&nbsp;Alt+&uarr;/&darr;</td>
</tr>
<tr>
<td style="text-align: center;">12</td>
<td>Debug：Debug运行java类</td>
<td>Ctrl+Shift+F9</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">13</td>
<td>Debug：正常运行java类</td>
<td>Ctrl+Shift+F10</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">14</td>
<td>Debug：Step Into进入到代码</td>
<td>F7</td>
<td>&nbsp;F5</td>
</tr>
<tr>
<td style="text-align: center;">15</td>
<td>Debug：&nbsp;Step Over跳到下一步</td>
<td>F8</td>
<td>&nbsp;F6</td>
</tr>
<tr>
<td style="text-align: center;">16</td>
<td>Debug：&nbsp;Step Out跳出函数，或跳到下一个断点</td>
<td>Shift+F8</td>
<td>&nbsp;F7/F8</td>
</tr>
<tr>
<td style="text-align: center;">17</td>
<td>Debug：&nbsp;resume programe恢复程序</td>
<td>F9</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">18</td>
<td>Debug：&nbsp;show execution point显示执行断点</td>
<td>Alt+F10</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">19</td>
<td>Debug：&nbsp;Force Step Into强制进入代码</td>
<td>Alt+Shift+F7</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">20</td>
<td>Debug：&nbsp;Run To Cursor运行到光标处</td>
<td>Alt+Shift+9</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">21</td>
<td>Debug：&nbsp;debug时选中查看值</td>
<td>Alt+F8</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">22</td>
<td>查找接口、抽象类的实现类</td>
<td>ctrl + alt +B</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">23</td>
<td>查看类或接口的继承关系（打开Hierarchy）</td>
<td>ctrl+h</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">24</td>
<td>快速生成getter，setter，toString等方法</td>
<td>Alt+Insert</td>
<td>&nbsp;右击空白处，选择generate</td>
</tr>
<tr>
<td style="text-align: center;">25</td>
<td>Debug：调试时查看变量或表达式的当前值</td>
<td>Alt+F8&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">26</td>
<td>快速生成迭代循环</td>
<td>iter</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">27</td>
<td>快速生成println语句</td>
<td>sout</td>
<td>syso</td>
</tr>
<tr>
<td style="text-align: center;">28</td>
<td>快速生成main函数</td>
<td>psvm</td>
<td>&nbsp;</td>
</tr>
<tr>
<td style="text-align: center;">29</td>
<td>撤销(undo)和重做(redo)</td>
<td>ctrl+z &nbsp; &nbsp;&nbsp; ctrl+shift+z</td>
<td>ctrl+z &nbsp;&nbsp; ctrl+y</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>idea快捷键：</p>
<p>1.Shift+Alt+&uarr;/&darr; ：上下移动一行。和Ctrl+Shift+&uarr;/&darr; 功能差不多，不过后者上下移动时，可以直接跳过一个方法。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201908/1325651-20190822204237979-830948634.jpg" alt="" /></p>
<p>&nbsp;</p>
<h2>Eclipse 常用快捷键</h2>
<table class="reference">
<tbody>
<tr><th>快捷键</th><th>描述</th></tr>
<tr><th colspan="2">编辑</th></tr>
<tr>
<td>Ctrl+1</td>
<td>快速修复（最经典的快捷键,就不用多说了，可以解决很多问题，比如import类、try catch包围等）</td>
</tr>
<tr>
<td>Ctrl+Shift+F</td>
<td>格式化当前代码</td>
</tr>
<tr>
<td>Ctrl+Shift+M</td>
<td>添加类的import导入</td>
</tr>
<tr>
<td>Ctrl+Shift+O</td>
<td>组织类的import导入（既有Ctrl+Shift+M的作用，又可以帮你去除没用的导入，很有用）</td>
</tr>
<tr>
<td>Ctrl+Y</td>
<td>重做（与撤销Ctrl+Z相反）</td>
</tr>
<tr>
<td>Alt+/</td>
<td>内容辅助（帮你省了多少次键盘敲打，太常用了）</td>
</tr>
<tr>
<td>Ctrl+D</td>
<td>删除当前行或者多行</td>
</tr>
<tr>
<td>Alt+&darr;</td>
<td>当前行和下面一行交互位置（特别实用,可以省去先剪切,再粘贴了）</td>
</tr>
<tr>
<td>Alt+&uarr;</td>
<td>当前行和上面一行交互位置（同上）</td>
</tr>
<tr>
<td>Ctrl+Alt+&darr;</td>
<td>复制当前行到下一行（复制增加）</td>
</tr>
<tr>
<td>Ctrl+Alt+&uarr;</td>
<td>复制当前行到上一行（复制增加）</td>
</tr>
<tr>
<td>Shift+Enter</td>
<td>在当前行的下一行插入空行（这时鼠标可以在当前行的任一位置,不一定是最后）</td>
</tr>
<tr>
<td>Ctrl+/</td>
<td>注释当前行,再按则取消注释</td>
</tr>
<tr><th colspan="2">选择</th></tr>
<tr>
<td>Alt+Shift+&uarr;</td>
<td>选择封装元素</td>
</tr>
<tr>
<td>Alt+Shift+&larr;</td>
<td>选择上一个元素</td>
</tr>
<tr>
<td>Alt+Shift+&rarr;</td>
<td>选择下一个元素</td>
</tr>
<tr>
<td>Shift+&larr;</td>
<td>从光标处开始往左选择字符</td>
</tr>
<tr>
<td>Shift+&rarr;</td>
<td>从光标处开始往右选择字符</td>
</tr>
<tr>
<td>Ctrl+Shift+&larr;</td>
<td>选中光标左边的单词</td>
</tr>
<tr>
<td>Ctrl+Shift+&rarr;</td>
<td>选中光标右边的单词</td>
</tr>
<tr><th colspan="2">移动</th></tr>
<tr>
<td>Ctrl+&larr;</td>
<td>光标移到左边单词的开头，相当于vim的b</td>
</tr>
<tr>
<td>Ctrl+&rarr;</td>
<td>光标移到右边单词的末尾，相当于vim的e</td>
</tr>
<tr><th colspan="2">搜索</th></tr>
<tr>
<td>Ctrl+K</td>
<td>参照选中的Word快速定位到下一个（如果没有选中word，则搜索上一次使用搜索的word）</td>
</tr>
<tr>
<td>Ctrl+Shift+K</td>
<td>参照选中的Word快速定位到上一个</td>
</tr>
<tr>
<td>Ctrl+J</td>
<td>正向增量查找（按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在状态栏中显示没有找到了,查一个单词时,特别实用,要退出这个模式，按escape建）</td>
</tr>
<tr>
<td>Ctrl+Shift+J</td>
<td>反向增量查找（和上条相同,只不过是从后往前查）</td>
</tr>
<tr>
<td>Ctrl+Shift+U</td>
<td>列出所有包含字符串的行</td>
</tr>
<tr>
<td>Ctrl+H</td>
<td>打开搜索对话框</td>
</tr>
<tr>
<td>Ctrl+G</td>
<td>工作区中的声明</td>
</tr>
<tr>
<td>Ctrl+Shift+G</td>
<td>工作区中的引用</td>
</tr>
<tr><th colspan="2">导航</th></tr>
<tr>
<td>Ctrl+Shift+T</td>
<td>搜索类（包括工程和关联的第三jar包）</td>
</tr>
<tr>
<td>Ctrl+Shift+R</td>
<td>搜索工程中的文件</td>
</tr>
<tr>
<td>Ctrl+E</td>
<td>快速显示当前Editer的下拉列表（如果当前页面没有显示的用黑体表示）</td>
</tr>
<tr>
<td>F4</td>
<td>打开类型层次结构</td>
</tr>
<tr>
<td>F3</td>
<td>跳转到声明处</td>
</tr>
<tr>
<td>Alt+&larr;</td>
<td>前一个编辑的页面</td>
</tr>
<tr>
<td>Alt+&rarr;</td>
<td>下一个编辑的页面（当然是针对上面那条来说了）</td>
</tr>
<tr>
<td>Ctrl+PageUp/PageDown</td>
<td>在编辑器中，切换已经打开的文件</td>
</tr>
<tr><th colspan="2">调试</th></tr>
<tr>
<td>F5</td>
<td>单步跳入</td>
</tr>
<tr>
<td>F6</td>
<td>单步跳过</td>
</tr>
<tr>
<td>F7</td>
<td>单步返回</td>
</tr>
<tr>
<td>F8</td>
<td>继续</td>
</tr>
<tr>
<td>Ctrl+Shift+D</td>
<td>显示变量的值</td>
</tr>
<tr>
<td>Ctrl+Shift+B</td>
<td>在当前行设置或者去掉断点</td>
</tr>
<tr>
<td>Ctrl+R</td>
<td>运行至行(超好用，可以节省好多的断点)</td>
</tr>
<tr><th colspan="2">重构（一般重构的快捷键都是Alt+Shift开头的了）</th></tr>
<tr>
<td>Alt+Shift+R</td>
<td>重命名方法名、属性或者变量名 （是我自己最爱用的一个了,尤其是变量和类的Rename,比手工方法能节省很多劳动力）</td>
</tr>
<tr>
<td>Alt+Shift+M</td>
<td>把一段函数内的代码抽取成方法 （这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用）</td>
</tr>
<tr>
<td>Alt+Shift+C</td>
<td>修改函数结构（比较实用,有N个函数调用了这个方法,修改一次搞定）</td>
</tr>
<tr>
<td>Alt+Shift+L</td>
<td>抽取本地变量（ 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候）</td>
</tr>
<tr>
<td>Alt+Shift+F</td>
<td>把Class中的local变量变为field变量 （比较实用的功能）</td>
</tr>
<tr>
<td>Alt+Shift+I</td>
<td>合并变量（可能这样说有点不妥Inline）</td>
</tr>
<tr>
<td>Alt+Shift+V</td>
<td>移动函数和变量（不怎么常用）</td>
</tr>
<tr>
<td>Alt+Shift+Z</td>
<td>重构的后悔药（Undo）</td>
</tr>
<tr><th colspan="2">其他</th></tr>
<tr>
<td>Alt+Enter</td>
<td>显示当前选择资源的属性，windows下的查看文件的属性就是这个快捷键，通常用来查看文件在windows中的实际路径</td>
</tr>
<tr>
<td>Ctrl+&uarr;</td>
<td>文本编辑器 上滚行</td>
</tr>
<tr>
<td>Ctrl+&darr;</td>
<td>文本编辑器 下滚行</td>
</tr>
<tr>
<td>Ctrl+M</td>
<td>最大化当前的Edit或View （再按则反之）</td>
</tr>
<tr>
<td>Ctrl+O</td>
<td>快速显示 OutLine（不开Outline窗口的同学，这个快捷键是必不可少的）</td>
</tr>
<tr>
<td>Ctrl+T</td>
<td>快速显示当前类的继承结构</td>
</tr>
<tr>
<td>Ctrl+W</td>
<td>关闭当前Editer（windows下关闭打开的对话框也是这个，还有qq、旺旺、浏览器等都是）</td>
</tr>
<tr>
<td>Ctrl+L</td>
<td>文本编辑器 转至行</td>
</tr>
<tr>
<td>F2</td>
<td>显示工具提示描述</td>
</tr>
</tbody>
</table>]]></description></item><item><title>hdfs深入：09、获取分布式文件系统客户端的几种方式</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/30/10952775.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Thu, 30 May 2019 15:33:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/30/10952775.html</guid><description><![CDATA[<p>FileSystem是一个抽象类：<br />获取一个抽象类有两种方式：<br />第一种：看这个抽象类有没有提供什么方法返回他本身<br />第二种：找子类</p>
<p>具体代码如下；</p>
<pre>/**<br />     * 通过url注册的方式访问hdfs，了解，不会用到<br />     * @throws Exception<br />     */<br />    @Test<br />    public void getHdfsFile() throws Exception{<br />//        System.out.println("hello world.");<br />        //1.注册hdfs的url，让java代码能识别hdfs的url形式<br />        URL.setURLStreamHandlerFactory(new FsUrlStreamHandlerFactory());<br /><br />        InputStream in = null;<br />        FileOutputStream out = null;<br /><br />        //定义文件访问的url地址<br />        String url = "hdfs://node01:8020/test/input/install.log";<br /><br />        //打开文件输入流<br />        in = new URL(url).openStream();<br />        out = new FileOutputStream(new File("D:\\installOut.txt"));<br />        IOUtils.copy(in,out);<br /><br />        IOUtils.closeQuietly(in);<br />        IOUtils.closeQuietly(out);<br />    }<br /><br />    /**<br />     * 通过FileSystem获取分布式文件系统的几种方式<br />     * 方式一<br />     */<br />    @Test<br />    public void getFileSystem1() throws IOException {<br />        //如果configuration不做任何配置，获取到的是本地文件系统 "file:///"<br />        Configuration configuration = new Configuration();<br /><br />        //覆盖默认配置，得到分布式文件系统<br />        configuration.set("fs.defaultFS","hdfs://node01:8020");<br /><br />        FileSystem fileSystem = FileSystem.get(configuration);<br /><br />        System.out.println(fileSystem);<br />    }<br /><br />    /**<br />     * 方式二<br />     */<br />    @Test<br />    public void getHdfs2() throws URISyntaxException, IOException {<br />        //使用2个参数<br />        //参数1是一个URI,定义了使用hdfs://这种方式来访问，就是分布式文件系统<br />        FileSystem fileSystem = FileSystem.get(new URI("hdfs://node01:8020"), new Configuration());<br />        System.out.println(fileSystem);<br />    }<br /><br />    /**<br />     * 方式三<br />     */<br />    @Test<br />    public void getHdfs3() throws URISyntaxException, IOException {<br />        Configuration configuration = new Configuration();<br />        configuration.set("fs.defaultFS","hdfs://node01:8020/");<br />        FileSystem fileSystem = FileSystem.newInstance(configuration);<br />        System.out.println(fileSystem);<br />    }<br /><br />    /**<br />     * 方式四<br />     */<br />    @Test<br />    public void getHdfs4() throws URISyntaxException, IOException {<br />        FileSystem fileSystem = FileSystem.newInstance(new URI("hdfs://node01:8020"), new Configuration());<br />        System.out.println(fileSystem);<br />    }<br /><br />    </pre>]]></description></item><item><title>hdfs深入：08、hdfs的JavaAPI以及如何解决winutils的问题</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/29/10947141.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 29 May 2019 15:47:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/29/10947141.html</guid><description><![CDATA[<pre>/**<br /> * 通过url注册的方式访问hdfs，了解，不会用到<br /> * @throws Exception<br /> */</pre>
<pre>以下为详细代码：<br />//1.注册hdfs的url，让java代码能识别hdfs的url形式<br />URL.setURLStreamHandlerFactory(new FsUrlStreamHandlerFactory());<br /><br />InputStream in = null;<br />FileOutputStream out = null;<br /><br />//定义文件访问的url地址<br />String url = "hdfs://node01:8020/test/input/install.log";<br /><br />//打开文件输入流<br />in = new URL(url).openStream();<br />out = new FileOutputStream(new File("D:\\installOut.txt"));<br />IOUtils.copy(in,out);<br /><br />IOUtils.closeQuietly(in);<br />IOUtils.closeQuietly(out);</pre>
<p>&nbsp;</p>
<p>执行hdfs文件操作的时候抛异常 winutils：</p>
<p><span style="color: #ff0000;">19/05/30 22:24:34 ERROR util.Shell: Failed to locate the winutils binary in the hadoop binary path</span><br /><span style="color: #ff0000;">java.io.IOException: Could not locate executable null\bin\winutils.exe in the Hadoop binaries.</span></p>
<p>解决步骤：</p>
<p>第一步：把 F:\传智播客大数据离线阶段课程资料\3、大数据离线第三天\解决winutils的问题\hadoop-2.6.0-cdh5.14.0&nbsp;<br />这个安装包拷贝到一个没有中文没有空格的路径下面去（D:\Develop\hadoop-2.6.0-cdh5.14.0）；</p>
<p>第二步：在windows上面配置hadoop的环境变量：</p>
<p>1.添加HADOOP_HOME=D:\Develop\hadoop-2.6.0-cdh5.14.0</p>
<p>2.在PATH中添加：%HADOOP_HOME%\bin;%HADOOP_HOME%\sbin;</p>
<p>第三步：D:\Develop\hadoop-2.6.0-cdh5.14.0\lib\native\hadoop.dll&nbsp; 文件放到本地系统盘的 C:\Windows\System32 目录下；</p>
<p>第四步：关闭windows重启。</p>
<p>&nbsp;</p>]]></description></item><item><title>hdfs深入：07、hdfs的文件的读取过程</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/29/10946872.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 29 May 2019 14:53:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/29/10946872.html</guid><description><![CDATA[<p><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190529223520122-1974891365.png" alt="" /></p>
<p>详细步骤解析</p>
<p>1、 Client向NameNode发起RPC请求，来确定请求文件block所在的位置；</p>
<p>2、 NameNode会视情况返回文件的部分或者全部block列表，对于每个block，NameNode 都会返回含有该 block 副本的 DataNode 地址；&nbsp; 这些返回的 DN 地址，会按照集群拓扑结构得出 DataNode 与客户端的距离，然后进行排序，排序两个规则：网络拓扑结构中距离 Client 近的排靠前；心跳机制中超时汇报的 DN 状态为 STALE，这样的排靠后；</p>
<p>3、 Client 选取排序靠前的 DataNode 来读取 block，如果客户端本身就是DataNode,那么将从本地直接获取数据(短路读取特性)；</p>
<p>4、 底层上本质是建立 Socket Stream（FSDataInputStream），重复的调用父类 DataInputStream 的 read 方法，直到这个块上的数据读取完毕；</p>
<p>5、 当读完列表的 block 后，若文件读取还没有结束，客户端会继续向NameNode 获取下一批的 block 列表；</p>
<p>6、 读取完一个 block 都会进行 checksum 验证，<span style="color: #ff0000;">如果读取 DataNode 时出现错误</span>，客户端会通知 NameNode，然后再从下一个拥有该 block 副本的DataNode 继续读。</p>
<p>7、 read 方法是并行的读取 block 信息，不是一块一块的读取；NameNode 只是返回Client请求包含块的DataNode地址，并不是返回请求块的数据；</p>
<p>&nbsp;8、 最终读取来所有的 block 会合并成一个完整的最终文件。</p>
<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190529225241531-735340436.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>hdfs深入：06、hdfs的写入过程</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/29/10946647.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 29 May 2019 14:19:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/29/10946647.html</guid><description><![CDATA[<h3>7、HDFS的文件写入过程</h3>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190529221820351-1701352037.png" alt="" /></p>
<p class="Default">详细步骤解析：</p>
<p class="Default"><span lang="EN-US">1、<span lang="EN-US"> client发起文件上传请求，通过<span lang="EN-US">RPC与<span lang="EN-US">NameNode建立通讯，<span lang="EN-US">NameNode检查目标文件是否已存在，父目录是否存在，返回是否可以上传；</span></span></span></span></span></p>
<p class="Default"><span lang="EN-US">2、<span lang="EN-US"> client请求第一个<span lang="EN-US">block该传输到哪些<span lang="EN-US">DataNode服务器上；</span></span></span></span></p>
<p class="Default"><span lang="EN-US">3、<span lang="EN-US"> NameNode根据配置文件中指定的备份数量及机架感知原理进行文件分配，返回可用的<span lang="EN-US">DataNode的地址如：<span lang="EN-US">A，<span lang="EN-US">B，<span lang="EN-US">C；</span></span></span></span></span></span></p>
<p class="Default"><span lang="EN-US">&nbsp;</span></p>
<p class="Default">注：<span lang="EN-US">Hadoop在设计时考虑到数据的安全与高效，数据文件默认在<span lang="EN-US">HDFS上存放三份，存储策略为本地一份，同机架内其它某一节点上一份，不同机架的某一节点上一份。</span></span></p>
<p class="Default"><span lang="EN-US">4、<span lang="EN-US"> client请求<span lang="EN-US">3台<span lang="EN-US">DataNode中的一台<span lang="EN-US">A上传数据（本质上是一个<span lang="EN-US">RPC调用，建立<span lang="EN-US">pipeline），<span lang="EN-US">A收到请求会继续调用<span lang="EN-US">B，然后<span lang="EN-US">B调用<span lang="EN-US">C，将整个<span lang="EN-US">pipeline建立完成，后逐级返回<span lang="EN-US">client；</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class="Default"><span lang="EN-US">5、<span lang="EN-US"> client开始往<span lang="EN-US">A上传第一个<span lang="EN-US">block（先从磁盘读取数据放到一个本地内存缓存），以<span lang="EN-US">packet为单位（默认<span lang="EN-US">64K），<span lang="EN-US">A收到一个<span lang="EN-US">packet就会传给<span lang="EN-US">B，<span lang="EN-US">B传给<span lang="EN-US">C；<span lang="EN-US">A每传一个<span lang="EN-US">packet会放入一个应答队列等待应答。</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class="Default"><span lang="EN-US">6、 数据被分割成一个个<span lang="EN-US">packet数据包在<span lang="EN-US">pipeline上依次传输，在<span lang="EN-US">pipeline反方向上，逐个发送<span lang="EN-US">ack（命令正确应答），最终由<span lang="EN-US">pipeline中第一个<span lang="EN-US">DataNode节点<span lang="EN-US">A将<span lang="EN-US">pipelineack发送给<span lang="EN-US">client;</span></span></span></span></span></span></span></span></span></span></p>
<p class="Default"><span lang="EN-US">7、 当一个<span lang="EN-US">block传输完成之后，<span lang="EN-US">client再次请求<span lang="EN-US">NameNode上传第二个<span lang="EN-US">block到服务器。</span></span></span></span></span></p>
<p class="Default"><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190529223037775-1980835912.png" alt="" /></p>
<p>hdfs的文件写入过程（课上老师的总结）：<br />第一步：客户端发出请求，请求namneode需要上传数据<br />第二步：namenode检测客户端是或否有权限上传<br />第三步：客户端请求namenode第一个block块上传到哪里去<br />第四步：namenode找三个block块返回给客户端<br />第五步：客户端找datanode建立pipeline管道，主备上传数据，数据都是以packet包的形式通过管道上传到datanode上面去<br />第六步：datanode保存好了之后，给客户端一个ack确认机制，客户端准备上传下一个block块，直到所有的block块上传完成，关闭文件流</p>]]></description></item><item><title>hdfs深入：05、hdfs中的fsimage和edits的合并过程</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/29/10946622.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 29 May 2019 14:13:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/29/10946622.html</guid><description><![CDATA[<h4>6.4、secondarynameNode如何辅助管理FSImage与Edits文件</h4>
<p>①：secnonaryNN通知NameNode切换editlog</p>
<p>②：secondaryNN从NameNode中获得FSImage和editlog(通过http方式)</p>
<p>③：secondaryNN将FSImage载入内存，然后开始合并editlog，合并之后成为新的fsimage</p>
<p>④：secondaryNN将新的fsimage发回给NameNode</p>
<p>⑤：NameNode用新的fsimage替换旧的fsimage</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190529221140856-1397369634.png" alt="" /></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190529221158546-954701273.png" alt="" /></p>
<p>&nbsp;</p>
<p class="p">完成合并的是secondarynamenode，会请求namenode停止使用edits,暂时将新写操作放入一个新的文件中（edits.new)。secondarynamenode从namenode中通过http&nbsp;get获得edits，因为要和fsimage合并，所以也是通过http&nbsp;get&nbsp;的方式把fsimage加载到内存，然后逐一执行具体对文件系统的操作，与fsimage合并，生成新的fsimage，然后把fsimage发送给namenode，通过http&nbsp;post的方式。namenode从secondarynamenode获得了fsimage后会把原有的fsimage替换为新的fsimage,把edits.new变成edits。同时会更新fstime。</p>
<p class="p">hadoop进入安全模式时需要管理员使用dfsadmin的save&nbsp;namespace来创建新的检查点。</p>
<p class="p">secondarynamenode在合并edits和fsimage时需要消耗的内存和namenode差不多，所以一般把namenode和secondarynamenode放在不同的机器上。</p>
<p class="p">fs.checkpoint.period:&nbsp;默认是一个小时（3600s)</p>
<p class="p">fs.checkpoint.size:&nbsp;&nbsp;edits达到一定大小时也会触发合并（默认64M）</p>
<p class="p"><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190529221653945-247097440.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>hdfs深入：04、hdfs当中的元数据管理以及元数据节的查看</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/29/10946427.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 29 May 2019 13:35:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/29/10946427.html</guid><description><![CDATA[<h3>6、HDFS的元数据信息FSimage以及edits和secondaryNN的作用</h3>
<p>fsimage：存放的是一份最完整的元数据信息，内容比较大<br />edits：元数据操作日志，记录了一段时间的元数据信息的变化，例如增删改查哪些文件，文件内容比较小，操作起来比较方便<br />		edits一直记录元数据操作记录的话，也会慢慢膨胀的比较大，也会造成操作起来比较困难<br />		为了控制edits不会膨胀太大，引入secondaryNameNode机制。<br />secondaryNameNode:主要职责，合并fsimage与edits，清空edits，<br />问题：edits什么时候跟fsimage合并？？？ 控制策略：时间长短  +  文件大小 比如说我们可以定义两个小时，或者edits文件大小达到1GB的时候合并一次。</p>
<p>在hdfs-site.xml配置fsimage和edits存储路径：</p>
<p>&lt;!-- 定义了我们fsimage文件存储的路径。实际工作当中，这个路径不能随便写，需要首先确定我们的磁盘的挂载路径<br />                     df  -lh   查看我们磁盘的挂载路径   --&gt;</p>
<p>&lt;property&gt;<br />                　　&lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;<br />                　　&lt;value&gt;file:///export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/namenodeDatas&lt;/value&gt;<br />        &lt;/property&gt;</p>
<p>&lt;!-- 定义edits文件的存储路径&nbsp; --&gt;</p>
<p>&lt;property&gt;<br />                &lt;name&gt;dfs.namenode.edits.dir&lt;/name&gt;<br />                &lt;value&gt;file:///export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/dfs/nn/edits&lt;/value&gt;<br />        &lt;/property&gt;</p>
<h4>6.2、FSimage、edits文件当中的文件信息查看</h4>
<p class="code">cd&nbsp; /export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/namenodeDatas/current</p>
<p>hdfs oiv -i fsimage_0000000000000000864 -p XML -o hello.xml</p>
<p class="code">cd&nbsp; /export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/dfs/nn/edits</p>
<p>hdfs oev -i&nbsp; edits_0000000000000000865-0000000000000000866&nbsp;-o myedit.xml -p XML</p>]]></description></item><item><title>hdfs深入：03、hdfs的架构以及副本机制和block块存储</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/29/10946168.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Wed, 29 May 2019 12:57:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/29/10946168.html</guid><description><![CDATA[<h3>HDFS分布式文件系统设计目标</h3>
<p>1、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 硬件错误&nbsp; 由于集群很多时候由数量众多的廉价机组成，使得硬件错误成为常态</p>
<p>2、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 数据流访问&nbsp; 所有应用以流的方式访问数据，设置之初便是为了用于批量的处理数据，而不是低延时的实时交互处理</p>
<p>3、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 大数据集&nbsp;&nbsp; 典型的HDFS集群上面的一个文件是以G或者T数量级的，支持一个集群当中的文件数量达到千万数量级</p>
<p>4、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 简单的相关模型&nbsp; 假定文件是一次写入，多次读取的操作</p>
<p>5、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 移动计算比移动数据便宜&nbsp;&nbsp; 一个应用请求的计算，离它操作的数据越近，就越高效</p>
<p>6、&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 多种软硬件的可移植性</p>
<h3>3、HDFS的来源</h3>
<p>HDFS起源于Google的GFS论文（GFS，Mapreduce，BigTable为google的旧的三驾马车）</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 发表于2003年10月</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HDFS是GFS的克隆版</p>
<p>Hadoop&nbsp; Distributed&nbsp; File&nbsp; system</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 易于扩展的分布式文件系统</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 运行在大量普通廉价机器上，提供容错机制</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 为大量用户提供性能不错的文件存取服务</p>
<p><strong>4、HDFS的架构图之基础架构</strong></p>
<p>&nbsp;<strong><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190529204702402-1945011242.png" alt="" /></strong></p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190529203334703-1018377187.png" alt="" /></p>
<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190529203342549-452059572.png" alt="" /></p>
<p>&nbsp;</p>
<p>1、NameNode是一个中心服务器，单一节点（简化系统的设计和实现），负责管理文件系统的名字空间（namespace）以及客户端对文件的访问</p>
<p>2、文件操作，namenode是负责文件元数据的操作，datanode负责处理文件内容的读写请求，跟文件内容相关的数据流不经过Namenode，只询问它跟哪个dataNode联系，否则NameNode会成为系统的瓶颈</p>
<p>3、副本存放在哪些Datanode上由NameNode来控制，根据全局情况作出块放置决定，读取文件时NameNode尽量让用户先读取最近的副本，降低读取网络开销和读取延时</p>
<p>4、NameNode全权管理数据库的复制，它周期性的从集群中的每个DataNode接收心跳信号和状态报告，接收到心跳信号意味着DataNode节点工作正常，块状态报告包含了一个该DataNode上所有的数据列表</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190529205155395-2116814909.png" alt="" /></p>
<p>注：元数据不仅保存在内存中，还保存一份在磁盘中，防止意外断电等导致数据丢失。</p>
<h3>5、hdfs的架构之文件的文件副本机制以及block块存储</h3>
<p>block块的大小可以通过hdfs-site.xml当中的配置文件进行指定：</p>
<p class="code">&lt;property&gt;</p>
<p class="code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;dfs.blocksize&lt;/name&gt;</p>
<p class="code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;块大小 以Byte字节为单位&lt;/value&gt;//只写数值就可以 默认：134217728B，即128MB</p>
<p class="code">&nbsp;&nbsp;&nbsp; &lt;/property&gt;</p>
<p>&lt;property&gt;<br />                　　&lt;name&gt;dfs.replication&lt;/name&gt;<br />                　　&lt;value&gt;3&lt;/value&gt; //block的副本数量设置<br />        &lt;/property&gt;</p>
<h4>5.1、抽象成数据块的好处</h4>
<ol><ol>
<li>一个文件有可能大于集群中任意一个磁盘&nbsp;<br />
10T*3/128 = xxx块 2T，2T，2T 文件方式存&mdash;&ndash;&gt;多个block块，这些block块属于一个文件</li>
<li>使用块抽象而不是文件可以简化存储子系统</li>
<li>块非常适合用于数据备份进而提供数据容错能力和可用性</li>



</ol></ol>
<h4>5.2、块缓存</h4>
<p>block块缓存：可以将我们的block块缓存到内存当中，我们在执行一些MR计算的时候，可以直接从内存当中获取数据，比较快，特别适用于一些小表join大表的情况。<br /><br /></p>
<h4>5.3、hdfs的文件权限验证</h4>
<p>hdfs的权限验证：采用的是linux类似的权限校验机制，防止好人做错事，不能阻止坏人干干事，hdfs相信你告诉我你是谁，你就是谁。</p>
<p>&nbsp;</p>]]></description></item><item><title>hdfs深入：02、今日课程内容大纲以及hdfs的基本实现</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/29/10941360.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 28 May 2019 16:31:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/29/10941360.html</guid><description><![CDATA[<p>1.hadoop第三天课程内容</p>
<p><em id="__mceDel">hdfs：分布式文件存储系统<br />hdfs的架构图<br />hdfs的副本机制以及block块<br />hdfs的元数据信息fsimage与edits<br />hdfs的文件读写过程<br />hdfs的javaAPI  搞定</em></p>
<p>MapReduce的入门  入门程序wordcount（掌握）</p>
<p>&nbsp;</p>
<p>2.hdfs架构图：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190529002455751-2085572558.png" alt="" width="1124" height="577" /></p>
<p>3.hadoop当中的文件系统：</p>
<p><em id="__mceDel">文件系统是一个抽象类，里面有很多的子实现类，例如 hdfs，file:///,  ftp文件系统  ，  webHdfs，Har</em></p>
<p>其中，har，专门用于合并小文件；</p>
<p>&nbsp;</p>]]></description></item><item><title>hdfs的特性、命令、安全模式、基准测试</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/28/10941071.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 28 May 2019 15:19:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/28/10941071.html</guid><description><![CDATA[<p>1.第一点：如何理解hdfs分布式文件系统，每台机器出一块磁盘，凑成一个大的硬盘，大的硬盘的容量来自各个服务器的硬盘容量之和。</p>
<p>你出5毛，我出5毛，大家凑成1块。</p>
<p>2. HDFS 是 Hadoop Distribute File System 的简称，意为：Hadoop 分布式文件系统。是 Hadoop 核心组件之一，作为最底层的分布式存储服务而存在。</p>
<p>3.hdfs的特性：</p>
<p>（1）master/slave架构：namenode是我们的主节点，datanode是我们的从节点</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; namenode主要管理元数据信息&nbsp; datanode主要存储各种数据</p>
<p>（2）分块存储</p>
<p>（3）名字空间（NameSpace）</p>
<p>（4）HDFS 会给客户端提供一个统一的抽象目录树，客户端通过路径来访问文件，形如：hdfs://namenode:port/dir-a/dir-b/dir-c/file.data。</p>
<p>（5）Namenode 元数据管理；</p>
<p>（6）Datanode 数据存储；</p>
<p>（7）副本机制；</p>
<p>（8）一次写入，多次读出：频繁的写入会造成元数据的频繁的更新改变，比较麻烦。</p>
<p>3. hdfs常用的操作命令：</p>
<p>hdfs&nbsp; dfs&nbsp;&nbsp; -ls&nbsp; /&nbsp; 查看根路径下面的文件或者文件夹</p>
<p>hdfs dfs&nbsp; -mkdir&nbsp; -p&nbsp;&nbsp; /xx/xxx&nbsp; 在hdfs上面递归的创建文件夹</p>
<p>hdfs&nbsp; dfs -moveFromLocal&nbsp; sourceDir(本地磁盘的文件或者文件夹的路径)&nbsp;&nbsp; destDir（hdfs的路径） （剪切）</p>
<p>hdfs&nbsp; dfs&nbsp; -mv&nbsp; hdfsSourceDir&nbsp;&nbsp; hdfsDestDir（剪切，从hdfs上的一个位置移动到另一个位置）</p>
<p>hdfs&nbsp; dfs -put&nbsp; localDir&nbsp; hdfsDir&nbsp;&nbsp; 将本地文件系统的文件或者文件夹放到hdfs上面去 （复制）</p>
<p>Usage: hdfs dfs -rm [-f] [-r|-R递归] [-skipTrash跳过垃圾桶永久删除] URI [URI ...] 删除hdfs上的一个或多个文件或文件夹。</p>
<p>hdfs dfs -tail [-f] URI&nbsp; (Displays last kilobyte of the file to stdout)</p>
<p>hdfs dfs -appendToFile &lt;localsrc&gt; ... &lt;dst&gt; 将本地系统的一个或多个文件追加到hdfs的一个文件中。</p>
<p>hdfs&nbsp; dfs -cat&nbsp; hdfsFiles 查看一个或多个hdfs的文件内容</p>
<p>hdfs&nbsp; dfs&nbsp; -cp&nbsp;&nbsp; hdfsSourceDIr&nbsp;&nbsp; hdfsDestDir&nbsp;&nbsp; 拷贝文件或者文件夹，从hdfs上的一个位置拷贝到另一个位置</p>
<p>hdfs的权限管理两个命令：</p>
<p>hdfs&nbsp; dfs&nbsp; -chmod -R&nbsp; 777&nbsp; /xxx</p>
<p>hdfs&nbsp; dfs&nbsp; -chown -R hadoop:hadoop&nbsp; /xxx</p>
<p>hdfs dfs -expunge 清空回收站&nbsp;</p>
<p>&nbsp;</p>
<p>2.hdfs高级命令使用：主要就是用于限制某个路径下面的文件的个数，或者限制某个路径下面文件的大小。</p>
<p>hdfs dfs -mkdir -p /user/root/lisi&nbsp;&nbsp;&nbsp;&nbsp; #创建hdfs文件夹</p>
<p>hdfs dfsadmin -setQuota 2 lisi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # 给该文件夹下面设置最多上传两个文件，上传文件，发现只能上传一个文件</p>
<p>hdfs dfsadmin -clrQuota /user/root/lisi&nbsp;&nbsp;&nbsp; # 清除文件数量限制</p>
<p>hdfs dfsadmin -setSpaceQuota 4k /user/root/lisi&nbsp;&nbsp; # 限制空间大小4KB</p>
<p>hdfs dfs -put&nbsp; /export/softwares/zookeeper-3.4.5-cdh5.14.0.tar.gz /user/root/lisi</p>
<p>hdfs dfsadmin -clrSpaceQuota /user/root/lisi&nbsp;&nbsp; #清除空间限额</p>
<p>hdfs dfs -count -q -h /user/root/lisi 查看hdfs文件限额数量</p>
<p>注意：hdfs dfs -count -q -h /user/root/lisi 可以简写为hdfs dfs -count -q -h lisi 这里使用了相对路径，</p>
<p>当前登录用户是root，所以当前路径是/user/root/</p>
<p>&nbsp;</p>
<p>3.&nbsp; hdfs的安全模式：文件系统只接受读数据请求，而不接受删除、修改等变更请求。hdfs集群刚启动的时候，默认30S钟的时间是出于安全期的，去检测datanode了,只有过了30S之后，集群脱离了安全期，然后才可以对集群进行操作</p>
<p>hdfs&nbsp; dfsadmin&nbsp; -safemode [ enter | leave | get&nbsp; ]</p>
<p>&nbsp;</p>
<p>4.&nbsp; hdfs基准测试（压力测试）</p>
<p>测试写入速度：</p>
<p>hadoop jar /export/servers/hadoop-2.6.0-cdh5.14.0/share/hadoop/mapreduce/hadoop-mapreduce-client-jobclient-2.6.0-cdh5.14.0.jar TestDFSIO&nbsp; -write -nrFiles 10 -fileSize 10MB</p>
<p>完成之后查看写入速度结果，写入速度一般在30M/S左右超不多：</p>
<p>hdfs dfs -text /benchmarks/TestDFSIO/io_write/part-00000</p>
<p>测试读取速度：</p>
<p>hadoop jar /export/servers/hadoop-2.6.0-cdh5.14.0/share/hadoop/mapreduce/hadoop-mapreduce-client-jobclient-2.6.0-cdh5.14.0.jar TestDFSIO -read -nrFiles 10 -fileSize 10MB</p>
<p>查看读取结果，实际工作当中通过MR读取速度大概在100M/s左右：</p>
<p>hdfs dfs -text /benchmarks/TestDFSIO/io_read/part-00000</p>
<p>清除测试数据：</p>
<p>hadoop jar /export/servers/hadoop-2.6.0-cdh5.14.0/share/hadoop/mapreduce/hadoop-mapreduce-client-jobclient-2.6.0-cdh5.14.0.jar TestDFSIO -clean</p>
<p>注：在执行命令时的当前路径下，会生成一个测试报告文件：-rw-r--r-- 1 root root &nbsp;303 May 23 22:06 TestDFSIO_results.log</p>]]></description></item><item><title>问题：执行[root@node01 hadoop-2.6.0-cdh5.14.0]# sbin/start-dfs.sh 后，namenode未启动</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/28/10941062.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 28 May 2019 15:17:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/28/10941062.html</guid><description><![CDATA[<p>执行[root@node01 hadoop-2.6.0-cdh5.14.0]# <span style="color: #ff0000;">sbin/start-dfs.sh&nbsp;后，namenode未启动</span>。</p>
<p>&nbsp;</p>
<p>解决步骤：</p>
<p>查看/export/servers/hadoop-2.6.0-cdh5.14.0/logs/hadoop-root-namenode-node01.hadoop.com.log日志文件，发现报错信息：</p>
<p>2019-05-22 00:52:44,132 WARN org.apache.hadoop.hdfs.server.namenode.FSNamesystem: Encountered exception lo</p>
<p>ading fsimage</p>
<p>java.io.IOException: <span style="color: #ff0000;">NameNode is not formatted.</span></p>
<p>2019-05-22 00:52:44,251 ERROR org.apache.hadoop.hdfs.server.namenode.NameNode: Failed to start namenode.</p>
<p>java.io.IOException: NameNode is not formatted.</p>
<p>原因：namenode未格式化。</p>
<p>解决方案：</p>
<p>三台机器上，递归删除以下目录删除：</p>
<p>rm -rf /export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/</p>
<p>三台机器上，重新创建以下目录：</p>
<p>mkdir -p /export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/tempDatas</p>
<p>mkdir -p /export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/namenodeDatas</p>
<p>mkdir -p /export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/datanodeDatas</p>
<p>mkdir -p /export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/dfs/nn/edits</p>
<p>mkdir -p /export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/dfs/snn/name</p>
<p>mkdir -p /export/servers/hadoop-2.6.0-cdh5.14.0/hadoopDatas/dfs/nn/snn/edits</p>
<p>node01上，执行bin/hdfs namenode &nbsp;-format</p>
<p>node01上，执行：</p>
<p>cd /export/servers/hadoop-2.6.0-cdh5.14.0/</p>
<p>sbin/start-dfs.sh</p>
<p>sbin/start-yarn.sh</p>
<p>sbin/mr-jobhistory-daemon.sh start historyserver</p>]]></description></item><item><title>bin/hadoop checknative</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/28/10941052.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 28 May 2019 15:15:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/28/10941052.html</guid><description><![CDATA[<p>bin/hadoop checknative <span style="color: #99cc00;">#检查是否支持本地库</span></p>
<p>&nbsp;</p>
<p>[root@node01 ~]# hadoop checknative<br />19/05/28 23:12:46 INFO bzip2.Bzip2Factory: Successfully loaded &amp; initialized native-bzip2 library system-native<br />19/05/28 23:12:46 INFO zlib.ZlibFactory: Successfully loaded &amp; initialized native-zlib library<br />Native library checking:<br />hadoop:  true /export/servers/hadoop-2.6.0-cdh5.14.0/lib/native/libhadoop.so.1.0.0<br />zlib:    true /lib64/libz.so.1<br />snappy:  true /usr/lib64/libsnappy.so.1<br />lz4:     true revision:10301<br />bzip2:   true /lib64/libbz2.so.1<br />openssl: true /usr/lib64/libcrypto.so</p>
<p>&nbsp;</p>]]></description></item><item><title>问题：hdfs管理界面：Summary部分，Configured Capacity: 0 B</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/28/10941013.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 28 May 2019 15:08:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/28/10941013.html</guid><description><![CDATA[<p><span style="color: #ff0000;">hdfs管理界面：Summary部分，Configured Capacity: 0 B</span>。正常应该不是0，而是显示系统分配给hdfs的剩余容量。</p>
<p>&nbsp;</p>
<p>原因：NameNode的clusterID和DataNode的不一致，所以未能启动。之所以会这样，是因为我们执行了多次bin/hdfs namenode -format命令，导致NameNode的clusterID改变而DataNode却没变。有时也可能是因为data和name文件夹的权限问题。</p>
<p>网上解决步骤：</p>
<p>1 停止所有进程：sbin/stop-all.sh</p>
<p>2 将namenode的clusterID（在/export/servers/hadoop-2.7.5/hadoopDatas/namenodeDatas/current/VERSION文档中）复制到datanode的clusterID（在/export/servers/hadoop-2.7.5/hadoopDatas/datanodeDatas/current/VERSION文档中）</p>
<p>3启动所有进程 /sbin/start-all.sh</p>
<p>4 检验</p>
<p>实际操作发现还是不行；于是<span style="color: #ff0000;">删除整个hadoopDatas，重新创建hadoopDatas文件夹以及下面的子文件夹，然后重新格式化bin/hdfs namenode -format，再启动各项服务</span>，解决。</p>
<p>小结：</p>
<p><span style="color: #ff0000;">bin/hdfs namenode -format该命令仅执行一次</span>，以后尽量不要执行，因为一执行，则<span style="color: #ff0000;">所有数据都丢失</span>！并且，导致NameNode的clusterID和DataNode的不一致，从而<span style="color: #ff0000;">系统出错</span>！</p>
<p>&nbsp;</p>]]></description></item><item><title>Hadoop环境搭建、启动和管理界面查看</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/28/10940357.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 28 May 2019 13:22:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/28/10940357.html</guid><description><![CDATA[<p>一、hadoop环境搭建：</p>
<p>1. hadoop 6个核心配置文件的作用：<br />core-site.xml：核心配置文件，主要定义了我们文件访问的格式  hdfs://<br />hadoop-env.sh：主要配置我们的java路径<br />hdfs-site.xml：主要定义配置我们的hdfs的相关配置<br />mapred-site.xml  主要定义我们的mapreduce相关的一些配置<br />slaves：控制我们的从节点在哪里，datanode   nodemanager在哪些机器上<br />yarn-site.xml：配置我们的resourcemanager资源调度</p>
<p>&nbsp;</p>
<p>二、hadoop启动：</p>
<p><span style="color: #ff0000;"><strong>前提：完全分布式环境下：</strong></span></p>
<table class="MsoNormalTable" style="border-width: initial; border-style: none; border-color: initial;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr style="mso-yfti-irow: 0; mso-yfti-firstrow: yes; height: 16.35pt;">
<td style="width: 106.5pt; border-width: 1pt; border-color: windowtext; padding: 0cm 5.4pt; height: 16.35pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">&nbsp;</span></p>


  </td>
<td style="width: 106.5pt; border-top-width: 1pt; border-right-width: 1pt; border-bottom-width: 1pt; border-top-color: windowtext; border-right-color: windowtext; border-bottom-color: windowtext; border-left: none; padding: 0cm 5.4pt; height: 16.35pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">192.168.1.100</span></p>


  </td>
<td style="width: 106.55pt; border-top-width: 1pt; border-right-width: 1pt; border-bottom-width: 1pt; border-top-color: windowtext; border-right-color: windowtext; border-bottom-color: windowtext; border-left: none; padding: 0cm 5.4pt; height: 16.35pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">192.168.1.110</span></p>


  </td>
<td style="width: 106.55pt; border-top-width: 1pt; border-right-width: 1pt; border-bottom-width: 1pt; border-top-color: windowtext; border-right-color: windowtext; border-bottom-color: windowtext; border-left: none; padding: 0cm 5.4pt; height: 16.35pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">192.168.1.120</span></p>


  </td>


 </tr>
<tr>
<td style="width: 106.5pt; border-right-width: 1pt; border-bottom-width: 1pt; border-left-width: 1pt; border-right-color: windowtext; border-bottom-color: windowtext; border-left-color: windowtext; border-top: none; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">zookeeper</span></p>


  </td>
<td style="width: 106.5pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">zk</span></p>


  </td>
<td style="width: 106.55pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">zk</span></p>


  </td>
<td style="width: 106.55pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">zk</span></p>


  </td>


 </tr>
<tr>
<td style="width: 106.5pt; border-right-width: 1pt; border-bottom-width: 1pt; border-left-width: 1pt; border-right-color: windowtext; border-bottom-color: windowtext; border-left-color: windowtext; border-top: none; padding: 0cm 5.4pt;" rowspan="4" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">HDFS</span></p>


  </td>
<td style="width: 106.5pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">JournalNode</span></p>


  </td>
<td style="width: 106.55pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">JournalNode</span></p>


  </td>
<td style="width: 106.55pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">JournalNode</span></p>


  </td>


 </tr>
<tr>
<td style="width: 106.5pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">NameNode</span></p>


  </td>
<td style="width: 106.55pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">NameNode</span></p>


  </td>
<td style="width: 106.55pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">&nbsp;</span></p>


  </td>


 </tr>
<tr>
<td style="width: 106.5pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">ZKFC</span></p>


  </td>
<td style="width: 106.55pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">ZKFC</span></p>


  </td>
<td style="width: 106.55pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">&nbsp;</span></p>


  </td>


 </tr>
<tr>
<td style="width: 106.5pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">DataNode</span></p>


  </td>
<td style="width: 106.55pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">DataNode</span></p>


  </td>
<td style="width: 106.55pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">DataNode</span></p>


  </td>


 </tr>
<tr>
<td style="width: 106.5pt; border-right-width: 1pt; border-bottom-width: 1pt; border-left-width: 1pt; border-right-color: windowtext; border-bottom-color: windowtext; border-left-color: windowtext; border-top: none; padding: 0cm 5.4pt;" rowspan="2" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">YARN</span></p>


  </td>
<td style="width: 106.5pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">&nbsp;</span></p>


  </td>
<td style="width: 106.55pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">ResourceManager</span></p>


  </td>
<td style="width: 106.55pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">ResourceManager</span></p>


  </td>


 </tr>
<tr>
<td style="width: 106.5pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">NodeManager</span></p>


  </td>
<td style="width: 106.55pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">NodeManager</span></p>


  </td>
<td style="width: 106.55pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">NodeManager</span></p>


  </td>


 </tr>
<tr>
<td style="width: 106.5pt; border-right-width: 1pt; border-bottom-width: 1pt; border-left-width: 1pt; border-right-color: windowtext; border-bottom-color: windowtext; border-left-color: windowtext; border-top: none; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">MapReduce</span></p>


  </td>
<td style="width: 106.5pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">&nbsp;</span></p>


  </td>
<td style="width: 106.55pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">&nbsp;</span></p>


  </td>
<td style="width: 106.55pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt;" width="142">
<p class="MsoNormal" style="text-align: center;" align="center"><span lang="EN-US">JobHistoryServer</span></p>


  </td>


 </tr>


</tbody>

</table>
<p>1.<strong>三台机器上都执行该命令，启动zk</strong>：zkServer.sh start</p>
<p>2.<strong>启动HDFS过程</strong></p>
<p>node01上执行：</p>
<p class="code">cd&nbsp;&nbsp; /export/servers/hadoop-2.7.5</p>
<p class="code">bin/hdfs zkfc -formatZK</p>
<p class="code">sbin/hadoop-daemons.sh start journalnode</p>
<p class="code">bin/hdfs namenode -format</p>
<p class="code">bin/hdfs namenode -initializeSharedEdits -force</p>
<p class="code">sbin/start-dfs.sh</p>
<p>node02上面执行：</p>
<p class="code">cd&nbsp;&nbsp; /export/servers/hadoop-2.7.5</p>
<p class="code">bin/hdfs namenode -bootstrapStandby</p>
<p class="code">sbin/hadoop-daemon.sh start namenode</p>
<p class="code">3.<strong>启动yarn过程</strong></p>
<p>node03上面执行：</p>
<p class="code">cd&nbsp;&nbsp; /export/servers/hadoop-2.7.5</p>
<p class="code">sbin/start-yarn.sh</p>
<p>node02上执行：</p>
<p class="code">cd&nbsp;&nbsp; /export/servers/hadoop-2.7.5</p>
<p>sbin/start-yarn.sh</p>
<p><strong>查看resourceManager状态</strong></p>
<p>node03上面执行</p>
<p class="code">cd&nbsp;&nbsp; /export/servers/hadoop-2.7.5</p>
<p class="code">bin/yarn rmadmin -getServiceState rm1</p>
<p>node02上面执行：</p>
<p class="code">cd&nbsp;&nbsp; /export/servers/hadoop-2.7.5</p>
<p class="code">bin/yarn rmadmin -getServiceState rm2</p>
<p><strong>node03启动jobHistory</strong></p>
<p>node03机器执行以下命令启动jobHistory</p>
<p class="code">cd /export/servers/hadoop-2.7.5</p>
<p>sbin/mr-jobhistory-daemon.sh start historyserver</p>
<p><strong>停止hadoop</strong></p>
<p class="code"><span lang="EN-US">cd /export/servers/hadoop-2.7.5</span></p>
<p class="code"><span lang="EN-US">sbin/stop-dfs.sh</span></p>
<p class="code"><span lang="EN-US">sbin/stop-yarn.sh</span></p>
<p class="code"><span lang="EN-US">sbin/mr-jobhistory-daemon.sh stop historyserver</span></p>
<p>sbin/hadoop-daemon.sh stop journalnode</p>
<p>注意：</p>
<p>1.<span style="color: #ff0000;">bin/hdfs namenode -format该命令仅执行一次</span>，以后尽量不要执行，因为一执行，则所有数据都丢失！</p>
<p>2.hadoop完全分布式环境下，hadoop启动前，必须在三台机器上都启动ZK。</p>
<p>3.sbin/hadoop-daemons.sh [ start | stop ]&nbsp;journalnode 一次同时启动/停止所有机器，sbin/hadoop-daemon.sh [ start | stop ] journalnode 一次只能启动/停止一台机器（当前机器）</p>
<p>&nbsp;</p>
<p>三、hadoop管理界面查看：</p>
<p><span style="font-family: arial, helvetica, sans-serif;"><em>http://192.168.52.100:50070/dfshealth.html#tab-overview</em>&nbsp; 查看hdfs</span></p>
<p><span style="font-family: arial, helvetica, sans-serif;"><em id="__mceDel">http://node01:8088/cluster   查看yarn集群<br />http://node01:19888/jobhistory  查看历史完成的任务</em></span>&nbsp;</p>]]></description></item><item><title>Hadoop架构模型</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/28/10940317.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 28 May 2019 13:15:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/28/10940317.html</guid><description><![CDATA[<p>1.hadoop 1.x架构模型：<br />分布式文件存储系统：HDFS<br />NameNode（主节点：管理元数据）<br />	secondaryNameNode（作用是合并元数据信息，辅助NameNode管理元数据信息）<br />DataNode	DataNode	DataNode（存储数据）<br />分布式数据计算系统：MapReduce<br />JobTracker（主节点：负责分配任务）<br />TaskTracker 	TaskTracker	TaskTracker（负责执行任务）<br />注：元数据：描述数据的数据。<br />缺点：单节点故障。</p>
<p>2.hadoop2.x架构模型：<br />（1）文件存储和数据计算单节点：<br />分布式文件存储系统：HDFS<br />NameNode<br />	SecondaryNameNode<br />DataNode	DataNode	DataNode<br />分布式数据计算系统：MapReduce（Yarn资源调度系统）<br />ResourceManager（主节点：接收用户的任务请求，分配资源给NodeManager）<br />NodeManager	NodeManager	NodeManager（执行任务）<br />ApplicationManager进程：每一个任务请求，ResourceManager都会在某个NodeManager上启动一个APPmaster进程，该APPmaster进程负责向ResourceManager申请资源，并分配任务给每个NodeManager</p>
<p>（2）文件存储高可用，数据计算单节点：略；<br />（3）文件存储单节点，数据计算高可用：略；<br />（4）文件存储和数据计算高可用：<br />分布式文件存储系统：HDFS<br />JournalNode	JournalNode	JournalNode（文件系统元数据信息管理，一般都是奇数个）<br />			ZK<br />NameNode（active状态）	NameNode（从节点，standby状态，主要负责监控active何时挂掉，一旦挂掉，立刻接管其工作）<br />DataNode	DataNode	DataNode<br />分布式数据计算系统：MapReduce（Yarn资源调度系统）<br />ZK<br />ResourceManager（主节点）	ResourceManager（备份节点）<br />NodeManager	NodeManager	NodeManager<br />注：（1）如果NameNode高可用，就没有SecondaryNameNode，取而代之的是JournalNode，其主要用于同步元数据信息，保证2个NameNode的元数据信息一致，并且JournalNode需要奇数个，半数及以上的JournalNode写入元数据成功，就代表写入成功。<br />（2）两个NameNode组成主备的架构。<br />（3）集群的脑裂：为了避免集群的脑裂，造成看到的数据不一样，一定要保证两个NameNode中的元数据信息一模一样，而JournalNode就是同步两个NameNode中的元数据信息，保证两者相同。<br />（4）NameNode高可用的自动切换，主要是通过两个守护进程ZKFC来实现。</p>]]></description></item><item><title>hadoop简介</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/28/10940310.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 28 May 2019 13:14:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/28/10940310.html</guid><description><![CDATA[<p>hadoop起源：<br />起源于一个开源项目nutch，主要做通用爬虫。遇到2个问题：数据量太大，没法存储；数据量太大，没法搜索。<br />检索的问题：lucene；<br />数据存储问题：看到谷歌开源的3篇论文：GFS(google file system), MapReduce（分布式计算框架）, BigTable（key,value对的非关系型数据库）；<br />产生2个框架 hadoop（HDFS+MapReduce）, Hbase；<br />hadoop：广义上，指代大数据的一个生态圈，包括各种周边的其他框架；狭义上，仅指hadoop软件本身。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190528220001886-1396530555.png" alt="" /></p>
<p>&nbsp;</p>
<p><br />（讲一天以上的框架，是重点，一天讲几个的，非重点）<br />序列化：解决跨网络之间的数据传输问题。</p>
<p>hadoop四大优点：<br />（1）扩容能力；<br />（2）低成本；<br />（3）高效率；<br />（4）可靠性。</p>
<p>hadoop发行版本：主要从0.x 到1.x 到2.x这三个主流版本。</p>
<p>hadoop免费开源版本   三大主流公司：<br />（1）apache开源版本，archive.apache.org/dist/<br />	优点：版本更新迭代较快，所有软件都有对应的迭代；<br />	缺点：版本的升级，兼容，维护等都比较麻烦。<br />	实际生产环境尽量不用apache版本。<br />（2）免费开源版本hortonworks：软件的安装、升级等都做了；<br />	http://hortonworks.com/<br />（3）服务收费版本cloudera：软件有收费版（基本功能），也有免费版（高级特性）。<br />	https://www.cloudera.com/  生产环境强烈推荐。<br />（4）MapR：大数据软件厂商。</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190528220034462-854218442.png" alt="" /></p>
<p>&nbsp;</p>]]></description></item><item><title>JVM优化（下）</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/28/10934552.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 27 May 2019 16:15:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/28/10934552.html</guid><description><![CDATA[<p>14、Tomcat8优化之G1牢记收集器的测试结果以及小结：</p>
<p>jmeter测试：<br />（1）tomcat未做任何优化：<br />（2）禁用AJP:<br />（3）启用连接池：<br />（4）设置最大线程数1000，初始线程数200：<br />（5）设置最大线程数5000，初始线程数500：<br />（6）设置maxQueueSize="100"<br />（7）设置nio2的运行模式：<br />（8）调整jvm参数进行优化：<br />	A. 设置并行垃圾回收器：<br />	vim bin/catalina.sh <br />	JAVA_OPTS="-XX:+UseParallelGC -XX:+UseParallelOldGC -Xms64m -Xmx512m <br />	-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps <br />	-XX:+PrintHeapAtGC -Xloggc:../logs/gc.log"<br />	B.运行结果中，根据对gc.log的分析，调整jvm参数：<br />	vim bin/catalina.sh <br />	JAVA_OPTS="-XX:+UseParallelGC -XX:+UseParallelOldGC -Xms128m -Xmx1024m <br />	-XX:NewSize=64m -XX:MaxNewSize=256m    #初始年轻代大小64m，年轻代最大256m<br />	-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps <br />	-XX:+PrintHeapAtGC -Xloggc:../logs/gc.log"<br />	C.设置G1垃圾回收器：<br />	vim bin/catalina.sh <br />	JAVA_OPTS="‐XX:+UseG1GC ‐XX:MaxGCPauseMillis=100 ‐Xms128m ‐Xmx1024m <br />	-XX:+PrintGCDetails ‐XX:+PrintGCTimeStamps ‐XX:+PrintGCDateStamps <br />	-XX:+PrintHeapAtGC ‐Xloggc:../logs/gc.log"</p>
<p>&nbsp;</p>]]></description></item><item><title>JVM优化（中）</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/27/10934434.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 27 May 2019 15:55:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/27/10934434.html</guid><description><![CDATA[<p>09、垃圾收集器之串行垃圾收集器：&nbsp;</p>
<p>1.-Xms512m 等价于 -XX:InitialHeapSize=512<br />设置JVM初始堆内存大小；<br />-Xmx2048m 等价于 -XX:MaxHeapSize=2048<br />设置JVM最大堆内存大小；<br />2.gc日志中看到DefNew，表示年轻代在使用串行垃圾收集器。<br />3.gc日志中看到ParNew，表示年轻代在使用并行ParNew垃圾收集器。<br />4.gc日志中看到PSYoungGen，表示年轻代在使用并行ParallelGC垃圾收集器。<br />5.gc日志中看到ParOldGen，表示老年代在使用并行ParallelGC垃圾收集器。</p>
<p>&nbsp;</p>
<p>11、垃圾收集器之CMS垃圾收集器：</p>
<p>ParallelGC相对于ParNew的优点，不仅可以工作在年轻代，还可工作在老年代。</p>
<p>&nbsp;</p>
<p>17、可视化GC日志分析工具：</p>
<p>1.G1调优 三步：<br />1）开启G1<br />2）设置堆的最大内存<br />3）设置最大停顿时间<br />2.G1,没有物理分代，有逻辑分代。<br />3.G1三种垃圾回收模式：<br />Young GC, Mixed GC, Full GC.&nbsp;<br />4.年轻代的垃圾收集依然采用复制算法，省略内存压缩步骤。<br />5.Humongous区域，存放短期存在的巨型对象。<br />6.GC触发时机：young GC，eden空间耗尽时触发；mixed GC，<br />-XX:InitiatingHeapOccupancyPercent=n决定，默认45%，<br />当老年代大小占整个堆大小百分比达到该阀值时触发。<br />7. G1步骤：全局并发标记，拷贝存活对象。<br />-XX:+UseG1GC -XX:MaxGCPauseMillis=100 -Xmx16m -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -Xloggc:D://Develop//gc.log</p>
<p>tips: 串行（xing） 并行（xing）</p>]]></description></item><item><title>JVM优化（上）</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/27/10934410.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 27 May 2019 15:51:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/27/10934410.html</guid><description><![CDATA[<p>02、我们为什么要对jvm做优化：</p>
<p>1.标准参数：<br />-help<br />-version&nbsp;</p>
<p>2. -X参数（非标）</p>
<p>-Xint<br />-Xcomp</p>
<p>-Xint : interpreted<br />-Xcomp: complied&nbsp;&nbsp;有卡顿，先编译，一次编译，之后不用编译，运行效率高<br />-Xmixed: mixed 默认</p>
<p>3.-XX参数（非标，使用率较高）</p>
<p>-XX:newSize<br />-XX:UseSerialGC</p>
<p>4.</p>
<p>-Xms<br />设置jvm堆内存初始大小<br />-Xms512m ==&gt; -XX:InitialHeapSize=512m</p>
<p>-Xmx<br />设置jvm堆内存最大大小<br />-Xmx2048m ==&gt; -XX:MaxHeapSize=2048m<br />eg.java -Xms64m -Xmx128m TestJVM</p>
<p>5.</p>
<p>jps -l</p>
<p>jinfo -flags 4086 查询该进程所有参数<br />eg.&nbsp;<br />[root@node01 bin]# jinfo -flags 4086<br />Attaching to process ID 4086, please wait...<br />Debugger attached successfully.<br />Server compiler detected.<br />JVM version is 25.141-b15<br />Non-default VM flags: -XX:CICompilerCount=2 -XX:InitialHeapSize=48234496 -XX:MaxHeapSize=752877568 -XX:MaxNewSize=250609664 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=15728640 -XX:OldSize=32505856 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseParallelGC&nbsp;<br />Command line: -Djava.util.logging.config.file=/export/servers/jvm/apache-tomcat-7.0.57/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.endorsed.dirs=/export/servers/jvm/apache-tomcat-7.0.57/endorsed -Dcatalina.base=/export/servers/jvm/apache-tomcat-7.0.57 -Dcatalina.home=/export/servers/jvm/apache-tomcat-7.0.57 -Djava.io.tmpdir=/export/servers/jvm/apache-tomcat-7.0.57/temp</p>
<p>jinfo -flag MaxHeapSize 4086 查询某个参数MaxHeapSize</p>
<p>&nbsp;</p>
<p>04、JVM运行参数之-server与-client：</p>
<p>java -server -showversion TestJVM<br />初始堆空间大，并行垃圾回收器；<br />java -client -showversion TestJVM<br />初始堆空间小，串行垃圾回收器</p>
<p>&nbsp;</p>
<p>06、JVM运行参数之-XX参数：</p>
<p>java -showversion -XX:+DisableExplicitGC TestJVM</p>
<p>java -showversion -XX:NewRatio=1 TestJVM</p>
<p>&nbsp;</p>
<p>09、JVM内存模型之jdk1.7与jdk1.8内存模型（很重要）：</p>
<p>jvm 1.7 年轻代 老年代 永久代</p>
<p>jvm 1.8 年轻代 老年代 取消了永久代，为了和JRocket VM融合。使用元空间metaspace代替老年代，元空间不在jvm中，而是在本地内存中。</p>
<p>&nbsp;</p>
<p>10、JVM内存模型之jstat命令的使用：</p>
<p>jstat命令可以查看堆内存各部分的使用量，以及加载类的数量。命令的格式如下：<br />jstat [-命令选项] [vmid] [间隔时间/毫秒] [查询次数]<br />eg.<br />[root@node01~]#jps<br />7080 Jps<br />6219 Bootstrap</p>
<p>1.class加载统计<br />[root@node01?~]# jstat ‐class 6219<br />Loaded??Bytes??Unloaded??Bytes?????Time???<br />??3273??7122.3????????0?????0.0???????3.98<br />2.编译统计<br />jstat -compiler 6219<br />3.垃圾回收统计<br />jstat -gc 4086 1000 5</p>
<p>&nbsp;</p>
<p>11、jmap命令的使用：</p>
<p>jmap -heap 4086</p>
<p>jmap -histo 4086 | more</p>
<p>jmap -histo:live 4086 | more</p>
<p>将内存使用情况dump到文件中：<br />jmap -dump:format=b,file=/export/servers/jvm/dump.dat 4086</p>
<p>&nbsp;</p>
<p>13、通过MAT工具对dump文件进行分析：</p>
<p>1.通过jhat对dump文件进行分析：<br />jhat -port 9999 /export/servers/jvm/dump.dat</p>
<p>OQL:&nbsp;<br />eg.<br />select s from java.lang.String s where s.value.length &gt;= 100</p>
<p>2.通过MAT工具对dump文件进行分析<br />下载mat，解压到本地物理机，然后执行MemoryAnalyzer.exe</p>
<p>shallow heap：对象本身占用内存大小,不包括它引用的对象 retained heap：当前对象大小+当前对象可直接或间接引用到的对象的大小总和.</p>
<p>&nbsp;</p>
<p>14、内存溢出的定位与分析：</p>
<p>利用mat测试内存溢出时，必须生成一个文件java_pid12644.hprof用于分析测试，为此，需要在run/debug configuration中添加运行参数：<br />-Xms8m -Xmx8m -XX:+HeapDumpOnOutOfMemoryError</p>
<p>&nbsp;</p>
<p>16、死锁问题：</p>
<p>jstack：<br />作用：查看jvm中的线程执行情况，比如，发现服务器的CPU的负载突然增高了、出现了死锁、死循环等。<br />将正在运行的jvm的线程情况进行快照，并且打印出来。</p>
<p>jstack 4086 查看tomcat的所有线程状态</p>
<p>6种状态：<br />new runnable blocked waiting timed_waiting terminated</p>
<p>实战 死锁：<br />jstack 8569</p>
<p>Found one Java-level deadlock:<br />=============================<br />"Thread-1":<br />waiting to lock monitor 0x00007fd2bc0062c8 (object 0x00000000f115d790, a java.lang.Object),<br />which is held by "Thread-0"<br />"Thread-0":<br />waiting to lock monitor 0x00007fd2bc004e28 (object 0x00000000f115d7a0, a java.lang.Object),<br />which is held by "Thread-1"</p>
<p>Java stack information for the threads listed above:<br />===================================================<br />"Thread-1":<br />at TestDeadLock$Thread2.run(TestDeadLock.java:41)<br />- waiting to lock &lt;0x00000000f115d790&gt; (a java.lang.Object)<br />- locked &lt;0x00000000f115d7a0&gt; (a java.lang.Object)<br />at java.lang.Thread.run(Thread.java:748)<br />"Thread-0":<br />at TestDeadLock$Thread1.run(TestDeadLock.java:23)<br />- waiting to lock &lt;0x00000000f115d7a0&gt; (a java.lang.Object)<br />- locked &lt;0x00000000f115d790&gt; (a java.lang.Object)<br />at java.lang.Thread.run(Thread.java:748)</p>
<p>Found 1 deadlock.</p>
<p>&nbsp;</p>
<p>18、VirsualVM工具的使用（监控远程进程）：</p>
<p>进入jdk安装目录/bin<br />打开jvisualvm.exe</p>
<p>远程监控的jvm：JMX<br />步骤：<br />1.在远程tomcat中添加参数；<br />JAVA_OPTS="-Dcom.sun.management.jmxremote<br />-Dcom.sun.management.jmxremote.port=9999<br />-Dcom.sun.management.jmxremote.authenticate=false<br />-Dcom.sun.management.jmxremote.ssl=false"</p>
<p>然后重启tomcat，并打印日志：<br />./startup.sh &amp;&amp; tail -f ../logs/catalina.out</p>
<p>远程--添加远程主机，添加JMX连接。</p>]]></description></item><item><title>ZooKeeper</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/27/10934314.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 27 May 2019 15:28:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/27/10934314.html</guid><description><![CDATA[<p>1.ZooKeeper是一个开源框架，本质上是一个分布式的小文件存储系统。主要用来解决分布式集群中应用系统的一致性问题，例如怎样避免同时操作同一数据造成脏读的问题。</p>
<p>Leader</p>
<p>Follower</p>
<p>Observer</p>
<p>&nbsp;</p>
<p>2.zookeeper的特性：</p>
<p>1）全局数据一致</p>
<p>2）可靠性</p>
<p>3）顺序性</p>
<p>4）数据更新原子性</p>
<p>5）实时性</p>
<table style="height: 125px; width: 574px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="184">
<p>服务器IP</p>
</td>
<td valign="top" width="184">
<p>主机名</p>
</td>
<td valign="top" width="184">
<p>myid的值</p>
</td>
</tr>
<tr>
<td valign="top" width="184">
<p>192.168.8.100</p>
</td>
<td valign="top" width="184">
<p>node01</p>
</td>
<td valign="top" width="184">
<p>1</p>
</td>
</tr>
<tr>
<td valign="top" width="184">
<p>192.168.8.110</p>
</td>
<td valign="top" width="184">
<p>node02</p>
</td>
<td valign="top" width="184">
<p>2</p>
</td>
</tr>
<tr>
<td valign="top" width="184">
<p>192.168.8.120</p>
</td>
<td valign="top" width="184">
<p>node03</p>
</td>
<td valign="top" width="184">
<p>3</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>3.&nbsp;zookeeper的数据模型：</p>
<p>zookeeper中每个节点称之为znode，每个znode既具有文件夹 的特性（下面可以有子节点），也有文件的特性（可以保存数据）。<br />注意：临时节点下不能有子节点。</p>
<p>原子性<br />数据大小远小于1M<br />只有绝对路径</p>
<p>&nbsp;</p>
<p>4.启动关闭ZooKeeper：</p>
<p>zkServer.sh [ start | stop | status ]</p>
<p>注意：zk只有一台执行zkServer.sh start时，永远无法正常运行zkCli.sh，因为一台服务器无法选举出leader。为此，我们需要了解Zookeeper的选举机制---zk的数据一致性核心算法：</p>
<p>A.全新的集群<br />1) 服务器1启动,此时只有它一台服务器启动了,它发出去的报没有任何响应,所以它的选举状态一直是LOOKING状态<br />2) 服务器2启动,它与最开始启动的服务器1进行通信,互相交换自己的选举结果,由于两者都没有历史数据,所以id值较大的服务器2胜出,但是由于没有达到超过半数以上的服务器都同意选举它(这个例子中的半数以上是3),所以服务器1,2还是继续保持LOOKING状态.<br />3) 服务器3启动,根据前面的理论分析,服务器3成为服务器1,2,3中的老大,而与上面不同的是,此时有三台服务器选举了它,所以它成为了这次选举的leader.<br />4) 服务器4启动,根据前面的分析,理论上服务器4应该是服务器1,2,3,4中最大的,但是由于前面已经有半数以上的服务器选举了服务器3,所以它只能接收当小弟的命了.<br />5) 服务器5启动,同4一样,当小弟.</p>
<p>B.非全新集群<br />初始化的时候，是按照上述的说明进行选举的，但是当zookeeper运行了一段时间之后，有机器down掉，重新选举时，选举过程就相对复杂了。<br />需要加入数据version、leader id和逻辑时钟。<br />数据version：数据新的version就大，数据每次更新都会更新version。<br />为了保证事务的顺序一致性，zookeeper采用了递增的事务id号（zxid）来标识事务。所有的提议（proposal）都在被提出的时候加上了zxid。实现中zxid是一个64位的数字，它高32位是epoch用来标识&nbsp;&nbsp;leader关系是否改变，每次一个leader被选出来，它都会有一个新的epoch，标识当前属于那个leader的统治时期。低32位用于递增计数。<br />Leader id：就是我们配置的myid中的值，每个机器一个。<br />逻辑时钟：这个值从0开始递增,每次选举对应一个值,也就是说:  如果在同一次选举中,那么这个值应该是一致的 ;  逻辑时钟值越大,说明这一次选举leader的进程更新.<br />选举的标准就变成：<br />1、逻辑时钟小的选举结果被忽略，重新投票<br />2、统一逻辑时钟后，数据id大的胜出<br />3、数据id相同的情况下，leader id大的胜出。</p>
<p>&nbsp;</p>
<p>5.zookeeper的shell操作</p>
<p>客户端连接：&nbsp;<span lang="EN-US">zkCli.sh [ -server ip ]&nbsp; &nbsp;<span style="color: #99cc00;">#如果省略后面的server参数，则默认连接本机的zkServer</span></span></p>
<p>&nbsp;</p>
<p><span lang="EN-US">6.shell操作：</span></p>
<p>ls / 读取节点；<br />zk中创建节点：<br />create /abc hello 创建一个永久节点；<br />create -s /test 123 创建顺序节点；<br />create -e /tempnode hello 创建临时节点，一旦客户端断开连接，临时节点消失，配合另外的watch机制来使用，非常有用；<br />set /abc world 更新节点的值；</p>
<p>delete /abc 删除节点；</p>
<p>rmr /test0000000001 递归删除节点；</p>
<p>create -s -e /tempnode hello 还可创建一个顺序的临时节点；</p>
<p>&nbsp;</p>
<p>7.zookeeper的watch机制：</p>
<p>三个过程：客户端向服务端注册 Watcher、服务端事件发生触发 Watcher、客户端回调 Watcher 得到触发事件情况</p>
<p>特点：一次性触发，事件封装，event 异步发送，先注册再触发。</p>
<p>&nbsp;</p>
<p>8. shell客户端设置watch机制</p>
<p>设置节点数据变动监听：</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190527233654602-1700387563.png" alt="" /></p>
<p>通过另一个客户端更改节点数据：</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190527233658933-695728196.png" alt="" /></p>
<p>此时设置监听的节点收到通知：</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190527233701684-572122675.png" alt="" /></p>
<p>&nbsp;</p>
<p>9.zookeeper的javaAPI.</p>
<p>&nbsp;</p>]]></description></item><item><title>大数据集群环境准备</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/27/10934017.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Mon, 27 May 2019 14:45:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/27/10934017.html</guid><description><![CDATA[<p>1.三台虚拟机关闭防火墙</p>
<p>2.三台机器关闭selinux</p>
<p>3.三台机器更改主机名</p>
<p>4.三台机器做主机名与IP地址的映射</p>
<p>5.三台机器重启</p>
<p>6.三台机器机器免密码登录</p>
<p>7.三台机器时钟同步</p>
<p>8.三台机器安装jdk</p>]]></description></item><item><title>Shell编程基础</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/26/10928400.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 26 May 2019 15:50:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/26/10928400.html</guid><description><![CDATA[<p>&nbsp;</p>
<p>1.<span lang="EN-US">cat&nbsp;<span lang="EN-US"><span lang="EN-US">/etc/shells <span style="color: #99cc00;">#查看系统中安装的<span lang="EN-US"> shell</span></span></span></span></span></p>
<p>&nbsp;</p>
<p>2.eg1.</p>
<p><span lang="EN-US">#!/bin/bash</span></p>
<p><span lang="EN-US">echo "Hello World !"</span></p>
<p>&nbsp;</p>
<p><span lang="EN-US">3.Shell 脚本的执行：</span></p>
<p align="left">chmod +x ./hello.sh&nbsp;&nbsp; #使脚本具有执行权限</p>
<p align="left"><span style="color: #ff0000;">./hello.sh</span>&nbsp;&nbsp;&nbsp; #执行脚本</p>
<p><span lang="EN-US"><span style="color: #ff0000;">/bin/sh</span> /root/hello.sh <span style="color: #99cc00;">#作为解释器参数运行，</span></span><span style="color: #99cc00;">不需要在第一行指定解释器信息（shell种类），写了也不生效</span></p>
<p><span style="color: #ff0000;">简写为</span>： <span style="color: #ff0000;">sh</span> /root/hello.sh</p>
<p>&nbsp;</p>
<p>4.shell变量定义和引用：</p>
<p><span lang="EN-US">your_name="itcast&nbsp; .&nbsp; cn" <span style="color: #99cc00;">#变量名和等号之间不能有空格</span></span></p>
<p><span style="color: #000000;" lang="EN-US">echo $your_name</span></p>
<p><span style="color: #000000;" lang="EN-US">echo ${your_name}</span></p>
<p>变量名的命名须遵循如下规则：<br />
l 首个字符必须为字母（ a-z，
A-Z）<br />
l 中间不能有空格，可以使用下划线（ _）<br />
l 不能使用标点符号<br />
l 不能使用 bash 里的关键字（可用
help 命令查看保留关键字）</p>
<p><span lang="EN-US">readonly variable_name&nbsp;只读</span></p>
<p><span lang="EN-US">unset variable_name&nbsp;删除</span></p>
<p>&nbsp;</p>
<p>5.变量类型：</p>
<p>局部变量、环境变量（set&nbsp;<span style="color: #99cc00;">#查看当前环境变量</span>）、shell变量（<span style="font-size: 12pt; line-height: 150%; font-family: 宋体;" lang="EN-US">shell </span><span style="font-size: 12pt; line-height: 150%; font-family: 宋体;">程序设置的特殊变量</span>）。</p>
<p>&nbsp;</p>
<p>6.参数传递：</p>
<p class="MsoNormal"><span style="line-height: 150%; font-family: 宋体;">在执行<span lang="EN-US"> Shell </span>脚本时， 可以向脚本传递参数。</span><span lang="EN-US"><br />
</span><span style="line-height: 150%; font-family: 宋体;">脚本内获取参数的格式为： </span><span style="mso-bidi-font-size: 12.0pt; line-height: 150%; font-family: 宋体; color: red;" lang="EN-US">$n</span><span style="line-height: 150%; font-family: 宋体;">。<span lang="EN-US"> n </span>代表一个数字，<span lang="EN-US"> 1 </span>为执行脚本的第一个参</span><span lang="EN-US"><br />
</span><span style="line-height: 150%; font-family: 宋体;">数，<span lang="EN-US"> 2 </span>为执行脚本的第二个参数，以此类推<span lang="EN-US">&hellip;&hellip;
</span></span><span style="mso-bidi-font-size: 12.0pt; line-height: 150%; font-family: 宋体; color: red;" lang="EN-US">$0 </span><span style="mso-bidi-font-size: 12.0pt; line-height: 150%; font-family: 宋体; color: red;">表示当前脚本名称</span><span style="line-height: 150%; font-family: 宋体;">。</span></p>
<p>eg.&nbsp;&nbsp;<span style="font-family: Calibri, sans-serif; font-size: 11pt;">./test.sh 1 2 3</span></p>
<p>注：特殊字符：</p>
<table class="MsoNormalTable" style="border-width: initial; border-style: none; border-color: initial; height: 252px; width: 562px;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td style="width: 120pt; border-width: 1pt; border-color: windowtext; padding: 0cm 5.4pt; text-align: left;" width="160">
<p class="MsoNormal" align="left"><span style="line-height: 150%; font-family: 宋体;" lang="EN-US">$# </span></p>






  </td>
<td style="width: 319.2pt; border-top-width: 1pt; border-right-width: 1pt; border-bottom-width: 1pt; border-top-color: windowtext; border-right-color: windowtext; border-bottom-color: windowtext; border-left: none; padding: 0cm 5.4pt; text-align: left;" width="426">
<p class="MsoNormal" align="left"><span style="line-height: 150%; font-family: 宋体;">传递到脚本的参数个数</span></p>






  </td>






 </tr>
<tr>
<td style="width: 120pt; border-right-width: 1pt; border-bottom-width: 1pt; border-left-width: 1pt; border-right-color: windowtext; border-bottom-color: windowtext; border-left-color: windowtext; border-top: none; padding: 0cm 5.4pt; text-align: left;" width="160">
<p class="MsoNormal" style="text-align: left;" align="left"><span style="line-height: 150%; font-family: 宋体;" lang="EN-US">$* </span></p>






  </td>
<td style="width: 319.2pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt; text-align: left;" width="426">
<p class="MsoNormal" align="left"><span style="line-height: 150%; font-family: 宋体;">以一个单字符串显示所有向脚本传递的参数。</span></p>






  </td>






 </tr>
<tr>
<td style="width: 120pt; border-right-width: 1pt; border-bottom-width: 1pt; border-left-width: 1pt; border-right-color: windowtext; border-bottom-color: windowtext; border-left-color: windowtext; border-top: none; padding: 0cm 5.4pt; text-align: left;" width="160">
<p class="MsoNormal" align="left"><span style="line-height: 150%; font-family: 宋体;" lang="EN-US">$$ </span></p>






  </td>
<td style="width: 319.2pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt; text-align: left;" width="426">
<p class="MsoNormal" align="left"><span style="line-height: 150%; font-family: 宋体;">脚本运行的当前进程<span lang="EN-US"> ID </span>号</span></p>






  </td>






 </tr>
<tr>
<td style="width: 120pt; border-right-width: 1pt; border-bottom-width: 1pt; border-left-width: 1pt; border-right-color: windowtext; border-bottom-color: windowtext; border-left-color: windowtext; border-top: none; padding: 0cm 5.4pt; text-align: left;" width="160">
<p class="MsoNormal" align="left"><span style="line-height: 150%; font-family: 宋体;" lang="EN-US">$! </span></p>






  </td>
<td style="width: 319.2pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt; text-align: left;" width="426">
<p class="MsoNormal" align="left"><span style="line-height: 150%; font-family: 宋体;">后台运行的最后一个进程的<span lang="EN-US"> ID </span>号</span></p>






  </td>






 </tr>
<tr>
<td style="width: 120pt; border-right-width: 1pt; border-bottom-width: 1pt; border-left-width: 1pt; border-right-color: windowtext; border-bottom-color: windowtext; border-left-color: windowtext; border-top: none; padding: 0cm 5.4pt; text-align: left;" width="160">
<p class="MsoNormal" align="left"><span style="line-height: 150%; font-family: 宋体;" lang="EN-US">$@ </span></p>






  </td>
<td style="width: 319.2pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt; text-align: left;" width="426">
<p class="MsoNormal" align="left"><span style="line-height: 150%; font-family: 宋体;">与<span lang="EN-US">$*</span>相同，但是使用时加引号，并在引号中返回每个参数。</span></p>






  </td>






 </tr>
<tr>
<td style="width: 120pt; border-right-width: 1pt; border-bottom-width: 1pt; border-left-width: 1pt; border-right-color: windowtext; border-bottom-color: windowtext; border-left-color: windowtext; border-top: none; padding: 0cm 5.4pt; text-align: left;" width="160">
<p class="MsoNormal" align="left"><span style="line-height: 150%; font-family: 宋体;" lang="EN-US">$? </span></p>






  </td>
<td style="width: 319.2pt; border-top: none; border-left: none; border-bottom-width: 1pt; border-bottom-color: windowtext; border-right-width: 1pt; border-right-color: windowtext; padding: 0cm 5.4pt; text-align: left;" width="426">
<p class="MsoNormal" align="left"><span style="line-height: 150%; font-family: 宋体;">显示最后命令的退出状态。<span lang="EN-US"> 0 </span>表示没有错误，其他任何值表明有错误。</span></p>






  </td>






 </tr>






</tbody>





</table>
<p>7.<span lang="EN-US">$*</span><span style="font-family: 宋体;">和</span><span lang="EN-US">$@</span><span style="font-family: 宋体;">区别</span></p>
<p>&nbsp;</p>
<p class="MsoNormal"><span style="line-height: 150%; font-family: 宋体;">相同点： 都表示传递给脚本的所有参数。</span><span lang="EN-US"><br />
</span><span style="line-height: 150%; font-family: 宋体;">不同点：</span><span lang="EN-US"><br />
</span><span style="line-height: 150%; font-family: 宋体;">不被<span lang="EN-US">" "</span>包含时，<span lang="EN-US"> $*</span>和<span lang="EN-US">$@</span>都以<span lang="EN-US">$1 $2&hellip; $n </span>的形式组成参数列表。</span><span lang="EN-US"><br />
</span><span style="line-height: 150%; font-family: 宋体;">被<span lang="EN-US">" "</span>包含时，<span lang="EN-US">
"$*" </span>会将所有的参数作为一个整体，以<span lang="EN-US">"$1 $2 &hellip; $n"</span></span><span style="line-height: 150%; font-family: 宋体;">的形式组成一个整串；<span lang="EN-US"> "$@" </span>会将各个参数分开，以<span lang="EN-US">"$1" "$2" &hellip; "$n" </span>的</span><span style="line-height: 150%; font-family: 宋体;">形式组成一个参数列表。</span></p>
<p>&nbsp;</p>
<p>8.<span lang="EN-US">Shell </span><span style="font-family: 黑体;">运算符</span></p>
<p>&nbsp;</p>
<p><span style="font-size: 12.0pt; line-height: 150%; font-family: 宋体; mso-bidi-font-family: 'Times New Roman'; mso-bidi-theme-font: minor-bidi; color: #333333; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;">支持包括：算术、关系、 布尔、字符串等运</span><span style="font-size: 12.0pt; line-height: 150%; font-family: 宋体; mso-bidi-font-family: 'Times New Roman'; mso-bidi-theme-font: minor-bidi; color: #333333; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;">算符。 原生<span lang="EN-US"> bash </span>不支持简单的数学运算，但是可以通过其他命令来实现。</span></p>
<p>&nbsp;</p>
<p class="code"><span lang="EN-US">eg.&nbsp; &nbsp;echo `expr $a <span style="background: yellow; mso-highlight: yellow;">+</span> $b`&nbsp;&nbsp;</span></p>
<p class="code">echo `expr $b <span style="background: yellow;">-</span> $a`&nbsp; </p>
<p class="code">echo `expr $a <span style="background: yellow;">\*</span> $b`&nbsp; </p>
<p class="code">echo `expr $b <span style="color: red; background: yellow;">/</span> $a`</p>
<p class="MsoNormal"><span style="mso-bidi-font-size: 12.0pt; line-height: 150%; font-family: 宋体; color: #333333;">此外，还可以通过<span lang="EN-US">(())</span>、<span lang="EN-US"> $[]</span>进行算术运算。</span></p>
<p class="MsoNormal"><span style="mso-bidi-font-size: 12.0pt; line-height: 150%; font-family: 宋体; color: #333333;" lang="EN-US">count=1</span></p>
<p class="MsoNormal"><span style="mso-bidi-font-size: 12.0pt; line-height: 150%; font-family: 宋体; color: #333333;" lang="EN-US">((count++))</span></p>
<p class="MsoNormal"><span style="mso-bidi-font-size: 12.0pt; line-height: 150%; font-family: 宋体; color: #333333;" lang="EN-US">echo $count</span></p>
<p class="MsoNormal"><span style="mso-bidi-font-size: 12.0pt; line-height: 150%; font-family: 宋体; color: #333333;" lang="EN-US">a=$((1+2))</span></p>
<p class="MsoNormal"><span style="mso-bidi-font-size: 12.0pt; line-height: 150%; font-family: 宋体; color: #333333;" lang="EN-US">a=$[1+2]</span></p>
<p>&nbsp;</p>
<p>9.流程控制：</p>
<p>&nbsp;（1）if判断：-eq, -nq, -gt, -lt, -ge, -le</p>
<p>（2）for循环：注：for(())后面的分号，可省略。</p>
<p>（3）while循环：</p>
<p>（4）case分支：</p>
<p>（5）函数：</p>
<p>　　所有函数在使用前必须定义，这意味着必须将函数放在脚本开始部分。</p>
<p>　　可以带 function fun()定义，也可以直接 fun() 定义,不带任何参数。</p>
<p><em id="__mceDel">　　</em>参数返回，可以显示加
return ，如果不加，将以最后一条命令运行结<br />
果，作为返回值。 return 后跟数值 n(0-255)。</p>
<p><em>　　</em>当 n&gt;=10 时，需要使用${n}来获取参数。</p>
<p>&nbsp;</p>
<p>示例见以下2张图：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190527222121953-1870246020.png" alt="" width="532" height="710" />-----<img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190527222715205-1033729331.jpg" alt="" width="530" height="708" /></p>
<p>&nbsp;</p>]]></description></item><item><title>linux常见命令</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/26/10928257.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 26 May 2019 15:09:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/26/10928257.html</guid><description><![CDATA[<p>1，linux查看系统版本（2种方法）：</p>
<p>（1）weblogic@tynr1618-sit:/tmp/test&gt; cat /etc/issue</p>
<p>Welcome to SUSE Linux Enterprise Server 11 SP3 (x86_64) - Kernel \r (\l).</p>
<p>（2）weblogic@tynr1618-sit:/tmp/test&gt; lsb_release -a&nbsp; （-a可加可不加）</p>
<p>&nbsp;</p>
<p>2，查看Linux内核版本命令（两种方法）：</p>
<p>（1）cat /proc/version</p>
<p>　　[root@S-<a title="CentOS" href="http://www.linuxidc.com/topicnews.aspx?tid=14" target="_blank">CentOS</a>&nbsp;home]# cat /proc/version<br />　　Linux version 2.6.32-431.el6.x86_64 (mockbuild@c6b8.bsys.dev.centos.org) (gcc version 4.4.7 20120313 (<a title="Red Hat" href="http://www.linuxidc.com/topicnews.aspx?tid=10" target="_blank">Red Hat</a>&nbsp;4.4.7-4) (GCC) ) #1 SMP Fri Nov 22 03:15:09 UTC 2013</p>
<p>weblogic@tynr1618-sit:/tmp/test&gt; cat /proc/version<br />Linux version 3.0.76-0.11-default (geeko@buildhost) (gcc version 4.3.4 [gcc-4_3-branch revision 152973] (SUSE Linux) ) #1 SMP Fri Jun 14 08:21:43 UTC 2013 (ccab990)</p>
<p>（2）uname -a</p>
<p>　　[root@S-CentOS home]# uname -a</p>
<p>　　Linux S-CentOS 2.6.32-431.el6.x86_64 #1 SMP Fri Nov 22 03:15:09 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux</p>
<p>weblogic@tynr1618-sit:/tmp/test&gt; uname -a<br />Linux tynr1618-sit 3.0.76-0.11-default #1 SMP Fri Jun 14 08:21:43 UTC 2013 (ccab990) x86_64 x86_64 x86_64 GNU/Linux</p>
<p>&nbsp;</p>
<p>3，linux查看当前登录用户名：</p>
<p>who&nbsp; &nbsp;查看当前登录的所有用户；</p>
<p>who am i&nbsp; &nbsp;查看当前登录用户，只显示自己的用户名，su命令&nbsp;切换用户后，该命令的结果不变；</p>
<p>whoami&nbsp; 查看当前登录用户，只显示自己的用户名，su命令 切换用户后，该命令的结果也跟着变化；</p>
<p>last 所有用户的所有的登录日志；</p>
<p>lastlog&nbsp; 系统所有用户的最近登录的时间；</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>====================================================</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190526230708741-2123749518.png" alt="" />&nbsp;</p>
<p>pwd ll</p>
<p>1.文件操作：</p>
<p>创建文件：</p>
<p>touch itcast</p>
<p>vi vim itcast2 --&gt;&nbsp;i a o 进入编辑模式</p>
<p>echo &lsquo;sldkjf&rsquo; &gt; itcast3</p>
<p>保存文本文件： :wq&nbsp; :q&nbsp; :q!</p>
<p>在打开的文本文件内查找文本： /HADOOP&nbsp; 查找下一个 按n / N</p>
<p>&nbsp;</p>
<p>2.目录操作：</p>
<p>创建目录： mkdir itcast4</p>
<p>删除目录：rm itcast4&nbsp;&nbsp; 如果其下有多个子目录的情况： rm &ndash;rf itcast4</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rmdir itcast5 从一个目录中删除一个或多个子目录项。</p>
<p>修改目录名称：mv itcast4 itcast444</p>
<p>&nbsp;</p>
<p>3.查看文件内容：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190526230722310-960552579.png" alt="" /></p>
<p>cat filename</p>
<p>head -n 2 itcast6 用于查看大文件，查看该文件的头2行</p>
<p>tail -100f itcast6 用于查看大文件，监视该文件的末尾100行（不写数字的话，默认10行），不断刷新。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>4.文件搜索：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190526230739405-345299240.png" alt="" /></p>
<p>find . -type f -name 'itcast*' -size +100M&nbsp; 查找itcast开头的文件</p>
<p>find . -type d -name 'itcast*' -exec rm -rf {} \; 查找并删除itcast开头的目录</p>
<p>find /home -user root -type f -ls&nbsp; 查找所有者为hadoop，且类型为文件的文件，并列举出来。</p>
<p>find / -perm 777 -type l -ls&nbsp; 查找权限为777，且类型为链接的文件，并列举出来。</p>
<p>注意：find命令不能搜索文件内部的文本！</p>
<p>&nbsp;</p>
<p>5.文本处理：</p>
<p><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190526230752785-115907497.png" alt="" /></p>
<p>grep root /etc/passwd &gt; itcast7.txt 搜索所有包含root文本的行，并放到itcast7.txt文件中（如不存在则创建）。</p>
<p>grep ^mail /etc/passwd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; grep支持正则表达式，查找passwd文件中，以mail开头的行</p>
<p>grep -n haha test*&nbsp; &nbsp; #搜索搜索以test开头的文件的内容中，包含字符串haha的行，并加上行号打印出来</p>
<p>&nbsp;</p>
<p>find . -type d | grep vmware-tools-distrib/lib/ic 查询find结果中所有包含vmware-tools-distrib/lib/ic字符串的结果行。</p>
<p>find . -type f | xargs grep mail&nbsp;&nbsp; 查找当前目录下的所有文件中，包含文本mail的文件。</p>
<p>ps -ef | grep sshd 查找指定 ssh 服务进程<br />
ps -ef | grep sshd | grep -v grep 查找指定服务进程，排除 gerp 本身<br />
ps -ef | grep sshd &ndash;c 查找指定进程个数<br />
cat a.txt | grep -f b.txt 从文件中读取关键词进行搜索<br />
输出 a.txt 文件中含有从 b.txt 文件中读取出的关键词的内容行<br />
cat a.txt | grep &ndash;nf b.txt 从文件中读取关键词进行搜索,显示行号<br />
grep -n 'hello' a.txt &nbsp;从文件中查找关键词，并显示行号<br />
cat test.txt |grep ^u 找出以 u 开头的行内容<br />
cat test.txt |grep ^[^u] 输出非 u 开头的行内容<br />
cat test.txt |grep hat$ 输出以 hat 结尾的行内容<br />
cat test.txt |grep -E "ed|at" 显示包含 ed 或者 at 字符的内容行</p>
<p><span style="color: #ff0000;">练习：通过xargs杀死某一批进程： 方法一、传统方法kill -9 pid ？</span></p>
<p>以下内容了解即可，不常用到：</p>
<p>　　locate：很快速的搜寻档案系统内是否某些字符串开头的文件。 </p>
<p>　　updatedb </p>
<p>　　locate /etc/sh </p>
<p>　　locate pwd </p>
<p>　　whereis 查找可执行文件、源代码文件（即命令）。 </p>
<p>　　which：查找系统环境变量中的可执行命令。（范围比whereis狭窄，只在path环境变量中查找）</p>
<p>&nbsp;</p>
<p>6.文本传输</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190526230816599-54573002.png" alt="" /></p>
<p>scp -r
node01:/export/servers/cmds &nbsp;&nbsp;&nbsp;&nbsp;将node01服务器上的cmds文件夹，递归拷贝到本地的当前目录。</p>
<p>&nbsp;</p>
<p>7.备份压缩</p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190526230834884-730376967.png" alt="" /></p>
<p># 压缩文件<br />tar -zcvf 打包压缩文件名.tar.gz 被压缩的文件/目录</p>
<p># 解压缩文件(记忆敲门: 至孝潍坊)<br />tar -zxvf 打包文件.tar.gz</p>
<p># 解压缩到指定路径<br />tar -zxvf 打包文件.tar.gz -C 目录路径</p>
<p>&nbsp;</p>
<table class="md-table" style="height: 89px; width: 503px;">
<thead>
<tr class="md-end-block"><th><span class="td-span">命令</span></th><th><span class="td-span">英文</span></th><th><span class="td-span">含义</span></th></tr>




</thead>
<tbody>
<tr class="md-end-block">
<td><span class="td-span">-z</span></td>
<td><span class="td-span">gzip</span></td>
<td><span class="td-span">使用gzip压缩和解压缩</span></td>




</tr>
<tr class="md-end-block md-focus-container">
<td><span class="td-span">-j</span></td>
<td><span class="td-span">bzip2</span></td>
<td><span class="td-span md-focus">使用bzip2压缩和解压缩<br /><br /></span></td>





</tr>





</tbody>




</table>
<table class="md-table" style="height: 85px; width: 513px;">
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">-c</span></span></td>
<td><span class="td-span"><span class="md-plain">create</span></span></td>
<td><span class="td-span"><span class="md-plain">生成档案文件, 创建打包文件</span></span></td>




</tr>
<tr class="md-end-block">
<td style="width: 15px;"><span class="td-span"><span class="md-plain">-v</span></span></td>
<td style="width: 110px;"><span class="td-span"><span class="md-plain">verbosely(啰嗦的)</span></span></td>
<td><span class="td-span"><span class="md-plain">像 唐僧 一样报告进度</span></span></td>




</tr>
<tr class="md-end-block md-focus-container">
<td style="width: 30px;"><span class="td-span"><span class="md-plain">-f</span></span></td>
<td><span class="td-span"><span class="md-plain">file</span></span></td>
<td><span class="td-span md-focus"><span class="md-plain">指定档案的文件名称, f后面一定是 <span><code>.tar</code><span class="md-plain md-expand"> 文件, 所以必须放到左后</span></span></span></span></td>




</tr>




</tbody>




</table>
<table class="md-table">
<tbody>
<tr class="md-end-block">
<td><span class="td-span"><span class="md-plain">-x</span></span></td>
<td><span class="td-span"><span class="md-plain">extract (提取)</span></span></td>
<td><span class="td-span"><span class="md-plain">解包</span></span></td>




</tr>
<tr class="md-end-block md-focus-container">
<td><span class="td-span"><span class="md-plain">-C (大写C)</span></span></td>
<td><span class="td-span"><span class="md-plain">directory (目录)</span></span></td>
<td><span class="td-span md-focus"><span class="md-plain">默认保存到当前目录, 通过<span><code>-C</code><span class="md-plain md-expand"> 更改解压目录, 注意: 解压目录必须存在</span></span></span></span></td>




</tr>




</tbody>




</table>
<p>eg.&nbsp;</p>
<p>tar -zxvf test.tar.gz -C tes2/&nbsp;&nbsp;&nbsp; 解压缩到指定目录</p>
<p>将/home/data 这个目录下的所有文件打包压缩为当前目录下的data.zip&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; zip -q -r data.zip /home/data</p>
<p>将压缩文件text.zip在指定目录/tmp下解压缩&nbsp;&nbsp;&nbsp; unzip test.zip -d /tmp&nbsp;</p>
<p>&nbsp;</p>
<p>8.su与sudo：</p>
<p>su user1 切换成账户user1，需要输入密码（除了root切换到普通或虚拟用户不需要）。且，切换成功后，切换前的用户依然保持登录状态。</p>
<p>sudo vim /etc/profile　　使普通用户临时具有root账户的权限。只需输入自己账户的密码即可。前提：该用户必<span lang="EN-US">须在<span lang="EN-US">/etc/sudoers 文件中有配置项。</span></span></p>
<p><span lang="EN-US"><span lang="EN-US">命令visudo：&nbsp;&nbsp;</span></span>hadoop&nbsp; ALL=(ALL)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ALL</p>
<p>eg.&nbsp;&nbsp;<span lang="EN-US">hadoop node-23=(allen) /bin/kill&nbsp;&nbsp;让<span lang="EN-US"> hadoop 用户在<span lang="EN-US"> node-23 主机上以<span lang="EN-US"> allen 的身份执行<span lang="EN-US"> kill 命令.</span></span></span></span></span></p>
<p>&nbsp;</p>
<p><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US">9.权限管理：</span></span></span></span></span></p>
<p><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US">chown -R hadoop:hadoop abc.txt</span></span></span></span></span></p>
<p><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US">chmod 777 abc.txt</span></span></span></span></span></p>
<p><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US">chmod -R 777 /user/test/</span></span></span></span></span></p>
<p>&nbsp;</p>
<p><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US">10.系统服务管理：</span></span></span></span></span></p>
<p>service [ iptables |&nbsp;<span lang="EN-US">sshd ... ]</span>&nbsp;[ start | stop&nbsp;| restart&nbsp;| status ]&nbsp;</p>
<p><span lang="EN-US">service --status-all&nbsp;&nbsp;<span style="color: #008000;" lang="EN-US">#查看指定的后台服务进程的状态</span></span></p>
<p><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US">chkconfig iptables [ on | off ]&nbsp;</span></span></span></span></span></span></p>
<p>&nbsp;</p>
<p><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US">11.定时任务：</span></span></span></span></span></p>
<p><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US">yum install crontabs</span></span></span></span></span></span></p>
<p><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US">crontab [ -u hadoop ] -e -l -r</span></span></span></span></span></p>
<p><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US">service crond reload&nbsp;<span style="color: #008000;" lang="EN-US"># 重新载入配置</span></span></span></span></span></span></span></p>
<p><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US"><span lang="EN-US">chkconfig crond --list <span style="color: #008000;">## 查看<span lang="EN-US"> crontab 服务是否已设置为开机启动</span></span></span></span></span></span></span></span></span></span></p>
<p>eg.&nbsp;配置虚拟机时钟同步</p>
<p class="code">*/1 * * * * /usr/sbin/ntpdate ntp4.aliyun.com&nbsp;</p>
<p>分(<span lang="EN-US">1～<span lang="EN-US">59</span></span>) 时(<span lang="EN-US">0～<span lang="EN-US">23</span></span>) 日(<span lang="EN-US">1～<span lang="EN-US">31</span></span>) 月(<span lang="EN-US">1～<span lang="EN-US">12</span></span>) 周(<span lang="EN-US">0～<span lang="EN-US">6,&nbsp;<span lang="EN-US">0表示星期天</span></span></span>) 命令</p>
<p>&nbsp;</p>
<p>12.lrzsz</p>
<p>yum -y install lrzsz 安装linux上传下载文件的软件。</p>
<p>当通过ssh远程登录到系统时，可以直接从windows系统拖动文件到linux系统的远程登录界面上。也可通过输入命令rz（上传文件到linux），sz（从linux下载文件）。</p>
<p>&nbsp;</p>
<p>13.用户管理：</p>
<p>添加用户：useradd hadoop</p>
<p>设置密码：passwd hadoop</p>
<p>普通用户创建后，都会在/home/下创建一个文件夹，root特殊，其家目录有一个自己独立的目录/root/</p>
<p>&nbsp;</p>
<p>14. cd - ：cd 减号，切换到上一个所在目录中</p>
<p>&nbsp;</p>
<p>15.tree 目录：以树状图 列出目录中的内容。</p>
<p>　　tree -L num 目录：显示几层目录</p>
<p>　　yum -y install tree&nbsp; &nbsp;#安装 tree组件</p>
<p>　　yum -y remove tree&nbsp; &nbsp;#卸载 tree组件</p>
<p>&nbsp;</p>
<p>16. &amp;&amp; 和 ||&nbsp;</p>
<p>命令1 &amp;&amp; 命令2&nbsp; &nbsp; ：&nbsp;<span class="md-plain md-expand">如果&nbsp;<code>命令1</code><span class="md-plain">执行成功了, 才执行&nbsp;<code>命令2；</code></span></span></p>
<p><span class="md-plain md-expand"><span class="md-plain"><span class="md-plain md-expand">命令1&nbsp;||<span class="md-plain">&nbsp;命令2&nbsp; &nbsp;：&nbsp;<span class="md-plain md-expand">如果&nbsp;<code>命令1</code><span class="md-plain">&nbsp;执行失败了, 才执行&nbsp;<code>命令2</code></span></span></span></span></span></span></p>
<p>&nbsp;</p>
<p>17.创建软链接（快捷方式）：<span class="md-plain md-expand">ln <span><strong><span class="md-plain">-s</span></strong><span class="md-plain"> 目标文件绝对路径 快捷方式路径</span></span></span></p>
<p><span class="md-plain md-expand"><span><span class="md-plain">ln -s /export/a/b/c/d/e/f/g sec_abcde&nbsp; #创建软链接</span></span></span></p>
<p>cd /export/a/b/c/d/e/f/g&nbsp; #进入某个目录下</p>
<p>cd sec_abcde/&nbsp; #和上一个命令 进入同一个目录下， ll命令显示的内容和上一个命令相同。</p>
<p>&nbsp;</p>
<p>18.</p>
<p>&nbsp;</p>]]></description></item><item><title>linux系统 for 大数据</title><link>http://www.cnblogs.com/mediocreWorld/archive/2019/05/26/10928119.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Sun, 26 May 2019 14:40:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2019/05/26/10928119.html</guid><description><![CDATA[<p>使用大数据前，需要选择linux系统，本人选择的是centos6.9系统，并且装在虚拟机上，并且要注意：</p>
<p>1.网络类型选择NAT。</p>
<p>2.语言设置为English(English).</p>
<p>3.操作系统的键盘统一选择 U.S. English.</p>
<p>4.为了防止MAC冲突，每一台虚拟机都要修改MAC地址：右击被选中的虚拟机，点击&ldquo;设置&rdquo;按钮，在弹出的窗口中选择&rdquo;网络适配器&ldquo;，在右侧点击&rdquo;高级&ldquo;按钮，弹出一个窗口，在里面点击&rdquo;生成&ldquo;按钮，（其会随机生成mac地址，可以多点击几次），最后一路点击&rdquo;确定&ldquo;按钮。</p>
<p>5.启动、进入系统后，需要修改的项目：</p>
<p>（1）修改mac的配置文件：<span lang="EN-US">vim /etc/udev/rules.d/70-persistent-net.rules</span></p>
<p><span lang="EN-US"><img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190526223144999-159342263.png" alt="" /></span></p>
<p>（2）修改网络配置：<span style="font-family: Calibri, sans-serif; font-size: 12pt;">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span></p>
<p>&nbsp;<img src="https://img2018.cnblogs.com/blog/1325651/201905/1325651-20190526223219826-51517401.png" alt="" /></p>
<p>（3）修改主机名：vim /ect/sysconfig/network</p>
<p>NETWORKING=yes<br />HOSTNAME=node01.hadoop.com</p>
<p>（4）设置域名映射：</p>
<p>vim /etc/hosts</p>
<p>192.168.8.100 node01.hadoop.com node01</p>
<p>192.168.8.110 node02.hadoop.com node02</p>
<p>192.168.8.120 node03.hadoop.com node03</p>
<p>&nbsp;</p>]]></description></item>

<item><title>拷贝本地文件到远程服务器的批处理脚本</title><link>http://www.cnblogs.com/mediocreWorld/archive/2018/12/05/10068524.html</link><creator>mediocrePeople</creator><author>mediocrePeople</author><pubDate>Tue, 04 Dec 2018 16:32:00 GMT</pubDate><guid>http://www.cnblogs.com/mediocreWorld/archive/2018/12/05/10068524.html</guid><description><![CDATA[<p>测试过没问题，只要按照如下形式写就行，&nbsp;如有必要，再设置一个定时计划任务即可：</p>
<p>&nbsp;</p>
<p>@echo off</p>
<p>@echo 数据库每日备份到远程服务器任务开始......</p>
<p>net use Z: /del</p>
<p>net use Z: \\30.114.67.73\SharedFolder "2" /user:"user"</p>
<p>xcopy D:\dir1\* Z:\test /d/e/j/f/v/k/h/y/z</p>
<p>net use Z: /del</p>
<p>@echo 数据库每日备份到远程服务器任务结束......</p>
<p>&nbsp;</p>]]></description></item></channel>
